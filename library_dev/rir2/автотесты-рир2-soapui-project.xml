<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="c6807a49-5f0b-464a-a5a1-58895ca4b006" activeEnvironment="Default" name="автотесты рир2" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="af42ada6-0cf9-4499-a785-053dca543c6e" wsaVersion="NONE" name="arScheduleServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/supp/rir2/arScheduleService/v1/}arScheduleServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?wsdl"><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="arScheduleService" targetNamespace="http://emias.mos.ru/supp/rir2/arScheduleService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:tns="http://emias.mos.ru/supp/rir2/arScheduleService/v1/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:ns1="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:documentation>Версия 1.1.0</wsdl:documentation>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../system/v1/emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=supp.rir2.arScheduleService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="copyArScheduleInput">
    <wsdl:part element="ns1:copyArScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getArScheduleRuleTypeListOutput">
    <wsdl:part element="ns1:getArScheduleRuleTypeListResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getArScheduleListInput">
    <wsdl:part element="ns1:getArScheduleListRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="applyChangesToArScheduleOutput">
    <wsdl:part element="ns1:applyChangesToArScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="clearArScheduleInput">
    <wsdl:part element="ns1:clearArScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createArScheduleRuleOutput">
    <wsdl:part element="ns1:createArScheduleRuleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateArScheduleRuleInput">
    <wsdl:part element="ns1:updateArScheduleRuleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getArScheduleRuleTypeListInput">
    <wsdl:part element="ns1:getArScheduleRuleTypeListRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="applyChangesToArScheduleInput">
    <wsdl:part element="ns1:applyChangesToArScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createArScheduleRuleInput">
    <wsdl:part element="ns1:createArScheduleRuleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getArScheduleListOutput">
    <wsdl:part element="ns1:getArScheduleListResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteArScheduleRuleInput">
    <wsdl:part element="ns1:deleteArScheduleRuleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateArScheduleRuleOutput">
    <wsdl:part element="ns1:updateArScheduleRuleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getArScheduleOutput">
    <wsdl:part element="ns1:getArScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="copyArScheduleOutput">
    <wsdl:part element="ns1:copyArScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteArScheduleRuleOutput">
    <wsdl:part element="ns1:deleteArScheduleRuleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getArScheduleInput">
    <wsdl:part element="ns1:getArScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="clearArScheduleOutput">
    <wsdl:part element="ns1:clearArScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="arScheduleServicePortType">
    <wsdl:operation name="getArScheduleRuleTypeList">
      <wsdl:input message="tns:getArScheduleRuleTypeListInput"></wsdl:input>
      <wsdl:output message="tns:getArScheduleRuleTypeListOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createArScheduleRule">
      <wsdl:input message="tns:createArScheduleRuleInput"></wsdl:input>
      <wsdl:output message="tns:createArScheduleRuleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateArScheduleRule">
      <wsdl:input message="tns:updateArScheduleRuleInput"></wsdl:input>
      <wsdl:output message="tns:updateArScheduleRuleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteArScheduleRule">
      <wsdl:input message="tns:deleteArScheduleRuleInput"></wsdl:input>
      <wsdl:output message="tns:deleteArScheduleRuleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getArSchedule">
      <wsdl:input message="tns:getArScheduleInput"></wsdl:input>
      <wsdl:output message="tns:getArScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getArScheduleList">
      <wsdl:input message="tns:getArScheduleListInput"></wsdl:input>
      <wsdl:output message="tns:getArScheduleListOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="copyArSchedule">
      <wsdl:input message="tns:copyArScheduleInput"></wsdl:input>
      <wsdl:output message="tns:copyArScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="clearArSchedule">
      <wsdl:input message="tns:clearArScheduleInput"></wsdl:input>
      <wsdl:output message="tns:clearArScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="applyChangesToArSchedule">
      <wsdl:input message="tns:applyChangesToArScheduleInput"></wsdl:input>
      <wsdl:output message="tns:applyChangesToArScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="arScheduleServiceBinding" type="tns:arScheduleServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getArScheduleRuleTypeList">
      <soap:operation soapAction="getArScheduleRuleTypeList"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createArScheduleRule">
      <soap:operation soapAction="createArScheduleRule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateArScheduleRule">
      <soap:operation soapAction="updateArScheduleRule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteArScheduleRule">
      <soap:operation soapAction="deleteArScheduleRule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getArSchedule">
      <soap:operation soapAction="getArSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getArScheduleList">
      <soap:operation soapAction="getArScheduleList"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="copyArSchedule">
      <soap:operation soapAction="copyArSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="clearArSchedule">
      <soap:operation soapAction="clearArSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="applyChangesToArSchedule">
      <soap:operation soapAction="applyChangesToArSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="arScheduleService">
    <wsdl:port binding="tns:arScheduleServiceBinding" name="arScheduleServicePort">
      <soap:address location="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../system/v1/emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../core/v1/emias.core.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../core/v1/emias.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../system/v1/emias.system.v1.xsd"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
						(используются в соответствии с
						переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../system/v1/emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../system/v1/emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../system/v1/emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=supp.rir2.arScheduleService.v1.types.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" version="Версия 1.1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=supp.rir2.core.v1.xsd"/>
  <xs:element name="arScheduleId" type="ArScheduleId">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания ДР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ArScheduleId">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="core:ID"/>
  </xs:simpleType>
  <xs:complexType name="ArSchedule">
    <xs:annotation>
      <xs:documentation>Расписание ДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="schedule" type="core:Schedule">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ которому принадлежит Расписание ДР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ar" type="core:AvailableResource">
            <xs:annotation>
              <xs:documentation>Доступный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="rules" type="arScheduleRuleCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Правил расписания ДР</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="arScheduleRuleCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" ref="arScheduleRule"/>
    </xs:sequence>
  </xs:complexType>
  <!--schedule rule definition-->
  <xs:element name="arScheduleRule">
    <xs:annotation>
      <xs:documentation>Правило расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:restriction base="ArScheduleRule">
          <xs:sequence>
            <xs:element ref="arScheduleId"/>
            <xs:element name="info" type="ArScheduleRuleInfo">
              <xs:annotation>
                <xs:documentation>Сведения о Правиле расписания ДР</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="id" type="core:ID" use="required">
            <xs:annotation>
              <xs:documentation>Идентификатор сущности</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="version" type="xs:long" use="required">
            <xs:annotation>
              <xs:documentation>Версия сущности</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:restriction>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="ArScheduleRule">
    <xs:annotation>
      <xs:documentation>Правило расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="arScheduleId"/>
          <xs:element minOccurs="0" name="info" type="ArScheduleRuleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Правиле расписания ДР</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ArScheduleRuleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Правиле расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="typeId" type="core:RuleTypeId">
        <xs:annotation>
          <xs:documentation>Тип Правила расписания ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="locationId" type="core:LocationId">
        <xs:annotation>
          <xs:documentation>Локация, на которую распространяется Правило расписания ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="comment" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="datePeriod" type="core:RuleDatePeriod">
        <xs:annotation>
          <xs:documentation>Период действия Правила расписания ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateTemplate" type="core:DatesTemplate">
        <xs:annotation>
          <xs:documentation>Шаблон выбора дней</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="excludedDates" type="core:ExcludedDates">
        <xs:annotation>
          <xs:documentation>Исключенные дни</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="timeIntervals">
        <xs:annotation>
          <xs:documentation>Коллекция временных интервалов Правила расписания ДР</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="timeInterval" type="core:RuleTimeInterval">
              <xs:annotation>
                <xs:documentation>Временной интервал Правила расписания ДР</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="ageGroups" type="core:AgeGroupsIdCollection">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов возрастных групп, на которые распространяются Правила
                        расписания СДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="treatments" type="core:TreatmentsIdCollection">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов Медицинских манипуляций, включенных в Правило расписания
                        ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--schedule rules' types definition-->
  <xs:complexType name="ArScheduleRuleType">
    <xs:annotation>
      <xs:documentation>Сущность "Тип правила расписания ДР"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>Описание</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="kind" type="core:ArScheduleRuleTypeKinds">
            <xs:annotation>
              <xs:documentation>Вид Типа правила расписания ДР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="priority" type="ArScheduleRuleTypePriority">
            <xs:annotation>
              <xs:documentation>Приоритет</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="allowedIntersection">
            <xs:annotation>
              <xs:documentation>Коллекция идентификаторов Типов правил ДР с которыми разрешены
                                пересечения временных интервалов</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="typeId" type="core:RuleTypeId">
                  <xs:annotation>
                    <xs:documentation>Идентификатор Типа правила ДР</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--TODO общий тип?-->
  <xs:simpleType name="ArScheduleRuleTypePriority">
    <xs:annotation>
      <xs:documentation>Приоритет Типа правила расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="99"/>
    </xs:restriction>
  </xs:simpleType>
  <!--lists of entities-->
  <xs:complexType name="ArScheduleListItem">
    <xs:annotation>
      <xs:documentation>Элемент результата отбора сведений о Расписаниях ДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание ДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="core:schedulePeriod"/>
                <xs:element ref="core:scheduleActiveState"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ArScheduleListResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о Расписаниях ДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="arScheduleListItem" type="core:CompositeResourceScheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписаниии ДР</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="arId" type="core:ID" use="required">
          <xs:annotation>
            <xs:documentation>Идентификатор Доступного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ArScheduleRuleTypeListResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о Типах правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="arScheduleRuleType" type="ArScheduleRuleType">
            <xs:annotation>
              <xs:documentation>Тип правила расписания ДР</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--result definition for the schedules' copy operation-->
  <xs:complexType name="ArScheduleCopyResult">
    <xs:annotation>
      <xs:documentation>Результат выполнения операции копирования Расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ProcessingResultBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="errors">
            <xs:annotation>
              <xs:documentation>Коллекция ошибок копирования Правил расписания ДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="error" type="ArScheduleCopyResultError">
                  <xs:annotation>
                    <xs:documentation>Сведения об ошибке копирования Правила расписания ДР</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="result" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Результат выполнения операции копирования</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ArScheduleCopyResultError">
    <xs:annotation>
      <xs:documentation>Сведения об ошибке копирования Правила расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ruleId" type="core:ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Правила расписания ДР, к которому относятся сообщения об ошибках</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorMessages" type="core:ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--requests & responses (methods to manage ar shedules)-->
  <xs:element name="getArScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getArSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="arScheduleId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getArScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getArSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="arSchedule" type="ArSchedule"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getArScheduleListRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getArScheduleList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="arId" type="core:ID">
          <xs:annotation>
            <xs:documentation>Идентификатор Доступного ресурса</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="core:schedulePeriod"/>
        <xs:element maxOccurs="4" minOccurs="0" ref="core:resourceScheduleStatus"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getArScheduleListResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getArScheduleList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="ArScheduleListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="copyArScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода copyArSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="arScheduleIdFrom" type="ArScheduleId">
          <xs:annotation>
            <xs:documentation>Идентификатор Расписания ДР из которого копируются правила</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="arScheduleIdTo" type="ArScheduleId">
          <xs:annotation>
            <xs:documentation>Идентификатор Расписания ДР в который копируются правила</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" name="arScheduleRuleTypeKinds">
          <xs:annotation>
            <xs:documentation>Перечень видов Типов правил расписания ДР, подлежащих копированию</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="4" name="arScheduleRuleTypeKind" type="core:CopyArScheduleRuleTypeKinds">
                <xs:annotation>
                  <xs:documentation>Вид Типов правил расписания ДР</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="copyArScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода copyArSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="ArScheduleCopyResult">
          <xs:annotation>
            <xs:documentation>Результат выполнения операции копирования Расписания ДР</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="clearArScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода clearArSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="arScheduleId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="clearArScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода clearArSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="applyChangesToArScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода applyChangesToArSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="arScheduleId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="applyChangesToArScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода applyChangesToArSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to manage shedules' rules)-->
  <xs:element name="createArScheduleRuleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода createArScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="arScheduleId"/>
        <xs:element name="info" type="ArScheduleRuleInfo">
          <xs:annotation>
            <xs:documentation>Сведения о Правиле расписания</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createArScheduleRuleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода createArScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="arScheduleRule"/>
        <xs:element minOccurs="0" ref="core:warnings"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updateArScheduleRuleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода updateArScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="id" type="core:ID"/>
        <xs:element name="arScheduleRuleInfo" type="ArScheduleRuleInfo">
          <xs:annotation>
            <xs:documentation>Сведения о Правиле расписания</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="version" type="xs:long"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updateArScheduleRuleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода updateArScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="arScheduleRule"/>
        <xs:element minOccurs="0" ref="core:warnings"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteArScheduleRuleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода deleteArScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="arScheduleRule">
          <xs:annotation>
            <xs:documentation>Правило расписания ДР</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:complexContent>
              <xs:restriction base="ArScheduleRule">
                <xs:sequence>
                  <xs:element ref="arScheduleId"/>
                  <xs:element maxOccurs="0" minOccurs="0" name="info" type="ArScheduleRuleInfo">
                    <xs:annotation>
                      <xs:documentation>Сведения о Правиле расписания ДР</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                </xs:sequence>
                <xs:attribute name="id" type="core:ID" use="required">
                  <xs:annotation>
                    <xs:documentation>Идентификатор сущности</xs:documentation>
                  </xs:annotation>
                </xs:attribute>
                <xs:attribute name="version" type="xs:long" use="required">
                  <xs:annotation>
                    <xs:documentation>Версия сущности</xs:documentation>
                  </xs:annotation>
                </xs:attribute>
              </xs:restriction>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteArScheduleRuleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода deleteArScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to manage shedules rules' types)-->
  <xs:element name="getArScheduleRuleTypeListRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getArScheduleRuleTypeList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getArScheduleRuleTypeListResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getArScheduleRuleTypeList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="ArScheduleRuleTypeListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=supp.rir2.core.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/core/v1/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/supp/rir2/core/v1/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?xsd=../../core/v1/emias.core.v1.xsd"/>
  <!--rules components-->
  <xs:complexType name="TreatmentsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинской манипуляции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AgeGroupsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Возрастных групп</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="ageGroupId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Возрастной группы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleTimeInterval">
    <xs:annotation>
      <xs:documentation>Временной интервал Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TimeInterval">
        <xs:sequence>
          <xs:element name="start" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время начала интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время окончания интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="RuleTypeId">
    <xs:annotation>
      <xs:documentation>Идентификатор типа Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:simpleType name="LocationId">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:complexType name="RuleDatePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!--excluded dates definition-->
  <xs:complexType name="ExcludedDates">
    <xs:annotation>
      <xs:documentation>Описание исключаемых дней</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="excludedDay" type="xs:date">
        <xs:annotation>
          <xs:documentation>Исключаемые даты</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isExcludedHoliday" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Исключая праздничные дни" (в соответствии с производственным
                        календарем)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="7" minOccurs="0" name="excludedDayOfWeek" type="DayOfWeekNumber">
        <xs:annotation>
          <xs:documentation>Исключаемые дни недели</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--date templates definitions-->
  <xs:complexType name="DayOfMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно в заданные даты каждого календарного месяца"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="31" name="dayOfMonth" type="DayOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер дня месяца (число от 1 до 31)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekByMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно по дням недели" (например, каждый 3-й понедельник месяца)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="5" name="week" type="WeekOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер недели месяца (число от 1 до 5)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SpecialDayDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "В конкретные даты" (например, 25 января 2015 года и т. д)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="day" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EvenDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По четным или нечетным числам"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element name="isEven" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак «Четные числа»</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По дням недели"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="7" name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="DatesTemplate">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип описания Шаблона дат</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="dayOfWeek">
    <xs:annotation>
      <xs:documentation>День недели</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:int">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="7"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <!--templates components-->
  <xs:simpleType name="DayOfWeekNumber">
    <xs:annotation>
      <xs:documentation>Номер дня недели</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="7"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер дня месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WeekOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер недели месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="5"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources schedule-->
  <xs:complexType name="CompositeResourceSchedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="compositeResource" type="CompositeResource">
            <xs:annotation>
              <xs:documentation>Композитный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceScheduleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Расписании композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="schedulePeriod"/>
                <xs:element ref="scheduleActiveState"/>
              </xs:sequence>
              <xs:attribute name="isLocked" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность
                                        внесения изменений в определение его содержания</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceScheduleBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="resourceScheduleStatus">
            <xs:annotation>
              <xs:documentation>Статус</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completeness" type="xs:unsignedByte">
            <xs:annotation>
              <xs:documentation>Полнота расписания</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceScheduleStatus" type="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статус Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статусы Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_DEFINED"/>
      <xs:enumeration value="DIRTY"/>
      <xs:enumeration value="READY"/>
      <xs:enumeration value="CALCULATION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopySarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SarScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopyArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ArScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources-->
  <xs:complexType name="SpecialAvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Специальный доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="Equipment">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Специализированный кабинет"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="SPECIAL_AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="JobExecution">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Исполнение должности"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResource">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="info" type="CompositeResourceInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithTreatments">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс" со сведениями о проводимых манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="ID"/>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID"/>
      <xs:element name="resource" type="CompositeResourceForAssignment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignment">
    <xs:annotation>
      <xs:documentation>Краткие сведения о ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="medicalOrganization" type="MedicalOrganizationShort"/>
      <xs:element name="medicalFacility" type="MedicalFacilityShort"/>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element name="addressObject" type="AddressObjectShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressObjectShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об Адресном объекте</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressShort" type="AddressShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об адресе</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressString" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="resourceKind">
        <xs:annotation>
          <xs:documentation>Вид Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parentId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="parentTypeId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор типа сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="CompositeResourceType">
        <xs:annotation>
          <xs:documentation>Тип Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalOrganizationId">
        <xs:annotation>
          <xs:documentation>Идентификатор МО, которой принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="department" type="Department">
        <xs:annotation>
          <xs:documentation>Структурное подразделение МО, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="functionTitle" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="functionVolume" type="xs:float">
        <xs:annotation>
          <xs:documentation>Объем функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalFacilityId">
        <xs:annotation>
          <xs:documentation>Идентификатор МУ, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="Location">
        <xs:annotation>
          <xs:documentation>Локация, связанная с Композитным ресурсом</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceType">
    <xs:annotation>
      <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="syncStatus" type="ResourceSyncStatuses">
            <xs:annotation>
              <xs:documentation>Статус синхронизации</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="parameters" type="ResourceParameterCollection">
            <xs:annotation>
              <xs:documentation>Параметры</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourceParameterCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Параметров ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="parameter" type="ResourceParameter">
        <xs:annotation>
          <xs:documentation>Параметр ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceParameter">
    <xs:annotation>
      <xs:documentation>Параметр ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="KeyValuePair">
        <xs:attribute name="ownerSystemName" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Владелец параметра (шифр системы-потребителя, породившего параметр)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceKind" type="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Вид Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Виды Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AVAILABLE_RESOURCE"/>
      <xs:enumeration value="SPECIAL_AVAILABLE_RESOURCE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceSyncStatuses">
    <xs:annotation>
      <xs:documentation>Статусы синхронизации Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_PROGRESS"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
    </xs:restriction>
  </xs:simpleType>
  <!--MO/MU shedule and its components-->
  <xs:complexType name="Schedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписаниие МО/МУ"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="medicalFacilityId"/>
          <xs:element ref="schedulePeriod"/>
          <xs:element ref="scheduleActiveState"/>
        </xs:sequence>
        <xs:attribute name="isMo" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак принадлежности расписания МО</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isLocked" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность внесения
                            изменений в определение его содержания</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="scheduleId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="locationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="scheduleActiveState" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>Статус "Действующее" для Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="schedulePeriod" type="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeekDefinition">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeek">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursCollection">
    <xs:annotation>
      <xs:documentation>Сведения о расписании работы учереждения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="7" minOccurs="0" name="workHoursForDayOfWeek" type="WorkHoursForDayOfWeekDefinition">
        <xs:annotation>
          <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--business entities which belong to SVMR and their components-->
  <xs:complexType name="JobExecution">
    <xs:annotation>
      <xs:documentation>Сущность "Исполнение должности"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование должности в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор должности (в соответствии с Номенклатурой должностей
                                медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="employee" type="Employee">
            <xs:annotation>
              <xs:documentation>Сведения о работнике МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionVolume" type="xs:float">
            <xs:annotation>
              <xs:documentation>Ставка</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionPeriod">
            <xs:annotation>
              <xs:documentation>Период исполнения должности</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="DatePeriod">
                  <xs:sequence>
                    <xs:element name="start" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата начала периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element minOccurs="0" name="end" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата окончания периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
          <xs:element ref="medicalOrganizationId"/>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maternityLeave" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак "Декретный отпуск"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultMedicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ в котором "по умолчанию" осуществляется деятельность
                                работника</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, в которой "по умолчанию" осуществляется деятельность работника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Location">
    <xs:annotation>
      <xs:documentation>Сущность "Локация"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="roomTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование кабинета (номер на табличке двери кабинета)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stage" type="xs:short">
            <xs:annotation>
              <xs:documentation>Этаж, на котором располагается Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subBuilding" type="xs:string">
            <xs:annotation>
              <xs:documentation>Корпус (строение) - используется в случае, если по адресу Адресного
                                объекта располагается несколько "корпусов"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="building" type="Building">
            <xs:annotation>
              <xs:documentation>Сведения об Адресном объекте</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="medicalFacilityId">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ, которому принадлежит Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EquipmentProfile">
    <xs:annotation>
      <xs:documentation>Элемент справочника "Профиль оборудования".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>Оборудование</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="equipmentId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор единицы Медицинского оборудования в ЕМИАС.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentModel" type="xs:string">
            <xs:annotation>
              <xs:documentation>Модель оборудования в ЕМИАС.СВМР.2</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentProfile" type="EquipmentProfile">
            <xs:annotation>
              <xs:documentation>Профиль Оборудования</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentTypeId" type="ID">
            <xs:annotation>
              <xs:documentation>Наименование оборудования в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalOrganizationId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="personalizedService" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак индивидуального обслуживания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="capacityForRoom" type="xs:int">
            <xs:annotation>
              <xs:documentation>Количество одновременно обслуживаемых пациентов с учетом ограничивающих условий Локации МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, к которой прикреплено оборудование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="treatments">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="treatment">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="info" type="Treatment">
                        <xs:annotation>
                          <xs:documentation>Сведения о Медицинской манипуляции</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="useByDefault" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Признак "Использовать по умолчанию" в определении Правила рабочего времени.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Department">
    <xs:annotation>
      <xs:documentation>Структурное подразделение</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование структурного подразделения МО в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор структурного подразделения (в соответствии с Номенклатурой
                                структурных подразделений медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Сведения о работнике МО</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="snils" type="xs:string">
            <xs:annotation>
              <xs:documentation>СНИЛС</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lastName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Фамилия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="firstName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Имя</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="middleName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Отчество</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Building">
    <xs:annotation>
      <xs:documentation>Адресный объект</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="buildingAddress" type="xs:string">
            <xs:annotation>
              <xs:documentation>Строковое представление адреса Адресного объекта</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для компонентов сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--nsi-->
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:sequence>
          <xs:element name="categoryCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Код категории медицинской манипуляции. Соответствует полю "code" справочника "Категории медицинских манипуляций".</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Specialization">
    <xs:annotation>
      <xs:documentation>Специализация</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="TitledNsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников с полем title</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="archived" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Признак "Архивная запись"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types and elements-->
  <xs:element name="entityVersion" type="xs:long">
    <xs:annotation>
      <xs:documentation>Версия сущности ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="VersionedEntityBase">
    <xs:annotation>
      <xs:documentation>Версионированная сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:attribute name="version" type="xs:long" use="required">
          <xs:annotation>
            <xs:documentation>Версия сущности</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовая сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="warnings" type="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений (предупреждений) об ошибках</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="ProcessingResultBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, определяющий результат выполнения операции обработки сущностей
                или их компонентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="succeededNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Количество обработанных сущностей (или компоненотов сущности)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="totalNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Общее количество сущностей (или компонентов сущности), подлежащих обработке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint></con:endpoints><con:operation id="6d300fe1-4420-4bc0-a15c-7a40ccb51930" isOneWay="false" action="applyChangesToArSchedule" name="applyChangesToArSchedule" bindingOperationName="applyChangesToArSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="cbbf1dd2-0c12-47dd-9a9d-85c638fa3607" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:applyChangesToArScheduleRequest>\r
         <typ:arScheduleId>?</typ:arScheduleId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:applyChangesToArScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/applyChangesToArScheduleRequest"/></con:call></con:operation><con:operation id="749ff91d-dfd6-47e6-8679-d8805309af56" isOneWay="false" action="clearArSchedule" name="clearArSchedule" bindingOperationName="clearArSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2e2e8a7d-91b4-4065-afcb-dd2bab992052" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:clearArScheduleRequest>\r
         <typ:arScheduleId>?</typ:arScheduleId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:clearArScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/clearArScheduleRequest"/></con:call></con:operation><con:operation id="0d0e37ab-8b78-40c2-9081-37ed0bbb308a" isOneWay="false" action="copyArSchedule" name="copyArSchedule" bindingOperationName="copyArSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="11d95242-86b8-47b8-9f0f-5bf80600d964" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:copyArScheduleRequest>\r
         <typ:arScheduleIdFrom>?</typ:arScheduleIdFrom>\r
         <typ:arScheduleIdTo>?</typ:arScheduleIdTo>\r
         <!--Optional:-->\r
         <typ:arScheduleRuleTypeKinds>\r
            <!--1 to 4 repetitions:-->\r
            <typ:arScheduleRuleTypeKind>?</typ:arScheduleRuleTypeKind>\r
         </typ:arScheduleRuleTypeKinds>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:copyArScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/copyArScheduleRequest"/></con:call></con:operation><con:operation id="ef1bc1a1-18ec-41f8-add5-91dfd01ba8df" isOneWay="false" action="createArScheduleRule" name="createArScheduleRule" bindingOperationName="createArScheduleRule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="708ee60e-21b6-41e4-bf58-ca59b6d94b4a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createArScheduleRuleRequest>\r
         <typ:arScheduleId>?</typ:arScheduleId>\r
         <typ:info>\r
            <typ:typeId>?</typ:typeId>\r
            <!--Optional:-->\r
            <typ:locationId>?</typ:locationId>\r
            <!--Optional:-->\r
            <typ:comment>?</typ:comment>\r
            <typ:datePeriod>\r
               <v1:start>?</v1:start>\r
               <v1:end>?</v1:end>\r
            </typ:datePeriod>\r
            <typ:dateTemplate/>\r
            <!--Optional:-->\r
            <typ:excludedDates>\r
               <!--Zero or more repetitions:-->\r
               <v1:excludedDay>?</v1:excludedDay>\r
               <v1:isExcludedHoliday>?</v1:isExcludedHoliday>\r
               <!--0 to 7 repetitions:-->\r
               <v1:excludedDayOfWeek>?</v1:excludedDayOfWeek>\r
            </typ:excludedDates>\r
            <typ:timeIntervals>\r
               <!--1 or more repetitions:-->\r
               <typ:timeInterval>\r
                  <v1:start>?</v1:start>\r
                  <v1:end>?</v1:end>\r
               </typ:timeInterval>\r
            </typ:timeIntervals>\r
            <!--Optional:-->\r
            <typ:ageGroups>\r
               <!--1 or more repetitions:-->\r
               <v1:ageGroupId>?</v1:ageGroupId>\r
            </typ:ageGroups>\r
            <!--Optional:-->\r
            <typ:treatments>\r
               <!--1 or more repetitions:-->\r
               <v1:treatmentId>?</v1:treatmentId>\r
            </typ:treatments>\r
         </typ:info>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:createArScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/createArScheduleRuleRequest"/></con:call></con:operation><con:operation id="c688e242-b427-4b3d-8909-98c0bb6b9880" isOneWay="false" action="deleteArScheduleRule" name="deleteArScheduleRule" bindingOperationName="deleteArScheduleRule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="91c5bd0c-2333-4697-8f0b-4683240df7c3" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:deleteArScheduleRuleRequest>\r
         <typ:arScheduleRule id="?" version="?">\r
            <typ:arScheduleId>?</typ:arScheduleId>\r
         </typ:arScheduleRule>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:deleteArScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/deleteArScheduleRuleRequest"/></con:call></con:operation><con:operation id="0f550b6b-92d8-49c0-a654-5f2b35bb1e12" isOneWay="false" action="getArSchedule" name="getArSchedule" bindingOperationName="getArSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f9192c93-44b7-4e1c-bfaa-9ab370f505da" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getArScheduleRequest>\r
         <typ:arScheduleId>?</typ:arScheduleId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getArScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/getArScheduleRequest"/></con:call></con:operation><con:operation id="67ba9676-257b-4697-a9df-251b295ca55e" isOneWay="false" action="getArScheduleList" name="getArScheduleList" bindingOperationName="getArScheduleList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9e0b7fab-f8d1-4732-bdeb-b440f9655c87" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getArScheduleListRequest>\r
         <typ:arId>?</typ:arId>\r
         <v1:schedulePeriod>\r
            <v1:start>?</v1:start>\r
            <v1:end>?</v1:end>\r
         </v1:schedulePeriod>\r
         <!--0 to 4 repetitions:-->\r
         <v1:resourceScheduleStatus>?</v1:resourceScheduleStatus>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getArScheduleListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/getArScheduleListRequest"/></con:call></con:operation><con:operation id="48d7421a-0ab1-4740-9061-880161857012" isOneWay="false" action="getArScheduleRuleTypeList" name="getArScheduleRuleTypeList" bindingOperationName="getArScheduleRuleTypeList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="709240f6-49b9-4ebb-88a8-1d7f95fa04f0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getArScheduleRuleTypeListRequest>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getArScheduleRuleTypeListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/getArScheduleRuleTypeListRequest"/></con:call></con:operation><con:operation id="1d654db9-c81f-4fe3-b11a-e2113584f28a" isOneWay="false" action="updateArScheduleRule" name="updateArScheduleRule" bindingOperationName="updateArScheduleRule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e276b9a8-d863-4576-a4e7-757f19e34192" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:updateArScheduleRuleRequest>\r
         <typ:id>?</typ:id>\r
         <typ:arScheduleRuleInfo>\r
            <typ:typeId>?</typ:typeId>\r
            <!--Optional:-->\r
            <typ:locationId>?</typ:locationId>\r
            <!--Optional:-->\r
            <typ:comment>?</typ:comment>\r
            <typ:datePeriod>\r
               <v1:start>?</v1:start>\r
               <v1:end>?</v1:end>\r
            </typ:datePeriod>\r
            <typ:dateTemplate/>\r
            <!--Optional:-->\r
            <typ:excludedDates>\r
               <!--Zero or more repetitions:-->\r
               <v1:excludedDay>?</v1:excludedDay>\r
               <v1:isExcludedHoliday>?</v1:isExcludedHoliday>\r
               <!--0 to 7 repetitions:-->\r
               <v1:excludedDayOfWeek>?</v1:excludedDayOfWeek>\r
            </typ:excludedDates>\r
            <typ:timeIntervals>\r
               <!--1 or more repetitions:-->\r
               <typ:timeInterval>\r
                  <v1:start>?</v1:start>\r
                  <v1:end>?</v1:end>\r
               </typ:timeInterval>\r
            </typ:timeIntervals>\r
            <!--Optional:-->\r
            <typ:ageGroups>\r
               <!--1 or more repetitions:-->\r
               <v1:ageGroupId>?</v1:ageGroupId>\r
            </typ:ageGroups>\r
            <!--Optional:-->\r
            <typ:treatments>\r
               <!--1 or more repetitions:-->\r
               <v1:treatmentId>?</v1:treatmentId>\r
            </typ:treatments>\r
         </typ:arScheduleRuleInfo>\r
         <typ:version>?</typ:version>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:updateArScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/arScheduleService/v1/arScheduleServicePortType/updateArScheduleRuleRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="0b7783fa-8a21-4be3-a44d-988861886e7b" wsaVersion="NONE" name="journalServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/supp/rir2/journalService/v1/}journalServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?wsdl"><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="journalService" targetNamespace="http://emias.mos.ru/supp/rir2/journalService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:tns="http://emias.mos.ru/supp/rir2/journalService/v1/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:ns1="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:documentation>Версия 1.2.0</wsdl:documentation>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../system/v1/emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/supp/rir2/journalService/v1/types/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=supp.rir2.journalService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getJournalInput">
    <wsdl:part element="ns1:getJournalRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getJournalOutput">
    <wsdl:part element="ns1:getJournalResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="journalServicePortType">
    <wsdl:operation name="getJournal">
      <wsdl:input message="tns:getJournalInput"></wsdl:input>
      <wsdl:output message="tns:getJournalOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="journalServiceBinding" type="tns:journalServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getJournal">
      <soap:operation soapAction="getJournal"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="journalService">
    <wsdl:port binding="tns:journalServiceBinding" name="journalServicePort">
      <soap:address location="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../system/v1/emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../core/v1/emias.core.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../core/v1/emias.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../system/v1/emias.system.v1.xsd"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
						(используются в соответствии с
						переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../system/v1/emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../system/v1/emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../system/v1/emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=supp.rir2.journalService.v1.types.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/journalService/v1/types/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/journalService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=supp.rir2.core.v1.xsd"/>
  <xs:element name="getJournalRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="searchParams">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="medicalFacilityId" type="core:ID">
                <xs:annotation>
                  <xs:documentation>Идентификаторы МУ, по которым нужно отобрать изменения</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="resourceId" type="core:ID">
                <xs:annotation>
                  <xs:documentation>Идентификаторы ресурсов, по которым нужно отобрать изменения</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="operationType" type="xs:string">
                <xs:annotation>
                  <xs:documentation>Тип изменений в данных, которые нужны в выходных параметрах.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="datePeriod" type="core:SchedulePeriod">
                <xs:annotation>
                  <xs:documentation>Период дат, за которые нужен журнал</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="options" type="core:Options">
          <xs:annotation>
            <xs:documentation>Период дат, за которые нужен журнал</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" name="pagingOptions" type="core:PagingOptions">
          <xs:annotation>
            <xs:documentation>Параметры пагинации и сортировки</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getJournalResponse">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="core:PagingResults">
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="logs">
              <xs:annotation>
                <xs:documentation>Данные для составления журнала</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="id" type="core:ID"/>
                  <xs:element minOccurs="0" name="userName" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>Логин автора</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="userRoleId" type="xs:long">
                    <xs:annotation>
                      <xs:documentation>Роль автора</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="jobExecutionId" type="core:ID">
                    <xs:annotation>
                      <xs:documentation>Исполнение должности автора</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element name="dateTime" type="xs:dateTime">
                    <xs:annotation>
                      <xs:documentation>Дата и время применения изменений</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="operationType" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>Тип операции внесения изменений</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="entityID" type="core:ID">
                    <xs:annotation>
                      <xs:documentation>Идентификатор объекта</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="resourceID" type="core:ID">
                    <xs:annotation>
                      <xs:documentation>Идентификатор ресурса</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="muID" type="core:ID">
                    <xs:annotation>
                      <xs:documentation>Идентификатор МУ</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="details" type="JournalEntryDetail">
                    <xs:annotation>
                      <xs:documentation>Измененные атрибуты/объекты</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="resources">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="id" type="core:ID"/>
                  <xs:element name="title" type="xs:string"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType abstract="true" name="JournalEntryDetail"></xs:complexType>
  <xs:complexType name="NoJournalDetail">
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CopyRulesEventDetail">
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail">
        <xs:sequence>
          <xs:element name="targetResourceName" type="xs:string"/>
          <xs:element name="targetSchedulePeriod" type="core:SchedulePeriod"/>
          <xs:element name="sourceResourceName" type="xs:string"/>
          <xs:element name="sourcesMuId" type="core:ID"/>
          <xs:element name="sourceSchedulePeriod" type="core:SchedulePeriod"/>
          <xs:element maxOccurs="unbounded" name="kinds" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CRUDRuleEventDetail">
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail">
        <xs:sequence>
          <xs:element name="sourceSchedulePeriod" type="core:SchedulePeriod"/>
          <xs:element name="ruleKind" type="xs:string"/>
          <xs:element name="rulePeriod" type="core:DatePeriod"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ChangeSchedulePeriodEventDetail">
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail">
        <xs:sequence>
          <xs:element name="targetSchedulePeriod" type="core:SchedulePeriod"/>
          <xs:element name="isActive" type="xs:boolean"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ChangeScheduleStatusEventDetail">
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail">
        <xs:sequence>
          <xs:element name="targetSchedulePeriod" type="core:SchedulePeriod"/>
          <xs:element name="isActive" type="xs:boolean"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CopyScheduleEventDetail">
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail">
        <xs:sequence>
          <xs:element name="targetSchedulePeriod" type="core:SchedulePeriod"/>
          <xs:element name="sourceSchedulePeriod" type="core:SchedulePeriod"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ScheduleEventDetail">
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail">
        <xs:sequence>
          <xs:element name="targetSchedulePeriod" type="core:SchedulePeriod"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SetWorkHoursEventDetail">
    <xs:annotation>
      <xs:documentation>Детальные сведения события установки графика работы МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="setWorkHours">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="core:dayOfWeek"/>
                <xs:element minOccurs="0" name="description" type="xs:string">
                  <xs:annotation>
                    <xs:documentation>Комментарий пользователя</xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:sequence>
                  <xs:element minOccurs="0" name="oldWorkHours" type="core:RuleTimeInterval">
                    <xs:annotation>
                      <xs:documentation>Старый график работы</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element name="newWorkHours" type="core:RuleTimeInterval">
                    <xs:annotation>
                      <xs:documentation>Новый график работы</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                </xs:sequence>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RemoveWorkHoursEventDetail">
    <xs:annotation>
      <xs:documentation>Детальные сведения события удаление графика работы МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="JournalEntryDetail">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="oldWorkHours" type="core:WorkHoursForDayOfWeek"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=supp.rir2.core.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/core/v1/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/supp/rir2/core/v1/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal?xsd=../../core/v1/emias.core.v1.xsd"/>
  <!--rules components-->
  <xs:complexType name="TreatmentsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинской манипуляции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AgeGroupsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Возрастных групп</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="ageGroupId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Возрастной группы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleTimeInterval">
    <xs:annotation>
      <xs:documentation>Временной интервал Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TimeInterval">
        <xs:sequence>
          <xs:element name="start" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время начала интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время окончания интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="RuleTypeId">
    <xs:annotation>
      <xs:documentation>Идентификатор типа Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:simpleType name="LocationId">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:complexType name="RuleDatePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!--excluded dates definition-->
  <xs:complexType name="ExcludedDates">
    <xs:annotation>
      <xs:documentation>Описание исключаемых дней</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="excludedDay" type="xs:date">
        <xs:annotation>
          <xs:documentation>Исключаемые даты</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isExcludedHoliday" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Исключая праздничные дни" (в соответствии с производственным
                        календарем)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="7" minOccurs="0" name="excludedDayOfWeek" type="DayOfWeekNumber">
        <xs:annotation>
          <xs:documentation>Исключаемые дни недели</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--date templates definitions-->
  <xs:complexType name="DayOfMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно в заданные даты каждого календарного месяца"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="31" name="dayOfMonth" type="DayOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер дня месяца (число от 1 до 31)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekByMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно по дням недели" (например, каждый 3-й понедельник месяца)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="5" name="week" type="WeekOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер недели месяца (число от 1 до 5)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SpecialDayDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "В конкретные даты" (например, 25 января 2015 года и т. д)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="day" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EvenDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По четным или нечетным числам"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element name="isEven" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак «Четные числа»</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По дням недели"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="7" name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="DatesTemplate">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип описания Шаблона дат</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="dayOfWeek">
    <xs:annotation>
      <xs:documentation>День недели</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:int">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="7"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <!--templates components-->
  <xs:simpleType name="DayOfWeekNumber">
    <xs:annotation>
      <xs:documentation>Номер дня недели</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="7"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер дня месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WeekOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер недели месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="5"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources schedule-->
  <xs:complexType name="CompositeResourceSchedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="compositeResource" type="CompositeResource">
            <xs:annotation>
              <xs:documentation>Композитный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceScheduleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Расписании композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="schedulePeriod"/>
                <xs:element ref="scheduleActiveState"/>
              </xs:sequence>
              <xs:attribute name="isLocked" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность
                                        внесения изменений в определение его содержания</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceScheduleBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="resourceScheduleStatus">
            <xs:annotation>
              <xs:documentation>Статус</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completeness" type="xs:unsignedByte">
            <xs:annotation>
              <xs:documentation>Полнота расписания</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceScheduleStatus" type="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статус Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статусы Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_DEFINED"/>
      <xs:enumeration value="DIRTY"/>
      <xs:enumeration value="READY"/>
      <xs:enumeration value="CALCULATION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopySarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SarScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopyArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ArScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources-->
  <xs:complexType name="SpecialAvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Специальный доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="Equipment">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Специализированный кабинет"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="SPECIAL_AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="JobExecution">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Исполнение должности"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResource">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="info" type="CompositeResourceInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithTreatments">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс" со сведениями о проводимых манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="ID"/>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID"/>
      <xs:element name="resource" type="CompositeResourceForAssignment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignment">
    <xs:annotation>
      <xs:documentation>Краткие сведения о ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="medicalOrganization" type="MedicalOrganizationShort"/>
      <xs:element name="medicalFacility" type="MedicalFacilityShort"/>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element name="addressObject" type="AddressObjectShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressObjectShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об Адресном объекте</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressShort" type="AddressShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об адресе</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressString" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="resourceKind">
        <xs:annotation>
          <xs:documentation>Вид Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parentId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="parentTypeId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор типа сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="CompositeResourceType">
        <xs:annotation>
          <xs:documentation>Тип Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalOrganizationId">
        <xs:annotation>
          <xs:documentation>Идентификатор МО, которой принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="department" type="Department">
        <xs:annotation>
          <xs:documentation>Структурное подразделение МО, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="functionTitle" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="functionVolume" type="xs:float">
        <xs:annotation>
          <xs:documentation>Объем функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalFacilityId">
        <xs:annotation>
          <xs:documentation>Идентификатор МУ, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="Location">
        <xs:annotation>
          <xs:documentation>Локация, связанная с Композитным ресурсом</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceType">
    <xs:annotation>
      <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="syncStatus" type="ResourceSyncStatuses">
            <xs:annotation>
              <xs:documentation>Статус синхронизации</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="parameters" type="ResourceParameterCollection">
            <xs:annotation>
              <xs:documentation>Параметры</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourceParameterCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Параметров ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="parameter" type="ResourceParameter">
        <xs:annotation>
          <xs:documentation>Параметр ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceParameter">
    <xs:annotation>
      <xs:documentation>Параметр ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="KeyValuePair">
        <xs:attribute name="ownerSystemName" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Владелец параметра (шифр системы-потребителя, породившего параметр)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceKind" type="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Вид Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Виды Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AVAILABLE_RESOURCE"/>
      <xs:enumeration value="SPECIAL_AVAILABLE_RESOURCE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceSyncStatuses">
    <xs:annotation>
      <xs:documentation>Статусы синхронизации Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_PROGRESS"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
    </xs:restriction>
  </xs:simpleType>
  <!--MO/MU shedule and its components-->
  <xs:complexType name="Schedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписаниие МО/МУ"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="medicalFacilityId"/>
          <xs:element ref="schedulePeriod"/>
          <xs:element ref="scheduleActiveState"/>
        </xs:sequence>
        <xs:attribute name="isMo" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак принадлежности расписания МО</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isLocked" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность внесения
                            изменений в определение его содержания</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="scheduleId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="locationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="scheduleActiveState" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>Статус "Действующее" для Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="schedulePeriod" type="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeekDefinition">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeek">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursCollection">
    <xs:annotation>
      <xs:documentation>Сведения о расписании работы учереждения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="7" minOccurs="0" name="workHoursForDayOfWeek" type="WorkHoursForDayOfWeekDefinition">
        <xs:annotation>
          <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--business entities which belong to SVMR and their components-->
  <xs:complexType name="JobExecution">
    <xs:annotation>
      <xs:documentation>Сущность "Исполнение должности"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование должности в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор должности (в соответствии с Номенклатурой должностей
                                медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="employee" type="Employee">
            <xs:annotation>
              <xs:documentation>Сведения о работнике МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionVolume" type="xs:float">
            <xs:annotation>
              <xs:documentation>Ставка</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionPeriod">
            <xs:annotation>
              <xs:documentation>Период исполнения должности</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="DatePeriod">
                  <xs:sequence>
                    <xs:element name="start" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата начала периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element minOccurs="0" name="end" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата окончания периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
          <xs:element ref="medicalOrganizationId"/>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maternityLeave" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак "Декретный отпуск"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultMedicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ в котором "по умолчанию" осуществляется деятельность
                                работника</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, в которой "по умолчанию" осуществляется деятельность работника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Location">
    <xs:annotation>
      <xs:documentation>Сущность "Локация"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="roomTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование кабинета (номер на табличке двери кабинета)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stage" type="xs:short">
            <xs:annotation>
              <xs:documentation>Этаж, на котором располагается Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subBuilding" type="xs:string">
            <xs:annotation>
              <xs:documentation>Корпус (строение) - используется в случае, если по адресу Адресного
                                объекта располагается несколько "корпусов"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="building" type="Building">
            <xs:annotation>
              <xs:documentation>Сведения об Адресном объекте</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="medicalFacilityId">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ, которому принадлежит Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EquipmentProfile">
    <xs:annotation>
      <xs:documentation>Элемент справочника "Профиль оборудования".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>Оборудование</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="equipmentId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор единицы Медицинского оборудования в ЕМИАС.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentModel" type="xs:string">
            <xs:annotation>
              <xs:documentation>Модель оборудования в ЕМИАС.СВМР.2</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentProfile" type="EquipmentProfile">
            <xs:annotation>
              <xs:documentation>Профиль Оборудования</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentTypeId" type="ID">
            <xs:annotation>
              <xs:documentation>Наименование оборудования в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalOrganizationId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="personalizedService" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак индивидуального обслуживания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="capacityForRoom" type="xs:int">
            <xs:annotation>
              <xs:documentation>Количество одновременно обслуживаемых пациентов с учетом ограничивающих условий Локации МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, к которой прикреплено оборудование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="treatments">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="treatment">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="info" type="Treatment">
                        <xs:annotation>
                          <xs:documentation>Сведения о Медицинской манипуляции</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="useByDefault" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Признак "Использовать по умолчанию" в определении Правила рабочего времени.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Department">
    <xs:annotation>
      <xs:documentation>Структурное подразделение</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование структурного подразделения МО в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор структурного подразделения (в соответствии с Номенклатурой
                                структурных подразделений медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Сведения о работнике МО</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="snils" type="xs:string">
            <xs:annotation>
              <xs:documentation>СНИЛС</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lastName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Фамилия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="firstName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Имя</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="middleName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Отчество</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Building">
    <xs:annotation>
      <xs:documentation>Адресный объект</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="buildingAddress" type="xs:string">
            <xs:annotation>
              <xs:documentation>Строковое представление адреса Адресного объекта</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для компонентов сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--nsi-->
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:sequence>
          <xs:element name="categoryCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Код категории медицинской манипуляции. Соответствует полю "code" справочника "Категории медицинских манипуляций".</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Specialization">
    <xs:annotation>
      <xs:documentation>Специализация</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="TitledNsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников с полем title</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="archived" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Признак "Архивная запись"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types and elements-->
  <xs:element name="entityVersion" type="xs:long">
    <xs:annotation>
      <xs:documentation>Версия сущности ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="VersionedEntityBase">
    <xs:annotation>
      <xs:documentation>Версионированная сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:attribute name="version" type="xs:long" use="required">
          <xs:annotation>
            <xs:documentation>Версия сущности</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовая сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="warnings" type="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений (предупреждений) об ошибках</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="ProcessingResultBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, определяющий результат выполнения операции обработки сущностей
                или их компонентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="succeededNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Количество обработанных сущностей (или компоненотов сущности)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="totalNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Общее количество сущностей (или компонентов сущности), подлежащих обработке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal</con:endpoint></con:endpoints><con:operation id="70524a7b-9806-4778-83a5-fce1d1aaefde" isOneWay="false" action="getJournal" name="getJournal" bindingOperationName="getJournal" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="8e4e3180-7844-4a36-b2f0-5da536d420fc" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getJournalRequest>\r
         <typ:searchParams>\r
            <!--Zero or more repetitions:-->\r
            <typ:medicalFacilityId>?</typ:medicalFacilityId>\r
            <!--Zero or more repetitions:-->\r
            <typ:resourceId>?</typ:resourceId>\r
            <!--Zero or more repetitions:-->\r
            <typ:operationType>?</typ:operationType>\r
            <typ:datePeriod>\r
               <v1:start>?</v1:start>\r
               <v1:end>?</v1:end>\r
            </typ:datePeriod>\r
         </typ:searchParams>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </typ:options>\r
         <!--Optional:-->\r
         <typ:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </typ:pagingOptions>\r
      </typ:getJournalRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/journalService/v1/journalServicePortType/getJournalRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="5eec8f7e-9d29-41c1-aa84-51f6a5dc3718" wsaVersion="NONE" name="getSoap" type="wsdl" bindingName="{http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/}getSoap" soapVersion="1_2" anonymous="optional" definition="http://rir2-rir2-system.emias.solit-clouds.ru/api/push?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://rir2-rir2-system.emias.solit-clouds.ru/api/push?wsdl"><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/push?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="pushaccepterService" targetNamespace="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:ns1="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=pushaccepterProduct.pushaccepterService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="getChangeElement">
    <wsdl:part element="ns1:ChangeElement" name="getChangeElement"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getResponseElement">
    <wsdl:part element="ns1:ResponseElement" name="getResponseElement"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="pushaccepterServicePortType">
    <wsdl:operation name="get">
      <wsdl:input message="tns:getChangeElement" name="getChangeElement"></wsdl:input>
      <wsdl:output message="tns:getResponseElement" name="getResponseElement"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="getSoap" type="tns:pushaccepterServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="get">
      <soap:operation soapAction=""/>
      <wsdl:input name="getChangeElement">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getResponseElement">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="getService">
    <wsdl:port binding="tns:getSoap" name="getSoap">
      <soap:address location="http://rir2-rir2-system.emias.solit-clouds.ru/api/push"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=emias.system.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Роли пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль пользователя"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>ИД Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/push?xsd=pushaccepterProduct.pushaccepterService.v1.types.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="ChangeElement">
    <xs:annotation>
      <xs:documentation>Входные параметры метода ChangeElement</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="in" type="xs:string"/>
        <xs:element minOccurs="0" name="intype" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ResponseElement">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода ResponseElement</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="out" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/push</con:endpoint></con:endpoints><con:operation id="dd7e50e0-1869-4832-8e3b-a8532d926700" isOneWay="false" action="" name="get" bindingOperationName="get" type="Request-Response" outputName="getResponseElement" inputName="getChangeElement" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="64e7c91c-6945-4120-ac2a-0d9c378a2030" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/push</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <typ:ChangeElement>\r
         <typ:in>?</typ:in>\r
         <!--Optional:-->\r
         <typ:intype>?</typ:intype>\r
      </typ:ChangeElement>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/pushaccepterServicePortType/getChangeElement"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="48ccedc5-81ec-4506-8e2a-905f5e2f8b41" wsaVersion="NONE" name="resourcesServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/supp/rir2/resourcesService/v1/}resourcesServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?wsdl"><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="resourcesService" targetNamespace="http://emias.mos.ru/supp/rir2/resourcesService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:tns="http://emias.mos.ru/supp/rir2/resourcesService/v1/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:ns1="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:documentation>Версия 1.3.0</wsdl:documentation>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../system/v1/emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=supp.rir2.resourcesService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCompositeResourceInput">
    <wsdl:part element="ns1:getCompositeResourceRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchSarTreatmentsOutput">
    <wsdl:part element="ns1:searchSarTreatmentsResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCompositeResourceByIncludedEntityInput">
    <wsdl:part element="ns1:getCompositeResourceByIncludedEntityRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCompositeResourceByIncludedEntityOutput">
    <wsdl:part element="ns1:getCompositeResourceByIncludedEntityResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setCompositeResourceParameterOutput">
    <wsdl:part element="ns1:setCompositeResourceParameterResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCompositeResourceTypeListOutput">
    <wsdl:part element="ns1:getCompositeResourceTypeListResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="resetCompositeResourceParameterOutput">
    <wsdl:part element="ns1:resetCompositeResourceParameterResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchSarTreatmentsInput">
    <wsdl:part element="ns1:searchSarTreatmentsRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCompositeResourceListOutput">
    <wsdl:part element="ns1:getCompositeResourceListResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setCompositeResourceParameterInput">
    <wsdl:part element="ns1:setCompositeResourceParameterRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCompositeResourceTypeListInput">
    <wsdl:part element="ns1:getCompositeResourceTypeListRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCompositeResourceOutput">
    <wsdl:part element="ns1:getCompositeResourceResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCompositeResourceListInput">
    <wsdl:part element="ns1:getCompositeResourceListRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="resetCompositeResourceParameterInput">
    <wsdl:part element="ns1:resetCompositeResourceParameterRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="resourcesServicePortType">
    <wsdl:operation name="getCompositeResourceTypeList">
      <wsdl:input message="tns:getCompositeResourceTypeListInput"></wsdl:input>
      <wsdl:output message="tns:getCompositeResourceTypeListOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCompositeResource">
      <wsdl:input message="tns:getCompositeResourceInput"></wsdl:input>
      <wsdl:output message="tns:getCompositeResourceOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCompositeResourceList">
      <wsdl:input message="tns:getCompositeResourceListInput"></wsdl:input>
      <wsdl:output message="tns:getCompositeResourceListOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setCompositeResourceParameter">
      <wsdl:input message="tns:setCompositeResourceParameterInput"></wsdl:input>
      <wsdl:output message="tns:setCompositeResourceParameterOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="resetCompositeResourceParameter">
      <wsdl:input message="tns:resetCompositeResourceParameterInput"></wsdl:input>
      <wsdl:output message="tns:resetCompositeResourceParameterOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCompositeResourceByIncludedEntity">
      <wsdl:input message="tns:getCompositeResourceByIncludedEntityInput"></wsdl:input>
      <wsdl:output message="tns:getCompositeResourceByIncludedEntityOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchSarTreatments">
      <wsdl:input message="tns:searchSarTreatmentsInput"></wsdl:input>
      <wsdl:output message="tns:searchSarTreatmentsOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="resourcesServiceBinding" type="tns:resourcesServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getCompositeResourceTypeList">
      <soap:operation soapAction="getCompositeResourceTypeList"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCompositeResource">
      <soap:operation soapAction="getCompositeResource"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCompositeResourceList">
      <soap:operation soapAction="getCompositeResourceList"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setCompositeResourceParameter">
      <soap:operation soapAction="setCompositeResourceParameter"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="resetCompositeResourceParameter">
      <soap:operation soapAction="resetCompositeResourceParameter"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCompositeResourceByIncludedEntity">
      <soap:operation soapAction="getCompositeResourceByIncludedEntity"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchSarTreatments">
      <soap:operation soapAction="searchSarTreatments"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="resourcesService">
    <wsdl:port binding="tns:resourcesServiceBinding" name="resourcesServicePort">
      <soap:address location="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../system/v1/emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../core/v1/emias.core.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../core/v1/emias.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../system/v1/emias.system.v1.xsd"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
						(используются в соответствии с
						переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../system/v1/emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../system/v1/emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../system/v1/emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=supp.rir2.resourcesService.v1.types.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=supp.rir2.core.v1.xsd"/>
  <xs:element name="compositeResourceId" type="core:ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--lists of entities-->
  <xs:complexType name="CompositeResourceTypeListResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о типах Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="type" type="core:CompositeResourceType">
            <xs:annotation>
              <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceListResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о Композитных ресурсах</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="resource" type="core:CompositeResource">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="TreatmentListResultPage">
    <xs:annotation>
      <xs:documentation>Страница со сведениями о найденных медицинских манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="treatmentListItem" type="core:Treatment">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignmentListResultPage">
    <xs:annotation>
      <xs:documentation>Страница со сведениями о ресурсах</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="resource" type="core:CompositeResourceWithTreatments">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--result definition for handling resources' pasrameters-->
  <xs:complexType name="ParametersProcessingResult">
    <xs:annotation>
      <xs:documentation>Результат выполнения операций над параметрами Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ProcessingResultBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="errors">
            <xs:annotation>
              <xs:documentation>Коллекция ошибок обработки параметров Композитного ресурса</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="error" type="ParametersProcessingResultError">
                  <xs:annotation>
                    <xs:documentation>Сведения об ошибке обработки параметра Композитного ресурса</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ParametersProcessingResultError">
    <xs:annotation>
      <xs:documentation>Сведения об ошибке обработки параметра Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="key" type="xs:string">
        <xs:annotation>
          <xs:documentation>Ключ параметра Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorMessages" type="core:ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--requests & responses (methods related to composite resources)-->
  <xs:element name="getCompositeResourceTypeListRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getCompositeResourceTypeList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCompositeResourceTypeListResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getCompositeResourceTypeList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="CompositeResourceTypeListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCompositeResourceRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getCompositeResource</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="compositeResourceId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCompositeResourceResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getCompositeResource</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="resource" type="core:CompositeResource">
          <xs:annotation>
            <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCompositeResourceListRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getCompositeResourceList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:sequence>
          <xs:element minOccurs="0" name="resources">
            <xs:annotation>
              <xs:documentation>Список идентификаторов композитных ресурсов</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="resourceId" type="core:ID">
                  <xs:annotation>
                    <xs:documentation>Идентификатор Композитного ресурса</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:element minOccurs="0" name="resourceTitle" type="xs:string">
          <xs:annotation>
            <xs:documentation>Наименование Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:resourceKind"/>
        <xs:choice minOccurs="0">
          <xs:element minOccurs="0" ref="core:medicalOrganizationId"/>
          <xs:element minOccurs="0" name="departments">
            <xs:annotation>
              <xs:documentation>Структурные подразделения Медицинской организации</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="departmentId" type="core:ID">
                  <xs:annotation>
                    <xs:documentation>Идентификатор структурного подраздения Медицинской организации
                                            (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
        <xs:element minOccurs="0" ref="core:medicalFacilityId"/>
        <xs:element minOccurs="0" ref="core:locationId"/>
        <xs:element minOccurs="0" name="types">
          <xs:annotation>
            <xs:documentation>Типы Композитных ресурсов</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="typeId" type="core:ID">
                <xs:annotation>
                  <xs:documentation>Идентификатор типа Композитного ресурса</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="departmentsNom">
          <xs:annotation>
            <xs:documentation>Структурные подразделения (в соответствии с Номенклатурой структурных
                            подразделений медицинских организаций)</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="departmentNomId" type="core:ID">
                <xs:annotation>
                  <xs:documentation>Идентификатор структурного подразделения (в соответствии с
                                        Номенклатурой структурных подразделений медицинских организаций)</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="syncStatuses">
          <xs:annotation>
            <xs:documentation>Статус синхронизации</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="3" name="syncStatus" type="core:ResourceSyncStatuses">
                <xs:annotation>
                  <xs:documentation>Статус синхронизации</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCompositeResourceListResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getCompositeResourceList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="CompositeResourceListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="setCompositeResourceParameterRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода setCompositeResourceParameter</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="compositeResourceId"/>
        <xs:element name="parameters">
          <xs:annotation>
            <xs:documentation>Коллекция параметров</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="parameter" type="core:KeyValuePair">
                <xs:annotation>
                  <xs:documentation>Параметр</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="setCompositeResourceParameterResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода setCompositeResourceParameter</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="resource" type="core:CompositeResource">
          <xs:annotation>
            <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="processingResult" type="ParametersProcessingResult"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="resetCompositeResourceParameterRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода resetCompositeResourceParameter</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="compositeResourceId"/>
        <xs:element name="keys">
          <xs:annotation>
            <xs:documentation>Коллекция ключей параметров, подлежащих удалению</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="key" type="xs:string">
                <xs:annotation>
                  <xs:documentation>Ключ параметра</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="resetCompositeResourceParameterResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода resetCompositeResourceParameter</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="resource" type="core:CompositeResource">
          <xs:annotation>
            <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="processingResult" type="ParametersProcessingResult"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="IncludedEntityType">
    <xs:annotation>
      <xs:documentation>Тип связанной сущности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="JOB_EXECUTION"/>
      <xs:enumeration value="EQUIPMENT"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CompositeResourceIncludedEntity">
    <xs:sequence>
      <xs:element name="id" type="core:ID"/>
      <xs:element name="includedEntityType" type="IncludedEntityType">
        <xs:annotation>
          <xs:documentation>Тип связанной сущности</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="getCompositeResourceByIncludedEntityRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getCompositeResourceByIncludedEntity</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="includedEntity" type="CompositeResourceIncludedEntity">
          <xs:annotation>
            <xs:documentation>Сведения о сущности, которая содержится в Композитном ресурсе</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:resourceKind"/>
        <xs:element minOccurs="0" name="syncStatuses" type="core:ResourceSyncStatuses">
          <xs:annotation>
            <xs:documentation>Статус синхронизации</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCompositeResourceByIncludedEntityResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getCompositeResourceByIncludedEntity</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="CompositeResourceListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchSarTreatmentsRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода searchSarTreatments</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:medicalOrganizationId">
          <xs:annotation>
            <xs:documentation>Идентификатор Медицинской организации, по которой необходимо выполнить поиск.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element maxOccurs="unbounded" minOccurs="0" ref="core:medicalFacilityId">
          <xs:annotation>
            <xs:documentation>Перечень идентификаторов Медицинских учреждений, по которым необходимо
                            выполнить поиск.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="treatmentCategoryCode" type="xs:string">
          <xs:annotation>
            <xs:documentation>Код Категории медицинской манипуляции, по которой необходимо выполнить поиск.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchSarTreatmentsResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода searchSarTreatments</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="TreatmentListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=supp.rir2.core.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/core/v1/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/supp/rir2/core/v1/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources?xsd=../../core/v1/emias.core.v1.xsd"/>
  <!--rules components-->
  <xs:complexType name="TreatmentsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинской манипуляции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AgeGroupsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Возрастных групп</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="ageGroupId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Возрастной группы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleTimeInterval">
    <xs:annotation>
      <xs:documentation>Временной интервал Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TimeInterval">
        <xs:sequence>
          <xs:element name="start" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время начала интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время окончания интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="RuleTypeId">
    <xs:annotation>
      <xs:documentation>Идентификатор типа Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:simpleType name="LocationId">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:complexType name="RuleDatePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!--excluded dates definition-->
  <xs:complexType name="ExcludedDates">
    <xs:annotation>
      <xs:documentation>Описание исключаемых дней</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="excludedDay" type="xs:date">
        <xs:annotation>
          <xs:documentation>Исключаемые даты</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isExcludedHoliday" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Исключая праздничные дни" (в соответствии с производственным
                        календарем)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="7" minOccurs="0" name="excludedDayOfWeek" type="DayOfWeekNumber">
        <xs:annotation>
          <xs:documentation>Исключаемые дни недели</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--date templates definitions-->
  <xs:complexType name="DayOfMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно в заданные даты каждого календарного месяца"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="31" name="dayOfMonth" type="DayOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер дня месяца (число от 1 до 31)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekByMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно по дням недели" (например, каждый 3-й понедельник месяца)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="5" name="week" type="WeekOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер недели месяца (число от 1 до 5)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SpecialDayDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "В конкретные даты" (например, 25 января 2015 года и т. д)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="day" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EvenDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По четным или нечетным числам"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element name="isEven" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак «Четные числа»</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По дням недели"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="7" name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="DatesTemplate">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип описания Шаблона дат</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="dayOfWeek">
    <xs:annotation>
      <xs:documentation>День недели</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:int">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="7"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <!--templates components-->
  <xs:simpleType name="DayOfWeekNumber">
    <xs:annotation>
      <xs:documentation>Номер дня недели</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="7"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер дня месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WeekOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер недели месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="5"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources schedule-->
  <xs:complexType name="CompositeResourceSchedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="compositeResource" type="CompositeResource">
            <xs:annotation>
              <xs:documentation>Композитный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceScheduleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Расписании композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="schedulePeriod"/>
                <xs:element ref="scheduleActiveState"/>
              </xs:sequence>
              <xs:attribute name="isLocked" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность
                                        внесения изменений в определение его содержания</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceScheduleBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="resourceScheduleStatus">
            <xs:annotation>
              <xs:documentation>Статус</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completeness" type="xs:unsignedByte">
            <xs:annotation>
              <xs:documentation>Полнота расписания</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceScheduleStatus" type="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статус Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статусы Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_DEFINED"/>
      <xs:enumeration value="DIRTY"/>
      <xs:enumeration value="READY"/>
      <xs:enumeration value="CALCULATION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopySarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SarScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopyArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ArScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources-->
  <xs:complexType name="SpecialAvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Специальный доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="Equipment">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Специализированный кабинет"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="SPECIAL_AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="JobExecution">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Исполнение должности"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResource">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="info" type="CompositeResourceInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithTreatments">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс" со сведениями о проводимых манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="ID"/>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID"/>
      <xs:element name="resource" type="CompositeResourceForAssignment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignment">
    <xs:annotation>
      <xs:documentation>Краткие сведения о ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="medicalOrganization" type="MedicalOrganizationShort"/>
      <xs:element name="medicalFacility" type="MedicalFacilityShort"/>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element name="addressObject" type="AddressObjectShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressObjectShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об Адресном объекте</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressShort" type="AddressShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об адресе</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressString" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="resourceKind">
        <xs:annotation>
          <xs:documentation>Вид Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parentId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="parentTypeId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор типа сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="CompositeResourceType">
        <xs:annotation>
          <xs:documentation>Тип Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalOrganizationId">
        <xs:annotation>
          <xs:documentation>Идентификатор МО, которой принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="department" type="Department">
        <xs:annotation>
          <xs:documentation>Структурное подразделение МО, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="functionTitle" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="functionVolume" type="xs:float">
        <xs:annotation>
          <xs:documentation>Объем функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalFacilityId">
        <xs:annotation>
          <xs:documentation>Идентификатор МУ, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="Location">
        <xs:annotation>
          <xs:documentation>Локация, связанная с Композитным ресурсом</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceType">
    <xs:annotation>
      <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="syncStatus" type="ResourceSyncStatuses">
            <xs:annotation>
              <xs:documentation>Статус синхронизации</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="parameters" type="ResourceParameterCollection">
            <xs:annotation>
              <xs:documentation>Параметры</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourceParameterCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Параметров ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="parameter" type="ResourceParameter">
        <xs:annotation>
          <xs:documentation>Параметр ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceParameter">
    <xs:annotation>
      <xs:documentation>Параметр ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="KeyValuePair">
        <xs:attribute name="ownerSystemName" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Владелец параметра (шифр системы-потребителя, породившего параметр)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceKind" type="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Вид Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Виды Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AVAILABLE_RESOURCE"/>
      <xs:enumeration value="SPECIAL_AVAILABLE_RESOURCE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceSyncStatuses">
    <xs:annotation>
      <xs:documentation>Статусы синхронизации Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_PROGRESS"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
    </xs:restriction>
  </xs:simpleType>
  <!--MO/MU shedule and its components-->
  <xs:complexType name="Schedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписаниие МО/МУ"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="medicalFacilityId"/>
          <xs:element ref="schedulePeriod"/>
          <xs:element ref="scheduleActiveState"/>
        </xs:sequence>
        <xs:attribute name="isMo" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак принадлежности расписания МО</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isLocked" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность внесения
                            изменений в определение его содержания</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="scheduleId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="locationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="scheduleActiveState" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>Статус "Действующее" для Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="schedulePeriod" type="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeekDefinition">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeek">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursCollection">
    <xs:annotation>
      <xs:documentation>Сведения о расписании работы учереждения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="7" minOccurs="0" name="workHoursForDayOfWeek" type="WorkHoursForDayOfWeekDefinition">
        <xs:annotation>
          <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--business entities which belong to SVMR and their components-->
  <xs:complexType name="JobExecution">
    <xs:annotation>
      <xs:documentation>Сущность "Исполнение должности"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование должности в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор должности (в соответствии с Номенклатурой должностей
                                медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="employee" type="Employee">
            <xs:annotation>
              <xs:documentation>Сведения о работнике МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionVolume" type="xs:float">
            <xs:annotation>
              <xs:documentation>Ставка</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionPeriod">
            <xs:annotation>
              <xs:documentation>Период исполнения должности</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="DatePeriod">
                  <xs:sequence>
                    <xs:element name="start" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата начала периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element minOccurs="0" name="end" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата окончания периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
          <xs:element ref="medicalOrganizationId"/>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maternityLeave" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак "Декретный отпуск"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultMedicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ в котором "по умолчанию" осуществляется деятельность
                                работника</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, в которой "по умолчанию" осуществляется деятельность работника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Location">
    <xs:annotation>
      <xs:documentation>Сущность "Локация"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="roomTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование кабинета (номер на табличке двери кабинета)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stage" type="xs:short">
            <xs:annotation>
              <xs:documentation>Этаж, на котором располагается Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subBuilding" type="xs:string">
            <xs:annotation>
              <xs:documentation>Корпус (строение) - используется в случае, если по адресу Адресного
                                объекта располагается несколько "корпусов"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="building" type="Building">
            <xs:annotation>
              <xs:documentation>Сведения об Адресном объекте</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="medicalFacilityId">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ, которому принадлежит Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EquipmentProfile">
    <xs:annotation>
      <xs:documentation>Элемент справочника "Профиль оборудования".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>Оборудование</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="equipmentId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор единицы Медицинского оборудования в ЕМИАС.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentModel" type="xs:string">
            <xs:annotation>
              <xs:documentation>Модель оборудования в ЕМИАС.СВМР.2</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentProfile" type="EquipmentProfile">
            <xs:annotation>
              <xs:documentation>Профиль Оборудования</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentTypeId" type="ID">
            <xs:annotation>
              <xs:documentation>Наименование оборудования в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalOrganizationId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="personalizedService" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак индивидуального обслуживания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="capacityForRoom" type="xs:int">
            <xs:annotation>
              <xs:documentation>Количество одновременно обслуживаемых пациентов с учетом ограничивающих условий Локации МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, к которой прикреплено оборудование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="treatments">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="treatment">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="info" type="Treatment">
                        <xs:annotation>
                          <xs:documentation>Сведения о Медицинской манипуляции</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="useByDefault" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Признак "Использовать по умолчанию" в определении Правила рабочего времени.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Department">
    <xs:annotation>
      <xs:documentation>Структурное подразделение</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование структурного подразделения МО в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор структурного подразделения (в соответствии с Номенклатурой
                                структурных подразделений медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Сведения о работнике МО</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="snils" type="xs:string">
            <xs:annotation>
              <xs:documentation>СНИЛС</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lastName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Фамилия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="firstName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Имя</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="middleName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Отчество</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Building">
    <xs:annotation>
      <xs:documentation>Адресный объект</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="buildingAddress" type="xs:string">
            <xs:annotation>
              <xs:documentation>Строковое представление адреса Адресного объекта</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для компонентов сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--nsi-->
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:sequence>
          <xs:element name="categoryCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Код категории медицинской манипуляции. Соответствует полю "code" справочника "Категории медицинских манипуляций".</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Specialization">
    <xs:annotation>
      <xs:documentation>Специализация</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="TitledNsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников с полем title</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="archived" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Признак "Архивная запись"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types and elements-->
  <xs:element name="entityVersion" type="xs:long">
    <xs:annotation>
      <xs:documentation>Версия сущности ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="VersionedEntityBase">
    <xs:annotation>
      <xs:documentation>Версионированная сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:attribute name="version" type="xs:long" use="required">
          <xs:annotation>
            <xs:documentation>Версия сущности</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовая сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="warnings" type="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений (предупреждений) об ошибках</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="ProcessingResultBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, определяющий результат выполнения операции обработки сущностей
                или их компонентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="succeededNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Количество обработанных сущностей (или компоненотов сущности)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="totalNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Общее количество сущностей (или компонентов сущности), подлежащих обработке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:endpoint></con:endpoints><con:operation id="1219dfaf-d313-48c4-bbcb-fe46eef154d8" isOneWay="false" action="getCompositeResource" name="getCompositeResource" bindingOperationName="getCompositeResource" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="425e5ef3-2685-4784-b3fe-7786e2154a16" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCompositeResourceRequest>\r
         <typ:compositeResourceId>?</typ:compositeResourceId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getCompositeResourceRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/resourcesService/v1/resourcesServicePortType/getCompositeResourceRequest"/></con:call></con:operation><con:operation id="8346fb1d-ca9d-4966-89c2-1966f7fbdb1a" isOneWay="false" action="getCompositeResourceByIncludedEntity" name="getCompositeResourceByIncludedEntity" bindingOperationName="getCompositeResourceByIncludedEntity" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="8d501b7d-ddec-4470-a7d8-533df6615a15" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCompositeResourceByIncludedEntityRequest>\r
         <typ:includedEntity>\r
            <typ:id>?</typ:id>\r
            <typ:includedEntityType>?</typ:includedEntityType>\r
         </typ:includedEntity>\r
         <!--Optional:-->\r
         <v1:resourceKind>?</v1:resourceKind>\r
         <!--Optional:-->\r
         <typ:syncStatuses>?</typ:syncStatuses>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getCompositeResourceByIncludedEntityRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/resourcesService/v1/resourcesServicePortType/getCompositeResourceByIncludedEntityRequest"/></con:call></con:operation><con:operation id="160cb699-f975-462e-bff1-3cb4e5dfd046" isOneWay="false" action="getCompositeResourceList" name="getCompositeResourceList" bindingOperationName="getCompositeResourceList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2c03c173-dedf-4156-beb6-7e2545b5a1d0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCompositeResourceListRequest>\r
         <!--Optional:-->\r
         <typ:resources>\r
            <!--1 or more repetitions:-->\r
            <typ:resourceId>?</typ:resourceId>\r
         </typ:resources>\r
         <!--Optional:-->\r
         <typ:resourceTitle>?</typ:resourceTitle>\r
         <!--Optional:-->\r
         <v1:resourceKind>?</v1:resourceKind>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <!--Optional:-->\r
         <v1:medicalOrganizationId>?</v1:medicalOrganizationId>\r
         <!--Optional:-->\r
         <typ:departments>\r
            <!--1 or more repetitions:-->\r
            <typ:departmentId>?</typ:departmentId>\r
         </typ:departments>\r
         <!--Optional:-->\r
         <v1:medicalFacilityId>?</v1:medicalFacilityId>\r
         <!--Optional:-->\r
         <v1:locationId>?</v1:locationId>\r
         <!--Optional:-->\r
         <typ:types>\r
            <!--1 or more repetitions:-->\r
            <typ:typeId>?</typ:typeId>\r
         </typ:types>\r
         <!--Optional:-->\r
         <typ:departmentsNom>\r
            <!--1 or more repetitions:-->\r
            <typ:departmentNomId>?</typ:departmentNomId>\r
         </typ:departmentsNom>\r
         <!--Optional:-->\r
         <typ:syncStatuses>\r
            <!--1 to 3 repetitions:-->\r
            <typ:syncStatus>?</typ:syncStatus>\r
         </typ:syncStatuses>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getCompositeResourceListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/resourcesService/v1/resourcesServicePortType/getCompositeResourceListRequest"/></con:call></con:operation><con:operation id="7c899127-ca7f-4bc4-bd94-cc5cae82e07d" isOneWay="false" action="getCompositeResourceTypeList" name="getCompositeResourceTypeList" bindingOperationName="getCompositeResourceTypeList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9096e337-5eee-4aec-98f0-6d98577f0440" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCompositeResourceTypeListRequest>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getCompositeResourceTypeListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/resourcesService/v1/resourcesServicePortType/getCompositeResourceTypeListRequest"/></con:call></con:operation><con:operation id="d46387c0-c122-4116-9af4-9bd2c7b26ae0" isOneWay="false" action="resetCompositeResourceParameter" name="resetCompositeResourceParameter" bindingOperationName="resetCompositeResourceParameter" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="1b259ac9-104a-40fb-a17e-b5addafa0f0d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:resetCompositeResourceParameterRequest>\r
         <typ:compositeResourceId>?</typ:compositeResourceId>\r
         <typ:keys>\r
            <!--1 or more repetitions:-->\r
            <typ:key>?</typ:key>\r
         </typ:keys>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:resetCompositeResourceParameterRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/resourcesService/v1/resourcesServicePortType/resetCompositeResourceParameterRequest"/></con:call></con:operation><con:operation id="8f841715-ee94-4ad4-b0ad-0fed2dd8b28e" isOneWay="false" action="searchSarTreatments" name="searchSarTreatments" bindingOperationName="searchSarTreatments" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d649cfdb-f7db-495d-b114-0fb3d6e3a566" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchSarTreatmentsRequest>\r
         <v1:medicalOrganizationId>?</v1:medicalOrganizationId>\r
         <!--Zero or more repetitions:-->\r
         <v1:medicalFacilityId>?</v1:medicalFacilityId>\r
         <typ:treatmentCategoryCode>?</typ:treatmentCategoryCode>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:searchSarTreatmentsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/resourcesService/v1/resourcesServicePortType/searchSarTreatmentsRequest"/></con:call></con:operation><con:operation id="c7bc88ae-632c-43d0-bb64-1fa6d69e032e" isOneWay="false" action="setCompositeResourceParameter" name="setCompositeResourceParameter" bindingOperationName="setCompositeResourceParameter" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="42c61b57-bf8f-4392-9858-5025b364b753" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/resourcesService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setCompositeResourceParameterRequest>\r
         <typ:compositeResourceId>?</typ:compositeResourceId>\r
         <typ:parameters>\r
            <!--1 or more repetitions:-->\r
            <typ:parameter key="?">?</typ:parameter>\r
         </typ:parameters>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:setCompositeResourceParameterRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/resourcesService/v1/resourcesServicePortType/setCompositeResourceParameterRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="774ea416-f82b-4ca6-b9ba-91c11e15c15e" wsaVersion="NONE" name="routeServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/supp/rir2/routeService/v1/}routeServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?wsdl"><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="routeService" targetNamespace="http://emias.mos.ru/supp/rir2/routeService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:tns="http://emias.mos.ru/supp/rir2/routeService/v1/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:ns1="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:documentation>Версия 1.0.0</wsdl:documentation>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../system/v1/emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/supp/rir2/routeService/v1/types/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=supp.rir2.routeService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="archiveRouteOutput">
    <wsdl:part element="ns1:archiveRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRouteOutput">
    <wsdl:part element="ns1:getRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchRoutesInput">
    <wsdl:part element="ns1:searchRoutesRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchRoutesForAssignmentInput">
    <wsdl:part element="ns1:searchRoutesForAssignmentRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="restoreArchivedRouteInput">
    <wsdl:part element="ns1:restoreArchivedRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchRoutesOutput">
    <wsdl:part element="ns1:searchRoutesResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="restoreArchivedRouteOutput">
    <wsdl:part element="ns1:restoreArchivedRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRouteInput">
    <wsdl:part element="ns1:getRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRouteHistoryInput">
    <wsdl:part element="ns1:getRouteHistoryRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createRouteOutput">
    <wsdl:part element="ns1:createRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="editRouteInput">
    <wsdl:part element="ns1:editRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRouteHistoryOutput">
    <wsdl:part element="ns1:getRouteHistoryResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="editRouteOutput">
    <wsdl:part element="ns1:editRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="archiveRouteInput">
    <wsdl:part element="ns1:archiveRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createRouteInput">
    <wsdl:part element="ns1:createRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchRoutesForAssignmentOutput">
    <wsdl:part element="ns1:searchRoutesForAssignmentResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="routeServicePortType">
    <wsdl:documentation>Описание методов работы с Маршрутами движения пациентов</wsdl:documentation>
    <wsdl:operation name="archiveRoute">
      <wsdl:documentation>Метод перевода маршрута в архив</wsdl:documentation>
      <wsdl:input message="tns:archiveRouteInput"></wsdl:input>
      <wsdl:output message="tns:archiveRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createRoute">
      <wsdl:documentation>Метод создания маршрута</wsdl:documentation>
      <wsdl:input message="tns:createRouteInput"></wsdl:input>
      <wsdl:output message="tns:createRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="editRoute">
      <wsdl:documentation>Метод редактирования маршрута</wsdl:documentation>
      <wsdl:input message="tns:editRouteInput"></wsdl:input>
      <wsdl:output message="tns:editRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getRouteHistory">
      <wsdl:documentation>Метод получения истории маршрута</wsdl:documentation>
      <wsdl:input message="tns:getRouteHistoryInput"></wsdl:input>
      <wsdl:output message="tns:getRouteHistoryOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getRoute">
      <wsdl:documentation>Метод получения сведений о маршруте</wsdl:documentation>
      <wsdl:input message="tns:getRouteInput"></wsdl:input>
      <wsdl:output message="tns:getRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="restoreArchivedRoute">
      <wsdl:documentation>Метод перевода маршрута их архива</wsdl:documentation>
      <wsdl:input message="tns:restoreArchivedRouteInput"></wsdl:input>
      <wsdl:output message="tns:restoreArchivedRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchRoutesForAssignment">
      <wsdl:documentation>Метод поиска маршрутов для назначения</wsdl:documentation>
      <wsdl:input message="tns:searchRoutesForAssignmentInput"></wsdl:input>
      <wsdl:output message="tns:searchRoutesForAssignmentOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchRoutes">
      <wsdl:documentation>Метод поиска маршрутов</wsdl:documentation>
      <wsdl:input message="tns:searchRoutesInput"></wsdl:input>
      <wsdl:output message="tns:searchRoutesOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="routeServiceBinding" type="tns:routeServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="archiveRoute">
      <soap:operation soapAction="archiveRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createRoute">
      <soap:operation soapAction="createRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="editRoute">
      <soap:operation soapAction="editRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getRouteHistory">
      <soap:operation soapAction="getRouteHistory"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getRoute">
      <soap:operation soapAction="getRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="restoreArchivedRoute">
      <soap:operation soapAction="restoreArchivedRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchRoutesForAssignment">
      <soap:operation soapAction="searchRoutesForAssignment"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchRoutes">
      <soap:operation soapAction="searchRoutes"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="routeService">
    <wsdl:port binding="tns:routeServiceBinding" name="routeServicePort">
      <soap:address location="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../system/v1/emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../core/v1/emias.core.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../core/v1/emias.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../system/v1/emias.system.v1.xsd"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
						(используются в соответствии с
						переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../system/v1/emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../system/v1/emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../system/v1/emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=supp.rir2.routeService.v1.types.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/routeService/v1/types/" version="Версия 1.1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:route="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/route/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=supp.rir2.route.core.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../services/v1/supp.rir2.core.v1.xsd"/>
  <xs:element name="archiveRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода archiveRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="archiveRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода archiveRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:result"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода createRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ownerMedicalOrganizationId" type="core:ID"/>
        <xs:element name="info" type="route:RouteInfo"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода createRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="id" type="core:ID"/>
        <xs:element name="number" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="editRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода editRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element name="info" type="route:RouteInfo"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="editRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода editRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:result"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRouteHistoryRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getRouteHistory</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" name="eventsStartDate" type="xs:dateTime"/>
        <xs:element minOccurs="0" name="eventsEndDate" type="xs:dateTime"/>
        <xs:element minOccurs="0" name="pagingOptions" type="core:PagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRouteHistoryResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getRouteHistory</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="journalListPage" type="route:JournalListPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="route" type="route:Route"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="restoreArchivedRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода restoreArchivedRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="restoreArchivedRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода restoreArchivedRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:result"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchRoutesForAssignmentRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода searchRoutesForAssignment</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="diagnosisId" type="core:ID"/>
        <xs:element name="directMedicalPositionCode" type="xs:string"/>
        <xs:element maxOccurs="unbounded" name="directMedicalOrganizationId" type="core:ID"/>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="directMedicalFacilityId" type="core:ID"/>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="receiveTreatmentId" type="core:ID"/>
        <xs:element name="receiveTreatmentCategoryCode" type="xs:string"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchRoutesForAssignmentResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода searchRoutesForAssignment</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routesForAssignmentListPage" type="route:RoutesForAssignmentListPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchRoutesRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода searchRoutes</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="isActive" type="xs:boolean"/>
        <xs:element minOccurs="0" name="number" type="xs:string"/>
        <xs:element minOccurs="0" name="document" type="xs:string"/>
        <xs:element minOccurs="0" name="diagnosisCode" type="xs:string"/>
        <xs:element minOccurs="0" name="directMedicalPositionCode" type="xs:string"/>
        <xs:element minOccurs="0" name="directMedicalOrganizationId" type="core:ID"/>
        <xs:element minOccurs="0" name="directMedicalFacilityId" type="core:ID"/>
        <xs:element minOccurs="0" name="receiveMedicalOrganizationId" type="core:ID"/>
        <xs:element minOccurs="0" name="receiveMedicalFacilityId" type="core:ID"/>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="receiveTreatmentCode" type="xs:string"/>
        <xs:element minOccurs="0" name="receiveTreatmentCategoryCode" type="xs:string"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchRoutesResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода searchRoutes</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeListPage" type="route:RouteListPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=supp.rir2.route.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/route/core/v1/" version="Версия 1.1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../services/v1/supp.rir2.core.v1.xsd"/>
  <xs:complexType name="Route">
    <xs:annotation>
      <xs:documentation>Маршрут движения пациентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="creationDate" type="xs:dateTime"/>
      <xs:element name="ownerMedicalOrganizationId" type="core:ID"/>
      <xs:element name="lastModificationDate" type="xs:dateTime"/>
      <xs:element name="document" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnosis" type="tns:Diagnosis"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="directMedicalPosition" type="tns:MedicalPosition"/>
      <xs:element maxOccurs="unbounded" name="receiveTreatment" type="tns:Treatment"/>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="tns:MedicalOrganization"/>
      <xs:element maxOccurs="unbounded" name="receiveMedicalOrganization" type="tns:MedicalOrganization"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="number" type="xs:string" use="required"/>
    <xs:attribute name="isActive" type="xs:boolean" use="required"/>
  </xs:complexType>
  <xs:complexType name="RouteInfo">
    <xs:annotation>
      <xs:documentation>Информация о маршруте</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="document" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnosis" type="tns:Diagnosis"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="directMedPosition" type="tns:MedicalPosition"/>
      <xs:element maxOccurs="unbounded" name="receiveTreatment" type="tns:Treatment"/>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="tns:MedicalOrganizationWithTitle"/>
      <xs:element maxOccurs="unbounded" name="receiveMedicalOrganization" type="tns:MedicalOrganizationWithTitle"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Diagnosis">
    <xs:annotation>
      <xs:documentation>Диагноз</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="code" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="MedicalPosition">
    <xs:annotation>
      <xs:documentation>Должности медработников, которые могут направить пациентов по маршруту</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="code" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="MedicalOrganization">
    <xs:annotation>
      <xs:documentation>Медицинская организация</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="core:ID"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="medicalFacilityId" type="core:ID"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MedicalObject">
    <xs:annotation>
      <xs:documentation>Информация о мед. учереждении</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="core:ID"/>
      <xs:element name="title" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationWithTitle">
    <xs:annotation>
      <xs:documentation>Медицинская организация с доп информацией</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="medicalOrganization" type="tns:MedicalObject"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="medicalFacility" type="tns:MedicalObject"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Манипуляция</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="categoryCode" type="xs:string"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="code" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:simpleType name="EventType">
    <xs:annotation>
      <xs:documentation>Тип изменения маршрута</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="CREATE"/>
      <xs:enumeration value="EDIT"/>
      <xs:enumeration value="ARCHIVE"/>
      <xs:enumeration value="RESTORE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="RoutesForAssignmentListPage">
    <xs:annotation>
      <xs:documentation>Страница элементов информации о маршрутах для назначения</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="routesForAssignmentListItem" type="tns:RoutesForAssignmentListItem"></xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RoutesForAssignmentListItem">
    <xs:annotation>
      <xs:documentation>Информация о маршруте для назначения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="document" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnosis" type="tns:Diagnosis"/>
      <xs:element maxOccurs="unbounded" name="receiveTreatment" type="tns:Treatment"/>
      <xs:element name="directMedicalOrganization" type="tns:MedicalOrganization"/>
      <xs:element maxOccurs="unbounded" name="receiveMedicalOrganization" type="tns:MedicalOrganization"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="number" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="RouteListPage">
    <xs:annotation>
      <xs:documentation>Страница элементов со сведениями о маршрутах</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="routesListItem" type="tns:RoutesListItem"></xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RoutesListItem">
    <xs:annotation>
      <xs:documentation>Элемент страницы со сведениями о маршрутах</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ownerMedicalOrganizationId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="tns:MedicalOrganization"/>
      <xs:element maxOccurs="unbounded" name="receiveMedicalOrganization" type="tns:MedicalOrganization"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="number" type="xs:string" use="required"/>
    <xs:attribute name="isActive" type="xs:boolean" use="required"/>
  </xs:complexType>
  <xs:complexType name="JournalListPage">
    <xs:annotation>
      <xs:documentation>Страница элементов с журналом маршрута</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="journalListItem" type="tns:JournalListItem"></xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RouteChanges">
    <xs:annotation>
      <xs:documentation>Сведения об изменениях маршрута</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnosisCode" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="directMedicalPosition" type="tns:MedicalPosition"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receiveTreatmentId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="directMedicalOrganization" type="tns:MedicalOrganizationWithTitle"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receiveMedicalOrganization" type="tns:MedicalOrganizationWithTitle"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ChangeDetails">
    <xs:annotation>
      <xs:documentation>Сведения о деталях изменения маршрута</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="isActive" type="xs:boolean"/>
      <xs:element minOccurs="0" name="document" type="xs:string"/>
      <xs:element minOccurs="0" name="adding" type="tns:RouteChanges"/>
      <xs:element minOccurs="0" name="deletion" type="tns:RouteChanges"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="JournalListItem">
    <xs:annotation>
      <xs:documentation>Элемент журнала маршрута</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="eventType" type="tns:EventType"/>
      <xs:element name="eventDate" type="xs:dateTime"/>
      <xs:element name="authorMedicalOrganizationId" type="core:ID"/>
      <xs:element name="authorJobExecutionId" type="core:ID"/>
      <xs:element name="changeDetails" type="tns:ChangeDetails"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="routeId" type="core:ID" use="required"/>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../services/v1/supp.rir2.core.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/core/v1/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/supp/rir2/core/v1/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?xsd=../../core/v1/emias.core.v1.xsd"/>
  <!--rules components-->
  <xs:complexType name="TreatmentsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинской манипуляции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AgeGroupsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Возрастных групп</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="ageGroupId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Возрастной группы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleTimeInterval">
    <xs:annotation>
      <xs:documentation>Временной интервал Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TimeInterval">
        <xs:sequence>
          <xs:element name="start" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время начала интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время окончания интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="RuleTypeId">
    <xs:annotation>
      <xs:documentation>Идентификатор типа Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:simpleType name="LocationId">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:complexType name="RuleDatePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!--excluded dates definition-->
  <xs:complexType name="ExcludedDates">
    <xs:annotation>
      <xs:documentation>Описание исключаемых дней</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="excludedDay" type="xs:date">
        <xs:annotation>
          <xs:documentation>Исключаемые даты</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isExcludedHoliday" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Исключая праздничные дни" (в соответствии с производственным
                        календарем)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="7" minOccurs="0" name="excludedDayOfWeek" type="DayOfWeekNumber">
        <xs:annotation>
          <xs:documentation>Исключаемые дни недели</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--date templates definitions-->
  <xs:complexType name="DayOfMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно в заданные даты каждого календарного месяца"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="31" name="dayOfMonth" type="DayOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер дня месяца (число от 1 до 31)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekByMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно по дням недели" (например, каждый 3-й понедельник месяца)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="5" name="week" type="WeekOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер недели месяца (число от 1 до 5)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SpecialDayDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "В конкретные даты" (например, 25 января 2015 года и т. д)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="day" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EvenDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По четным или нечетным числам"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element name="isEven" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак «Четные числа»</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По дням недели"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="7" name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="DatesTemplate">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип описания Шаблона дат</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="dayOfWeek">
    <xs:annotation>
      <xs:documentation>День недели</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:int">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="7"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <!--templates components-->
  <xs:simpleType name="DayOfWeekNumber">
    <xs:annotation>
      <xs:documentation>Номер дня недели</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="7"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер дня месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WeekOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер недели месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="5"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources schedule-->
  <xs:complexType name="CompositeResourceSchedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="compositeResource" type="CompositeResource">
            <xs:annotation>
              <xs:documentation>Композитный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceScheduleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Расписании композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="schedulePeriod"/>
                <xs:element ref="scheduleActiveState"/>
              </xs:sequence>
              <xs:attribute name="isLocked" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность
                                        внесения изменений в определение его содержания</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceScheduleBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="resourceScheduleStatus">
            <xs:annotation>
              <xs:documentation>Статус</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completeness" type="xs:unsignedByte">
            <xs:annotation>
              <xs:documentation>Полнота расписания</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceScheduleStatus" type="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статус Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статусы Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_DEFINED"/>
      <xs:enumeration value="DIRTY"/>
      <xs:enumeration value="READY"/>
      <xs:enumeration value="CALCULATION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopySarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SarScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopyArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ArScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources-->
  <xs:complexType name="SpecialAvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Специальный доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="Equipment">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Специализированный кабинет"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="SPECIAL_AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="JobExecution">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Исполнение должности"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResource">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="info" type="CompositeResourceInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithTreatments">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс" со сведениями о проводимых манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="ID"/>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID"/>
      <xs:element name="resource" type="CompositeResourceForAssignment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignment">
    <xs:annotation>
      <xs:documentation>Краткие сведения о ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="medicalOrganization" type="MedicalOrganizationShort"/>
      <xs:element name="medicalFacility" type="MedicalFacilityShort"/>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element name="addressObject" type="AddressObjectShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressObjectShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об Адресном объекте</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressShort" type="AddressShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об адресе</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressString" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="resourceKind">
        <xs:annotation>
          <xs:documentation>Вид Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parentId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="parentTypeId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор типа сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="CompositeResourceType">
        <xs:annotation>
          <xs:documentation>Тип Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalOrganizationId">
        <xs:annotation>
          <xs:documentation>Идентификатор МО, которой принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="department" type="Department">
        <xs:annotation>
          <xs:documentation>Структурное подразделение МО, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="functionTitle" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="functionVolume" type="xs:float">
        <xs:annotation>
          <xs:documentation>Объем функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalFacilityId">
        <xs:annotation>
          <xs:documentation>Идентификатор МУ, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="Location">
        <xs:annotation>
          <xs:documentation>Локация, связанная с Композитным ресурсом</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceType">
    <xs:annotation>
      <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="syncStatus" type="ResourceSyncStatuses">
            <xs:annotation>
              <xs:documentation>Статус синхронизации</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="parameters" type="ResourceParameterCollection">
            <xs:annotation>
              <xs:documentation>Параметры</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourceParameterCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Параметров ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="parameter" type="ResourceParameter">
        <xs:annotation>
          <xs:documentation>Параметр ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceParameter">
    <xs:annotation>
      <xs:documentation>Параметр ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="KeyValuePair">
        <xs:attribute name="ownerSystemName" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Владелец параметра (шифр системы-потребителя, породившего параметр)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceKind" type="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Вид Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Виды Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AVAILABLE_RESOURCE"/>
      <xs:enumeration value="SPECIAL_AVAILABLE_RESOURCE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceSyncStatuses">
    <xs:annotation>
      <xs:documentation>Статусы синхронизации Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_PROGRESS"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
    </xs:restriction>
  </xs:simpleType>
  <!--MO/MU shedule and its components-->
  <xs:complexType name="Schedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписаниие МО/МУ"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="medicalFacilityId"/>
          <xs:element ref="schedulePeriod"/>
          <xs:element ref="scheduleActiveState"/>
        </xs:sequence>
        <xs:attribute name="isMo" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак принадлежности расписания МО</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isLocked" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность внесения
                            изменений в определение его содержания</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="scheduleId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="locationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="scheduleActiveState" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>Статус "Действующее" для Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="schedulePeriod" type="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeekDefinition">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeek">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursCollection">
    <xs:annotation>
      <xs:documentation>Сведения о расписании работы учереждения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="7" minOccurs="0" name="workHoursForDayOfWeek" type="WorkHoursForDayOfWeekDefinition">
        <xs:annotation>
          <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--business entities which belong to SVMR and their components-->
  <xs:complexType name="JobExecution">
    <xs:annotation>
      <xs:documentation>Сущность "Исполнение должности"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование должности в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор должности (в соответствии с Номенклатурой должностей
                                медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="employee" type="Employee">
            <xs:annotation>
              <xs:documentation>Сведения о работнике МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionVolume" type="xs:float">
            <xs:annotation>
              <xs:documentation>Ставка</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionPeriod">
            <xs:annotation>
              <xs:documentation>Период исполнения должности</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="DatePeriod">
                  <xs:sequence>
                    <xs:element name="start" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата начала периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element minOccurs="0" name="end" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата окончания периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
          <xs:element ref="medicalOrganizationId"/>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maternityLeave" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак "Декретный отпуск"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultMedicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ в котором "по умолчанию" осуществляется деятельность
                                работника</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, в которой "по умолчанию" осуществляется деятельность работника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Location">
    <xs:annotation>
      <xs:documentation>Сущность "Локация"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="roomTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование кабинета (номер на табличке двери кабинета)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stage" type="xs:short">
            <xs:annotation>
              <xs:documentation>Этаж, на котором располагается Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subBuilding" type="xs:string">
            <xs:annotation>
              <xs:documentation>Корпус (строение) - используется в случае, если по адресу Адресного
                                объекта располагается несколько "корпусов"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="building" type="Building">
            <xs:annotation>
              <xs:documentation>Сведения об Адресном объекте</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="medicalFacilityId">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ, которому принадлежит Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EquipmentProfile">
    <xs:annotation>
      <xs:documentation>Элемент справочника "Профиль оборудования".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>Оборудование</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="equipmentId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор единицы Медицинского оборудования в ЕМИАС.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentModel" type="xs:string">
            <xs:annotation>
              <xs:documentation>Модель оборудования в ЕМИАС.СВМР.2</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentProfile" type="EquipmentProfile">
            <xs:annotation>
              <xs:documentation>Профиль Оборудования</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentTypeId" type="ID">
            <xs:annotation>
              <xs:documentation>Наименование оборудования в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalOrganizationId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="personalizedService" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак индивидуального обслуживания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="capacityForRoom" type="xs:int">
            <xs:annotation>
              <xs:documentation>Количество одновременно обслуживаемых пациентов с учетом ограничивающих условий Локации МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, к которой прикреплено оборудование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="treatments">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="treatment">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="info" type="Treatment">
                        <xs:annotation>
                          <xs:documentation>Сведения о Медицинской манипуляции</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="useByDefault" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Признак "Использовать по умолчанию" в определении Правила рабочего времени.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Department">
    <xs:annotation>
      <xs:documentation>Структурное подразделение</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование структурного подразделения МО в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор структурного подразделения (в соответствии с Номенклатурой
                                структурных подразделений медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Сведения о работнике МО</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="snils" type="xs:string">
            <xs:annotation>
              <xs:documentation>СНИЛС</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lastName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Фамилия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="firstName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Имя</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="middleName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Отчество</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Building">
    <xs:annotation>
      <xs:documentation>Адресный объект</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="buildingAddress" type="xs:string">
            <xs:annotation>
              <xs:documentation>Строковое представление адреса Адресного объекта</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для компонентов сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--nsi-->
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:sequence>
          <xs:element name="categoryCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Код категории медицинской манипуляции. Соответствует полю "code" справочника "Категории медицинских манипуляций".</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Specialization">
    <xs:annotation>
      <xs:documentation>Специализация</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="TitledNsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников с полем title</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="archived" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Признак "Архивная запись"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types and elements-->
  <xs:element name="entityVersion" type="xs:long">
    <xs:annotation>
      <xs:documentation>Версия сущности ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="VersionedEntityBase">
    <xs:annotation>
      <xs:documentation>Версионированная сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:attribute name="version" type="xs:long" use="required">
          <xs:annotation>
            <xs:documentation>Версия сущности</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовая сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="warnings" type="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений (предупреждений) об ошибках</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="ProcessingResultBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, определяющий результат выполнения операции обработки сущностей
                или их компонентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="succeededNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Количество обработанных сущностей (или компоненотов сущности)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="totalNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Общее количество сущностей (или компонентов сущности), подлежащих обработке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint></con:endpoints><con:operation id="b8dbe009-3481-46e3-945d-68df0617e20d" isOneWay="false" action="archiveRoute" name="archiveRoute" bindingOperationName="archiveRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a5d7d4e3-d607-45c1-8f10-c6e057bffdf4" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:archiveRouteRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:archiveRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/archiveRouteRequest"/></con:call></con:operation><con:operation id="50dcb7f0-cac4-44b4-9350-b6459aceb039" isOneWay="false" action="createRoute" name="createRoute" bindingOperationName="createRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="167418a4-b73a-45ce-822b-4ee19feed5ef" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:ownerMedicalOrganizationId>?</typ:ownerMedicalOrganizationId>\r
         <typ:info>\r
            <v1:document>?</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosis id="?" code="?">\r
               <v1:title>?</v1:title>\r
            </v1:diagnosis>\r
            <!--Zero or more repetitions:-->\r
            <v1:directMedPosition id="?" code="?">\r
               <v1:title>?</v1:title>\r
            </v1:directMedPosition>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="?" code="?">\r
               <v1:title>?</v1:title>\r
               <v1:categoryCode>?</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>?</v1:id>\r
                  <v1:title>?</v1:title>\r
               </v1:medicalOrganization>\r
               <!--Zero or more repetitions:-->\r
               <v1:medicalFacility>\r
                  <v1:id>?</v1:id>\r
                  <v1:title>?</v1:title>\r
               </v1:medicalFacility>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>?</v1:id>\r
                  <v1:title>?</v1:title>\r
               </v1:medicalOrganization>\r
               <!--Zero or more repetitions:-->\r
               <v1:medicalFacility>\r
                  <v1:id>?</v1:id>\r
                  <v1:title>?</v1:title>\r
               </v1:medicalFacility>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
         <!--Optional:-->\r
         <v11:options>\r
            <!--Zero or more repetitions:-->\r
            <v11:entry key="?">?</v11:entry>\r
         </v11:options>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/></con:call></con:operation><con:operation id="4384c043-04e7-40ee-a041-135d5deb7cee" isOneWay="false" action="editRoute" name="editRoute" bindingOperationName="editRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2d6d4c35-1903-4994-b9f3-eef791f557e5" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:editRouteRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <typ:info>\r
            <v1:document>?</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosis id="?" code="?">\r
               <v1:title>?</v1:title>\r
            </v1:diagnosis>\r
            <!--Zero or more repetitions:-->\r
            <v1:directMedPosition id="?" code="?">\r
               <v1:title>?</v1:title>\r
            </v1:directMedPosition>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="?" code="?">\r
               <v1:title>?</v1:title>\r
               <v1:categoryCode>?</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>?</v1:id>\r
                  <v1:title>?</v1:title>\r
               </v1:medicalOrganization>\r
               <!--Zero or more repetitions:-->\r
               <v1:medicalFacility>\r
                  <v1:id>?</v1:id>\r
                  <v1:title>?</v1:title>\r
               </v1:medicalFacility>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>?</v1:id>\r
                  <v1:title>?</v1:title>\r
               </v1:medicalOrganization>\r
               <!--Zero or more repetitions:-->\r
               <v1:medicalFacility>\r
                  <v1:id>?</v1:id>\r
                  <v1:title>?</v1:title>\r
               </v1:medicalFacility>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
         <!--Optional:-->\r
         <v11:options>\r
            <!--Zero or more repetitions:-->\r
            <v11:entry key="?">?</v11:entry>\r
         </v11:options>\r
      </typ:editRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/editRouteRequest"/></con:call></con:operation><con:operation id="fa5ff453-8b82-4bd0-92f8-f4476e0cfb5b" isOneWay="false" action="getRoute" name="getRoute" bindingOperationName="getRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="208c73cc-01aa-4e4a-ac4e-08ccc682e9ca" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getRouteRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/getRouteRequest"/></con:call></con:operation><con:operation id="a0483efe-8da6-478c-a797-254be4e69935" isOneWay="false" action="getRouteHistory" name="getRouteHistory" bindingOperationName="getRouteHistory" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="19b58a83-bac0-45ba-b7cf-9b74699fd69d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getRouteHistoryRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <!--Optional:-->\r
         <typ:eventsStartDate>?</typ:eventsStartDate>\r
         <!--Optional:-->\r
         <typ:eventsEndDate>?</typ:eventsEndDate>\r
         <!--Optional:-->\r
         <typ:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </typ:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getRouteHistoryRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/getRouteHistoryRequest"/></con:call></con:operation><con:operation id="03e41507-1bb8-4e3e-8d36-d76b8447b13e" isOneWay="false" action="restoreArchivedRoute" name="restoreArchivedRoute" bindingOperationName="restoreArchivedRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a1317941-b662-4768-8ac9-de4d8ae2c3aa" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:restoreArchivedRouteRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:restoreArchivedRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/restoreArchivedRouteRequest"/></con:call></con:operation><con:operation id="217c7c33-6f4a-46e1-956b-ed4a87491940" isOneWay="false" action="searchRoutes" name="searchRoutes" bindingOperationName="searchRoutes" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="19168fc5-1573-4fb3-82cb-c9ce93a90cf9" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchRoutesRequest>\r
         <!--Optional:-->\r
         <typ:isActive>?</typ:isActive>\r
         <!--Optional:-->\r
         <typ:number>?</typ:number>\r
         <!--Optional:-->\r
         <typ:document>?</typ:document>\r
         <!--Optional:-->\r
         <typ:diagnosisCode>?</typ:diagnosisCode>\r
         <!--Optional:-->\r
         <typ:directMedicalPositionCode>?</typ:directMedicalPositionCode>\r
         <!--Optional:-->\r
         <typ:directMedicalOrganizationId>?</typ:directMedicalOrganizationId>\r
         <!--Optional:-->\r
         <typ:directMedicalFacilityId>?</typ:directMedicalFacilityId>\r
         <!--Optional:-->\r
         <typ:receiveMedicalOrganizationId>?</typ:receiveMedicalOrganizationId>\r
         <!--Optional:-->\r
         <typ:receiveMedicalFacilityId>?</typ:receiveMedicalFacilityId>\r
         <!--Zero or more repetitions:-->\r
         <typ:receiveTreatmentCode>?</typ:receiveTreatmentCode>\r
         <!--Optional:-->\r
         <typ:receiveTreatmentCategoryCode>?</typ:receiveTreatmentCategoryCode>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:searchRoutesRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/searchRoutesRequest"/></con:call></con:operation><con:operation id="635c0b07-2446-4ea9-9c65-10eccd7a67a6" isOneWay="false" action="searchRoutesForAssignment" name="searchRoutesForAssignment" bindingOperationName="searchRoutesForAssignment" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="bc59df1e-b6c4-41f7-b087-4ce4933a12d8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchRoutesForAssignmentRequest>\r
         <!--Optional:-->\r
         <typ:diagnosisId>?</typ:diagnosisId>\r
         <typ:directMedicalPositionCode>?</typ:directMedicalPositionCode>\r
         <!--1 or more repetitions:-->\r
         <typ:directMedicalOrganizationId>?</typ:directMedicalOrganizationId>\r
         <!--Zero or more repetitions:-->\r
         <typ:directMedicalFacilityId>?</typ:directMedicalFacilityId>\r
         <!--Zero or more repetitions:-->\r
         <typ:receiveTreatmentId>?</typ:receiveTreatmentId>\r
         <typ:receiveTreatmentCategoryCode>?</typ:receiveTreatmentCategoryCode>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:searchRoutesForAssignmentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/searchRoutesForAssignmentRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="9a110459-ea86-4beb-97d6-0e2d67433fa7" wsaVersion="NONE" name="sarScheduleServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/supp/rir2/sarScheduleService/v1/}sarScheduleServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?wsdl"><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="sarScheduleService" targetNamespace="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:tns="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:ns1="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:documentation>Версия 1.2.0</wsdl:documentation>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../system/v1/emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=supp.rir2.sarScheduleService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="clearSarScheduleInput">
    <wsdl:part element="ns1:clearSarScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="checkRouteInScheduleInput">
    <wsdl:part element="ns1:checkRouteInScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateSarScheduleRuleOutput">
    <wsdl:part element="ns1:updateSarScheduleRuleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateSarScheduleRuleInput">
    <wsdl:part element="ns1:updateSarScheduleRuleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSarScheduleListInput">
    <wsdl:part element="ns1:getSarScheduleListRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createSarScheduleRuleOutput">
    <wsdl:part element="ns1:createSarScheduleRuleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSarScheduleOutput">
    <wsdl:part element="ns1:getSarScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="copySarScheduleOutput">
    <wsdl:part element="ns1:copySarScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSarScheduleRuleTypeListOutput">
    <wsdl:part element="ns1:getSarScheduleRuleTypeListResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSarScheduleListOutput">
    <wsdl:part element="ns1:getSarScheduleListResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="checkRouteInScheduleOutput">
    <wsdl:part element="ns1:checkRouteInScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSarScheduleRuleTypeListInput">
    <wsdl:part element="ns1:getSarScheduleRuleTypeListRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSarScheduleRuleInput">
    <wsdl:part element="ns1:deleteSarScheduleRuleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSarScheduleRuleOutput">
    <wsdl:part element="ns1:deleteSarScheduleRuleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="copySarScheduleInput">
    <wsdl:part element="ns1:copySarScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="clearSarScheduleOutput">
    <wsdl:part element="ns1:clearSarScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="applyChangesToSarScheduleOutput">
    <wsdl:part element="ns1:applyChangesToSarScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSarScheduleInput">
    <wsdl:part element="ns1:getSarScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="applyChangesToSarScheduleInput">
    <wsdl:part element="ns1:applyChangesToSarScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createSarScheduleRuleInput">
    <wsdl:part element="ns1:createSarScheduleRuleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="sarScheduleServicePortType">
    <wsdl:operation name="getSarScheduleRuleTypeList">
      <wsdl:input message="tns:getSarScheduleRuleTypeListInput"></wsdl:input>
      <wsdl:output message="tns:getSarScheduleRuleTypeListOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createSarScheduleRule">
      <wsdl:input message="tns:createSarScheduleRuleInput"></wsdl:input>
      <wsdl:output message="tns:createSarScheduleRuleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateSarScheduleRule">
      <wsdl:input message="tns:updateSarScheduleRuleInput"></wsdl:input>
      <wsdl:output message="tns:updateSarScheduleRuleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteSarScheduleRule">
      <wsdl:input message="tns:deleteSarScheduleRuleInput"></wsdl:input>
      <wsdl:output message="tns:deleteSarScheduleRuleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSarSchedule">
      <wsdl:input message="tns:getSarScheduleInput"></wsdl:input>
      <wsdl:output message="tns:getSarScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSarScheduleList">
      <wsdl:input message="tns:getSarScheduleListInput"></wsdl:input>
      <wsdl:output message="tns:getSarScheduleListOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="copySarSchedule">
      <wsdl:input message="tns:copySarScheduleInput"></wsdl:input>
      <wsdl:output message="tns:copySarScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="clearSarSchedule">
      <wsdl:input message="tns:clearSarScheduleInput"></wsdl:input>
      <wsdl:output message="tns:clearSarScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="applyChangesToSarSchedule">
      <wsdl:input message="tns:applyChangesToSarScheduleInput"></wsdl:input>
      <wsdl:output message="tns:applyChangesToSarScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="checkRouteInSchedule">
      <wsdl:input message="tns:checkRouteInScheduleInput"></wsdl:input>
      <wsdl:output message="tns:checkRouteInScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="sarScheduleServiceBinding" type="tns:sarScheduleServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getSarScheduleRuleTypeList">
      <soap:operation soapAction="getSarScheduleRuleTypeList"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createSarScheduleRule">
      <soap:operation soapAction="createSarScheduleRule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateSarScheduleRule">
      <soap:operation soapAction="updateSarScheduleRule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteSarScheduleRule">
      <soap:operation soapAction="deleteSarScheduleRule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSarSchedule">
      <soap:operation soapAction="getSarSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSarScheduleList">
      <soap:operation soapAction="getSarScheduleList"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="copySarSchedule">
      <soap:operation soapAction="copySarSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="clearSarSchedule">
      <soap:operation soapAction="clearSarSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="applyChangesToSarSchedule">
      <soap:operation soapAction="applyChangesToSarSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="checkRouteInSchedule">
      <soap:operation soapAction="checkRouteInSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="sarScheduleService">
    <wsdl:port binding="tns:sarScheduleServiceBinding" name="sarScheduleServicePort">
      <soap:address location="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../system/v1/emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../core/v1/emias.core.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../core/v1/emias.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../system/v1/emias.system.v1.xsd"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
						(используются в соответствии с
						переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../system/v1/emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../system/v1/emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../system/v1/emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=supp.rir2.sarScheduleService.v1.types.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" version="Версия 1.1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=supp.rir2.core.v1.xsd"/>
  <xs:element name="sarScheduleId" type="SarScheduleId">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания СДР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="SarScheduleId">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="core:ID"/>
  </xs:simpleType>
  <xs:complexType name="SarSchedule">
    <xs:annotation>
      <xs:documentation>Расписание СДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="schedule" type="core:Schedule">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="sar" type="core:SpecialAvailableResource">
            <xs:annotation>
              <xs:documentation>Специальный доступный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="rules" type="sarScheduleRuleCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Правил расписания СДР</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="sarScheduleRuleCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" ref="sarScheduleRule"/>
    </xs:sequence>
  </xs:complexType>
  <!--schedule rule definition-->
  <xs:element name="sarScheduleRule">
    <xs:annotation>
      <xs:documentation>Правило расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:restriction base="SarScheduleRule">
          <xs:sequence>
            <xs:element ref="sarScheduleId"/>
            <xs:element name="info" type="SarScheduleRuleInfo">
              <xs:annotation>
                <xs:documentation>Сведения о Правиле расписания СДР</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="id" type="core:ID" use="required">
            <xs:annotation>
              <xs:documentation>Идентификатор сущности</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="version" type="xs:long" use="required">
            <xs:annotation>
              <xs:documentation>Версия сущности</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:restriction>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="SarScheduleRule">
    <xs:annotation>
      <xs:documentation>Правило расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="sarScheduleId"/>
          <xs:element minOccurs="0" name="info" type="SarScheduleRuleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Правиле расписания СДР</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SarScheduleRuleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Правиле расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="typeId" type="core:RuleTypeId">
        <xs:annotation>
          <xs:documentation>Тип Правила расписания СДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="comment" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="datePeriod" type="core:RuleDatePeriod">
        <xs:annotation>
          <xs:documentation>Период действия Правила расписания СДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateTemplate" type="core:DatesTemplate">
        <xs:annotation>
          <xs:documentation>Шаблон выбора дней</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="excludedDates" type="core:ExcludedDates">
        <xs:annotation>
          <xs:documentation>Исключенные дни</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="timeIntervals">
        <xs:annotation>
          <xs:documentation>Коллекция временных интервалов Правила расписания СДР</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="timeInterval" type="core:RuleTimeInterval">
              <xs:annotation>
                <xs:documentation>Временной интервал Правила расписания СДР</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="ageGroups" type="core:AgeGroupsIdCollection">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов возрастных групп, на которые распространяются Правила
                        расписания СДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="treatments" type="core:TreatmentsIdCollection">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов Медицинских манипуляций, включенных в Правило расписания
                        СДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="routes">
        <xs:annotation>
          <xs:documentation>Сведения о Маршрутах, включенных в Правило расписания СДР</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="allowedAppointmentFromSelfMO" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Признак, разрешающий запись из принимающей Медицинской организации</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="routesIdCollection" type="RouteIdCollection">
              <xs:annotation>
                <xs:documentation>Идентификатор Типа правила СДР</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="core:LocationId"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ruleInfoWithSarScheduleId">
    <xs:annotation>
      <xs:documentation>Пара "Идентификатор СДР - сведения о Правиле расписания СДР"</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="sarScheduleId" type="SarScheduleId">
        <xs:annotation>
          <xs:documentation>Идентификатор Расписания СДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="info" type="SarScheduleRuleInfo">
        <xs:annotation>
          <xs:documentation>Сведения о Правиле расписания СДР</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RouteIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Идентификаторов Маршрутов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="routeId" type="core:ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Маршрута</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--schedule rules' types definition-->
  <xs:complexType name="SarScheduleRuleType">
    <xs:annotation>
      <xs:documentation>Сущность "Тип правила расписания СДР"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>Описание</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="kind" type="core:SarScheduleRuleTypeKinds">
            <xs:annotation>
              <xs:documentation>Вид Типа правила расписания СДР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="priority" type="SarScheduleRuleTypePriority">
            <xs:annotation>
              <xs:documentation>Приоритет</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="allowedIntersection">
            <xs:annotation>
              <xs:documentation>Коллекция идентификаторов Типов правил СДР с которыми разрешены
                                пересечения временных интервалов</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="typeId" type="core:RuleTypeId">
                  <xs:annotation>
                    <xs:documentation>Идентификатор Типа правила СДР</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="SarScheduleRuleTypePriority">
    <xs:annotation>
      <xs:documentation>Приоритет Типа правила расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="99"/>
    </xs:restriction>
  </xs:simpleType>
  <!--lists of entities-->
  <xs:complexType name="SarScheduleListItem">
    <xs:annotation>
      <xs:documentation>Элемент результата отбора сведений о Расписаниях СДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="core:schedulePeriod"/>
                <xs:element ref="core:scheduleActiveState"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SarScheduleListResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о Расписаниях СДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="sarScheduleListItem" type="core:CompositeResourceScheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписаниии СДР</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="sarId" type="core:ID" use="required">
          <xs:annotation>
            <xs:documentation>Идентификатор Специального доступного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SarScheduleRuleTypeListResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о Типах правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="sarScheduleRuleType" type="SarScheduleRuleType">
            <xs:annotation>
              <xs:documentation>Тип правила расписания СДР</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--result definition for the schedules' copy operation-->
  <xs:complexType name="SarScheduleCopyResult">
    <xs:annotation>
      <xs:documentation>Результат выполнения операции копирования Расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ProcessingResultBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="errors">
            <xs:annotation>
              <xs:documentation>Коллекция ошибок копирования Правил расписания СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="error" type="SarScheduleCopyResultError">
                  <xs:annotation>
                    <xs:documentation>Сведения об ошибке копирования Правила расписания СДР</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="result" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Результат выполнения операции копирования</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SarScheduleCopyResultError">
    <xs:annotation>
      <xs:documentation>Сведения об ошибке копирования Правила расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ruleId" type="core:ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Правила расписания СДР, к которому относятся сообщения об ошибках</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorMessages" type="core:ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--requests & responses (methods to manage sar shedules)-->
  <xs:element name="getSarScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getSarSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="1" ref="sarScheduleId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getSarScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getSarSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" name="sarSchedule" type="SarSchedule"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getSarScheduleListRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getSarScheduleList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="sarId" type="core:ID">
          <xs:annotation>
            <xs:documentation>Идентификатор Специального доступного ресурса</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="core:schedulePeriod"/>
        <xs:element maxOccurs="4" minOccurs="0" ref="core:resourceScheduleStatus"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getSarScheduleListResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getSarScheduleList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="SarScheduleListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="copySarScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода copySarSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="1" name="sarScheduleCopyPair">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="sarScheduleIdFrom" type="SarScheduleId">
                <xs:annotation>
                  <xs:documentation>Идентификатор Расписания СДР из которого копируются правила</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="sarScheduleIdTo" type="SarScheduleId">
                <xs:annotation>
                  <xs:documentation>Идентификатор Расписания СДР в который копируются правила</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="sarScheduleRuleTypeKinds">
          <xs:annotation>
            <xs:documentation>Перечень видов Типов правил расписания СДР, подлежащих копированию</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="4" name="sarScheduleRuleTypeKind" type="core:CopySarScheduleRuleTypeKinds">
                <xs:annotation>
                  <xs:documentation>Вид Типов правил расписания СДР</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="copySarScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода copySarSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:operationId"/>
        <xs:element maxOccurs="unbounded" minOccurs="1" name="result">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="1" name="sarScheduleIdTo" type="SarScheduleId"/>
              <xs:element minOccurs="1" name="copyResult" type="SarScheduleCopyResult">
                <xs:annotation>
                  <xs:documentation>Результат выполнения операции копирования Расписания СДР</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="clearSarScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода clearSarSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="sarScheduleId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="clearSarScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода clearSarSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="applyChangesToSarScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода applyChangesToSarSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="sarScheduleId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="applyChangesToSarScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода applyChangesToSarSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to manage schedules' rules)-->
  <xs:element name="createSarScheduleRuleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода createSarScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" name="ruleInfoWithSarScheduleId" type="ruleInfoWithSarScheduleId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createSarScheduleRuleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода createSarScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
        <xs:element minOccurs="0" ref="core:warnings"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updateSarScheduleRuleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода updateSarScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="sarScheduleRule"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updateSarScheduleRuleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода updateSarScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
        <xs:element minOccurs="0" ref="core:warnings"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteSarScheduleRuleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода deleteSarScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" name="sarScheduleRule">
          <xs:annotation>
            <xs:documentation>Правило расписания СДР</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:complexContent>
              <xs:restriction base="SarScheduleRule">
                <xs:sequence>
                  <xs:element ref="sarScheduleId"/>
                  <xs:element maxOccurs="0" minOccurs="0" name="info" type="SarScheduleRuleInfo">
                    <xs:annotation>
                      <xs:documentation>Сведения о Правиле расписания СДР</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                </xs:sequence>
                <xs:attribute name="id" type="core:ID" use="required">
                  <xs:annotation>
                    <xs:documentation>Идентификатор сущности</xs:documentation>
                  </xs:annotation>
                </xs:attribute>
                <xs:attribute name="version" type="xs:long" use="required">
                  <xs:annotation>
                    <xs:documentation>Версия сущности</xs:documentation>
                  </xs:annotation>
                </xs:attribute>
              </xs:restriction>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteSarScheduleRuleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода deleteSarScheduleRule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to manage shedules rules' types)-->
  <xs:element name="getSarScheduleRuleTypeListRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getSarScheduleRuleTypeList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getSarScheduleRuleTypeListResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getSarScheduleRuleTypeList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="SarScheduleRuleTypeListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="checkRouteInScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода checkRouteInSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="checkRouteInScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода checkRouteInSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="SarScheduleRulesListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="SarScheduleRulesListResultPage">
    <xs:annotation>
      <xs:documentation>Страница со сведениями о правилах</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="sarWithRules" type="CompositeResourceWithRules">
            <xs:annotation>
              <xs:documentation>Элемент списка</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithRules">
    <xs:annotation>
      <xs:documentation>Сущность "Правило расписания", краткие сведения (для Специального доступного ресурса/СДР)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ResourceBase">
        <xs:sequence>
          <xs:element name="medicalOrganizationId" type="core:ID"/>
          <xs:element name="medicalFacilityId" type="core:ID"/>
          <!--<xs:sequence>-->
          <xs:element maxOccurs="unbounded" name="rules" type="ScheduleRuleShort"/>
          <!--</xs:sequence>-->
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ScheduleRuleShort">
    <xs:annotation>
      <xs:documentation>Сущность "Правило расписания", краткие сведения (для Специального доступного ресурса/СДР)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:VersionedEntityBase">
        <xs:sequence>
          <xs:element name="datePeriod" type="core:RuleDatePeriod"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=supp.rir2.core.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/core/v1/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/supp/rir2/core/v1/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?xsd=../../core/v1/emias.core.v1.xsd"/>
  <!--rules components-->
  <xs:complexType name="TreatmentsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинской манипуляции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AgeGroupsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Возрастных групп</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="ageGroupId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Возрастной группы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleTimeInterval">
    <xs:annotation>
      <xs:documentation>Временной интервал Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TimeInterval">
        <xs:sequence>
          <xs:element name="start" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время начала интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время окончания интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="RuleTypeId">
    <xs:annotation>
      <xs:documentation>Идентификатор типа Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:simpleType name="LocationId">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:complexType name="RuleDatePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!--excluded dates definition-->
  <xs:complexType name="ExcludedDates">
    <xs:annotation>
      <xs:documentation>Описание исключаемых дней</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="excludedDay" type="xs:date">
        <xs:annotation>
          <xs:documentation>Исключаемые даты</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isExcludedHoliday" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Исключая праздничные дни" (в соответствии с производственным
                        календарем)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="7" minOccurs="0" name="excludedDayOfWeek" type="DayOfWeekNumber">
        <xs:annotation>
          <xs:documentation>Исключаемые дни недели</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--date templates definitions-->
  <xs:complexType name="DayOfMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно в заданные даты каждого календарного месяца"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="31" name="dayOfMonth" type="DayOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер дня месяца (число от 1 до 31)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekByMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно по дням недели" (например, каждый 3-й понедельник месяца)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="5" name="week" type="WeekOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер недели месяца (число от 1 до 5)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SpecialDayDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "В конкретные даты" (например, 25 января 2015 года и т. д)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="day" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EvenDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По четным или нечетным числам"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element name="isEven" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак «Четные числа»</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По дням недели"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="7" name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="DatesTemplate">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип описания Шаблона дат</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="dayOfWeek">
    <xs:annotation>
      <xs:documentation>День недели</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:int">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="7"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <!--templates components-->
  <xs:simpleType name="DayOfWeekNumber">
    <xs:annotation>
      <xs:documentation>Номер дня недели</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="7"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер дня месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WeekOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер недели месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="5"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources schedule-->
  <xs:complexType name="CompositeResourceSchedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="compositeResource" type="CompositeResource">
            <xs:annotation>
              <xs:documentation>Композитный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceScheduleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Расписании композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="schedulePeriod"/>
                <xs:element ref="scheduleActiveState"/>
              </xs:sequence>
              <xs:attribute name="isLocked" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность
                                        внесения изменений в определение его содержания</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceScheduleBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="resourceScheduleStatus">
            <xs:annotation>
              <xs:documentation>Статус</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completeness" type="xs:unsignedByte">
            <xs:annotation>
              <xs:documentation>Полнота расписания</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceScheduleStatus" type="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статус Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статусы Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_DEFINED"/>
      <xs:enumeration value="DIRTY"/>
      <xs:enumeration value="READY"/>
      <xs:enumeration value="CALCULATION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopySarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SarScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopyArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ArScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources-->
  <xs:complexType name="SpecialAvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Специальный доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="Equipment">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Специализированный кабинет"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="SPECIAL_AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="JobExecution">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Исполнение должности"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResource">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="info" type="CompositeResourceInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithTreatments">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс" со сведениями о проводимых манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="ID"/>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID"/>
      <xs:element name="resource" type="CompositeResourceForAssignment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignment">
    <xs:annotation>
      <xs:documentation>Краткие сведения о ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="medicalOrganization" type="MedicalOrganizationShort"/>
      <xs:element name="medicalFacility" type="MedicalFacilityShort"/>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element name="addressObject" type="AddressObjectShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressObjectShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об Адресном объекте</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressShort" type="AddressShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об адресе</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressString" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="resourceKind">
        <xs:annotation>
          <xs:documentation>Вид Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parentId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="parentTypeId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор типа сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="CompositeResourceType">
        <xs:annotation>
          <xs:documentation>Тип Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalOrganizationId">
        <xs:annotation>
          <xs:documentation>Идентификатор МО, которой принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="department" type="Department">
        <xs:annotation>
          <xs:documentation>Структурное подразделение МО, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="functionTitle" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="functionVolume" type="xs:float">
        <xs:annotation>
          <xs:documentation>Объем функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalFacilityId">
        <xs:annotation>
          <xs:documentation>Идентификатор МУ, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="Location">
        <xs:annotation>
          <xs:documentation>Локация, связанная с Композитным ресурсом</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceType">
    <xs:annotation>
      <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="syncStatus" type="ResourceSyncStatuses">
            <xs:annotation>
              <xs:documentation>Статус синхронизации</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="parameters" type="ResourceParameterCollection">
            <xs:annotation>
              <xs:documentation>Параметры</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourceParameterCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Параметров ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="parameter" type="ResourceParameter">
        <xs:annotation>
          <xs:documentation>Параметр ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceParameter">
    <xs:annotation>
      <xs:documentation>Параметр ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="KeyValuePair">
        <xs:attribute name="ownerSystemName" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Владелец параметра (шифр системы-потребителя, породившего параметр)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceKind" type="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Вид Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Виды Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AVAILABLE_RESOURCE"/>
      <xs:enumeration value="SPECIAL_AVAILABLE_RESOURCE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceSyncStatuses">
    <xs:annotation>
      <xs:documentation>Статусы синхронизации Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_PROGRESS"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
    </xs:restriction>
  </xs:simpleType>
  <!--MO/MU shedule and its components-->
  <xs:complexType name="Schedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписаниие МО/МУ"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="medicalFacilityId"/>
          <xs:element ref="schedulePeriod"/>
          <xs:element ref="scheduleActiveState"/>
        </xs:sequence>
        <xs:attribute name="isMo" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак принадлежности расписания МО</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isLocked" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность внесения
                            изменений в определение его содержания</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="scheduleId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="locationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="scheduleActiveState" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>Статус "Действующее" для Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="schedulePeriod" type="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeekDefinition">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeek">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursCollection">
    <xs:annotation>
      <xs:documentation>Сведения о расписании работы учереждения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="7" minOccurs="0" name="workHoursForDayOfWeek" type="WorkHoursForDayOfWeekDefinition">
        <xs:annotation>
          <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--business entities which belong to SVMR and their components-->
  <xs:complexType name="JobExecution">
    <xs:annotation>
      <xs:documentation>Сущность "Исполнение должности"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование должности в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор должности (в соответствии с Номенклатурой должностей
                                медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="employee" type="Employee">
            <xs:annotation>
              <xs:documentation>Сведения о работнике МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionVolume" type="xs:float">
            <xs:annotation>
              <xs:documentation>Ставка</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionPeriod">
            <xs:annotation>
              <xs:documentation>Период исполнения должности</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="DatePeriod">
                  <xs:sequence>
                    <xs:element name="start" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата начала периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element minOccurs="0" name="end" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата окончания периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
          <xs:element ref="medicalOrganizationId"/>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maternityLeave" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак "Декретный отпуск"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultMedicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ в котором "по умолчанию" осуществляется деятельность
                                работника</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, в которой "по умолчанию" осуществляется деятельность работника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Location">
    <xs:annotation>
      <xs:documentation>Сущность "Локация"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="roomTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование кабинета (номер на табличке двери кабинета)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stage" type="xs:short">
            <xs:annotation>
              <xs:documentation>Этаж, на котором располагается Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subBuilding" type="xs:string">
            <xs:annotation>
              <xs:documentation>Корпус (строение) - используется в случае, если по адресу Адресного
                                объекта располагается несколько "корпусов"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="building" type="Building">
            <xs:annotation>
              <xs:documentation>Сведения об Адресном объекте</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="medicalFacilityId">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ, которому принадлежит Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EquipmentProfile">
    <xs:annotation>
      <xs:documentation>Элемент справочника "Профиль оборудования".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>Оборудование</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="equipmentId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор единицы Медицинского оборудования в ЕМИАС.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentModel" type="xs:string">
            <xs:annotation>
              <xs:documentation>Модель оборудования в ЕМИАС.СВМР.2</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentProfile" type="EquipmentProfile">
            <xs:annotation>
              <xs:documentation>Профиль Оборудования</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentTypeId" type="ID">
            <xs:annotation>
              <xs:documentation>Наименование оборудования в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalOrganizationId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="personalizedService" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак индивидуального обслуживания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="capacityForRoom" type="xs:int">
            <xs:annotation>
              <xs:documentation>Количество одновременно обслуживаемых пациентов с учетом ограничивающих условий Локации МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, к которой прикреплено оборудование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="treatments">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="treatment">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="info" type="Treatment">
                        <xs:annotation>
                          <xs:documentation>Сведения о Медицинской манипуляции</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="useByDefault" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Признак "Использовать по умолчанию" в определении Правила рабочего времени.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Department">
    <xs:annotation>
      <xs:documentation>Структурное подразделение</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование структурного подразделения МО в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор структурного подразделения (в соответствии с Номенклатурой
                                структурных подразделений медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Сведения о работнике МО</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="snils" type="xs:string">
            <xs:annotation>
              <xs:documentation>СНИЛС</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lastName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Фамилия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="firstName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Имя</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="middleName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Отчество</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Building">
    <xs:annotation>
      <xs:documentation>Адресный объект</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="buildingAddress" type="xs:string">
            <xs:annotation>
              <xs:documentation>Строковое представление адреса Адресного объекта</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для компонентов сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--nsi-->
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:sequence>
          <xs:element name="categoryCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Код категории медицинской манипуляции. Соответствует полю "code" справочника "Категории медицинских манипуляций".</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Specialization">
    <xs:annotation>
      <xs:documentation>Специализация</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="TitledNsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников с полем title</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="archived" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Признак "Архивная запись"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types and elements-->
  <xs:element name="entityVersion" type="xs:long">
    <xs:annotation>
      <xs:documentation>Версия сущности ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="VersionedEntityBase">
    <xs:annotation>
      <xs:documentation>Версионированная сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:attribute name="version" type="xs:long" use="required">
          <xs:annotation>
            <xs:documentation>Версия сущности</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовая сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="warnings" type="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений (предупреждений) об ошибках</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="ProcessingResultBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, определяющий результат выполнения операции обработки сущностей
                или их компонентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="succeededNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Количество обработанных сущностей (или компоненотов сущности)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="totalNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Общее количество сущностей (или компонентов сущности), подлежащих обработке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint></con:endpoints><con:operation id="4136a06b-922f-4549-bc39-c641dc3c224a" isOneWay="false" action="applyChangesToSarSchedule" name="applyChangesToSarSchedule" bindingOperationName="applyChangesToSarSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e85cbcf5-46e0-40c9-a682-b54176affe57" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:applyChangesToSarScheduleRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:sarScheduleId>?</typ:sarScheduleId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:applyChangesToSarScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/applyChangesToSarScheduleRequest"/></con:call></con:operation><con:operation id="c8427979-b166-4f16-813f-9daf5df6ca80" isOneWay="false" action="checkRouteInSchedule" name="checkRouteInSchedule" bindingOperationName="checkRouteInSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d2c0d186-19fd-4ba4-9f38-265d29e704d6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:checkRouteInScheduleRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:checkRouteInScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/checkRouteInScheduleRequest"/></con:call></con:operation><con:operation id="812a9e69-a3ec-4bae-9b96-1304d8f7a44b" isOneWay="false" action="clearSarSchedule" name="clearSarSchedule" bindingOperationName="clearSarSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="0299ceaa-b521-47a7-b476-546c04c52fb3" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:clearSarScheduleRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:sarScheduleId>?</typ:sarScheduleId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:clearSarScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/clearSarScheduleRequest"/></con:call></con:operation><con:operation id="42f87932-09ff-4e95-93e8-d8590f69b747" isOneWay="false" action="copySarSchedule" name="copySarSchedule" bindingOperationName="copySarSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f50444ff-b149-49ff-bdef-0db838b58054" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:copySarScheduleRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:sarScheduleCopyPair>\r
            <typ:sarScheduleIdFrom>?</typ:sarScheduleIdFrom>\r
            <typ:sarScheduleIdTo>?</typ:sarScheduleIdTo>\r
         </typ:sarScheduleCopyPair>\r
         <!--Optional:-->\r
         <typ:sarScheduleRuleTypeKinds>\r
            <!--1 to 4 repetitions:-->\r
            <typ:sarScheduleRuleTypeKind>?</typ:sarScheduleRuleTypeKind>\r
         </typ:sarScheduleRuleTypeKinds>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:copySarScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/copySarScheduleRequest"/></con:call></con:operation><con:operation id="0888ac1b-1957-46dc-9da3-84a118e26ba0" isOneWay="false" action="createSarScheduleRule" name="createSarScheduleRule" bindingOperationName="createSarScheduleRule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7e0c4b8f-5106-4177-b3e7-76745788afac" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>?</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>?</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>?</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>?</v1:start>\r
                  <v1:end>?</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate/>\r
               <!--Optional:-->\r
               <typ:excludedDates>\r
                  <!--Zero or more repetitions:-->\r
                  <v1:excludedDay>?</v1:excludedDay>\r
                  <v1:isExcludedHoliday>?</v1:isExcludedHoliday>\r
                  <!--0 to 7 repetitions:-->\r
                  <v1:excludedDayOfWeek>?</v1:excludedDayOfWeek>\r
               </typ:excludedDates>\r
               <typ:timeIntervals>\r
                  <!--1 or more repetitions:-->\r
                  <typ:timeInterval>\r
                     <v1:start>?</v1:start>\r
                     <v1:end>?</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <!--Optional:-->\r
               <typ:ageGroups>\r
                  <!--1 or more repetitions:-->\r
                  <v1:ageGroupId>?</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <!--Optional:-->\r
               <typ:treatments>\r
                  <!--1 or more repetitions:-->\r
                  <v1:treatmentId>?</v1:treatmentId>\r
               </typ:treatments>\r
               <!--Optional:-->\r
               <typ:routes>\r
                  <typ:allowedAppointmentFromSelfMO>?</typ:allowedAppointmentFromSelfMO>\r
                  <typ:routesIdCollection>\r
                     <!--1 or more repetitions:-->\r
                     <typ:routeId>?</typ:routeId>\r
                  </typ:routesIdCollection>\r
               </typ:routes>\r
               <!--Optional:-->\r
               <typ:location>?</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/createSarScheduleRuleRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="544aaf44-1257-44d7-8ab3-179684939eed" isOneWay="false" action="deleteSarScheduleRule" name="deleteSarScheduleRule" bindingOperationName="deleteSarScheduleRule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="592a77a5-0305-4212-94f9-cb6d89101921" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:deleteSarScheduleRuleRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:sarScheduleRule id="5487719" version="0">\r
            <typ:sarScheduleId>4873322</typ:sarScheduleId>\r
         </typ:sarScheduleRule>\r
      </typ:deleteSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/deleteSarScheduleRuleRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="7e6c9a69-8d80-4a15-ac91-bd3b079667e6" isOneWay="false" action="getSarSchedule" name="getSarSchedule" bindingOperationName="getSarSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="0653cf28-d9b3-43ea-bc18-64929fddc37a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getSarScheduleRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:sarScheduleId>?</typ:sarScheduleId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getSarScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/getSarScheduleRequest"/></con:call></con:operation><con:operation id="b8a55d2b-abf9-447b-841a-95a9404e5743" isOneWay="false" action="getSarScheduleList" name="getSarScheduleList" bindingOperationName="getSarScheduleList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b382bbc2-bf42-484a-b077-f188f0a90b13" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getSarScheduleListRequest>\r
         <typ:sarId>?</typ:sarId>\r
         <v1:schedulePeriod>\r
            <v1:start>?</v1:start>\r
            <v1:end>?</v1:end>\r
         </v1:schedulePeriod>\r
         <!--0 to 4 repetitions:-->\r
         <v1:resourceScheduleStatus>?</v1:resourceScheduleStatus>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getSarScheduleListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/getSarScheduleListRequest"/></con:call></con:operation><con:operation id="4684ff0f-638c-48c8-985c-02370f450fcc" isOneWay="false" action="getSarScheduleRuleTypeList" name="getSarScheduleRuleTypeList" bindingOperationName="getSarScheduleRuleTypeList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2271e8f0-3f51-4c6e-96f4-b9a6aef2d85d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getSarScheduleRuleTypeListRequest>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getSarScheduleRuleTypeListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/getSarScheduleRuleTypeListRequest"/></con:call></con:operation><con:operation id="3d2a31da-b8f3-4b50-81ab-89cf21b47257" isOneWay="false" action="updateSarScheduleRule" name="updateSarScheduleRule" bindingOperationName="updateSarScheduleRule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="1dfc7e41-cf4c-4c5d-9925-d8939455f813" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:updateSarScheduleRuleRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:sarScheduleRule id="?" version="?">\r
            <typ:sarScheduleId>?</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>?</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>?</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>?</v1:start>\r
                  <v1:end>?</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate/>\r
               <!--Optional:-->\r
               <typ:excludedDates>\r
                  <!--Zero or more repetitions:-->\r
                  <v1:excludedDay>?</v1:excludedDay>\r
                  <v1:isExcludedHoliday>?</v1:isExcludedHoliday>\r
                  <!--0 to 7 repetitions:-->\r
                  <v1:excludedDayOfWeek>?</v1:excludedDayOfWeek>\r
               </typ:excludedDates>\r
               <typ:timeIntervals>\r
                  <!--1 or more repetitions:-->\r
                  <typ:timeInterval>\r
                     <v1:start>?</v1:start>\r
                     <v1:end>?</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <!--Optional:-->\r
               <typ:ageGroups>\r
                  <!--1 or more repetitions:-->\r
                  <v1:ageGroupId>?</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <!--Optional:-->\r
               <typ:treatments>\r
                  <!--1 or more repetitions:-->\r
                  <v1:treatmentId>?</v1:treatmentId>\r
               </typ:treatments>\r
               <!--Optional:-->\r
               <typ:routes>\r
                  <typ:allowedAppointmentFromSelfMO>?</typ:allowedAppointmentFromSelfMO>\r
                  <typ:routesIdCollection>\r
                     <!--1 or more repetitions:-->\r
                     <typ:routeId>?</typ:routeId>\r
                  </typ:routesIdCollection>\r
               </typ:routes>\r
               <!--Optional:-->\r
               <typ:location>?</typ:location>\r
            </typ:info>\r
         </typ:sarScheduleRule>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:updateSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/sarScheduleServicePortType/updateSarScheduleRuleRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="8a25bedd-5862-4b07-9f8a-1463e32b8634" wsaVersion="NONE" name="scheduleServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/supp/rir2/scheduleService/v1/}scheduleServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?wsdl"><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="scheduleService" targetNamespace="http://emias.mos.ru/supp/rir2/scheduleService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:tns="http://emias.mos.ru/supp/rir2/scheduleService/v1/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:ns1="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:documentation>Версия 1.2.0</wsdl:documentation>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../system/v1/emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=supp.rir2.scheduleService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="copyScheduleInput">
    <wsdl:part element="ns1:copyScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getScheduleInput">
    <wsdl:part element="ns1:getScheduleRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteScheduleForHeadOutput">
    <wsdl:part element="ns1:deleteScheduleForHeadResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateScheduleForBranchInput">
    <wsdl:part element="ns1:updateScheduleForBranchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setWorkHoursForBranchOutput">
    <wsdl:part element="ns1:setWorkHoursForBranchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateScheduleForHeadInput">
    <wsdl:part element="ns1:activateScheduleForHeadRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="copyScheduleOutput">
    <wsdl:part element="ns1:copyScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getProductionCalendarListOutput">
    <wsdl:part element="ns1:getProductionCalendarListResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateScheduleForBranchOutput">
    <wsdl:part element="ns1:deactivateScheduleForBranchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateScheduleForBranchInput">
    <wsdl:part element="ns1:deactivateScheduleForBranchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getScheduleListInput">
    <wsdl:part element="ns1:getScheduleListRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateScheduleForHeadOutput">
    <wsdl:part element="ns1:deactivateScheduleForHeadResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createScheduleForBranchOutput">
    <wsdl:part element="ns1:createScheduleForBranchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getScheduleListOutput">
    <wsdl:part element="ns1:getScheduleListResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createScheduleForBranchInput">
    <wsdl:part element="ns1:createScheduleForBranchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeWorkHoursForBranchInput">
    <wsdl:part element="ns1:removeWorkHoursForBranchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateScheduleForHeadInput">
    <wsdl:part element="ns1:deactivateScheduleForHeadRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateScheduleForHeadOutput">
    <wsdl:part element="ns1:activateScheduleForHeadResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateScheduleForHeadInput">
    <wsdl:part element="ns1:updateScheduleForHeadRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeWorkHoursForBranchOutput">
    <wsdl:part element="ns1:removeWorkHoursForBranchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getWorkHoursForBranchOutput">
    <wsdl:part element="ns1:getWorkHoursForBranchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteScheduleForBranchInput">
    <wsdl:part element="ns1:deleteScheduleForBranchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteScheduleForBranchOutput">
    <wsdl:part element="ns1:deleteScheduleForBranchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateScheduleForHeadOutput">
    <wsdl:part element="ns1:updateScheduleForHeadResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateScheduleForBranchOutput">
    <wsdl:part element="ns1:updateScheduleForBranchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getScheduleOutput">
    <wsdl:part element="ns1:getScheduleResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createScheduleForHeadInput">
    <wsdl:part element="ns1:createScheduleForHeadRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getProductionCalendarListInput">
    <wsdl:part element="ns1:getProductionCalendarListRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getWorkHoursForBranchInput">
    <wsdl:part element="ns1:getWorkHoursForBranchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setWorkHoursForBranchInput">
    <wsdl:part element="ns1:setWorkHoursForBranchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateScheduleForBranchOutput">
    <wsdl:part element="ns1:activateScheduleForBranchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createScheduleForHeadOutput">
    <wsdl:part element="ns1:createScheduleForHeadResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteScheduleForHeadInput">
    <wsdl:part element="ns1:deleteScheduleForHeadRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateScheduleForBranchInput">
    <wsdl:part element="ns1:activateScheduleForBranchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="scheduleServicePortType">
    <wsdl:operation name="getScheduleList">
      <wsdl:input message="tns:getScheduleListInput"></wsdl:input>
      <wsdl:output message="tns:getScheduleListOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSchedule">
      <wsdl:input message="tns:getScheduleInput"></wsdl:input>
      <wsdl:output message="tns:getScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createScheduleForBranch">
      <wsdl:input message="tns:createScheduleForBranchInput"></wsdl:input>
      <wsdl:output message="tns:createScheduleForBranchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateScheduleForBranch">
      <wsdl:input message="tns:updateScheduleForBranchInput"></wsdl:input>
      <wsdl:output message="tns:updateScheduleForBranchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteScheduleForBranch">
      <wsdl:input message="tns:deleteScheduleForBranchInput"></wsdl:input>
      <wsdl:output message="tns:deleteScheduleForBranchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateScheduleForBranch">
      <wsdl:input message="tns:activateScheduleForBranchInput"></wsdl:input>
      <wsdl:output message="tns:activateScheduleForBranchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deactivateScheduleForBranch">
      <wsdl:input message="tns:deactivateScheduleForBranchInput"></wsdl:input>
      <wsdl:output message="tns:deactivateScheduleForBranchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createScheduleForHead">
      <wsdl:input message="tns:createScheduleForHeadInput"></wsdl:input>
      <wsdl:output message="tns:createScheduleForHeadOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateScheduleForHead">
      <wsdl:input message="tns:updateScheduleForHeadInput"></wsdl:input>
      <wsdl:output message="tns:updateScheduleForHeadOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteScheduleForHead">
      <wsdl:input message="tns:deleteScheduleForHeadInput"></wsdl:input>
      <wsdl:output message="tns:deleteScheduleForHeadOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateScheduleForHead">
      <wsdl:input message="tns:activateScheduleForHeadInput"></wsdl:input>
      <wsdl:output message="tns:activateScheduleForHeadOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deactivateScheduleForHead">
      <wsdl:input message="tns:deactivateScheduleForHeadInput"></wsdl:input>
      <wsdl:output message="tns:deactivateScheduleForHeadOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="copySchedule">
      <wsdl:input message="tns:copyScheduleInput"></wsdl:input>
      <wsdl:output message="tns:copyScheduleOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getProductionCalendarList">
      <wsdl:input message="tns:getProductionCalendarListInput"></wsdl:input>
      <wsdl:output message="tns:getProductionCalendarListOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getWorkHoursForBranch">
      <wsdl:input message="tns:getWorkHoursForBranchInput"></wsdl:input>
      <wsdl:output message="tns:getWorkHoursForBranchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setWorkHoursForBranch">
      <wsdl:input message="tns:setWorkHoursForBranchInput"></wsdl:input>
      <wsdl:output message="tns:setWorkHoursForBranchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeWorkHoursForBranch">
      <wsdl:input message="tns:removeWorkHoursForBranchInput"></wsdl:input>
      <wsdl:output message="tns:removeWorkHoursForBranchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="scheduleServiceBinding" type="tns:scheduleServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getScheduleList">
      <soap:operation soapAction="getScheduleList"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSchedule">
      <soap:operation soapAction="getSchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createScheduleForBranch">
      <soap:operation soapAction="createScheduleForBranch"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateScheduleForBranch">
      <soap:operation soapAction="updateScheduleForBranch"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteScheduleForBranch">
      <soap:operation soapAction="deleteScheduleForBranch"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateScheduleForBranch">
      <soap:operation soapAction="activateScheduleForBranch"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deactivateScheduleForBranch">
      <soap:operation soapAction="deactivateScheduleForBranch"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createScheduleForHead">
      <soap:operation soapAction="createScheduleForHead"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateScheduleForHead">
      <soap:operation soapAction="updateScheduleForHead"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteScheduleForHead">
      <soap:operation soapAction="deleteScheduleForHead"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateScheduleForHead">
      <soap:operation soapAction="activateScheduleForHead"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deactivateScheduleForHead">
      <soap:operation soapAction="deactivateScheduleForHead"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="copySchedule">
      <soap:operation soapAction="copySchedule"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getProductionCalendarList">
      <soap:operation soapAction="getProductionCalendarList"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getWorkHoursForBranch">
      <soap:operation soapAction="getWorkHoursForBranch"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setWorkHoursForBranch">
      <soap:operation soapAction="setWorkHoursForBranch"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeWorkHoursForBranch">
      <soap:operation soapAction="removeWorkHoursForBranch"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="scheduleService">
    <wsdl:port binding="tns:scheduleServiceBinding" name="scheduleServicePort">
      <soap:address location="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../system/v1/emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../core/v1/emias.core.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../core/v1/emias.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../system/v1/emias.system.v1.xsd"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
						(используются в соответствии с
						переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../system/v1/emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../system/v1/emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../system/v1/emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=supp.rir2.scheduleService.v1.types.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" version="Версия 1.2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=supp.rir2.core.v1.xsd"/>
  <!--lists of entities-->
  <xs:complexType name="ScheduleResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о Расписании МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="compositeResourceSchedule" type="core:CompositeResourceSchedule">
            <xs:annotation>
              <xs:documentation>Расписание композитного ресурса</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="scheduleId" type="core:ID" use="required">
          <xs:annotation>
            <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ScheduleListResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о Расписаниях МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="schedule" type="core:Schedule">
            <xs:annotation>
              <xs:documentation>Расписание МО/МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ProductionCalendarListItem">
    <xs:annotation>
      <xs:documentation>Элемент Производственного календаря</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="date" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата в Производственном календаре</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="particularity">
        <xs:annotation>
          <xs:documentation>Особенность даты в Производственном календаре</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="HOLIDAY"/>
            <xs:enumeration value="STATE_AS_MONDAY"/>
            <xs:enumeration value="STATE_AS_TUESDAY"/>
            <xs:enumeration value="STATE_AS_WEDNESDAY"/>
            <xs:enumeration value="STATE_AS_THURSDAY"/>
            <xs:enumeration value="STATE_AS_FRIDAY"/>
            <xs:enumeration value="STATE_AS_SATURDAY"/>
            <xs:enumeration value="STATE_AS_SUNDAY"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="archived" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Архивная сущность"</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ProductionCalendarListResult">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений Производственного календаря</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="item" type="ProductionCalendarListItem">
            <xs:annotation>
              <xs:documentation>Элемент Производственного календаря</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CopyScheduleParams">
    <xs:annotation>
      <xs:documentation>Параметры копирования определений содержания Расписаний композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="arSchedulesParams">
        <xs:annotation>
          <xs:documentation>Параметры копирования определений содержания Расписаний ДР</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="arScheduleRuleTypeKinds">
              <xs:annotation>
                <xs:documentation>Перечень видов Типов правил расписания ДР, подлежащих копированию</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="4" name="arScheduleRuleTypeKind" type="core:CopyArScheduleRuleTypeKinds">
                    <xs:annotation>
                      <xs:documentation>Вид Типов правил расписания ДР</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="sarSchedulesParams">
        <xs:annotation>
          <xs:documentation>Параметры копирования определений содержания Расписаний СДР</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="sarScheduleRuleTypeKinds">
              <xs:annotation>
                <xs:documentation>Перечень видов Типов правил расписания СДР, подлежащих копированию</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="4" name="sarScheduleRuleTypeKind" type="core:CopySarScheduleRuleTypeKinds">
                    <xs:annotation>
                      <xs:documentation>Вид Типов правил расписания СДР</xs:documentation>
                    </xs:annotation>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--requests & responses (methods to get schedules)-->
  <xs:element name="getScheduleListRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getScheduleList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="10" ref="core:medicalFacilityId"/>
        <xs:element maxOccurs="unbounded" minOccurs="0" ref="core:scheduleId"/>
        <xs:element minOccurs="0" name="datePeriod" type="core:DatePeriod">
          <xs:annotation>
            <xs:documentation>Временной период в пределах которого необходимо получить Расписания МО/МУ</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getScheduleListResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getScheduleList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="ScheduleListResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId">
          <xs:annotation>
            <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:locationId"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getSchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="ScheduleResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to manage branches' shedules)-->
  <xs:element name="createScheduleForBranchRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода createScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:medicalFacilityId"/>
        <xs:element ref="core:schedulePeriod"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createScheduleForBranchResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода createScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updateScheduleForBranchRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода updateScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:schedulePeriod"/>
        <xs:element ref="core:entityVersion"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updateScheduleForBranchResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода updateScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteScheduleForBranchRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода deleteScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:entityVersion"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteScheduleForBranchResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода deleteScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="activateScheduleForBranchRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода activateScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:entityVersion"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="activateScheduleForBranchResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода activateScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deactivateScheduleForBranchRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода deactivateScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:entityVersion"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deactivateScheduleForBranchResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода deactivateScheduleForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to manage heads' shedules)-->
  <xs:element name="createScheduleForHeadRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода createScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:medicalFacilityId"/>
        <xs:element ref="core:schedulePeriod"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createScheduleForHeadResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода createScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updateScheduleForHeadRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода updateScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:schedulePeriod"/>
        <xs:element ref="core:entityVersion"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updateScheduleForHeadResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода updateScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteScheduleForHeadRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода deleteScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:entityVersion"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteScheduleForHeadResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода deleteScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="activateScheduleForHeadRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода activateScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:entityVersion"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="activateScheduleForHeadResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода activateScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deactivateScheduleForHeadRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода deactivateScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:entityVersion"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deactivateScheduleForHeadResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода deactivateScheduleForHead</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to copy schedules)-->
  <xs:element name="copyScheduleRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода copySchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:scheduleId"/>
        <xs:element ref="core:schedulePeriod"/>
        <xs:element minOccurs="0" name="params" type="CopyScheduleParams">
          <xs:annotation>
            <xs:documentation>Параметры копирования определений содержания Расписаний композитных ресурсов</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="copyScheduleResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода copySchedule</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to get production calendar)-->
  <xs:element name="getProductionCalendarListRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getProductionCalendarList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="datePeriod" type="core:DatePeriod">
          <xs:annotation>
            <xs:documentation>Временной период за который необходимо вернуть Производственный календарь</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getProductionCalendarListResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getProductionCalendarList</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="ProductionCalendarListResult"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--requests & responses (methods to work hours for branch)-->
  <xs:element name="getWorkHoursForBranchRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getWorkHoursForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:medicalFacilityId">
          <xs:annotation>
            <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element maxOccurs="7" minOccurs="0" ref="core:dayOfWeek"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getWorkHoursForBranchResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getWorkHoursForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence minOccurs="0">
        <xs:element name="result" type="core:WorkHoursCollection"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="setWorkHoursForBranchRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода setWorkHoursForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:medicalFacilityId">
          <xs:annotation>
            <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:sequence>
          <xs:element maxOccurs="7" name="workHoursForDayOfWeek" type="core:WorkHoursForDayOfWeek">
            <xs:annotation>
              <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="setWorkHoursForBranchResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода setWorkHoursForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="emptyResult"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeWorkHoursForBranchRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода removeWorkHoursForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:medicalFacilityId">
          <xs:annotation>
            <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:sequence>
          <xs:element maxOccurs="7" name="removeDayOfWeek">
            <xs:annotation>
              <xs:documentation>Элемент Сведения о удалённом расписании в конкретный день</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="core:dayOfWeek"/>
                <xs:element minOccurs="0" name="description" type="xs:string">
                  <xs:annotation>
                    <xs:documentation>Комментарий пользователя</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeWorkHoursForBranchResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода removeWorkHoursForBranch</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="emptyResult"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--emptyElements-->
  <xs:element name="emptyResult">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не преполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=supp.rir2.core.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/core/v1/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/supp/rir2/core/v1/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?xsd=../../core/v1/emias.core.v1.xsd"/>
  <!--rules components-->
  <xs:complexType name="TreatmentsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинской манипуляции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AgeGroupsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Возрастных групп</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="ageGroupId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Возрастной группы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleTimeInterval">
    <xs:annotation>
      <xs:documentation>Временной интервал Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TimeInterval">
        <xs:sequence>
          <xs:element name="start" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время начала интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время окончания интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="RuleTypeId">
    <xs:annotation>
      <xs:documentation>Идентификатор типа Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:simpleType name="LocationId">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:complexType name="RuleDatePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!--excluded dates definition-->
  <xs:complexType name="ExcludedDates">
    <xs:annotation>
      <xs:documentation>Описание исключаемых дней</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="excludedDay" type="xs:date">
        <xs:annotation>
          <xs:documentation>Исключаемые даты</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isExcludedHoliday" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Исключая праздничные дни" (в соответствии с производственным
                        календарем)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="7" minOccurs="0" name="excludedDayOfWeek" type="DayOfWeekNumber">
        <xs:annotation>
          <xs:documentation>Исключаемые дни недели</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--date templates definitions-->
  <xs:complexType name="DayOfMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно в заданные даты каждого календарного месяца"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="31" name="dayOfMonth" type="DayOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер дня месяца (число от 1 до 31)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekByMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно по дням недели" (например, каждый 3-й понедельник месяца)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="5" name="week" type="WeekOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер недели месяца (число от 1 до 5)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SpecialDayDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "В конкретные даты" (например, 25 января 2015 года и т. д)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="day" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EvenDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По четным или нечетным числам"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element name="isEven" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак «Четные числа»</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По дням недели"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="7" name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="DatesTemplate">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип описания Шаблона дат</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="dayOfWeek">
    <xs:annotation>
      <xs:documentation>День недели</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:int">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="7"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <!--templates components-->
  <xs:simpleType name="DayOfWeekNumber">
    <xs:annotation>
      <xs:documentation>Номер дня недели</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="7"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер дня месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WeekOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер недели месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="5"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources schedule-->
  <xs:complexType name="CompositeResourceSchedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="compositeResource" type="CompositeResource">
            <xs:annotation>
              <xs:documentation>Композитный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceScheduleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Расписании композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="schedulePeriod"/>
                <xs:element ref="scheduleActiveState"/>
              </xs:sequence>
              <xs:attribute name="isLocked" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность
                                        внесения изменений в определение его содержания</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceScheduleBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="resourceScheduleStatus">
            <xs:annotation>
              <xs:documentation>Статус</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completeness" type="xs:unsignedByte">
            <xs:annotation>
              <xs:documentation>Полнота расписания</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceScheduleStatus" type="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статус Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статусы Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_DEFINED"/>
      <xs:enumeration value="DIRTY"/>
      <xs:enumeration value="READY"/>
      <xs:enumeration value="CALCULATION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopySarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SarScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopyArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ArScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources-->
  <xs:complexType name="SpecialAvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Специальный доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="Equipment">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Специализированный кабинет"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="SPECIAL_AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="JobExecution">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Исполнение должности"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResource">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="info" type="CompositeResourceInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithTreatments">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс" со сведениями о проводимых манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="ID"/>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID"/>
      <xs:element name="resource" type="CompositeResourceForAssignment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignment">
    <xs:annotation>
      <xs:documentation>Краткие сведения о ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="medicalOrganization" type="MedicalOrganizationShort"/>
      <xs:element name="medicalFacility" type="MedicalFacilityShort"/>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element name="addressObject" type="AddressObjectShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressObjectShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об Адресном объекте</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressShort" type="AddressShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об адресе</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressString" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="resourceKind">
        <xs:annotation>
          <xs:documentation>Вид Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parentId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="parentTypeId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор типа сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="CompositeResourceType">
        <xs:annotation>
          <xs:documentation>Тип Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalOrganizationId">
        <xs:annotation>
          <xs:documentation>Идентификатор МО, которой принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="department" type="Department">
        <xs:annotation>
          <xs:documentation>Структурное подразделение МО, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="functionTitle" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="functionVolume" type="xs:float">
        <xs:annotation>
          <xs:documentation>Объем функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalFacilityId">
        <xs:annotation>
          <xs:documentation>Идентификатор МУ, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="Location">
        <xs:annotation>
          <xs:documentation>Локация, связанная с Композитным ресурсом</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceType">
    <xs:annotation>
      <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="syncStatus" type="ResourceSyncStatuses">
            <xs:annotation>
              <xs:documentation>Статус синхронизации</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="parameters" type="ResourceParameterCollection">
            <xs:annotation>
              <xs:documentation>Параметры</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourceParameterCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Параметров ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="parameter" type="ResourceParameter">
        <xs:annotation>
          <xs:documentation>Параметр ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceParameter">
    <xs:annotation>
      <xs:documentation>Параметр ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="KeyValuePair">
        <xs:attribute name="ownerSystemName" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Владелец параметра (шифр системы-потребителя, породившего параметр)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceKind" type="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Вид Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Виды Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AVAILABLE_RESOURCE"/>
      <xs:enumeration value="SPECIAL_AVAILABLE_RESOURCE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceSyncStatuses">
    <xs:annotation>
      <xs:documentation>Статусы синхронизации Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_PROGRESS"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
    </xs:restriction>
  </xs:simpleType>
  <!--MO/MU shedule and its components-->
  <xs:complexType name="Schedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписаниие МО/МУ"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="medicalFacilityId"/>
          <xs:element ref="schedulePeriod"/>
          <xs:element ref="scheduleActiveState"/>
        </xs:sequence>
        <xs:attribute name="isMo" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак принадлежности расписания МО</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isLocked" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность внесения
                            изменений в определение его содержания</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="scheduleId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="locationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="scheduleActiveState" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>Статус "Действующее" для Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="schedulePeriod" type="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeekDefinition">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeek">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursCollection">
    <xs:annotation>
      <xs:documentation>Сведения о расписании работы учереждения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="7" minOccurs="0" name="workHoursForDayOfWeek" type="WorkHoursForDayOfWeekDefinition">
        <xs:annotation>
          <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--business entities which belong to SVMR and their components-->
  <xs:complexType name="JobExecution">
    <xs:annotation>
      <xs:documentation>Сущность "Исполнение должности"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование должности в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор должности (в соответствии с Номенклатурой должностей
                                медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="employee" type="Employee">
            <xs:annotation>
              <xs:documentation>Сведения о работнике МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionVolume" type="xs:float">
            <xs:annotation>
              <xs:documentation>Ставка</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionPeriod">
            <xs:annotation>
              <xs:documentation>Период исполнения должности</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="DatePeriod">
                  <xs:sequence>
                    <xs:element name="start" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата начала периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element minOccurs="0" name="end" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата окончания периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
          <xs:element ref="medicalOrganizationId"/>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maternityLeave" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак "Декретный отпуск"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultMedicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ в котором "по умолчанию" осуществляется деятельность
                                работника</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, в которой "по умолчанию" осуществляется деятельность работника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Location">
    <xs:annotation>
      <xs:documentation>Сущность "Локация"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="roomTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование кабинета (номер на табличке двери кабинета)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stage" type="xs:short">
            <xs:annotation>
              <xs:documentation>Этаж, на котором располагается Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subBuilding" type="xs:string">
            <xs:annotation>
              <xs:documentation>Корпус (строение) - используется в случае, если по адресу Адресного
                                объекта располагается несколько "корпусов"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="building" type="Building">
            <xs:annotation>
              <xs:documentation>Сведения об Адресном объекте</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="medicalFacilityId">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ, которому принадлежит Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EquipmentProfile">
    <xs:annotation>
      <xs:documentation>Элемент справочника "Профиль оборудования".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>Оборудование</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="equipmentId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор единицы Медицинского оборудования в ЕМИАС.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentModel" type="xs:string">
            <xs:annotation>
              <xs:documentation>Модель оборудования в ЕМИАС.СВМР.2</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentProfile" type="EquipmentProfile">
            <xs:annotation>
              <xs:documentation>Профиль Оборудования</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentTypeId" type="ID">
            <xs:annotation>
              <xs:documentation>Наименование оборудования в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalOrganizationId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="personalizedService" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак индивидуального обслуживания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="capacityForRoom" type="xs:int">
            <xs:annotation>
              <xs:documentation>Количество одновременно обслуживаемых пациентов с учетом ограничивающих условий Локации МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, к которой прикреплено оборудование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="treatments">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="treatment">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="info" type="Treatment">
                        <xs:annotation>
                          <xs:documentation>Сведения о Медицинской манипуляции</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="useByDefault" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Признак "Использовать по умолчанию" в определении Правила рабочего времени.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Department">
    <xs:annotation>
      <xs:documentation>Структурное подразделение</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование структурного подразделения МО в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор структурного подразделения (в соответствии с Номенклатурой
                                структурных подразделений медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Сведения о работнике МО</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="snils" type="xs:string">
            <xs:annotation>
              <xs:documentation>СНИЛС</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lastName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Фамилия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="firstName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Имя</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="middleName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Отчество</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Building">
    <xs:annotation>
      <xs:documentation>Адресный объект</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="buildingAddress" type="xs:string">
            <xs:annotation>
              <xs:documentation>Строковое представление адреса Адресного объекта</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для компонентов сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--nsi-->
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:sequence>
          <xs:element name="categoryCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Код категории медицинской манипуляции. Соответствует полю "code" справочника "Категории медицинских манипуляций".</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Specialization">
    <xs:annotation>
      <xs:documentation>Специализация</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="TitledNsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников с полем title</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="archived" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Признак "Архивная запись"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types and elements-->
  <xs:element name="entityVersion" type="xs:long">
    <xs:annotation>
      <xs:documentation>Версия сущности ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="VersionedEntityBase">
    <xs:annotation>
      <xs:documentation>Версионированная сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:attribute name="version" type="xs:long" use="required">
          <xs:annotation>
            <xs:documentation>Версия сущности</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовая сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="warnings" type="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений (предупреждений) об ошибках</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="ProcessingResultBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, определяющий результат выполнения операции обработки сущностей
                или их компонентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="succeededNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Количество обработанных сущностей (или компоненотов сущности)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="totalNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Общее количество сущностей (или компонентов сущности), подлежащих обработке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint></con:endpoints><con:operation id="97bf1090-ce45-414d-a383-1c502b9b14a4" isOneWay="false" action="activateScheduleForBranch" name="activateScheduleForBranch" bindingOperationName="activateScheduleForBranch" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="c7ef04fd-e726-437d-9340-fdb11f0b45b7" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:activateScheduleForBranchRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:entityVersion>?</v1:entityVersion>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:activateScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/activateScheduleForBranchRequest"/></con:call></con:operation><con:operation id="771e8d8c-8409-4b92-b992-a21dd873e48a" isOneWay="false" action="activateScheduleForHead" name="activateScheduleForHead" bindingOperationName="activateScheduleForHead" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="150bf82b-aedd-4f1e-8342-0d9d72e5e414" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:activateScheduleForHeadRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:entityVersion>?</v1:entityVersion>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:activateScheduleForHeadRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/activateScheduleForHeadRequest"/></con:call></con:operation><con:operation id="93e73be8-d814-46e3-9c3e-bf08da7fed5e" isOneWay="false" action="copySchedule" name="copySchedule" bindingOperationName="copySchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f3438bae-4693-434b-8eef-dbb5b12ee56d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:copyScheduleRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:schedulePeriod>\r
            <v1:start>?</v1:start>\r
            <v1:end>?</v1:end>\r
         </v1:schedulePeriod>\r
         <!--Optional:-->\r
         <typ:params>\r
            <!--Optional:-->\r
            <typ:arSchedulesParams>\r
               <!--Optional:-->\r
               <typ:arScheduleRuleTypeKinds>\r
                  <!--1 to 4 repetitions:-->\r
                  <typ:arScheduleRuleTypeKind>?</typ:arScheduleRuleTypeKind>\r
               </typ:arScheduleRuleTypeKinds>\r
            </typ:arSchedulesParams>\r
            <!--Optional:-->\r
            <typ:sarSchedulesParams>\r
               <!--Optional:-->\r
               <typ:sarScheduleRuleTypeKinds>\r
                  <!--1 to 4 repetitions:-->\r
                  <typ:sarScheduleRuleTypeKind>?</typ:sarScheduleRuleTypeKind>\r
               </typ:sarScheduleRuleTypeKinds>\r
            </typ:sarSchedulesParams>\r
         </typ:params>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:copyScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/copyScheduleRequest"/></con:call></con:operation><con:operation id="c99aa925-3979-4564-b66b-4f295b03fd90" isOneWay="false" action="createScheduleForBranch" name="createScheduleForBranch" bindingOperationName="createScheduleForBranch" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="90aee46c-7706-4594-83ad-efd110f44332" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>?</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>?</v1:start>\r
            <v1:end>?</v1:end>\r
         </v1:schedulePeriod>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/createScheduleForBranchRequest"/></con:call></con:operation><con:operation id="a1ccc7a4-73f6-44d1-be8f-a6fc8003616b" isOneWay="false" action="createScheduleForHead" name="createScheduleForHead" bindingOperationName="createScheduleForHead" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="8fa36ca2-d746-4ce7-ac3f-4aabdf0e2504" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForHeadRequest>\r
         <v1:medicalFacilityId>?</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>?</v1:start>\r
            <v1:end>?</v1:end>\r
         </v1:schedulePeriod>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:createScheduleForHeadRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/createScheduleForHeadRequest"/></con:call></con:operation><con:operation id="832c45bb-9b4a-4d29-8e1b-8511b69d6349" isOneWay="false" action="deactivateScheduleForBranch" name="deactivateScheduleForBranch" bindingOperationName="deactivateScheduleForBranch" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e2814cff-4e1c-44c7-9e40-c45151a6efa2" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:deactivateScheduleForBranchRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:entityVersion>?</v1:entityVersion>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:deactivateScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/deactivateScheduleForBranchRequest"/></con:call></con:operation><con:operation id="41a79ae1-e11e-46d2-9f80-7160af6223f6" isOneWay="false" action="deactivateScheduleForHead" name="deactivateScheduleForHead" bindingOperationName="deactivateScheduleForHead" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="137bc5a3-20e0-4201-8de2-fe2ccfbb75a0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:deactivateScheduleForHeadRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:entityVersion>?</v1:entityVersion>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:deactivateScheduleForHeadRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/deactivateScheduleForHeadRequest"/></con:call></con:operation><con:operation id="a3724cfb-aaec-47b3-beeb-5be6892a438c" isOneWay="false" action="deleteScheduleForBranch" name="deleteScheduleForBranch" bindingOperationName="deleteScheduleForBranch" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="995cb33d-982a-4096-8385-4d3ebf66a767" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:entityVersion>?</v1:entityVersion>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/deleteScheduleForBranchRequest"/></con:call></con:operation><con:operation id="a841d63b-2a04-4dc4-9171-3238d3ada1a9" isOneWay="false" action="deleteScheduleForHead" name="deleteScheduleForHead" bindingOperationName="deleteScheduleForHead" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="96549ce6-997d-4fe6-a18e-e0d110483206" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:deleteScheduleForHeadRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:entityVersion>?</v1:entityVersion>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:deleteScheduleForHeadRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/deleteScheduleForHeadRequest"/></con:call></con:operation><con:operation id="aa201fe9-c539-4be8-bd0b-2311684f69b3" isOneWay="false" action="getProductionCalendarList" name="getProductionCalendarList" bindingOperationName="getProductionCalendarList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7fd13dda-67ca-464e-9ffa-27bedb6d108f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getProductionCalendarListRequest>\r
         <!--Optional:-->\r
         <typ:datePeriod>\r
            <!--Optional:-->\r
            <v1:start>?</v1:start>\r
            <!--Optional:-->\r
            <v1:end>?</v1:end>\r
         </typ:datePeriod>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getProductionCalendarListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/getProductionCalendarListRequest"/></con:call></con:operation><con:operation id="08395ff5-392f-48d0-a3ba-8b350fd80a41" isOneWay="false" action="getSchedule" name="getSchedule" bindingOperationName="getSchedule" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d729c16d-6fb3-4546-ba15-60b3412a1c6b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getScheduleRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <!--Optional:-->\r
         <v1:locationId>?</v1:locationId>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/getScheduleRequest"/></con:call></con:operation><con:operation id="9acea8ea-fbf3-4a64-bab5-0ddc6731e0af" isOneWay="false" action="getScheduleList" name="getScheduleList" bindingOperationName="getScheduleList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="0da5984e-9388-4d27-b4d2-31fcd4548b3f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getScheduleListRequest>\r
         <!--1 to 10 repetitions:-->\r
         <v1:medicalFacilityId>?</v1:medicalFacilityId>\r
         <!--Zero or more repetitions:-->\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <!--Optional:-->\r
         <typ:datePeriod>\r
            <!--Optional:-->\r
            <v1:start>?</v1:start>\r
            <!--Optional:-->\r
            <v1:end>?</v1:end>\r
         </typ:datePeriod>\r
         <!--Optional:-->\r
         <v1:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </v1:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getScheduleListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/getScheduleListRequest"/></con:call></con:operation><con:operation id="48d355b9-e862-451b-90cc-efd977e3aa4d" isOneWay="false" action="getWorkHoursForBranch" name="getWorkHoursForBranch" bindingOperationName="getWorkHoursForBranch" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="c1254756-c586-42df-a1b3-d08b6ce635ba" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>?</v1:medicalFacilityId>\r
         <!--0 to 7 repetitions:-->\r
         <v1:dayOfWeek>?</v1:dayOfWeek>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/getWorkHoursForBranchRequest"/></con:call></con:operation><con:operation id="6a64ec03-a140-4281-abe2-05cfc3adf6f9" isOneWay="false" action="removeWorkHoursForBranch" name="removeWorkHoursForBranch" bindingOperationName="removeWorkHoursForBranch" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="979abce1-a041-45a5-bfd0-5200932073e7" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:removeWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>?</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>?</v1:dayOfWeek>\r
            <!--Optional:-->\r
            <typ:description>?</typ:description>\r
         </typ:removeDayOfWeek>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:removeWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/removeWorkHoursForBranchRequest"/></con:call></con:operation><con:operation id="bd3b0647-8d24-4a8e-96e5-b2e0a355ef68" isOneWay="false" action="setWorkHoursForBranch" name="setWorkHoursForBranch" bindingOperationName="setWorkHoursForBranch" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a30bbf3e-39e6-4c9a-8d5a-6827dbb07549" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>?</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>?</v1:dayOfWeek>\r
            <!--Optional:-->\r
            <v1:description>?</v1:description>\r
            <v1:workHours>\r
               <v1:start>?</v1:start>\r
               <v1:end>?</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:setWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/setWorkHoursForBranchRequest"/></con:call></con:operation><con:operation id="1980486d-3988-4fab-ad9f-d0488c3634b8" isOneWay="false" action="updateScheduleForBranch" name="updateScheduleForBranch" bindingOperationName="updateScheduleForBranch" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="ede413b0-a5ca-43a5-9a16-73eebeb6de0c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:updateScheduleForBranchRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:schedulePeriod>\r
            <v1:start>?</v1:start>\r
            <v1:end>?</v1:end>\r
         </v1:schedulePeriod>\r
         <v1:entityVersion>?</v1:entityVersion>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:updateScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/updateScheduleForBranchRequest"/></con:call></con:operation><con:operation id="24b191dc-36a4-425b-b3a7-3ef423a20876" isOneWay="false" action="updateScheduleForHead" name="updateScheduleForHead" bindingOperationName="updateScheduleForHead" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="cc9093a6-321d-4c07-a077-3e37c9573024" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:updateScheduleForHeadRequest>\r
         <v1:scheduleId>?</v1:scheduleId>\r
         <v1:schedulePeriod>\r
            <v1:start>?</v1:start>\r
            <v1:end>?</v1:end>\r
         </v1:schedulePeriod>\r
         <v1:entityVersion>?</v1:entityVersion>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:updateScheduleForHeadRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/scheduleService/v1/scheduleServicePortType/updateScheduleForHeadRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="102c0f31-9abb-4a51-bd44-fb58a6cd59ac" wsaVersion="NONE" name="systemServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/supp/rir2/systemService/v1/}systemServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?wsdl"><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/System?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="systemService" targetNamespace="http://emias.mos.ru/supp/rir2/systemService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:tns="http://emias.mos.ru/supp/rir2/systemService/v1/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:ns1="http://emias.mos.ru/supp/rir2/systemService/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:documentation>Версия 1.1.0</wsdl:documentation>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../system/v1/emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/supp/rir2/systemService/v1/types/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=supp.rir2.systemService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="getOperationStatusOutput">
    <wsdl:part element="ns1:getOperationStatusResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getOperationStatusInput">
    <wsdl:part element="ns1:getOperationStatusRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="systemServicePortType">
    <wsdl:operation name="getOperationStatus">
      <wsdl:input message="tns:getOperationStatusInput"></wsdl:input>
      <wsdl:output message="tns:getOperationStatusOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="systemServiceBinding" type="tns:systemServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getOperationStatus">
      <soap:operation soapAction="getOperationStatus"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="systemService">
    <wsdl:port binding="tns:systemServiceBinding" name="systemServicePort">
      <soap:address location="http://rir2-rir2-system.emias.solit-clouds.ru/api/System"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../system/v1/emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../core/v1/emias.core.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../core/v1/emias.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../system/v1/emias.system.v1.xsd"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
						(используются в соответствии с
						переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../system/v1/emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../system/v1/emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../system/v1/emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=supp.rir2.systemService.v1.types.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/systemService/v1/types/" version="Версия 1.1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/systemService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=supp.rir2.core.v1.xsd"/>
  <!--requests & responses (method to get operation execution status)-->
  <xs:element name="getOperationStatusRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getOperationStatus</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:operationId"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getOperationStatusResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getOperationStatus</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="status" type="core:OperationExecutionStatus">
          <xs:annotation>
            <xs:documentation>Сведения о статусе выполнения операции</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=supp.rir2.core.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/core/v1/" version="Версия 1.3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/supp/rir2/core/v1/">
  <xs:include schemaLocation="http://rir2-rir2-system.emias.solit-clouds.ru/api/System?xsd=../../core/v1/emias.core.v1.xsd"/>
  <!--rules components-->
  <xs:complexType name="TreatmentsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинской манипуляции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AgeGroupsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Возрастных групп</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="ageGroupId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Возрастной группы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleTimeInterval">
    <xs:annotation>
      <xs:documentation>Временной интервал Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TimeInterval">
        <xs:sequence>
          <xs:element name="start" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время начала интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время окончания интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="RuleTypeId">
    <xs:annotation>
      <xs:documentation>Идентификатор типа Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:simpleType name="LocationId">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:complexType name="RuleDatePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!--excluded dates definition-->
  <xs:complexType name="ExcludedDates">
    <xs:annotation>
      <xs:documentation>Описание исключаемых дней</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="excludedDay" type="xs:date">
        <xs:annotation>
          <xs:documentation>Исключаемые даты</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isExcludedHoliday" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Исключая праздничные дни" (в соответствии с производственным
                        календарем)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="7" minOccurs="0" name="excludedDayOfWeek" type="DayOfWeekNumber">
        <xs:annotation>
          <xs:documentation>Исключаемые дни недели</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--date templates definitions-->
  <xs:complexType name="DayOfMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно в заданные даты каждого календарного месяца"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="31" name="dayOfMonth" type="DayOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер дня месяца (число от 1 до 31)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekByMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно по дням недели" (например, каждый 3-й понедельник месяца)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="5" name="week" type="WeekOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер недели месяца (число от 1 до 5)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SpecialDayDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "В конкретные даты" (например, 25 января 2015 года и т. д)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="day" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EvenDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По четным или нечетным числам"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element name="isEven" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак «Четные числа»</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По дням недели"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="7" name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="DatesTemplate">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип описания Шаблона дат</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="dayOfWeek">
    <xs:annotation>
      <xs:documentation>День недели</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:int">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="7"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <!--templates components-->
  <xs:simpleType name="DayOfWeekNumber">
    <xs:annotation>
      <xs:documentation>Номер дня недели</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="7"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер дня месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WeekOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер недели месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="5"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources schedule-->
  <xs:complexType name="CompositeResourceSchedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="compositeResource" type="CompositeResource">
            <xs:annotation>
              <xs:documentation>Композитный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceScheduleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Расписании композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="schedulePeriod"/>
                <xs:element ref="scheduleActiveState"/>
              </xs:sequence>
              <xs:attribute name="isLocked" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность
                                        внесения изменений в определение его содержания</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceScheduleBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="resourceScheduleStatus">
            <xs:annotation>
              <xs:documentation>Статус</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completeness" type="xs:unsignedByte">
            <xs:annotation>
              <xs:documentation>Полнота расписания</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceScheduleStatus" type="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статус Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статусы Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_DEFINED"/>
      <xs:enumeration value="DIRTY"/>
      <xs:enumeration value="READY"/>
      <xs:enumeration value="CALCULATION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopySarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SarScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopyArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ArScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources-->
  <xs:complexType name="SpecialAvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Специальный доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="Equipment">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Специализированный кабинет"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="SPECIAL_AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="JobExecution">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Исполнение должности"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResource">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="info" type="CompositeResourceInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithTreatments">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс" со сведениями о проводимых манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="ID"/>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID"/>
      <xs:element name="resource" type="CompositeResourceForAssignment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignment">
    <xs:annotation>
      <xs:documentation>Краткие сведения о ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="medicalOrganization" type="MedicalOrganizationShort"/>
      <xs:element name="medicalFacility" type="MedicalFacilityShort"/>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element name="addressObject" type="AddressObjectShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressObjectShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об Адресном объекте</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressShort" type="AddressShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об адресе</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressString" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="resourceKind">
        <xs:annotation>
          <xs:documentation>Вид Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parentId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="parentTypeId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор типа сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="CompositeResourceType">
        <xs:annotation>
          <xs:documentation>Тип Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalOrganizationId">
        <xs:annotation>
          <xs:documentation>Идентификатор МО, которой принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="department" type="Department">
        <xs:annotation>
          <xs:documentation>Структурное подразделение МО, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="functionTitle" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="functionVolume" type="xs:float">
        <xs:annotation>
          <xs:documentation>Объем функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalFacilityId">
        <xs:annotation>
          <xs:documentation>Идентификатор МУ, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="Location">
        <xs:annotation>
          <xs:documentation>Локация, связанная с Композитным ресурсом</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceType">
    <xs:annotation>
      <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="syncStatus" type="ResourceSyncStatuses">
            <xs:annotation>
              <xs:documentation>Статус синхронизации</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="parameters" type="ResourceParameterCollection">
            <xs:annotation>
              <xs:documentation>Параметры</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourceParameterCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Параметров ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="parameter" type="ResourceParameter">
        <xs:annotation>
          <xs:documentation>Параметр ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceParameter">
    <xs:annotation>
      <xs:documentation>Параметр ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="KeyValuePair">
        <xs:attribute name="ownerSystemName" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Владелец параметра (шифр системы-потребителя, породившего параметр)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceKind" type="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Вид Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Виды Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AVAILABLE_RESOURCE"/>
      <xs:enumeration value="SPECIAL_AVAILABLE_RESOURCE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceSyncStatuses">
    <xs:annotation>
      <xs:documentation>Статусы синхронизации Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_PROGRESS"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
    </xs:restriction>
  </xs:simpleType>
  <!--MO/MU shedule and its components-->
  <xs:complexType name="Schedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписаниие МО/МУ"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="medicalFacilityId"/>
          <xs:element ref="schedulePeriod"/>
          <xs:element ref="scheduleActiveState"/>
        </xs:sequence>
        <xs:attribute name="isMo" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак принадлежности расписания МО</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isLocked" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность внесения
                            изменений в определение его содержания</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="scheduleId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="locationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="scheduleActiveState" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>Статус "Действующее" для Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="schedulePeriod" type="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeekDefinition">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeek">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursCollection">
    <xs:annotation>
      <xs:documentation>Сведения о расписании работы учереждения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="7" minOccurs="0" name="workHoursForDayOfWeek" type="WorkHoursForDayOfWeekDefinition">
        <xs:annotation>
          <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--business entities which belong to SVMR and their components-->
  <xs:complexType name="JobExecution">
    <xs:annotation>
      <xs:documentation>Сущность "Исполнение должности"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование должности в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор должности (в соответствии с Номенклатурой должностей
                                медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="employee" type="Employee">
            <xs:annotation>
              <xs:documentation>Сведения о работнике МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionVolume" type="xs:float">
            <xs:annotation>
              <xs:documentation>Ставка</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionPeriod">
            <xs:annotation>
              <xs:documentation>Период исполнения должности</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="DatePeriod">
                  <xs:sequence>
                    <xs:element name="start" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата начала периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element minOccurs="0" name="end" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата окончания периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
          <xs:element ref="medicalOrganizationId"/>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maternityLeave" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак "Декретный отпуск"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultMedicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ в котором "по умолчанию" осуществляется деятельность
                                работника</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, в которой "по умолчанию" осуществляется деятельность работника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Location">
    <xs:annotation>
      <xs:documentation>Сущность "Локация"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="roomTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование кабинета (номер на табличке двери кабинета)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stage" type="xs:short">
            <xs:annotation>
              <xs:documentation>Этаж, на котором располагается Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subBuilding" type="xs:string">
            <xs:annotation>
              <xs:documentation>Корпус (строение) - используется в случае, если по адресу Адресного
                                объекта располагается несколько "корпусов"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="building" type="Building">
            <xs:annotation>
              <xs:documentation>Сведения об Адресном объекте</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="medicalFacilityId">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ, которому принадлежит Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EquipmentProfile">
    <xs:annotation>
      <xs:documentation>Элемент справочника "Профиль оборудования".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>Оборудование</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="equipmentId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор единицы Медицинского оборудования в ЕМИАС.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentModel" type="xs:string">
            <xs:annotation>
              <xs:documentation>Модель оборудования в ЕМИАС.СВМР.2</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentProfile" type="EquipmentProfile">
            <xs:annotation>
              <xs:documentation>Профиль Оборудования</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentTypeId" type="ID">
            <xs:annotation>
              <xs:documentation>Наименование оборудования в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalOrganizationId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="personalizedService" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак индивидуального обслуживания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="capacityForRoom" type="xs:int">
            <xs:annotation>
              <xs:documentation>Количество одновременно обслуживаемых пациентов с учетом ограничивающих условий Локации МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, к которой прикреплено оборудование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="treatments">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="treatment">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="info" type="Treatment">
                        <xs:annotation>
                          <xs:documentation>Сведения о Медицинской манипуляции</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="useByDefault" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Признак "Использовать по умолчанию" в определении Правила рабочего времени.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Department">
    <xs:annotation>
      <xs:documentation>Структурное подразделение</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование структурного подразделения МО в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор структурного подразделения (в соответствии с Номенклатурой
                                структурных подразделений медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Сведения о работнике МО</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="snils" type="xs:string">
            <xs:annotation>
              <xs:documentation>СНИЛС</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lastName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Фамилия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="firstName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Имя</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="middleName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Отчество</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Building">
    <xs:annotation>
      <xs:documentation>Адресный объект</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="buildingAddress" type="xs:string">
            <xs:annotation>
              <xs:documentation>Строковое представление адреса Адресного объекта</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для компонентов сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--nsi-->
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:sequence>
          <xs:element name="categoryCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Код категории медицинской манипуляции. Соответствует полю "code" справочника "Категории медицинских манипуляций".</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Specialization">
    <xs:annotation>
      <xs:documentation>Специализация</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="TitledNsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников с полем title</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="archived" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Признак "Архивная запись"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types and elements-->
  <xs:element name="entityVersion" type="xs:long">
    <xs:annotation>
      <xs:documentation>Версия сущности ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="VersionedEntityBase">
    <xs:annotation>
      <xs:documentation>Версионированная сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:attribute name="version" type="xs:long" use="required">
          <xs:annotation>
            <xs:documentation>Версия сущности</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовая сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="warnings" type="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений (предупреждений) об ошибках</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="ProcessingResultBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, определяющий результат выполнения операции обработки сущностей
                или их компонентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="succeededNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Количество обработанных сущностей (или компоненотов сущности)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="totalNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Общее количество сущностей (или компонентов сущности), подлежащих обработке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/System</con:endpoint></con:endpoints><con:operation id="a63c498a-f408-447c-ad9e-7d5537b9b8db" isOneWay="false" action="getOperationStatus" name="getOperationStatus" bindingOperationName="getOperationStatus" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="968b1c98-30ac-47e6-a3c8-8413386baca8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://rir2-rir2-system.emias.solit-clouds.ru/api/System</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/systemService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getOperationStatusRequest>\r
         <v1:operationId>?</v1:operationId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getOperationStatusRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/systemService/v1/systemServicePortType/getOperationStatusRequest"/></con:call></con:operation></con:interface><con:testSuite id="51871603-91a8-4d39-be32-60e181c43ac8" name="СДР2 без интеграции с Запись 3"><con:settings><con:setting id="551efb5c-3314-407d-b6bb-b1fca3528c74fileName">СДР2-без-интеграции-с-Запись-3</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="f765d694-418c-474c-a422-a17f4fcd5e62" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="СДР. Создание расписания, правила ,слотов" searchProperties="true"><con:settings><con:setting id="a441389a-ad55-4db5-8ae4-90e7142e3123fileName">СДР.-Создание-расписания%2C-правила-%2Cслотов</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getTreatmentsWithMapping" id="4549cc2c-f231-4ba4-b697-d852e78b9595"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithMapping=sql.rows(getTreatmentsWithMapping)
	countTreatmentsWithMapping=treatmentsWithMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithMapping
	lastId=0
	listOfTreatmensWithMapping="0"
	if(countTreatmentsWithMapping>0){
		if(countTreatmentsWithMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatments = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 and t.id not in ("+listOfTreatmensWithMapping+") ORDER BY t.id DESC"
		//log.info(getNonarchivedTreatments)
		nonarchivedTreatments=sql.rows(getNonarchivedTreatments)
		countNonarchivedTreatments=nonarchivedTreatments.size()
		log.info("countNonarchivedTreatments= "+countNonarchivedTreatments)
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
			if(countNonarchivedTreatments>0){
					treatmentId = nonarchivedTreatments[index].TREATMENT_ID.toString()
					treatmentCode = nonarchivedTreatments[index].TREATMENT_CODE.toString()
					treatmentCategoryId = nonarchivedTreatments[index].TREATMENT_CATEGORY_ID.toString()
					treatmentCategoryCode = nonarchivedTreatments[index].TREATMENT_CATEGORY_CODE.toString()
					tCreatedByTest="0"
					tcCreatedByTest="0"
					countNonarchivedTreatments=countNonarchivedTreatments-1
					log.info("Для записи №"+i+" есть неархивная ММ без маппинга, ее id = "+treatmentId)
					index=index+1
			}
			else{
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
				}
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание или подбор вспомогательных сущностей" id="a67c82d2-913f-4f9f-9b76-b6da45dfe1e4"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()
def moId = testRunner.testCase.getPropertyValue("moId")


def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	String query = "SELECT * FROM "+table+ " "+condition
	//log.info("insert into  "+table+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+table+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+table+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+table+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "1")
		}
	}
}

def getDoesntExisted (String tableName,String propertyName, int counter=1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		String query = "SELECT max(id)+"+i+" as ID FROM "+table
		def result =sql.rows(query)
		testRunner.testCase.setPropertyValue(propertyName+i, result[0].ID.toString())
		log.info("ID несуществубщей записи в таблице  "+table+ " = "+result[0].ID.toString())
	}
}

def checkExistenceResourceType (String resourceType ){
	String CreatedByTest="0"
	String propertyName1
	String propertyName2
	String result1
	String result2
	String tableName1="RESOURCE_TYPE"
	String tableName2
		if(resourceType=="SPECIAL_AVAILABLE_RESOURCE") { 
			//log.info("СДР")
			propertyName1="resTypeForSarId"
			propertyName2="epId"
			tableName2="EQUIPMENT_PROFILE"
			String query = "SELECT rt.ID as RESOURCE_TYPE_ID, ep.id as EQUIPMENT_PROFILE_ID FROM RESOURCE_TYPE rt JOIN EQUIPMENT_PROFILE ep ON ep.RESOURCE_TYPE_ID =rt.ID WHERE rt.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND rt.ARCHIVED =0 AND ep.ARCHIVED =0"
			//log.info(query)
			def row = sql(query)
			//log.info(row)
			def result =sql.rows(query)
			//log.info(result)
			if (row == 0){
					log.info("В таблицах EQUIPMENT_PROFILE  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -3, 'Тип CДР для нагрузочного тестирования','SPECIAL_AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  EQUIPMENT_PROFILE  (ID, ARCHIVED,RESOURCE_TYPE_ID) values( -3, 0, -3)")
					result1="-3"
					result2="-3"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].EQUIPMENT_PROFILE_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и EQUIPMENT_PROFILE имеют подходящие записи.")
				}
		} else if(resourceType=="AVAILABLE_RESOURCE") { 
		   	log.info("ДР")
		   	tableName2="POSITION_NOM"
		   	propertyName1="resTypeForArId"
			propertyName2="pnId"
			String query1 = "SELECT rt.ID as RESOURCE_TYPE_ID, pn.id as POSITION_NOM_ID  FROM RESOURCE_TYPE rt JOIN POSITION_NOM pn ON pn.RESOURCE_TYPE_ID =rt.id WHERE rt.ARCHIVED =0 AND rt.RESOURCE_KIND ='AVAILABLE_RESOURCE'"
			//log.info(query)
			def row1 = sql(query1)
			//log.info(row)
			def result =sql.rows(query1)
			//log.info(result)
			if (row1 == 0){
					log.info("В таблицах POSITION_NOM  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -4, 'Тип ДР для нагрузочного тестирования','AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  POSITION_NOM (ID,TITLE,RESOURCE_TYPE_ID) values( -2,'Должность для нагрузочного тестирования', -4)")
					result1="-4"
					result2="-4"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].POSITION_NOM_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и POSITION_NOM имеют подходящие записи.")
				}
		} else { 
		  testRunner.fail("Передан некорректный тип ресурса")
		}

	testRunner.testCase.setPropertyValue(propertyName1, result1)
	testRunner.testCase.setPropertyValue(propertyName2, result2)
	testRunner.testCase.setPropertyValue(propertyName1+"CreatedByTest", CreatedByTest)
	testRunner.testCase.setPropertyValue(propertyName2+"CreatedByTest", CreatedByTest)
	log.info("Записан  параметр"+tableName1+ ".ID= "+result1)
	log.info("Записан  параметр "+tableName2+ ".ID= "+result2)


	}
	
checkExistenceResourceType("SPECIAL_AVAILABLE_RESOURCE")

//checkExistenceResourceType("AVAILABLE_RESOURCE")

//шаблончик вызова метода
//checkExistence("", "", "", "","")//"where archived = 0" )

//Подобрать ММ с маппингом


findEntitiesInDBwithConditionOrCreate("tableSpec", "ID,ARCHIVED,TITLE", "-2,0,'Специализация для нагрузочного тестирования'","specId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableEP", "ID,ARCHIVED", "-2,0", "epId",1,"where archived = 0" )

//findEntitiesInDBwithConditionOrCreate("tableRPCM", "ID,NSI_POSITION_CODE_CODE,SUPP_POSITION_CODE_CODE", "-2,'2','2'", "rpcmId",1)

//findEntitiesInDBwithConditionOrCreate("tablePosNom","ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")

findEntitiesInDBwithConditionOrCreate("tableDepNom", "ID,TITLE,\"START\" ", "-2, 'Департамент для нагрузочного тестирования',  TIMESTAMP '2015-11-01 00:00:00.000000' ", "dnId",1)

//findEntitiesInDBwithConditionOrCreate("tablePCalendar", "ID,\"DATE\",PARTICULARITY,ARCHIVED", "-2,TIMESTAMP '2018-01-01 00:00:00.000000', 'HOLIDAY', 0", "prodCalId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "(select min(id)-1),'CODE','Возрастная группа для нагрузочного тестирования',0,0", "agId",1,"where archived = 0 ")

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени ДР для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "arSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило ДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','REJECTION',1", "arSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило ДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','TREATMENT_REDEFINITION',30", "arSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило ДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','AGE_GROUP_RESTRICTION',32", "arSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени CДР для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "sarSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило CДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','REJECTION',1", "sarSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило CДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','AGE_GROUP_RESTRICTION',8", "sarSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило CДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','TREATMENT_REDEFINITION',7", "sarSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-6, 0, 'Правило CДР типа ROUTE_REDEFINITIONCTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','ROUTE_REDEFINITION',9", "sarSchruleRRTypeId",1,"where archived = 0 and KIND='ROUTE_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "-5,'CODE','Архивная возрастная группа для автотестирования',1,0", "archivedAgId",1,"where archived = 1 ")

getDoesntExisted("tableAG", "nonexistentAgId")

getDoesntExisted("tableSarRuleType", "nonexistentSarRuleTypeId")

getDoesntExisted("tableE", "eId")

//getDoesntExisted("JOB_EXECUTION", "JeId")</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/нескольких МУ/Локаций" id="cc24adb8-b871-4721-955a-edb7561c2ca6"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.getPropertyValue("moId")
def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()
def specId = testRunner.testCase.getPropertyValue("specId1")

//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =1000, int icount=15) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i <= icount; i++) {
	    if (row != 1) {
		    	if (i==icount){
		    		testRunner.fail("Запись в таблице "+tableName+" с id = "+propertyName+" не найдена.")
		    		break;
		    	}
		      log.info("Запись в таблице "+tableName+" с id = "+propertyName+" пока не найдена. Подождем...")
		      sleep(sleepTime)
		      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+tableName+" с id = "+propertyName+" создана.")
	        break;
	    }
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String id ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+id
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}

def isExistedWithCondition(String tableName, String cond ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE "+cond
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}
//функция отправляет указанное сообщение в укаанный топик
def sendMessageToKafka(String topicName, String s){
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
		log.info( "messageSender: "+topic+"; "+message )
		def key =  UUID.randomUUID().toString()
		def Date date = new Date(); 
		def  long  timestamp= date.getTime()
		def int partition =0
		String compoundMessage = "$message"
		producer.send(
			new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
			{ RecordMetadata metadata, Exception e ->
			log.info( "The offset of the record we just sent is: ${metadata.offset()}")
			} as Callback
			)
			}
	
	def mfMsg =s
	String messageCreateMf =mfMsg.toString()
	def topic= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	String topic1= topic.toString()
	//log.info(topic1+" "+messageCreateMf)
	messageSender(topic1, messageCreateMf)
	
	producer.close() 
}


def existedMO=isExisted("MEDICAL_ORGANIZATION ",moId) 

if (!isExisted("MEDICAL_ORGANIZATION ",moId) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMO.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МО в сервисе Запись.3")
			sendMessageToKafka("topicMO.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МО в сервисе Запись.3')
		}
		checkCreation("MEDICAL_ORGANIZATION ",moId)
}
else {
	log.info("Медицинская организация с id = "+moId+" уже создана")
		testRunner.testCase.setPropertyValue("moId",moId)
}


//Проверить, создана ли запись для головного МУ, если нет - досоздать
if (!isExisted("MEDICAL_FACILITY",moId) ){
	//log.info("Отправляю сообщение")
	sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	if (createEntityInAppointment3 == true){
		log.info("Требуется досоздать МУ в сервисе Запись.3")
		sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	}
	else {
		log.info('Не требуется досоздать МУ в сервисе Запись.3')
	}
	checkCreation("MEDICAL_FACILITY",moId)

}
else {
	log.info("Медицинское учреждение с id = "+moId+" уже создано")
}


// Досоздать необходимое количество МУ, если требуется

int mfId = moId.toInteger()
for (int i = 1; i <counterMF; i++){
	mfId = mfId +1
	if (!isExisted("MEDICAL_FACILITY",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МУ в сервисе Запись.3")
			sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МУ в сервисе Запись.3')
		}
		checkCreation("MEDICAL_FACILITY",mfId.toString())
	
	}
	else {
		log.info("Медицинское учреждение с id = "+mfId+" уже создано")
	}
	testRunner.testCase.setPropertyValue("mfId"+i, mfId.toString())
	
}

mfId = moId.toInteger()
for (int i = 1; i <=counterMF; i++){
	if (!isExisted("LOCATION",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicLocation.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")
		if (createEntityInAppointment3 == true){
				log.info("Требуется досоздать Локацию в сервисе Запись.3")
				sendMessageToKafka("topicLocation.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+moId+"""</ns5:medicalFacilityId></ns4:location>""")
		}
		else {
			log.info('Не требуется досоздать Локацию в сервисе Запись.3')
		}
		checkCreation("LOCATION",mfId.toString())
	}
	else {
		log.info("Локация с id = "+mfId+" уже создана")
	}
	mfId = mfId+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Cоздать оборудование и дождаться окончания синхронизации ресурса" id="5f8202fb-447d-49f0-8f6c-4f0a11d88359" disabled="true"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("eId")
def moId=testRunner.testCase.getPropertyValue("moId")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("mfId1")
def archived=testRunner.testCase.getPropertyValue("archived")
def equipmentModel=testRunner.testCase.getPropertyValue("em")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId")
def equipmentProfileId=testRunner.testCase.getPropertyValue("epId1")

def depId=testRunner.testCase.getPropertyValue("depId")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle")
def depNomId=testRunner.testCase.getPropertyValue("dnId1")
archived =testRunner.testCase.getPropertyValue("archived").toBoolean()
def personalizedService=testRunner.testCase.getPropertyValue("personalizedService")
def capacity=testRunner.testCase.getPropertyValue("capacity")
def tId1=testRunner.testCase.getPropertyValue("tId1")
def tId2=testRunner.testCase.getPropertyValue("tId2")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableE =testRunner.testCase.testSuite.project.getPropertyValue("tableE")
def i=testRunner.testCase.getPropertyValue("i")
log.info(tableE+id)

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived=\""""+archived+"""\" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")

for (int q = 0; q<=10;q++) {
	def getLastItem = "SELECT * FROM "+tableE+"  WHERE ID="+id
	log.info(getLastItem)
	def lastItem= sql.rows(getLastItem)

	if ( lastItem.size()== 0){
			log.info("Оборудование пока не найдено. Подождем")
			sleep(5000)
	}
	else if (q==10){
		testRunner.fail("Запись в таблице "+tableE+" не найдена")
	}
	else {
		log.info("Оборудование найдено.")
		testRunner.testCase.setPropertyValue("eId"+i, id.toString())
		testRunner.testCase.setPropertyValue("eIdCreatedByTest"+i, "1")
		break;
	}
}

String querySar="select * from \"RESOURCE\" where RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id
for (int j = 0; j < 21; j++) {
	
	//log.info(querySar)
	rowsSar = sql.rows(querySar)
	// log.info(rowsSar)
	if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
		log.info("Идет синхронизация ресруса. Подождём...")
		sleep(6000)
	}
	else {
		log.info("Синхрнизация ресурса завершена.")
		break;
	}
 }
if (rowsSar[0].SYNC_STATUS=='ERROR'){
	getResSyncError=(" SELECT DISTINCT rsem.code, rsemp.\"KEY\" as entity , rsemp.VALUE FROM RESOURCE_SYNC_ERROR rse JOIN "+tableRes+" res ON res.id=rse.RESOURCE_ID  JOIN RESOURCE_SYNC_ERROR_MSG rsem ON RSE.ID=RSEM.RESOURCE_SYNC_ERROR_ID JOIN RESOURCE_SYNC_ERROR_MSG_PR rsemp ON rsemp.RESOURCE_SYNC_ERROR_MSG_ID=rsem.id WHERE res.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND res.PARENT_ID ="+eId)
	errors=sql.rows(getResSyncError)
	testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+"завершена с ошибкой. Код ошибки "+errors[0].CODE+". Сущность, из-за которой произошла ошибка: "+errors[0].entity+", id="+errors[0].VALUE)
}

testRunner.testCase.setPropertyValue("sarId"+i, rowsSar[0].ID.toString())
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании оборудований" id="798aa449-a62f-46ed-9146-d88ade7c6b99"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("eId1").toInteger()
def moId=testRunner.testCase.getPropertyValue("moId")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("mfId1")
def archived=testRunner.testCase.getPropertyValue("archived")
def equipmentModel=testRunner.testCase.getPropertyValue("em")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId")
def equipmentProfileId=testRunner.testCase.getPropertyValue("epId1")

def depId=testRunner.testCase.getPropertyValue("depId")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle")
def depNomId=testRunner.testCase.getPropertyValue("dnId1")
archived =testRunner.testCase.getPropertyValue("archived").toBoolean()
def personalizedService=testRunner.testCase.getPropertyValue("personalizedService")
def capacity=testRunner.testCase.getPropertyValue("capacity")
def tId1=testRunner.testCase.getPropertyValue("tId1")
def tId2=testRunner.testCase.getPropertyValue("tId2")
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableE =testRunner.testCase.testSuite.project.getPropertyValue("tableE")
log.info(tableE+id)

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i<=countResources; i++){
	sendMessageToKafka("topicLocationEquipment.rir2","""<ns4:locationEquipment archived=\""""+archived+"""\" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
	for (int q = 0; q<=10;q++) {
		def getLastItem = "SELECT * FROM "+tableE+"  WHERE ID="+id
		log.info(getLastItem)
		def lastItem= sql.rows(getLastItem)
	
		if ( lastItem.size()== 0){
				log.info("Оборудование пока не найдено. Подождем")
				sleep(5000)
		}
		else if (q==10){
			testRunner.fail("Запись в таблице "+tableE+" не найдена")
		}
		else {
			log.info("Оборудование найдено.")
			testRunner.testCase.setPropertyValue("eId"+i, id.toString())
			testRunner.testCase.setPropertyValue("eIdCreatedByTest"+i, "1")
			break;
		}
	}
	id=id+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка синхронизации ресурсов" id="81c0e4c3-c7bd-4b70-acf2-ef052bcbaa37"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i&lt;=countResources; i++){
	def id=testRunner.testCase.getPropertyValue("eId"+i)
	String querySar="select * from "+tableRes+" where RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id
	for (int j = 0; j &lt; 23; j++) {
		
		//log.info(querySar)
		rowsSar = sql.rows(querySar)
		// log.info(rowsSar)
		if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
			log.info("Идет синхронизация ресруса. Подождём...")
			sleep(6000)
		}
		else {
			log.info("Синхрнизация ресурса завершена.")
			break;
		}
	 }
	if (rowsSar[0].SYNC_STATUS=='ERROR'){
		getResSyncError=(" SELECT DISTINCT rsem.code, rsemp.\"KEY\" as entity , rsemp.VALUE FROM RESOURCE_SYNC_ERROR rse JOIN "+tableRes+" res ON res.id=rse.RESOURCE_ID  JOIN RESOURCE_SYNC_ERROR_MSG rsem ON RSE.ID=RSEM.RESOURCE_SYNC_ERROR_ID JOIN RESOURCE_SYNC_ERROR_MSG_PR rsemp ON rsemp.RESOURCE_SYNC_ERROR_MSG_ID=rsem.id WHERE res.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND res.PARENT_ID ="+id)
		errors=sql.rows(getResSyncError)
		testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+"завершена с ошибкой. Код ошибки "+errors[0].CODE+". Сущность, из-за которой произошла ошибка: "+errors[0].entity+", id="+errors[0].VALUE)
	}
	
	testRunner.testCase.setPropertyValue("sarId"+i, rowsSar[0].ID.toString())
}</script></con:config></con:testStep><con:testStep type="groovy" name="Создание СДР" id="11f34e1f-88b3-4dd5-9b1d-f58ac9b46f32" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")


sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
def mfId = testRunner.testCase.getPropertyValue("mfId1")
//log.info(mfId)
def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()
def eId = testRunner.testCase.getPropertyValue("eId1").toInteger()
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")


String getExistedSAR=("select * from "+tableRes+" where SYNC_STATUS='OK' AND ARCHIVED=0 AND RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND MEDICAL_FACILITY_ID="+mfId)
log.info(getExistedSAR)
def existedSAR=sql.rows(getExistedSAR)
def countExistedSAR=existedSAR.size()
log.info(countExistedSAR)
def listSAR = []

sub = countResources-countExistedSAR

lastId= 0
if(countExistedSAR>0){
	if(countExistedSAR>countResources){
		lastId=countResources
	}
	else{
		lastId=countExistedSAR
	}
	for(int i=0; i<lastId; i++){
		nextI=i+1
		listSAR << existedSAR[i].PARENT_ID
		getEquipmentTreatment = ("select * from EQUIPMENT_TREATMENT where EQUIPMENT_ID="+existedSAR[0].PARENT_ID.toString())
		equipmentTreatments=sql.rows(getEquipmentTreatment)
		countET=equipmentTreatments.size()
		//log.info(equipmentTreatments)
		treatmentId = equipmentTreatments[0].TREATMENT_ID
	//	checkTreatmentWithMapping(treatmentId.toInteger())
	}
		log.info("countExistedSAR s"+nextI)
}

//log.info("lastId "+lastId)
if(sub>0){
	//equipmentCounter=1
	for(int i=lastId; i<countResources; i++){
		//nextI=i+1
		testRunner.testCase.setPropertyValue("firstIndex",lastId.toString())
		testRunner.testCase.setPropertyValue("i",lastId.toString())
		testRunner.testCase.setPropertyValue("eId",eId.toString())
		testRunner.testCase.setPropertyValue("eId"+i,eId.toString())
		testRunner.testCase.setPropertyValue("eId"+lastId,eId.toString())
		listSAR <<eId
		def tCase = testRunner.testCase.testSuite.testCases["СДР. Создание расписания, правила ,слотов"]
		def tStep = tCase.testSteps["Cоздать оборудование и дождаться окончания синхронизации ресурса"]
		tStep.run(testRunner, context)
		eId=eId+1
		//equipmentCounter=equipmentCounter+1
		//log.info("new s"+nextI)
	}
}
else{
	log.info("В базе уже есть нужное количество СДР ="+countExistedSAR+", а для теста требуется "+countResources)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сравнение количества ресурсов и досоздание" id="0088f0ef-cdb5-4d21-9411-bd196b4442bd" disabled="true"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId = testRunner.testCase.testSuite.getPropertyValue("mfId1")
def counter = testRunner.testCase.testSuite.getPropertyValue("counter").toInteger()
def dnId = testRunner.testCase.testSuite.getPropertyValue("dnId")
def pnId = testRunner.testCase.testSuite.getPropertyValue("pnId")
def epId = testRunner.testCase.testSuite.getPropertyValue("epId")
def tId = testRunner.testCase.testSuite.getPropertyValue("tId")
def specId = testRunner.testCase.testSuite.getPropertyValue("specId")
def scheduleCounter = testRunner.testCase.testSuite.getPropertyValue("scheduleCounter").toInteger()

def addResourceScheduleIdToProperties( String propertyName,String propertyNameNew, int  resNumber, int schedNumber, String options=""){
	def resourceValue=testRunner.testCase.testSuite.getPropertyValue(propertyName+resNumber.toString())
	for (int i=1; i<=schedNumber; i++){
		def scheduleValue=testRunner.testCase.testSuite.getPropertyValue("scheduleId"+i)
		String queryResourceSchedule="SELECT id FROM RESOURCE_SCHEDULE WHERE RESOURCE_ID ="+resourceValue.toString()+" and schedule_id="+scheduleValue+" "+options
		log.info(queryResourceSchedule)
		getResourceSchedule = sql.rows(queryResourceSchedule)
		log.info(getResourceSchedule)
		log.info(propertyNameNew+resNumber+"schedule"+i+" :" +getResourceSchedule[0].ID)
		testRunner.testCase.testSuite.setPropertyValue(propertyNameNew+resNumber+"schedule"+i, getResourceSchedule[0].ID.toString())
	}
}


def checkTreatmentWithMapping(int id){
	getTretment = ("SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID, RTLM.id AS RTLM_id FROM TREATMENT t JOIN ROUTE_TREATMENT_LDP_MAPPING rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN TREATMENT_CATEGORY tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id")	
	countTreatmentWithMap=sql(getTretment)
	//log.info("countTreatmentWithMap "+countTreatmentWithMap.getClass())
	treatments=sql.rows(getTretment)
	for ( int i =0; i<countTreatmentWithMap; i ++){
	tid=treatments[i].TREATMENT_ID.toInteger()
	//log.info(tid.getClass())
		if (tid==id){
			log.info('В созданных СДР указана та же ММ, что определена ранее. Перезапись не требется.')
			break	
		}
		else if(i == (countTreatmentWithMap - 1) ){
			log.info('В созданных СДР указана неактуальная ММ,требуется перезаписать.')
			def moId = testRunner.testCase.testSuite.getPropertyValue("moId")
			testRunner.testCase.testSuite.setPropertyValue("tId", treatments[0].TREATMENT_ID.toString())
			testRunner.testCase.testSuite.setPropertyValue("tIdcreatedByTest", "0")  
			testRunner.testCase.testSuite.setPropertyValue("treatmentCode", treatments[0].TREATMENT_CODE.toString())
			testRunner.testCase.testSuite.setPropertyValue("treatmentCodecreatedByTest", "0")
			sql.execute("UPDATE EQUIPMENT_TREATMENT SET TREATMENT_ID ="+treatments[0].TREATMENT_ID.toString()+", USE_BY_DEFAULT =1 WHERE EQUIPMENT_ID IN (SELECT id FROM EQUIPMENT WHERE MEDICAL_ORGANIZATION_ID ="+moId+")")
		}
		
	}
}

int minIdAR
int actualCounterAR=0
int minIdSAR
int actualCounterSAR=0
int quantityAR
int quantitySAR

String getExistedAR=("select * from \"RESOURCE\" where RESOURCE_KIND ='AVAILABLE_RESOURCE' AND MEDICAL_ORGANIZATION_ID="+moId)
String getExistedSAR=("select * from \"RESOURCE\" where RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND MEDICAL_ORGANIZATION_ID="+moId)

def countExistedAR=sql(getExistedAR)
def countExistedSAR=sql(getExistedSAR)
def listAR = []
def listSAR = []

if (countExistedSAR>0) {
	for ( int k = 0; k < countExistedSAR; k++) {
			def getSARparentId=sql.rows(getExistedSAR)
			listSAR << getSARparentId[k].PARENT_ID
			//log.info(listAR[k])
		}
	def getSARparentId=sql.rows(getExistedSAR)
	getEquipmentTreatment = ("select * from EQUIPMENT_TREATMENT where EQUIPMENT_ID="+getSARparentId[0].PARENT_ID.toString())
	countET=sql(getEquipmentTreatment)
	equipmentTreatment = sql.rows(getEquipmentTreatment)
	log.info(equipmentTreatment)
	treatmentId = equipmentTreatment[0].TREATMENT_ID
	checkTreatmentWithMapping(treatmentId.toInteger())
}

if (countExistedAR>0) {
	for ( int k = 0; k < countExistedAR; k++) {
			def getARparentId=sql.rows(getExistedAR)
			listAR << getARparentId[k].PARENT_ID
			//log.info(listAR[k])
		}
	
}


// Считаем, надо ли создавать доп ДРы, создаем, если надо
if(countExistedAR<counter){
		//log.info("countExistedAR ="+countExistedAR)
		//log.info("counter ="+counter)
		actualCounterAR=(counter-countExistedAR)
		minIdAR=moId.toInteger()+countExistedAR
		log.info("Для необходимого количетсва требуется досоздать "+actualCounterAR+" ДР. Начальный Id Исполнения должности= "+minIdAR)
			for (int j = 0; j < actualCounterAR; j++) {
				log.info("Создаю ДР № "+(j+1))
				sendMessageToKafka("topicJobExecution.rir2", """<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+minIdAR+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>Исполнение должности для нагрузочного тестирования</title><nomId>"""+pnId+"""</nomId><employee id="315666752696"><ns2:snils>01430774313</ns2:snils><ns2:lastName>Врач</ns2:lastName><ns2:firstName>Для</ns2:firstName><ns2:middleName>Нагрузочного тестирования</ns2:middleName></employee><jobExecutionVolume>0.5</jobExecutionVolume><jobExecutionPeriod><ns2:start>2018-08-07</ns2:start></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable="true" id="1"><ns2:title>Стоматологическое отделение</ns2:title><ns2:nomId>"""+dnId+"""</ns2:nomId></department><specializationId>125676810</specializationId><maternityLeave>0</maternityLeave><defaultMedicalFacilityId>"""+moId+"""</defaultMedicalFacilityId><defaultLocationId>"""+moId+"""</defaultLocationId></jobExecution>""")
				listAR << minIdAR
				log.info(listAR[j])
				minIdAR=minIdAR+1
				}
		}
	else {
		log.info("В базе уже есть нужное количество ДР ="+countExistedAR+", а для теста требуется "+counter)
		}


// Считаем, надо ли создавать доп СДРы, создаем, если надо	
if(countExistedSAR<counter){
	//log.info("countExistedSAR ="+countExistedSAR)
	//log.info("counter ="+counter)
	actualCounterSAR=(counter-countExistedSAR)
	minIdSAR=moId.toInteger()+countExistedSAR
	log.info("Для необходимого количетсва требуется досоздать "+actualCounterSAR+" СДР. Начальный Id Ооборудования = "+minIdSAR)
		for (int n = 0; n < actualCounterSAR; n++) {
			log.info("Создаю СДР № "+(n+1))
			sendMessageToKafka("topicLocationEquipment.rir2","""<ns4:locationEquipment archived="false" id=\""""+minIdSAR+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>90</ns4:equipmentId><ns4:equipmentTypeNsiId>141507542</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+epId+"""</ns4:equipmentProfileId><ns4:equipmentModel>Оборудование автотест рир2</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+moId+"""</ns5:medicalFacilityId><ns4:department id="7192532882"><ns5:title>Педиатрическое отделение № 1</ns5:title><ns5:nomId>125692869</ns5:nomId></ns4:department><ns4:locationId>"""+moId+"""</ns4:locationId><ns4:personalizedService>true</ns4:personalizedService><ns4:capacityForRoom>1</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""" )
			listSAR << minIdSAR
			log.info(listSAR[n])
			minIdSAR=minIdSAR+1
			}
	}
else{
	log.info("В базе уже есть нужное количество СДР ="+countExistedSAR+", а для теста требуется "+counter)
	}


sleep(6000)
int errors;
def resourcesWhithErrors = []
	 log.info(listAR.get(0))


for (int i = 0; i <counter.toInteger(); i++) {
	 log.info(listAR.get(i))

	// log.info(rowsAr)
	 for (int j = 0; j < 21; j++) {
		String queryAr="select * from \"RESOURCE\" where RESOURCE_KIND ='AVAILABLE_RESOURCE' AND PARENT_ID="+listAR.get(i)
		rowsAr = sql.rows(queryAr)
		if (rowsAr[0].SYNC_STATUS=='IN_PROGRESS') {
			log.info("щас будет слип АР")
			sleep(6000)
		}
		else {
			log.info("щас будет брэйк АР")
			break;
		}
	 }
	 if (rowsAr[0].SYNC_STATUS=='ERROR'){
		 errors=errors+1
		 resourcesWhithErrors << rowsAr[0].ID
		//log.info("Ошибка синхронизации ресурса с id="+rowsAr[0].ID)
	 }
	 testRunner.testCase.testSuite.setPropertyValue("arId"+(i+1), rowsAr[0].ID.toString())
	//addResourceIdToProperties("where RESOURCE_KIND ='AVAILABLE_RESOURCE' AND MEDICAL_FACILITY_ID="+moId, "arId", i)
	//addResourceScheduleIdToProperties( "arId","ar", i+1,scheduleCounter)
	

 if (errors != 0){
		testRunner.fail("Требуется перепроверить данные, для нескольких ресурсов синхпронизация завершилась с ошибкой. Количество несинхронизированных ресурсов:  "+errors+", их ID:"+resourcesWhithErrors)
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Подбор периода расписания" id="8d435c3f-833a-42da-87d3-c4790d232473"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def monthsNumberInSchedule = testRunner.testCase.getPropertyValue("countMonthsInSchedule").toInteger()

def schedulePeriodStart=LocalDate.now()
def schedulePeriodNextDay=schedulePeriodStart.plusDays(1)
def scheduleNewPeriodStart=schedulePeriodStart.plusMonths(monthsNumberInSchedule-1)
def schedulePeriodEnd=scheduleNewPeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def yesterday = schedulePeriodStart.minusDays(1)
def schedulePeriodNextDay2=schedulePeriodStart.plusMonths(1)
log.info("schedulePeriodNextDay "+schedulePeriodNextDay)
log.info("schedulePeriodNextDay2 "+schedulePeriodNextDay2)
log.info("Период расписания с "+schedulePeriodStart+" по "+schedulePeriodEnd)

testRunner.testCase.setPropertyValue("schedulePeriodNextDay",schedulePeriodNextDay.toString());
testRunner.testCase.setPropertyValue("schedulePeriodNextDay2",schedulePeriodNextDay2.toString());
testRunner.testCase.setPropertyValue("schedulePeriodStart1",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd1", schedulePeriodEnd.toString())
testRunner.testCase.setPropertyValue("schedulePeriodStart",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd", schedulePeriodEnd.toString())
log.info("Период расписания №1 с "+schedulePeriodStart+" по "+schedulePeriodEnd)
ospe=schedulePeriodEnd


	
for (int i=2; i &lt;5; i++ ){
	sps=ospe.plusDays(1)
	spe1=ospe.plusMonths(monthsNumberInSchedule)
	spe=spe1.with(TemporalAdjusters.lastDayOfMonth())
	testRunner.testCase.setPropertyValue("schedulePeriodStart"+i,sps.toString());
	testRunner.testCase.setPropertyValue("schedulePeriodEnd"+i, spe.toString())
	log.info("Период расписания №"+i+" с "+sps+" по "+spe)
	ospe=spe
}
def lastDayOfCurrentMounth=schedulePeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def schedulePeriodEndPlusYear=lastDayOfCurrentMounth.plusMonths(monthsNumberInSchedule+13)
testRunner.testCase.setPropertyValue("schedulePeriodEndPlusYear", schedulePeriodEndPlusYear.toString())
log.info("schedulePeriodEndPlusYear: "+schedulePeriodEndPlusYear)
testRunner.testCase.setPropertyValue("yesterday", yesterday.toString())
log.info("yesterday: "+yesterday)</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на текущий месяц" id="8872b1fd-6a69-426d-b806-7e1c57219e67"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на текущий месяц" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createScheduleForBranchRequest>
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>
         <v1:schedulePeriod>
            <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>
            <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>
         </v1:schedulePeriod>
      </typ:createScheduleForBranchRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="cf8f0ea0-b326-4840-850a-a1fddbac31e6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch на текущий месяц</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка корректности созданного расписания МУ" id="fd689d8b-4fcc-4172-a2c9-2f418dc1b7fb"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def schedulePeriodStart= testRunner.testCase.getPropertyValue("schedulePeriodStart1")
def schedulePeriodEnd= testRunner.testCase.getPropertyValue("schedulePeriodEnd1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	def scheduleStart = schedule[0].START_DATE.toString()
	def scheduleEnd = schedule[0].END_DATE.toString()
	def scheduleVersion = schedule[0].VERSION.toInteger()
	def scheduleMedicalFacilityId=schedule[0].MEDICAL_FACILITY_ID.toInteger()
	def scheduleIsActive =schedule[0].IS_ACTIVE.toInteger()
	//log.info("scheduleVERSION :"+schedule[0].VERSION.getClass()+ " scheduleMEDICAL_FACILITY_ID :"+schedule[0].MEDICAL_FACILITY_ID.getClass()+" scheduleIS_ACTIVE :"+schedule[0].IS_ACTIVE.getClass() )
	//log.info("schedule :"+schedule)
	//log.info("schedule.start :"+schedule[0].START_DATE.getClass())
	assert scheduleStart.replace(" 00:00:00.0","") == schedulePeriodStart
	assert scheduleEnd.replace(" 00:00:00.0","") == schedulePeriodEnd
	assert scheduleVersion ==0
	assert scheduleIsActive ==0
	assert scheduleMedicalFacilityId ==mfId
	log.info("Расписание № "+scheduleId+" создано корректно")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания расписаний ресурсов" id="3c9ffdbe-e654-4ac7-9004-8cb9013ec35f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()

def checkResourceKind(int id){
	resourseKind=""
		
}
getResources = ("SELECT * FROM \"RESOURCE\" WHERE SYNC_STATUS= 'OK' AND ARCHIVED=0 AND MEDICAL_FACILITY_ID="+mfId)
log.info(getResources)
resources= sql.rows(getResources)
countResources= sql(getResources)
if ( countResources== 0){
		testRunner.fail("Запись в таблице RESOURCE не найдена")
}

//log.info("countResources "+countResources)

for (int i=0; i&lt;countResources; i++){
	//log.info("i = "+i)
	getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE SCHEDULE_ID="+scheduleId+" AND RESOURCE_ID="+resources[i].ID)
	log.info(getResourceSchedule)
	resourceSchedule=sql.rows(getResourceSchedule)
	//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
	if ( sql(getResourceSchedule)== 0){
		testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс SCHEDULE_ID="+scheduleId+" и RESOURCE_ID="+resources[i].ID+" не найдена")
	}
	else {
		//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 0
	assert resourceSchedule[0].STATUS == "NOT_DEFINED"
	}
	log.info("Расписание для ресурса "+resources[i].ID+" создано успешно и соответствует требованиям.")
	if (resources[i].RESOURCE_KIND =="SPECIAL_AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("sarScheduleId1",resourceSchedule[0].ID.toString())
	}
	else if (resources[i].RESOURCE_KIND =="AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("arScheduleId1",resourceSchedule[0].ID.toString())
	}
}

log.info("Для всех ресурсов успешно созданы расписания.")</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в журнале о создании расписания МУ" id="1a7a8a27-0ea7-43df-94f4-fefef1973c7d"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.testSuite.getPropertyValue("mfId1").toInteger()

getJournal = ("SELECT * FROM JOURNAL WHERE ENTITY_ID="+scheduleId+" AND EVENT_DATE_TIME>=TO_DATE(SYSDATE) AND CODE = 'CREATE_MU_SCHEDULE' AND MU_ID="+mfId)
if ( sql(getJournal)== 0){
		testRunner.fail("Запись в таблице JOURNAL не найдена")
}else {
//log.info(getJournal)
log.info("Запись в таблице JOURNAL найдена")
}</script></con:config></con:testStep><con:testStep type="request" name="Создать график МУ" id="76a05231-d352-4795-ae0b-254174ec12eb"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>setWorkHoursForBranch</con:operation><con:request name="Создать график МУ" id="e6628133-5024-4f4c-928a-147333321c63"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>00:00:00</v1:start>\r
               <v1:end>23:59:59</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
                  <typ:workHoursForDayOfWeek>
            <v1:dayOfWeek>2</v1:dayOfWeek>
            <v1:workHours>
               <v1:start>00:00:00</v1:start>
               <v1:end>23:59:59</v1:end>
            </v1:workHours>
         </typ:workHoursForDayOfWeek>
         <typ:workHoursForDayOfWeek>
            <v1:dayOfWeek>3</v1:dayOfWeek>
            <v1:workHours>
               <v1:start>00:00:00</v1:start>
               <v1:end>23:59:59</v1:end>
            </v1:workHours>
         </typ:workHoursForDayOfWeek>
         <typ:workHoursForDayOfWeek>
            <v1:dayOfWeek>4</v1:dayOfWeek>
            <v1:workHours>
               <v1:start>00:00:00</v1:start>
               <v1:end>23:59:59</v1:end>
            </v1:workHours>
         </typ:workHoursForDayOfWeek>
         <typ:workHoursForDayOfWeek>
            <v1:dayOfWeek>5</v1:dayOfWeek>
            <v1:workHours>
               <v1:start>00:00:00</v1:start>
               <v1:end>23:59:59</v1:end>
            </v1:workHours>
         </typ:workHoursForDayOfWeek>
         <typ:workHoursForDayOfWeek>
            <v1:dayOfWeek>6</v1:dayOfWeek>
            <v1:workHours>
               <v1:start>00:00:00</v1:start>
               <v1:end>23:59:59</v1:end>
            </v1:workHours>
         </typ:workHoursForDayOfWeek>
         <typ:workHoursForDayOfWeek>
            <v1:dayOfWeek>7</v1:dayOfWeek>
            <v1:workHours>
               <v1:start>00:00:00</v1:start>
               <v1:end>23:59:59</v1:end>
            </v1:workHours>
         </typ:workHoursForDayOfWeek>
      </typ:setWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="919a637e-3473-491f-a905-47e9e86c19ea"/><con:assertion type="Simple Contains" id="d08eb85c-a15e-47e2-8616-61d5931e6391" name="Contains"><con:configuration><token>emptyResult</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на следующий месяц" id="df5e382f-1aa7-4600-a122-4c3bbcd9dbd9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на следующий месяц" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart2}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd2}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId 2" id="c138a0cd-e2d7-4d15-a169-34cfe7ba3a71"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch на следующий месяц</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка корректности созданного расписания МУ2" id="37420494-c5c7-4655-a3e2-fa94fd898ad2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId2")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def schedulePeriodStart= testRunner.testCase.getPropertyValue("schedulePeriodStart2")
def schedulePeriodEnd= testRunner.testCase.getPropertyValue("schedulePeriodEnd2")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	def scheduleStart = schedule[0].START_DATE.toString()
	def scheduleEnd = schedule[0].END_DATE.toString()
	def scheduleVersion = schedule[0].VERSION.toInteger()
	def scheduleMedicalFacilityId=schedule[0].MEDICAL_FACILITY_ID.toInteger()
	def scheduleIsActive =schedule[0].IS_ACTIVE.toInteger()
	//log.info("scheduleVERSION :"+schedule[0].VERSION.getClass()+ " scheduleMEDICAL_FACILITY_ID :"+schedule[0].MEDICAL_FACILITY_ID.getClass()+" scheduleIS_ACTIVE :"+schedule[0].IS_ACTIVE.getClass() )
	//log.info("schedule :"+schedule)
	//log.info("schedule.start :"+schedule[0].START_DATE.getClass())
	assert scheduleStart.replace(" 00:00:00.0","") == schedulePeriodStart
	assert scheduleEnd.replace(" 00:00:00.0","") == schedulePeriodEnd
	assert scheduleVersion ==0
	assert scheduleIsActive ==0
	assert scheduleMedicalFacilityId ==mfId
	log.info("Расписание № "+scheduleId+" создано корректно")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания расписаний ресурсов2" id="8f78ea54-b1f5-4db4-847e-81740910505d"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId2")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()

getResources = ("SELECT * FROM \"RESOURCE\" WHERE SYNC_STATUS= 'OK' AND ARCHIVED=0 AND MEDICAL_FACILITY_ID="+mfId)
//log.info(getResources)
resources= sql.rows(getResources)
countResources= sql(getResources)
if ( countResources== 0){
		testRunner.fail("Запись в таблице RESOURCE не найдена")
}

//log.info("countResources "+countResources)

for (int i=0; i&lt;countResources; i++){
	//log.info("i = "+i)
	getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE SCHEDULE_ID="+scheduleId+" AND RESOURCE_ID="+resources[i].ID)
	//log.info(getResourceSchedule)
	resourceSchedule=sql.rows(getResourceSchedule)
	//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
	if ( sql(getResourceSchedule)== 0){
		testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс SCHEDULE_ID="+scheduleId+" и RESOURCE_ID="+resources[i].ID+" не найдена")
	}
	else {
		//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 0
	assert resourceSchedule[0].STATUS == "NOT_DEFINED"
	}
	log.info("Расписание для ресурса "+resources[i].ID+" создано успешно и соответствует требованиям.")
}

log.info("Для всех ресурсов успешно созданы расписания.")</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в журнале о создании расписания МУ2" id="fab7ab58-7ab5-4126-8002-de0d8474fc8c"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId2")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()

getJournal = ("SELECT * FROM JOURNAL WHERE ENTITY_ID="+scheduleId+" AND EVENT_DATE_TIME>=TO_DATE(SYSDATE) AND CODE = 'CREATE_MU_SCHEDULE' AND MU_ID="+mfId)
if ( sql(getJournal)== 0){
		testRunner.fail("Запись в таблице JOURNAL не найдена")
}
else {
//log.info(getJournal)
log.info("Запись в таблице JOURNAL найдена")
}</script></con:config></con:testStep><con:testStep type="request" name="Получить расписание за период" id="d62ff1a7-a99e-466c-9380-31a518867c53"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getScheduleList</con:operation><con:request name="Получить расписание за период" id="be53b5fd-b251-42fa-acfe-95bed57b7e35"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getScheduleListRequest>\r
         <!--1 to 10 repetitions:-->\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <typ:datePeriod>\r
            <!--Optional:-->\r
            <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>\r
            <!--Optional:-->\r
            <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>\r
         </typ:datePeriod>\r
      </typ:getScheduleListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="0d6993a3-c48a-486a-9a41-48461e629dfb"/><con:assertion type="SOAP Fault Assertion" id="e09e31c3-5621-4832-997a-c001eb69bb24" name="Not SOAP Fault"/><con:assertion type="GroovyScriptAssertion" id="e3bdb920-4b68-444b-bd8f-dc0a29327c38" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.model.testsuite.TestRunner.*
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.*
import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def scheduleId = resp.getNodeValue('//*:schedule/@id')
def isMo = resp.getNodeValue('//*:schedule/@isMo')
def isLocked = resp.getNodeValue('//*:schedule/@isLocked')
def version = resp.getNodeValue('//*:schedule/@version')
def mf= resp.getNodeValue('//*:schedule/*:medicalFacilityId')
def start= resp.getNodeValue('//*:schedule/*:schedulePeriod/*:start')
def end= resp.getNodeValue('//*:schedule/*:schedulePeriod/*:end')
def scheduleActiveState= resp.getNodeValue('//*:schedule/*:scheduleActiveState')

def mfId = context.expand('${#TestCase#mfId1}')
def schedulePeriodStart = context.expand('${#TestCase#schedulePeriodStart1}')
def schedulePeriodEnd = context.expand('${#TestCase#schedulePeriodEnd1}')

assert scheduleId != null

assert isMo == 'false'

assert isLocked  ==  'false'

assert scheduleActiveState  ==  'false'

assert  start  == schedulePeriodStart

assert  mf  == mfId

assert  end  == schedulePeriodEnd

//log.info(mfId)
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="activateScheduleForBranch" id="5cd07fb6-6be7-42fe-8b52-1cb89343cdc4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>activateScheduleForBranch</con:operation><con:request name="activateScheduleForBranch" id="106c3edb-6112-4e73-b0ea-bc34c640d52a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:activateScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId1}</v1:scheduleId>\r
         <v1:entityVersion>0</v1:entityVersion>\r
      </typ:activateScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f681e61b-91f7-4048-85b5-4cef6f2318fc"/><con:assertion type="Simple Contains" id="351f3702-f85a-4938-b8c6-1de889c7638d" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId1" id="dae734f8-09a4-4b39-b089-1314adc70ccc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId1</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>activateScheduleForBranch</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:operationId</con:sourcePath><con:targetType>operationId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_1" id="cf5c7533-622b-4d03-9f42-b2ebcf9d9e74"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
    def operationId1= testRunner.testCase.getPropertyValue("operationId1")
     log.info ("ID операции: " + operationId1)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId1
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}
</script></con:config></con:testStep><con:testStep type="request" name="getOperationStatus_1" id="a61e8a09-d27d-49a6-82ea-d08cced793e6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>systemServiceBinding</con:interface><con:operation>getOperationStatus</con:operation><con:request name="getOperationStatus_1" id="97979afc-43ac-462f-b823-b3cbb6dd507e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SystemWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/systemService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getOperationStatusRequest>\r
         <v1:operationId>${#TestCase#operationId1}</v1:operationId>\r
      </typ:getOperationStatusRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="388a1900-4a87-4ccd-bfd8-86d1553774e6"/><con:assertion type="GroovyScriptAssertion" id="e4539f45-47f5-454e-ad3c-c2d4f54966d3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def result = resp.getNodeValue('//*:status/@id')
def resp_isCompleted = resp.getNodeValue('//*:status/*:isCompleted')
def resp_hasSucceded = resp.getNodeValue('//*:status/*:hasSucceded')
def resp_completenessStatus = resp.getNodeValue('//*:completenessProgress/*:completenessStatus')

// правило создано
assert result != null

// проверка isCompleted
assert resp_isCompleted == 'true'

// проверка hasSucceded 
assert resp_hasSucceded  ==  'true'

// проверка completenessStatus 
assert  resp_completenessStatus  == '100'

log.info(result)
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка активации расписания МУ" id="f36168f2-9e4a-4f73-a554-267fd958daf6"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def schedulePeriodStart= testRunner.testCase.getPropertyValue("schedulePeriodStart1")
def schedulePeriodEnd= testRunner.testCase.getPropertyValue("schedulePeriodEnd1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	def scheduleStart = schedule[0].START_DATE.toString()
	def scheduleEnd = schedule[0].END_DATE.toString()
	def scheduleVersion = schedule[0].VERSION.toInteger()
	def scheduleMedicalFacilityId=schedule[0].MEDICAL_FACILITY_ID.toInteger()
	def scheduleIsActive =schedule[0].IS_ACTIVE.toInteger()
	//log.info("scheduleVERSION :"+schedule[0].VERSION.getClass()+ " scheduleMEDICAL_FACILITY_ID :"+schedule[0].MEDICAL_FACILITY_ID.getClass()+" scheduleIS_ACTIVE :"+schedule[0].IS_ACTIVE.getClass() )
	//log.info("schedule :"+schedule)
	//log.info("schedule.start :"+schedule[0].START_DATE.getClass())
	assert scheduleStart.replace(" 00:00:00.0","") == schedulePeriodStart
	assert scheduleEnd.replace(" 00:00:00.0","") == schedulePeriodEnd
	assert scheduleVersion ==1
	assert scheduleIsActive ==1
	assert scheduleMedicalFacilityId ==mfId
	log.info("Расписание № "+scheduleId+" активировано корректно")
}</script></con:config></con:testStep><con:testStep type="request" name="createWTsarScheduleRule" id="3aef40ae-dcaa-4f77-921b-d94e3ee7ef8e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createWTsarScheduleRule" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestCase#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="Simple Contains" id="3be67c2a-c1a8-4eaf-9682-8095d80dbf6c" name="Contains"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="110b7f39-9a74-4de3-8178-283e09daa924" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить createSarRuleOperationId" id="6ed12339-657e-4f9d-97af-b9ab1b8c1a56"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>getOpId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createWTsarScheduleRule</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>createRuleOperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_2" id="874dc7cb-1ba8-4ec9-95f8-9fe6e2769114"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkSysopOperationStatus(String propertyName, int tryCount=30){
	def operationId = testRunner.testCase.getPropertyValue(propertyName)
	//Дожидаться успешности завершения операции
	for (int i =0; i&lt;=30; i++){
		String getSchedule=("SELECT * FROM SYSOP WHERE ID="+operationId)
		operation=sql.rows(getSchedule)
		if (operation[0].COMPLETENESS_PROGRESS==100 &amp; operation[0].IS_COMPLETED=='1' &amp; operation[0].HAS_SUCCEDED=='1'){
			log.info("Операция № "+operationId+" завершена успешно.")
			break
		}
		else if( i ==30){
			testRunner.fail("Операция № "+operationId+" не завершена или завершена неуспешно. Мы устали ждать. Процент завершения = "+operation[0].COMPLETENESS_PROGRESS+", успешность = "+operation[0].IS_COMPLETED+", завершенность = "+operation[0].HAS_SUCCEDED)
		}
		else {
			log.info("Операция № "+operationId+" еще не завершена. Подождем...")
		}
		sleep(5000)
	}
}

checkSysopOperationStatus("createRuleOperationId")</script></con:config></con:testStep><con:testStep type="request" name="getOperationStatus_2" id="7142c252-be2a-433d-883a-fd14516acf7c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>systemServiceBinding</con:interface><con:operation>getOperationStatus</con:operation><con:request name="getOperationStatus_2" id="97979afc-43ac-462f-b823-b3cbb6dd507e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SystemWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/systemService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getOperationStatusRequest>\r
         <v1:operationId>${#TestCase#createRuleOperationId}</v1:operationId>\r
      </typ:getOperationStatusRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="388a1900-4a87-4ccd-bfd8-86d1553774e6"/><con:assertion type="GroovyScriptAssertion" id="e4539f45-47f5-454e-ad3c-c2d4f54966d3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def result = resp.getNodeValue('//*:status/@id')
def resp_isCompleted = resp.getNodeValue('//*:status/*:isCompleted')
def resp_hasSucceded = resp.getNodeValue('//*:status/*:hasSucceded')
def resp_completenessStatus = resp.getNodeValue('//*:completenessProgress/*:completenessStatus')

// правило создано
assert result != null

// проверка isCompleted
assert resp_isCompleted == 'true'

// проверка hasSucceded 
assert resp_hasSucceded  ==  'true'

// проверка completenessStatus 
assert  resp_completenessStatus  == '100'

log.info(result)
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения статуса и версии расписания СДР" id="2297d947-b333-48f6-a7e7-b2d87201237f"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID Расписания СДР : " + sarScheduleId)

getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE ID="+sarScheduleId)
//log.info(getResourceSchedule)
resourceSchedule=sql.rows(getResourceSchedule)
//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
if ( sql(getResourceSchedule)== 0){
	testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс ID="+sarScheduleId+" не найдена")
}
else {
	//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 1
	assert resourceSchedule[0].STATUS == "DIRTY"
}
log.info("Расписание СДР  "+sarScheduleId+" успешно изменено")
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания правила WT расписания СДР" id="e03f4613-2798-455d-9831-86ea69aa94fb"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID Расписания СДР : " + sarScheduleId)
def sarSchruleWTTypeId= testRunner.testCase.getPropertyValue("sarSchruleWTTypeId1").toInteger()
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def schedulePeriodStart= testRunner.testCase.getPropertyValue("schedulePeriodStart1")
def schedulePeriodEnd= testRunner.testCase.getPropertyValue("schedulePeriodEnd1")
def agId= testRunner.testCase.getPropertyValue("agId1").toInteger()
def tId= testRunner.testCase.getPropertyValue("tId1").toInteger()
def startTime= testRunner.testCase.getPropertyValue("startTime")
def endTime= testRunner.testCase.getPropertyValue("endTime")
//Проверка наличия правила
getWTsarRules = ("SELECT * FROM SAR_SCHRULE WHERE RESOURCE_SCHEDULE_ID="+sarScheduleId+" AND SAR_SCHRULE_TYPE_ID="+sarSchruleWTTypeId)
//log.info(getResources)
WTsarRules= sql.rows(getWTsarRules)
countWTsarRules= sql(getWTsarRules)
if ( countWTsarRules== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE не найдена")
}
sarRuleId=WTsarRules[0].ID.toString()
//log.info("sarRuleId "+sarRuleId)
//Проверка наличия возрастной группы правила
getSarRulesAgeGroupe = ("SELECT * FROM SAR_SCHRULE_AGE_GROUP WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesAgeGroupe= sql.rows(getSarRulesAgeGroupe)
countSarRulesAgeGroupe= sql(getSarRulesAgeGroupe)
if ( countSarRulesAgeGroupe== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_AGE_GROUP не найдена")
}

//Проверка наличия шаблона дат правила
getSarRulesDates = ("SELECT * FROM SAR_SCHRULE_DATES WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesDates= sql.rows(getSarRulesDates)
countSarRulesDates= sql(getSarRulesDates)
if ( countSarRulesDates== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_DATES не найдена")
}
//log.info(sarRulesDates)
//Проверка наличия временного интервала правила
getSarRulesTime = ("SELECT * FROM SAR_SCHRULE_TIME_INTERVALS WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesTime= sql.rows(getSarRulesTime)
countSarRulesTime= sql(getSarRulesTime)
if ( countSarRulesTime== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_TIME_INTERVALS не найдена")
}

//Проверка наличия временного интервала правила
getSarRulesTreatment = ("SELECT * FROM SAR_SCHRULE_TREATMENT WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesTreatment= sql.rows(getSarRulesTreatment)
countSarRulesTreatment= sql(getSarRulesTreatment)
if ( countSarRulesTreatment== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_TREATMENT не найдена")
}
def ruleStart =  WTsarRules[0].START_DATE.toString()
def ruleEnd = WTsarRules[0].END_DATE.toString()
def timeStart =  sarRulesTime[0].START_TIME.toString()
def timeEnd = sarRulesTime[0].END_TIME.toString()
//log.info(ruleStart)
//log.info(ruleEnd)
//log.info(timeStart.replace(".0","").replace("1970-01-01 ",""))
//log.info(timeEnd.replace(".0","").replace("1970-01-01 ",""))


assert ruleStart.replace(" 00:00:00.0","") == schedulePeriodStart
assert ruleEnd.replace(" 00:00:00.0","") == schedulePeriodEnd
assert timeStart.replace(".0","").replace("1970-01-01 ","") == startTime
assert timeEnd.replace(".0","").replace("1970-01-01 ","") == endTime
assert WTsarRules[0].VERSION == 0
assert WTsarRules[0].LOCATION_ID == mfId
assert sarRulesAgeGroupe[0].AGE_GROUP_ID == agId
//log.info(sarRulesDates[0].TEMPLATE_TYPE_ID.getClass())
assert sarRulesDates[0].TEMPLATE_TYPE_ID == 1
assert sarRulesDates[0].EVEN_DAYS == null
assert sarRulesDates[0].MONDAY == "1"
assert sarRulesDates[0].TUESDAY == "1"
assert sarRulesDates[0].WEDNESDAY == "1"
assert sarRulesDates[0].THURSDAY == "1"
assert sarRulesDates[0].FRIDAY == "1"
assert sarRulesDates[0].SATURDAY == "0"
assert sarRulesDates[0].SUNDAY == "0"
assert sarRulesDates[0].FIRST_WEEK == null
assert sarRulesDates[0].SECOND_WEEK == null
assert sarRulesDates[0].THIRD_WEEK == null
assert sarRulesDates[0].FORTH_WEEK == null
assert sarRulesDates[0].FIFTH_WEEK == null
assert sarRulesDates[0].DAYS_OF_MONTH == null
assert sarRulesDates[0].IS_EXCLUDED_DATES_DEFINED == "0"
assert sarRulesDates[0].EXCEPT_HOLIDAYS == null
assert sarRulesDates[0].EXCEPT_MONDAY == null
assert sarRulesDates[0].EXCEPT_TUESDAY == null
assert sarRulesDates[0].EXCEPT_WEDNESDAY == null
assert sarRulesDates[0].EXCEPT_THURSDAY == null
assert sarRulesDates[0].EXCEPT_FRIDAY == null
assert sarRulesDates[0].EXCEPT_SATURDAY == null
assert sarRulesDates[0].EXCEPT_SUNDAY == null 
assert sarRulesTreatment[0].TREATMENT_ID == tId

testRunner.testCase.setPropertyValue("sarWTruleId", sarRuleId)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в журнале о создании правила расписания СДР" id="7c14128b-647c-49aa-ab1a-03c7fb785ad2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def ruleId= testRunner.testCase.getPropertyValue("sarWTruleId")
log.info ("ID правила р асписания ресурса: " + ruleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()

getJournal = ("SELECT * FROM JOURNAL WHERE ENTITY_ID="+ruleId+" AND EVENT_DATE_TIME>=TO_DATE(SYSDATE) AND CODE = 'CREATE_RULE' AND MU_ID="+mfId)
if ( sql(getJournal)== 0){
		testRunner.fail("Запись в таблице JOURNAL не найдена")
}
else {
log.info(getJournal)
log.info("Запись в таблице JOURNAL найдена")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка правила" id="4ad782cc-76ad-4869-80a9-310b75bfc29c" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;


        
    def sarSheduleRuleId= testRunner.testCase.getPropertyValue("sarSheduleRuleId")
     log.info ("ID правила: " + sarSheduleRuleId)
     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
     
     def resourceId= testRunner.testCase.getPropertyValue("resourceId")
      log.info ("ID композитного ресурса: " + resourceId)
      
	 //Проверка, что изменился статус расписание композитного ресурса
	 
     String sql_query_rS ="select  * from RESOURCE_SCHEDULE WHERE SCHEDULE_ID ="+scheduleId+"AND RESOURCE_ID =" + resourceId
     def rSchedule = sql.rows(sql_query_rS)
     String rScheduleStatus =rSchedule[0].STATUS
     assert rScheduleStatus=='DIRTY'
     
 } else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule на существующий период(E378)" id="de7859cf-789d-43e5-9c9d-799dddf1b2fd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule на существующий период(E378)" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestCase#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="Simple Contains" id="3be67c2a-c1a8-4eaf-9682-8095d80dbf6c" name="Contains E378"><con:configuration><token>E378</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d753539e-4671-411e-955a-b9663e79fc74"><con:configuration/></con:assertion><con:assertion type="Simple NotContains" id="0f45f72b-c278-4662-8896-5693411cac19" name="Not Contains operationID"><con:configuration><token>opertionId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_typeTreatmentRedefinition" id="7d479ee9-fbe6-4aa4-8e29-995c86b26a8d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_typeTreatmentRedefinition" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
 <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleTRTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTimeTR}</v1:start>
                     <v1:end>${#TestCase#endTimeTR}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:treatments>
                  <v1:treatmentId>${#TestCase#tId2}</v1:treatmentId>
               </typ:treatments>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="sarScheduleRuleID" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def result = resp.getNodeValue('//*:sarScheduleRule/@id')
assert result != null
log.info(result)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить createTRSarRuleOperationId" id="0811fc46-1705-48c9-984d-fb8fe1edfc47"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>getOpId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createSarScheduleRule_typeTreatmentRedefinition</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>createRuleOperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения статуса и версии расписания СДР2" id="b3ce0f33-96c1-4c76-bcfb-1d682f8214c2"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID Расписания СДР : " + sarScheduleId)

getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE ID="+sarScheduleId)
//log.info(getResourceSchedule)
resourceSchedule=sql.rows(getResourceSchedule)
//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
if ( sql(getResourceSchedule)== 0){
	testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс ID="+sarScheduleId+" не найдена")
}
else {
	//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 1
	assert resourceSchedule[0].STATUS == "DIRTY"
}
log.info("Расписание СДР  "+sarScheduleId+" успешно изменено")
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания правила TR расписания СДР" id="db80a2fd-5aea-4f2d-9460-814ae64c7bcc"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID Расписания СДР : " + sarScheduleId)
def sarSchruleTypeId= testRunner.testCase.getPropertyValue("sarSchruleTRTypeId1").toInteger()
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def schedulePeriodStart= testRunner.testCase.getPropertyValue("schedulePeriodStart1")
def schedulePeriodEnd= testRunner.testCase.getPropertyValue("schedulePeriodEnd1")
def agId= testRunner.testCase.getPropertyValue("agId1").toInteger()
def tId= testRunner.testCase.getPropertyValue("tId2").toInteger()
def startTime= testRunner.testCase.getPropertyValue("startTimeTR")
def endTime= testRunner.testCase.getPropertyValue("endTimeTR")
//Проверка наличия правила
getWTsarRules = ("SELECT * FROM SAR_SCHRULE WHERE RESOURCE_SCHEDULE_ID="+sarScheduleId+" AND SAR_SCHRULE_TYPE_ID="+sarSchruleTypeId)
//log.info(getResources)
WTsarRules= sql.rows(getWTsarRules)
countWTsarRules= sql(getWTsarRules)
if ( countWTsarRules== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE не найдена")
}
sarRuleId=WTsarRules[0].ID.toString()
//log.info("sarRuleId "+sarRuleId)
//Проверка наличия возрастной группы правила
/*
getSarRulesAgeGroupe = ("SELECT * FROM SAR_SCHRULE_AGE_GROUP WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesAgeGroupe= sql.rows(getSarRulesAgeGroupe)
countSarRulesAgeGroupe= sql(getSarRulesAgeGroupe)
if ( countSarRulesAgeGroupe== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_AGE_GROUP не найдена")
}
*/
//Проверка наличия шаблона дат правила
getSarRulesDates = ("SELECT * FROM SAR_SCHRULE_DATES WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesDates= sql.rows(getSarRulesDates)
countSarRulesDates= sql(getSarRulesDates)
if ( countSarRulesDates== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_DATES не найдена")
}
//log.info(sarRulesDates)
//Проверка наличия временного интервала правила
getSarRulesTime = ("SELECT * FROM SAR_SCHRULE_TIME_INTERVALS WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesTime= sql.rows(getSarRulesTime)
countSarRulesTime= sql(getSarRulesTime)
if ( countSarRulesTime== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_TIME_INTERVALS не найдена")
}

//Проверка наличия временного интервала правила
getSarRulesTreatment = ("SELECT * FROM SAR_SCHRULE_TREATMENT WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesTreatment= sql.rows(getSarRulesTreatment)
countSarRulesTreatment= sql(getSarRulesTreatment)
if ( countSarRulesTreatment== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_TREATMENT не найдена")
}
def ruleStart =  WTsarRules[0].START_DATE.toString()
def ruleEnd = WTsarRules[0].END_DATE.toString()
def timeStart =  sarRulesTime[0].START_TIME.toString()
def timeEnd = sarRulesTime[0].END_TIME.toString()
//log.info(ruleStart)
//log.info(ruleEnd)
//log.info(timeStart.replace(".0","").replace("1970-01-01 ",""))
//log.info(timeEnd.replace(".0","").replace("1970-01-01 ",""))


assert ruleStart.replace(" 00:00:00.0","") == schedulePeriodStart
assert ruleEnd.replace(" 00:00:00.0","") == schedulePeriodEnd
assert timeStart.replace(".0","").replace("1970-01-01 ","") == startTime
assert timeEnd.replace(".0","").replace("1970-01-01 ","") == endTime
assert WTsarRules[0].VERSION == 0
assert WTsarRules[0].LOCATION_ID == null
//assert sarRulesAgeGroupe[0].AGE_GROUP_ID == agId
//log.info(sarRulesDates[0].TEMPLATE_TYPE_ID.getClass())
assert sarRulesDates[0].TEMPLATE_TYPE_ID == 1
assert sarRulesDates[0].EVEN_DAYS == null
assert sarRulesDates[0].MONDAY == "1"
assert sarRulesDates[0].TUESDAY == "1"
assert sarRulesDates[0].WEDNESDAY == "1"
assert sarRulesDates[0].THURSDAY == "1"
assert sarRulesDates[0].FRIDAY == "1"
assert sarRulesDates[0].SATURDAY == "0"
assert sarRulesDates[0].SUNDAY == "0"
assert sarRulesDates[0].FIRST_WEEK == null
assert sarRulesDates[0].SECOND_WEEK == null
assert sarRulesDates[0].THIRD_WEEK == null
assert sarRulesDates[0].FORTH_WEEK == null
assert sarRulesDates[0].FIFTH_WEEK == null
assert sarRulesDates[0].DAYS_OF_MONTH == null
assert sarRulesDates[0].IS_EXCLUDED_DATES_DEFINED == "0"
assert sarRulesDates[0].EXCEPT_HOLIDAYS == null
assert sarRulesDates[0].EXCEPT_MONDAY == null
assert sarRulesDates[0].EXCEPT_TUESDAY == null
assert sarRulesDates[0].EXCEPT_WEDNESDAY == null
assert sarRulesDates[0].EXCEPT_THURSDAY == null
assert sarRulesDates[0].EXCEPT_FRIDAY == null
assert sarRulesDates[0].EXCEPT_SATURDAY == null
assert sarRulesDates[0].EXCEPT_SUNDAY == null 
assert sarRulesTreatment[0].TREATMENT_ID == tId

testRunner.testCase.setPropertyValue("sarTRruleId", sarRuleId)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в журнале о создании правила расписания СДР2" id="938b5b20-e726-4012-be3b-d7b720e01b03"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def ruleId= testRunner.testCase.getPropertyValue("sarTRruleId")
log.info ("ID правила р асписания ресурса: " + ruleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()

getJournal = ("SELECT * FROM JOURNAL WHERE ENTITY_ID="+ruleId+" AND EVENT_DATE_TIME>=TO_DATE(SYSDATE) AND CODE = 'CREATE_RULE' AND MU_ID="+mfId)
if ( sql(getJournal)== 0){
		testRunner.fail("Запись в таблице JOURNAL не найдена")
}
else {
log.info(getJournal)
log.info("Запись в таблице JOURNAL найдена")
}</script></con:config></con:testStep><con:testStep type="request" name="applyChangesSarSchedule" id="4a869b18-3f79-4154-9c56-4138ddefd684"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>applyChangesToSarSchedule</con:operation><con:request name="applyChangesSarSchedule" id="e2b3cdf5-1215-415c-bd67-3de633ed9509"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:applyChangesToSarScheduleRequest>\r
         <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
      </typ:applyChangesToSarScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="31573b9d-4fc6-46ae-b040-c7b98731a656"/><con:assertion type="Simple Contains" id="12a337d2-441b-40f2-ae67-5430a3599e7e" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId" id="8e9fef44-b84c-44d4-8e5a-05bb5b5a141f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>applyChangesSarSchedule</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:operationId</con:sourcePath><con:targetType>applyOperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка наличия сообщения в топике" id="cb274621-9ce7-4e61-9bbb-422ef50de67d"><con:settings/><con:config><script>import org.apache.kafka.clients.consumer.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerRecord
import java.time.*
import groovy.sql.Sql
import groovy.test.GroovyAssert
//if (context.dbConnect != null) {    
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

    def operationId= testRunner.testCase.getPropertyValue("applyOperationId")
     log.info ("ID операции: " + operationId)

Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers',bootstrapServers)
props.put('group.id', UUID.randomUUID().toString())
props.put("enable.auto.commit", "false")
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
props.put('key.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
props.put('value.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
def offset =null
def value =null
def consumer = new KafkaConsumer(props)

 consumer.subscribe(['ScheduleChange'])

 long t = System.currentTimeMillis()
long end = t + 18000;
while (System.currentTimeMillis()&lt;end)
{
log.info ( "while ")
ConsumerRecords&lt;String, String> records = consumer.poll(18000)
log.info ( "records")
for (ConsumerRecord&lt;String, String> record : records)
{
	def rootNode = new XmlSlurper().parseText(record.value())
	if (rootNode.operationId ==operationId) {
		log.info("Есть сообщение с operationId= "+ operationId)
		value= record.value()
		log.info ("Сообщение:"+value)
		consumer.close()
		log.info ( "close ")
		return
		}
log.info ( "offset = " + record.offset() +" value = " + record.value())
//offset= record.offset()
//value= record.value()
}
}
consumer.close()
log.info ( "close ")
//log.info (offset)
log.info (value)
//def valueScheduleChange = value

//} else {
//	log.error("Соединение с бд не установлено!");
//}	</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в SYSOP и отсутствия ошибок" id="0ab92602-757c-4a1c-b7a0-1688ae512da6"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def operationId= testRunner.testCase.getPropertyValue("applyOperationId")
def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID операции : " + operationId)

getOperation = ("SELECT * FROM SYSOP WHERE ID="+operationId+" AND MODEL LIKE '%applyChangesToSarSchedule%' AND MODEL LIKE '%"+sarScheduleId+"%'")
operation= sql.rows(getOperation)
if ( sql(getOperation)== 0){
		testRunner.fail("Запись в таблице SYSOP не найдена")
}
else {
	log.info("Запись в таблице SYSOP найдена")
	 assert operation[0].COMPLETENESS_PROGRESS == 0
	assert operation[0].IS_COMPLETED == "0"
	assert operation[0].HAS_SUCCEDED == "0"
	getOperationErrors=("SELECT * FROM SYSOP_MSG WHERE SYSOP_ID="+operationId)
	assert sql(getOperationErrors) ==0
	//log.info(sql.rows(getOperationErrors))
	log.info("Операция  № "+operationId+" создана без ошибок")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка блокировки расписаний" id="1854514e-db11-4231-9ac9-2fe1e8069b6d"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)

if ( sql(getBlockedSchedule)> 0){
		testRunner.fail("Запись в таблице SYSTEM_LOCKS для расписания МУнайдена")
}
else {
	log.info("Запись в таблице SYSTEM_LOCKS для расписания МУ не найдена")
}

getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)== 0){
		testRunner.fail("Запись в таблице SYSTEM_LOCKS для расписания ресурса не найдена")
}
else {
	log.info("Запись в таблице SYSTEM_LOCKS для расписания ресурса найдена")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения статуса и версии расписания СДР3" id="0f911f2a-cf2f-4d53-b316-eabbdbf6ba46"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID Расписания СДР : " + sarScheduleId)

getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE ID="+sarScheduleId)
//log.info(getResourceSchedule)
resourceSchedule=sql.rows(getResourceSchedule)
//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
if ( sql(getResourceSchedule)== 0){
	testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс ID="+sarScheduleId+" не найдена")
}
else {
	//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 2
	assert resourceSchedule[0].STATUS == "CALCULATION"
}
log.info("Расписание СДР  "+sarScheduleId+" успешно изменено")
</script></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция" id="ec742701-c868-496f-911d-47a91a88f448" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
 //username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
    def operationId= testRunner.testCase.getPropertyValue("operationId")
     log.info ("ID операции: " + operationId)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}

} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об успешной операции" id="b3a9e7ae-5d8d-489f-8def-8a2af5fc1799"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;


username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendOperationStatusMessage = testRunner.testCase.testSuite.getPropertyValue("sendOperationStatusMessage").toBoolean()
if (sendOperationStatusMessage == true){
	def operationId= testRunner.testCase.getPropertyValue("applyOperationId")
	log.info ("ID операции: " + operationId)
	def res_scheduleIsId= testRunner.testCase.getPropertyValue("sarScheduleId1")
	log.info ("ID res_scheduleIs: " + res_scheduleIsId)
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}
	   def sL ="""<operationStatusMessage operationId=\""""+operationId+"""\" schemaVersion="1.0"><resourceScheduleStatus resourceScheduleId=\""""+res_scheduleIsId+"""\"><hasSucceeded>true</hasSucceeded></resourceScheduleStatus></operationStatusMessage>"""
	   String messageL =sL.toString()
	  def topicChangeProcessing= testRunner.testCase.testSuite.project.getPropertyValue("topicScheduleChangeProcessingStatus")
	   log.info(topicChangeProcessing)
	  String topicChangeProcessing1= topicChangeProcessing.toString()
	  messageSender(topicChangeProcessing1, messageL)
	
	
	producer.close()
}
else {
	log.info("Отправка сообщения об учпешности операции не требуется, ожидаю сообщения от сервиса Запись.3");
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_3" id="04e57ef0-876a-425d-a9b5-0f71a4ad31a6"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkSysopOperationStatus(String propertyName, int tryCount=30){
	def operationId = testRunner.testCase.getPropertyValue(propertyName)
	//Дожидаться успешности завершения операции
	for (int i =0; i&lt;=30; i++){
		String getSchedule=("SELECT * FROM SYSOP WHERE ID="+operationId)
		operation=sql.rows(getSchedule)
		if (operation[0].COMPLETENESS_PROGRESS==100 &amp; operation[0].IS_COMPLETED=='1' &amp; operation[0].HAS_SUCCEDED=='1'){
			log.info("Операция № "+operationId+" завершена успешно.")
			break
		}
		else if( i ==30){
			testRunner.fail("Операция № "+operationId+" не завершена или завершена неуспешно. Мы устали ждать. Процент завершения = "+operation[0].COMPLETENESS_PROGRESS+", успешность = "+operation[0].IS_COMPLETED+", завершенность = "+operation[0].HAS_SUCCEDED)
		}
		else {
			log.info("Операция № "+operationId+" еще не завершена. Подождем...")
		}
		sleep(5000)
	}
}

checkSysopOperationStatus("applyOperationId")</script></con:config></con:testStep><con:testStep type="request" name="getOperationStatus3" id="5c3383f6-0ed1-46fe-a461-d8da32c3fd2a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>systemServiceBinding</con:interface><con:operation>getOperationStatus</con:operation><con:request name="getOperationStatus3" id="97979afc-43ac-462f-b823-b3cbb6dd507e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SystemWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/systemService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getOperationStatusRequest>\r
         <v1:operationId>${#TestCase#applyOperationId}</v1:operationId>\r
      </typ:getOperationStatusRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="388a1900-4a87-4ccd-bfd8-86d1553774e6"/><con:assertion type="GroovyScriptAssertion" id="e4539f45-47f5-454e-ad3c-c2d4f54966d3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def result = resp.getNodeValue('//*:status/@id')
def resp_isCompleted = resp.getNodeValue('//*:status/*:isCompleted')
def resp_hasSucceded = resp.getNodeValue('//*:status/*:hasSucceded')
def resp_completenessStatus = resp.getNodeValue('//*:completenessProgress/*:completenessStatus')

// правило создано
assert result != null

// проверка isCompleted
assert resp_isCompleted == 'true'

// проверка hasSucceded 
assert resp_hasSucceded  ==  'true'

// проверка completenessStatus 
assert  resp_completenessStatus  == '100'

log.info(result)
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка снятия блокировки расписаний" id="89988cff-c02d-4c1e-9bd1-3179b34093af"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)
if ( sql(getBlockedSchedule)> 0){
		testRunner.fail("Блокировка для расписания МУ не снята")
}
else {
	log.info("Блокировка для расписания МУ снята")
}

getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)> 0){
		testRunner.fail("Блокировка для расписания ресурса не снята")
}
else {
	log.info("Блокировка для расписания ресурса снята")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения статуса и версии расписания СДР4" id="4bb82048-107c-45f2-8936-ff34ca850f2e"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID Расписания СДР : " + sarScheduleId)

getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE ID="+sarScheduleId)
//log.info(getResourceSchedule)
resourceSchedule=sql.rows(getResourceSchedule)
//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
if ( sql(getResourceSchedule)== 0){
	testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс ID="+sarScheduleId+" не найдена")
}
else {
	//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 3
	assert resourceSchedule[0].STATUS == "READY"
}
log.info("Расписание СДР  "+sarScheduleId+" успешно изменено")
</script></con:config></con:testStep><con:testStep type="request" name="clearSarSchedule" id="2c344fd0-be0d-4c93-895e-9367c9ea9be0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>clearSarSchedule</con:operation><con:request name="clearSarSchedule" id="2caa8649-8d57-4c1d-91ff-2c9613fe0dc4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:clearSarScheduleRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
      </typ:clearSarScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d553396d-4020-48c9-8825-bf5ab6778b1a"/><con:assertion type="SOAP Fault Assertion" id="00ff315c-56ea-4e8b-98dc-a1e64266fc2e" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="002fea67-bded-48f7-a49d-2fd44ad46d8b" name="Contains"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId 2" id="192c39be-f1a6-4cb4-b0a4-b848d3e5fe9c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>clearSarSchedule</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>clearOperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка наличия сообщения в топике2" id="cd2e8d3d-4a60-4cfe-b7d5-c30eda155682"><con:settings/><con:config><script>import org.apache.kafka.clients.consumer.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerRecord
import java.time.*
import groovy.sql.Sql
import groovy.test.GroovyAssert
//if (context.dbConnect != null) {    
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

    def operationId= testRunner.testCase.getPropertyValue("applyOperationId")
     log.info ("ID операции: " + operationId)

Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers',bootstrapServers)
props.put('group.id', UUID.randomUUID().toString())
props.put("enable.auto.commit", "false")
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
props.put('key.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
props.put('value.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
def offset =null
def value =null
def consumer = new KafkaConsumer(props)

 consumer.subscribe(['ScheduleChange'])

 long t = System.currentTimeMillis()
long end = t + 18000;
while (System.currentTimeMillis()&lt;end)
{
log.info ( "while ")
ConsumerRecords&lt;String, String> records = consumer.poll(18000)
log.info ( "records")
for (ConsumerRecord&lt;String, String> record : records)
{
	def rootNode = new XmlSlurper().parseText(record.value())
	if (rootNode.operationId ==operationId) {
		log.info("Есть сообщение с operationId= "+ operationId)
		value= record.value()
		log.info ("Сообщение:"+value)
		consumer.close()
		log.info ( "close ")
		return
		}
log.info ( "offset = " + record.offset() +" value = " + record.value())
//offset= record.offset()
//value= record.value()
}
}
consumer.close()
log.info ( "close ")
//log.info (offset)
log.info (value)
//def valueScheduleChange = value

//} else {
//	log.error("Соединение с бд не установлено!");
//}	</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка блокировки расписаний2" id="0410891e-2a2d-42fa-a5ba-805f1a25f7bc"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)

if ( sql(getBlockedSchedule)> 0){
		testRunner.fail("Запись в таблице SYSTEM_LOCKS для расписания МУ найдена")
}
else {
	log.info("Запись в таблице SYSTEM_LOCKS для расписания МУ не найдена")
}

getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)== 0){
		testRunner.fail("Запись в таблице SYSTEM_LOCKS для расписания ресурса не найдена")
}
else {
	log.info("Запись в таблице SYSTEM_LOCKS для расписания ресурса найдена")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в SYSOP и отсутствия ошибок2" id="1742b564-6f98-4755-afb9-eb2daf6fafd2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def operationId= testRunner.testCase.getPropertyValue("clearOperationId")
def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID операции : " + operationId)

getOperation = ("SELECT * FROM SYSOP WHERE ID="+operationId+" AND MODEL LIKE '%clearSarSchedule%' AND MODEL LIKE '%"+sarScheduleId+"%'")
operation= sql.rows(getOperation)
if ( sql(getOperation)== 0){
		testRunner.fail("Запись в таблице SYSOP не найдена")
}
else {
	log.info("Запись в таблице SYSOP найдена")
	 assert operation[0].COMPLETENESS_PROGRESS == 0
	assert operation[0].IS_COMPLETED == "0"
	assert operation[0].HAS_SUCCEDED == "0"
	getOperationErrors=("SELECT * FROM SYSOP_MSG WHERE SYSOP_ID="+operationId)
	assert sql(getOperationErrors) ==0
	//log.info(sql.rows(getOperationErrors))
	log.info("Операция  № "+operationId+" создана без ошибок")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об успешной операции2" id="4314cba3-9679-4935-92de-68c3e1cccfb2"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;


username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
def sendOperationStatusMessage = testRunner.testCase.testSuite.getPropertyValue("sendOperationStatusMessage").toBoolean()
if (sendOperationStatusMessage == true){
	def operationId= testRunner.testCase.getPropertyValue("clearOperationId")
	log.info ("ID операции: " + operationId)
	def res_scheduleIsId= testRunner.testCase.getPropertyValue("sarScheduleId1")
	log.info ("ID res_scheduleIs: " + res_scheduleIsId)
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	log.info( "messageSender: "+topic+"; "+message )
	def key =  UUID.randomUUID().toString()
	def Date date = new Date(); 
	def  long  timestamp= date.getTime()
	def int partition =0
	String compoundMessage = "$message"
	producer.send(
	       new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	       { RecordMetadata metadata, Exception e ->
	           log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	       } as Callback
	)
	}
	def sL ="""<operationStatusMessage operationId=\""""+operationId+"""\" schemaVersion="1.0"><resourceScheduleStatus resourceScheduleId=\""""+res_scheduleIsId+"""\"><hasSucceeded>true</hasSucceeded></resourceScheduleStatus></operationStatusMessage>"""
	String messageL =sL.toString()
	def topicChangeProcessing= testRunner.testCase.testSuite.project.getPropertyValue("topicScheduleChangeProcessingStatus")
	log.info(topicChangeProcessing)
	String topicChangeProcessing1= topicChangeProcessing.toString()
	messageSender(topicChangeProcessing1, messageL)
	
	
	producer.close()

}
else {
	log.error("Отправка сообщения об учпешности операции не требуется, ожидаю сообщения от сервиса Запись.3");
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_4" id="61df28b2-9a22-4a02-a2dd-61cdc8987caf"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkSysopOperationStatus(String propertyName, int tryCount=30){
	def operationId = testRunner.testCase.getPropertyValue(propertyName)
	//Дожидаться успешности завершения операции
	for (int i =0; i&lt;=30; i++){
		String getSchedule=("SELECT * FROM SYSOP WHERE ID="+operationId)
		operation=sql.rows(getSchedule)
		if (operation[0].COMPLETENESS_PROGRESS==100 &amp; operation[0].IS_COMPLETED=='1' &amp; operation[0].HAS_SUCCEDED=='1'){
			log.info("Операция № "+operationId+" завершена успешно.")
			break
		}
		else if( i ==30){
			testRunner.fail("Операция № "+operationId+" не завершена или завершена неуспешно. Мы устали ждать. Процент завершения = "+operation[0].COMPLETENESS_PROGRESS+", успешность = "+operation[0].IS_COMPLETED+", завершенность = "+operation[0].HAS_SUCCEDED)
		}
		else {
			log.info("Операция № "+operationId+" еще не завершена. Подождем...")
		}
		sleep(5000)
	}
}

checkSysopOperationStatus("clearOperationId")</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка снятия блокировки расписаний2" id="ed030313-1691-4de2-ad2b-13c7f6701530"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)
if ( sql(getBlockedSchedule)> 0){
		testRunner.fail("Блокировка для расписания МУ не снята")
}
else {
	log.info("Блокировка для расписания МУ снята")
}

getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)> 0){
		testRunner.fail("Блокировка для расписания ресурса не снята")
}
else {
	log.info("Блокировка для расписания ресурса снята")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения статуса и версии расписания СДР5" id="9d92ec5e-20f3-48e1-9701-4d1b03ce6bd9"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID Расписания СДР : " + sarScheduleId)

getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE ID="+sarScheduleId)
//log.info(getResourceSchedule)
resourceSchedule=sql.rows(getResourceSchedule)
//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
if ( sql(getResourceSchedule)== 0){
	testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс ID="+sarScheduleId+" не найдена")
}
else {
	//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 4
	assert resourceSchedule[0].STATUS == "NOT_DEFINED"
}
log.info("Расписание СДР  "+sarScheduleId+" успешно изменено")
</script></con:config></con:testStep><con:testStep type="groovy" name="Получить версию расписания" id="fb94b967-9a9d-4d47-96c7-7bc5befbd8f6"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	testRunner.testCase.setPropertyValue("scheduleVersion1", schedule[0].VERSION.toString());
}</script></con:config></con:testStep><con:testStep type="request" name="deactivateScheduleForBranch" id="18f7af69-3e12-4e8c-80ac-7163abb77d5b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deactivateScheduleForBranch</con:operation><con:request name="deactivateScheduleForBranch" id="35bca311-e77c-460a-9f9e-4a991182ae3f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deactivateScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId1}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#scheduleVersion1}</v1:entityVersion>\r
      </typ:deactivateScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="2ad5eeba-1b90-452f-a50b-6a11499cde9b"/><con:assertion type="SOAP Fault Assertion" id="f87f7830-1aa6-4edf-94a2-4f54329dd6b0" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId3" id="b394c548-580d-4eb8-bf63-4f6f394cbf44"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deactivateScheduleForBranch</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>deactivateOperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка наличия сообщения в топике3" id="81aff001-6b1b-4a70-acc8-e42ca07b408b"><con:settings/><con:config><script>import org.apache.kafka.clients.consumer.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerRecord
import java.time.*
import groovy.sql.Sql
import groovy.test.GroovyAssert
//if (context.dbConnect != null) {    
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

    def operationId= testRunner.testCase.getPropertyValue("deactivateOperationId")
     log.info ("ID операции: " + operationId)

Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers',bootstrapServers)
props.put('group.id', UUID.randomUUID().toString())
props.put("enable.auto.commit", "false")
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
props.put('key.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
props.put('value.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
def offset =null
def value =null
def consumer = new KafkaConsumer(props)

 consumer.subscribe(['ScheduleChange'])

 long t = System.currentTimeMillis()
long end = t + 18000;
while (System.currentTimeMillis()&lt;end)
{
log.info ( "while ")
ConsumerRecords&lt;String, String> records = consumer.poll(18000)
log.info ( "records")
for (ConsumerRecord&lt;String, String> record : records)
{
	def rootNode = new XmlSlurper().parseText(record.value())
	if (rootNode.operationId ==operationId) {
		log.info("Есть сообщение с operationId= "+ operationId)
		value= record.value()
		log.info ("Сообщение:"+value)
		consumer.close()
		log.info ( "close ")
		return
		}
log.info ( "offset = " + record.offset() +" value = " + record.value())
//offset= record.offset()
//value= record.value()
}
}
consumer.close()
log.info ( "close ")
//log.info (offset)
log.info (value)
//def valueScheduleChange = value

//} else {
//	log.error("Соединение с бд не установлено!");
//}	</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в SYSOP и отсутствия ошибок3" id="486b64fe-4d77-421e-bace-ed6937a84bbd" disabled="true"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def operationId= testRunner.testCase.getPropertyValue("deactivateOperationId")
def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID операции : " + operationId)

getOperation = ("SELECT * FROM SYSOP WHERE ID="+operationId+" AND MODEL LIKE '%deactivateScheduleForBranch%' AND MODEL LIKE '%"+scheduleId+"%'")
operation= sql.rows(getOperation)
if ( sql(getOperation)== 0){
		testRunner.fail("Запись в таблице SYSOP не найдена")
}
else {
	log.info("Запись в таблице SYSOP найдена")
	 assert operation[0].COMPLETENESS_PROGRESS == 0
	assert operation[0].IS_COMPLETED == "0"
	assert operation[0].HAS_SUCCEDED == "0"
	getOperationErrors=("SELECT * FROM SYSOP_MSG WHERE SYSOP_ID="+operationId)
	assert sql(getOperationErrors) ==0
	//log.info(sql.rows(getOperationErrors))
	log.info("Операция  № "+operationId+" создана без ошибок")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка блокировки расписаний3" id="054b00ba-aeef-40ff-b365-8fe052fabc65" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)

if ( sql(getBlockedSchedule)== 0){
		testRunner.fail("Запись в таблице SYSTEM_LOCKS для расписания МУ не найдена")
}
else {
	log.info("Запись в таблице SYSTEM_LOCKS для расписания МУ найдена")
}

getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)== 0){
		testRunner.fail("Запись в таблице SYSTEM_LOCKS для расписания ресурса не найдена")
}
else {
	log.info("Запись в таблице SYSTEM_LOCKS для расписания ресурса найдена")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об успешной операции3" id="9df41841-c7a8-441f-9560-e5147e515486" disabled="true"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;


username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
def sendOperationStatusMessage = testRunner.testCase.testSuite.getPropertyValue("sendOperationStatusMessage").toBoolean()
	if (sendOperationStatusMessage == true){
	def operationId= testRunner.testCase.getPropertyValue("deactivateOperationId")
	log.info ("ID операции: " + operationId)
	def res_scheduleIsId= testRunner.testCase.getPropertyValue("sarScheduleId1")
	log.info ("ID res_scheduleIs: " + res_scheduleIsId)
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}
	   def sL ="""<operationStatusMessage operationId=\""""+operationId+"""\" schemaVersion="1.0"><resourceScheduleStatus resourceScheduleId=\""""+res_scheduleIsId+"""\"><hasSucceeded>true</hasSucceeded></resourceScheduleStatus></operationStatusMessage>"""
	   String messageL =sL.toString()
	  def topicChangeProcessing= testRunner.testCase.testSuite.project.getPropertyValue("topicScheduleChangeProcessingStatus")
	   log.info(topicChangeProcessing)
	  String topicChangeProcessing1= topicChangeProcessing.toString()
	  messageSender(topicChangeProcessing1, messageL)
	
	
	producer.close()
}
else {
	log.error("Отправка сообщения об учпешности операции не требуется, ожидаю сообщения от сервиса Запись.3");
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_5" id="1ecced01-0238-40b6-b0d8-e9552d48e90a"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkSysopOperationStatus(String propertyName, int tryCount=30){
	def operationId = testRunner.testCase.getPropertyValue(propertyName)
	//Дожидаться успешности завершения операции
	for (int i =0; i&lt;=30; i++){
		String getSchedule=("SELECT * FROM SYSOP WHERE ID="+operationId)
		operation=sql.rows(getSchedule)
		if (operation[0].COMPLETENESS_PROGRESS==100 &amp; operation[0].IS_COMPLETED=='1' &amp; operation[0].HAS_SUCCEDED=='1'){
			log.info("Операция № "+operationId+" завершена успешно.")
			break
		}
		else if( i ==30){
			testRunner.fail("Операция № "+operationId+" не завершена или завершена неуспешно. Мы устали ждать. Процент завершения = "+operation[0].COMPLETENESS_PROGRESS+", успешность = "+operation[0].IS_COMPLETED+", завершенность = "+operation[0].HAS_SUCCEDED)
		}
		else {
			log.info("Операция № "+operationId+" еще не завершена. Подождем...")
		}
		sleep(5000)
	}
}

checkSysopOperationStatus("deactivateOperationId")</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка снятия блокировки расписаний3" id="a73fe6ae-d477-459a-b620-4cd7bf126e11"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)
if ( sql(getBlockedSchedule)> 0){
		testRunner.fail("Блокировка для расписания МУ не снята")
}
else {
	log.info("Блокировка для расписания МУ снята")
}

getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)> 0){
		testRunner.fail("Блокировка для расписания ресурса не снята")
}
else {
	log.info("Блокировка для расписания ресурса снята")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка деактивации расписания МУ" id="a6081873-98fe-4ae3-beff-9ac21718ffab"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def schedulePeriodStart= testRunner.testCase.getPropertyValue("schedulePeriodStart1")
def schedulePeriodEnd= testRunner.testCase.getPropertyValue("schedulePeriodEnd1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	def scheduleStart = schedule[0].START_DATE.toString()
	def scheduleEnd = schedule[0].END_DATE.toString()
	def scheduleVersion = schedule[0].VERSION.toInteger()
	def scheduleMedicalFacilityId=schedule[0].MEDICAL_FACILITY_ID.toInteger()
	def scheduleIsActive =schedule[0].IS_ACTIVE.toInteger()
	//log.info("scheduleVERSION :"+schedule[0].VERSION.getClass()+ " scheduleMEDICAL_FACILITY_ID :"+schedule[0].MEDICAL_FACILITY_ID.getClass()+" scheduleIS_ACTIVE :"+schedule[0].IS_ACTIVE.getClass() )
	//log.info("schedule :"+schedule)
	//log.info("schedule.start :"+schedule[0].START_DATE.getClass())
	assert scheduleStart.replace(" 00:00:00.0","") == schedulePeriodStart
	assert scheduleEnd.replace(" 00:00:00.0","") == schedulePeriodEnd
	assert scheduleVersion ==2
	assert scheduleIsActive ==0
	assert scheduleMedicalFacilityId ==mfId
	log.info("Расписание № "+scheduleId+" деактивировано корректно")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Получить версию расписания2" id="3ad54b6d-1d66-4fec-bb28-d2e1a4fcdcdf"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId2")
getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	testRunner.testCase.setPropertyValue("scheduleVersion2", schedule[0].VERSION.toString());
}</script></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="bd925a7a-00b5-4561-9a2c-351cdbd0598c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId2}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#scheduleVersion2}</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId4" id="2605b67c-945e-4d0f-8ab0-d3e2e52c2e28"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteScheduleForBranch</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>deleteSchedule2OperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_6" id="7cc9cec0-7275-42ab-97c1-c43568b37a22"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkSysopOperationStatus(String propertyName, int tryCount=30){
	def operationId = testRunner.testCase.getPropertyValue(propertyName)
	//Дожидаться успешности завершения операции
	for (int i =0; i&lt;=30; i++){
		String getSchedule=("SELECT * FROM SYSOP WHERE ID="+operationId)
		operation=sql.rows(getSchedule)
		if (operation[0].COMPLETENESS_PROGRESS==100 &amp; operation[0].IS_COMPLETED=='1' &amp; operation[0].HAS_SUCCEDED=='1'){
			log.info("Операция № "+operationId+" завершена успешно.")
			break
		}
		else if( i ==30){
			testRunner.fail("Операция № "+operationId+" не завершена или завершена неуспешно. Мы устали ждать. Процент завершения = "+operation[0].COMPLETENESS_PROGRESS+", успешность = "+operation[0].IS_COMPLETED+", завершенность = "+operation[0].HAS_SUCCEDED)
		}
		else {
			log.info("Операция № "+operationId+" еще не завершена. Подождем...")
		}
		sleep(5000)
	}
}

checkSysopOperationStatus("deleteSchedule2OperationId")</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия блокировки расписаний4" id="21dc3569-8558-4567-963e-b5bb585b8f85"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId2")
//def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)
if ( sql(getBlockedSchedule)> 0){
		testRunner.fail("Блокировка для расписания МУ не снята")
}
else {
	log.info("Блокировка для расписания МУ снята")
}
/*
getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)> 0){
		testRunner.fail("Блокировка для расписания ресурса не снята")
}
else {
	log.info("Блокировка для расписания ресурса снята")
}*/</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка удаления расписания МУ" id="9a8af9ea-5053-4721-ac38-f1d8e4057809"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId2")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)> 0){
		testRunner.fail("Запись в таблице SCHEDULE не удалена."+schedule)
}
else {
	log.info("Запись в таблице SCHEDULE удалена.")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Получить версию расписания3" id="2b244636-ff06-443c-abe1-ef602e39d67e"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	testRunner.testCase.setPropertyValue("scheduleVersion1", schedule[0].VERSION.toString());
}</script></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch2" id="5bf5cfd8-3dd0-433e-9e15-be90d500ba3f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch2" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId1}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#scheduleVersion1}</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId5" id="ec3ad1b3-300b-4234-b4e6-8d29dc1323c1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteScheduleForBranch2</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>deleteSchedule1OperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_7" id="47f66fb6-a2a2-4cd6-8ad5-d21ec5632688"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkSysopOperationStatus(String propertyName, int tryCount=30){
	def operationId = testRunner.testCase.getPropertyValue(propertyName)
	//Дожидаться успешности завершения операции
	for (int i =0; i&lt;=30; i++){
		String getSchedule=("SELECT * FROM SYSOP WHERE ID="+operationId)
		operation=sql.rows(getSchedule)
		if (operation[0].COMPLETENESS_PROGRESS==100 &amp; operation[0].IS_COMPLETED=='1' &amp; operation[0].HAS_SUCCEDED=='1'){
			log.info("Операция № "+operationId+" завершена успешно.")
			break
		}
		else if( i ==30){
			testRunner.fail("Операция № "+operationId+" не завершена или завершена неуспешно. Мы устали ждать. Процент завершения = "+operation[0].COMPLETENESS_PROGRESS+", успешность = "+operation[0].IS_COMPLETED+", завершенность = "+operation[0].HAS_SUCCEDED)
		}
		else {
			log.info("Операция № "+operationId+" еще не завершена. Подождем...")
		}
		sleep(5000)
	}
}

checkSysopOperationStatus("deleteSchedule1OperationId")</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия блокировки расписаний5" id="f8ea18de-f27e-45f8-899e-9b70169df550"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)
if ( sql(getBlockedSchedule)> 0){
		testRunner.fail("Блокировка для расписания МУ не снята")
}
else {
	log.info("Блокировка для расписания МУ снята")
}

getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)> 0){
		testRunner.fail("Блокировка для расписания ресурса не снята")
}
else {
	log.info("Блокировка для расписания ресурса снята")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка удаления расписания МУ/ресурса и правил" id="909f31ef-040a-44c7-bc48-98d9e35f0dff"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)> 0){
		testRunner.fail("Запись в таблице SCHEDULE не удалена."+schedule)
}
else {
	log.info("Запись в таблице SCHEDULE удалена.")
}

getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE ID="+resScheduleId)
//log.info(getResourceSchedule)
resourceSchedule=sql.rows(getResourceSchedule)
//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
if ( sql(getResourceSchedule)> 0){
	testRunner.fail("Запись в таблице RESOURCE_SCHEDULE не удалена."+resourceSchedule)
}
else {
	log.info("Запись в таблице RESOURCE_SCHEDULE удалена.")
}

getSarRules = ("SELECT * FROM SAR_SCHRULE WHERE RESOURCE_SCHEDULE_ID="+resScheduleId)
//log.info(getSarRules)
rules=sql.rows(getSarRules)
//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
if ( sql(getSarRules)> 0){
	testRunner.fail("Запись в таблице SAR_SCHRULE не удалена."+rules)
}
else {
	log.info("Запись в таблице SAR_SCHRULE удалена.")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление ресурсов и род сущностей" id="8ebd6bcc-f10e-4c62-b022-ea7e9af58918"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

 moId = testRunner.testCase.getPropertyValue("moId")
count=testRunner.testCase.getPropertyValue("countUsedEntity").toInteger()
count=testRunner.testCase.getPropertyValue("countUsedEntity").toInteger()
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteResource=("delete from "+tableRes+" where MEDICAL_ORGANIZATION_ID="+moId)
log.info(deleteResource)
sql.execute(deleteResource)
equipmentList="0"
countResources= testRunner.testCase.getPropertyValue("countResources").toInteger()

log.info("countResources="+countResources)

tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

for(int i=1; i&lt;=countResources; i++){
	log.info("countResources="+countResources)
	log.info("i="+ i)
	eId= testRunner.testCase.getPropertyValue("eId"+ i)
	log.info("eId="+eId)
	//created=testRunner.testCase.getPropertyValue("eIdCreatedByTest" + i).toBoolean()
	//log.info("created="+created)
	//if(created==true){
		deleteEquipmentTreatments=("delete from "+tableET+" where EQUIPMENT_ID=" + eId)
		log.info(deleteEquipmentTreatments)
		sql.execute(deleteEquipmentTreatments)
	//}
}

deleteCreatedByTestInTestCaseWithCounter("tableE","eId",countResources)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление МО/МУ/Локаций" id="4ae79e16-3e7f-427f-99c0-1e6e2b457670"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")


def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		log.info("Щас удалю проперти "+propertyName+i)
		testRunner.testCase.removeProperty(propertyName+i)
		log.info("Удалил. Щас удалю проперти "+propertyName+"CreatedByTest"+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
		log.info("Для №  "+i+" всё")
	}

}


def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()

def clearMoMfLocationByMoIDWithCount(String moPropertyName, int counter){
	tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
	tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
	tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
	tableMFWH = testRunner.testCase.testSuite.project.getPropertyValue("tableMFWH")
	tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
	moId=testRunner.testCase.getPropertyValue("moId")
	 id=moId.toLong()
	for (int i=1; i&lt;=counter; i++){
		deleteLoc=("delete from "+tableLoc+" where ID="+id)
		log.info(deleteLoc)
		sql.execute(deleteLoc)
		deleteMFWH=("delete from "+tableMFWH+" where MEDICAL_FACILITY_ID="+id)
		log.info(deleteMFWH)
		sql.execute(deleteMFWH)
		deleteMF=("delete from "+tableMF+" where ID="+id)
		log.info(deleteMF)
		sql.execute(deleteMF)
		deleteAO=("delete from "+tableAO+" where ID="+id)
		log.info(deleteAO)
		sql.execute(deleteAO)
		id=id+1
	}
	deleteMO=("delete from "+tableMO+" where ID="+moId)
	log.info(deleteMO)
	sql.execute(deleteMO)
	for (int i=1; i&lt;=counter; i++){
		testRunner.testCase.removeProperty("mfId"+i)
	}
}

clearMoMfLocationByMoIDWithCount("moId", counterMF)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление вспомогательных сущностей" id="624eb973-c8e8-4572-99f0-0dc033237da0"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteCreatedByTestInTestCaseWithCounter("tableSpec", "specId")
deleteCreatedByTestInTestCaseWithCounter("tableEP", "epId")
deleteCreatedByTestInTestCaseWithCounter("tableDepNom", "dnId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleWTTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRejectionTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleAGTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleTRTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRRTypeId")
//deleteCreatedByTestInTestCaseWithCounter("tableResTyp", "resourceTypeSAR")
</script></con:config></con:testStep><con:testStep type="groovy" name="clearTreatmentsWithMapping" id="9e8e598f-63f1-4ac6-8a7b-b31c5cb9da5c"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def clearTreatmentsWithMapping(int count, int firsIndex=1 ){
	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRouteTreatmentMapping=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentId = testRunner.testCase.getPropertyValue("tId"+i)
		tCreatedByTest=testRunner.testCase.getPropertyValue("tCreatedByTest"+i)
		treatmentCode = testRunner.testCase.getPropertyValue("tCode"+i)
		tMappingCode = testRunner.testCase.getPropertyValue("tMappingCode"+i) 
		tMappingCodeCreatedByTest=testRunner.testCase.getPropertyValue("tMappingCodeCreatedByTest"+i)
		if(tMappingCodeCreatedByTest=='1'){
			log.info("Для записи №"+i+" маппинг был создан автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableRouteTreatmentMapping+" WHERE TREATMENT_CODE='"+treatmentCode+"'")
		}
		if(tCreatedByTest=='1'){
			log.info("Для записи №"+i+" ММ №"+treatmentId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableT+"  WHERE ID='"+treatmentId+"'")
		}
		log.info("Очищаю проперти маппинга и ММ для записи №"+i)
		testRunner.testCase.removeProperty("tMappingCode"+i) 
		testRunner.testCase.removeProperty("tMappingCodeCreatedByTest"+i)
		testRunner.testCase.removeProperty("tCode"+i)
		testRunner.testCase.removeProperty("tCreatedByTest"+i)
		testRunner.testCase.removeProperty("tId"+i)
	}
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentCategoryId = testRunner.testCase.getPropertyValue("tcId"+i)
		tcCreatedByTest=testRunner.testCase.getPropertyValue("tcCreatedByTest"+i)
		if(tcCreatedByTest=='1'){
			("Для записи №"+i+" Категория ММ №"+treatmentCategoryId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableTC+"  WHERE ID='"+treatmentCategoryId+"'")
		}
		log.info("Очищаю проперти Категории ММ для записи №"+i)
		testRunner.testCase.removeProperty("tcId"+i)
		testRunner.testCase.removeProperty("tcCreatedByTest"+i)
		testRunner.testCase.removeProperty("tcCode"+i)
	}
}

clearTreatmentsWithMapping(countTreatment)
</script></con:config></con:testStep><con:properties><con:property><con:name>applyOperationId</con:name><con:value>4341929</con:value></con:property><con:property><con:name>archived</con:name><con:value>false</con:value></con:property><con:property><con:name>capacity</con:name><con:value>1</con:value></con:property><con:property><con:name>clearOperationId</con:name><con:value>4341930</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countMonthsInSchedule</con:name><con:value>1</con:value></con:property><con:property><con:name>countResources</con:name><con:value>1</con:value></con:property><con:property><con:name>countSchedule</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatment</con:name><con:value>2</con:value></con:property><con:property><con:name>countUsedEntity</con:name><con:value>2</con:value></con:property><con:property><con:name>createRuleOperationId</con:name><con:value>4341928</con:value></con:property><con:property><con:name>deactivateOperationId</con:name><con:value>4341931</con:value></con:property><con:property><con:name>deleteSchedule1OperationId</con:name><con:value>4341933</con:value></con:property><con:property><con:name>deleteSchedule2OperationId</con:name><con:value>4341932</con:value></con:property><con:property><con:name>depId</con:name><con:value>123456</con:value></con:property><con:property><con:name>depTitle</con:name><con:value>Описание отделения автотет рир2</con:value></con:property><con:property><con:name>em</con:name><con:value>Оборудование для СДР автотест рир2</con:value></con:property><con:property><con:name>endTime</con:name><con:value>20:00:00</con:value></con:property><con:property><con:name>endTimeTR</con:name><con:value>10:00:00</con:value></con:property><con:property><con:name>equipmentId</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentTypeId</con:name><con:value>1236</con:value></con:property><con:property><con:name>i</con:name><con:value>0</con:value></con:property><con:property><con:name>moId</con:name><con:value>-10</con:value></con:property><con:property><con:name>operationId</con:name><con:value>1434762</con:value></con:property><con:property><con:name>operationId1</con:name><con:value>4341926</con:value></con:property><con:property><con:name>personalizedService</con:name><con:value>true</con:value></con:property><con:property><con:name>sarScheduleId1</con:name><con:value>4852854</con:value></con:property><con:property><con:name>sarScheduleId2</con:name><con:value>4709508</con:value></con:property><con:property><con:name>sarSheduleRuleId</con:name><con:value>880756</con:value></con:property><con:property><con:name>sarSheduleRuleVersion</con:name><con:value>2661481</con:value></con:property><con:property><con:name>sarSheduleRuleVersion_t4</con:name><con:value>0</con:value></con:property><con:property><con:name>sarTRruleId</con:name><con:value>5467255</con:value></con:property><con:property><con:name>sarWTruleId</con:name><con:value>5467254</con:value></con:property><con:property><con:name>scheduleId1</con:name><con:value>2661488</con:value></con:property><con:property><con:name>scheduleId2</con:name><con:value>2661489</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd1</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd2</con:name><con:value>2021-11-30</con:value></con:property><con:property><con:name>schedulePeriodEnd3</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>schedulePeriodEnd4</con:name><con:value>2022-01-31</con:value></con:property><con:property><con:name>schedulePeriodEndPlusYear</con:name><con:value>2022-12-31</con:value></con:property><con:property><con:name>schedulePeriodNextDay</con:name><con:value>2021-10-27</con:value></con:property><con:property><con:name>schedulePeriodNextDay2</con:name><con:value>2021-11-26</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-10-26</con:value></con:property><con:property><con:name>schedulePeriodStart1</con:name><con:value>2021-10-26</con:value></con:property><con:property><con:name>schedulePeriodStart2</con:name><con:value>2021-11-01</con:value></con:property><con:property><con:name>schedulePeriodStart3</con:name><con:value>2021-12-01</con:value></con:property><con:property><con:name>schedulePeriodStart4</con:name><con:value>2022-01-01</con:value></con:property><con:property><con:name>scheduleVersion1</con:name><con:value>2</con:value></con:property><con:property><con:name>scheduleVersion2</con:name><con:value>0</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>2</con:value></con:property><con:property><con:name>startTime</con:name><con:value>08:00:00</con:value></con:property><con:property><con:name>startTimeTR</con:name><con:value>09:00:00</con:value></con:property><con:property><con:name>yesterday</con:name><con:value>2021-10-25</con:value></con:property><con:property><con:name>resTypeForSarId</con:name><con:value>156645371</con:value></con:property><con:property><con:name>epId</con:name><con:value>146017593</con:value></con:property><con:property><con:name>resTypeForSarIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>epIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>resTypeForArId</con:name><con:value>158297691</con:value></con:property><con:property><con:name>pnId</con:name><con:value>109</con:value></con:property><con:property><con:name>resTypeForArIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>pnIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>prodCalId1</con:name><con:value>18</con:value></con:property><con:property><con:name>prodCalIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>agId1</con:name><con:value>127631257</con:value></con:property><con:property><con:name>agIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleWTTypeId1</con:name><con:value>1</con:value></con:property><con:property><con:name>arSchruleWTTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleRejectionTypeId1</con:name><con:value>10</con:value></con:property><con:property><con:name>arSchruleRejectionTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleTRTypeId1</con:name><con:value>9</con:value></con:property><con:property><con:name>arSchruleTRTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleAGTypeId1</con:name><con:value>7</con:value></con:property><con:property><con:name>arSchruleAGTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>archivedAgId1</con:name><con:value>127631289</con:value></con:property><con:property><con:name>archivedAgIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>nonexistentAgId1</con:name><con:value>127631291</con:value></con:property><con:property><con:name>nonexistentSarRuleTypeId1</con:name><con:value>9</con:value></con:property><con:property><con:name>sarId1</con:name><con:value>30101090030</con:value></con:property><con:property><con:name>sarId2</con:name><con:value>30101090027</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="8609217b-4b93-44a4-9848-1432b9e3ff68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Подбор данных" searchProperties="true" disabled="true"><con:settings><con:setting id="9635f5eb-2a32-4194-87f1-43745c25792afileName">Подбор-данных</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Создание МО/нескольких МУ/Локаций 2" id="21376bf1-44e3-48a3-bd01-bbd0dd3811ed" disabled="true"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.testSuite.getPropertyValue("moId")
def mfCounter = testRunner.testCase.testSuite.getPropertyValue("mfCounter").toInteger()
def scheduleCounter = testRunner.testCase.testSuite.getPropertyValue("scheduleCounter").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()
def specId = testRunner.testCase.testSuite.getPropertyValue("specId")

//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =300, int icount=10) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i < icount; i++) {
	    if (row != 1) {
	      log.info("Запись в таблице "+tableName+" с id = "+propertyName+" не найдена.")
	      sleep(sleepTime)
	      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+tableName+" с id = "+propertyName+" создана.")
	        break;
	    }
	   // assert i < 3
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String propertyName) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}

def isExistedWithCondition(String tableName, String propertyName, int count, String condition="" ) { 
	String query="SELECT *  FROM  "+tableName+ "  "+condition
	//log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	//log.info(row)
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
	return rows == 1
}
//функция отправляет указанное сообщение в укаанный топик
def sendMessageToKafka(String topicName, String s){
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
		log.info( "messageSender: "+topic+"; "+message )
		def key =  UUID.randomUUID().toString()
		def Date date = new Date(); 
		def  long  timestamp= date.getTime()
		def int partition =0
		String compoundMessage = "$message"
		producer.send(
			new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
			{ RecordMetadata metadata, Exception e ->
			log.info( "The offset of the record we just sent is: ${metadata.offset()}")
			} as Callback
			)
			}
	
	def mfMsg =s
	String messageCreateMf =mfMsg.toString()
	def topic= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	String topic1= topic.toString()
	//log.info(topic1+" "+messageCreateMf)
	messageSender(topic1, messageCreateMf)
	
	producer.close() 
}

def findEntitiesInDBwithConditionOrCreateWithKafkaMessage (String tableName, String kafkaTopic, String textMessage, String propertyName, int count, String condition="" , boolean appointment3Int ="false" ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	//log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i<n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+tableName+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"createdByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i<count ; i++){
			nextI=i+1
			//log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"createdByTest"+nextI, "1")
		}
	}
}

def existedMO=isExisted("MEDICAL_ORGANIZATION ",moId) 

if (!isExisted("MEDICAL_ORGANIZATION ",moId) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMO.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МО в сервисе Запись.3")
			sendMessageToKafka("topicMO.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МО в сервисе Запись.3')
		}
		checkCreation("MEDICAL_ORGANIZATION ",moId,10000)
}
else {
	log.info("Медицинская организация с id = "+moId+" уже создана")
}


//Проверить, создана ли запись для головного МУ, если нет - досоздать
if (!isExisted("MEDICAL_FACILITY",moId) ){
	//log.info("Отправляю сообщение")
	sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	if (createEntityInAppointment3 == true){
		log.info("Требуется досоздать МУ в сервисе Запись.3")
		sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	}
	else {
		log.info('Не требуется досоздать МУ в сервисе Запись.3')
	}
	checkCreation("MEDICAL_FACILITY",moId,10000)

}
else {
	log.info("Медицинское учреждение с id = "+moId+" уже создано")
}


// Досоздать необходимое количество МУ, если требуется

int mfId = moId.toInteger()
def getExistedWithCondition(String tableName, int count, String condition="" ) { 
	String query="SELECT *  FROM  "+tableName+ "  "+condition
	//log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	//log.info(row)
	return result
}

existedMF=getExistedWithCondition("MEDICAL_FACILITY", 2, "WHERE MEDICAL_ORGANIZATION_ID=141")

for (int i = 1; i <mfCounter; i++){
	mfId = mfId +1
	if (!isExisted("MEDICAL_FACILITY",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMF","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МУ в сервисе Запись.3")
			sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МУ в сервисе Запись.3')
		}
		checkCreation("MEDICAL_FACILITY",mfId.toString(),10000)
	
	}
	else {
		log.info("Медицинское учреждение с id = "+mfId+" уже создано")
	}
	testRunner.testCase.testSuite.setPropertyValue("mfId"+i, mfId.toString())
	
}

mfId = moId.toInteger()
for (int i = 1; i <=mfCounter; i++){
	if (!isExisted("LOCATION",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicLocation.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")
		if (createEntityInAppointment3 == true){
				log.info("Требуется досоздать Локацию в сервисе Запись.3")
				sendMessageToKafka("topicLocation.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+moId+"""</ns5:medicalFacilityId></ns4:location>""")
		}
		else {
			log.info('Не требуется досоздать Локацию в сервисе Запись.3')
		}
		checkCreation("LOCATION",mfId.toString(),10000)
	}
	else {
		log.info("Локация с id = "+mfId+" уже создана")
	}
	mfId = mfId+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="sayHello" id="17f7e29c-8ee7-4426-9e33-b61c61c785bb"><con:settings/><con:config><script>def  sayHello(String d){
	log.info("hi, "+d)	
}</script></con:config></con:testStep><con:properties><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>specIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>epId1</con:name><con:value>146017593</con:value></con:property><con:property><con:name>epIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>rpcmId1</con:name><con:value>-2</con:value></con:property><con:property><con:name>rpcmIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>dnId1</con:name><con:value>125692830</con:value></con:property><con:property><con:name>dnIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>prodCalId1</con:name><con:value>18</con:value></con:property><con:property><con:name>prodCalIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>agId1</con:name><con:value>127631257</con:value></con:property><con:property><con:name>agIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleWTTypeId1</con:name><con:value>1</con:value></con:property><con:property><con:name>arSchruleWTTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleRejectionTypeId1</con:name><con:value>10</con:value></con:property><con:property><con:name>arSchruleRejectionTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleTRTypeId1</con:name><con:value>9</con:value></con:property><con:property><con:name>arSchruleTRTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleAGTypeId1</con:name><con:value>7</con:value></con:property><con:property><con:name>arSchruleAGTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleWTTypeId1</con:name><con:value>1</con:value></con:property><con:property><con:name>sarSchruleWTTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleRejectionTypeId1</con:name><con:value>2</con:value></con:property><con:property><con:name>sarSchruleRejectionTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleAGTypeId1</con:name><con:value>5</con:value></con:property><con:property><con:name>sarSchruleAGTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleTRTypeId1</con:name><con:value>4</con:value></con:property><con:property><con:name>sarSchruleTRTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleRRTypeId1</con:name><con:value>7</con:value></con:property><con:property><con:name>sarSchruleRRTypeIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>archivedAgId1</con:name><con:value>127631289</con:value></con:property><con:property><con:name>archivedAgIdcreatedByTest1</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="578d12df-9c4b-4981-a2a9-2c83e9d23029" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="СДР. Копирование расписания" searchProperties="true"><con:settings><con:setting id="f03fbc18-8927-4d51-b91b-46f082077e2ffileName">СДР.-Копирование-расписания</con:setting></con:settings><con:testStep type="groovy" name="Соединение с БД" id="588ed846-44d7-4a10-a599-0fa9f82e7853"><con:settings/><con:config><script>import groovy.sql.Sql
//Подготовка соединения с БД
log.info("Подготовка соединения с БД");

username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

if (context.dbConnect == null) {
	timeZone = TimeZone.getTimeZone("Europe/Moscow");
     TimeZone.setDefault(timeZone);
     sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
      log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
  	
  	context.setProperty("dbConnect", sql)
  	log.info("Cоединение с БД успешно установлено");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/МУ" id="92190336-178d-4d01-b75f-af3780eb4174"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

// def medicalFacilityId= testRunner.testCase.getPropertyValue("medicalFacilityId")
 // def medicalFacilityId2= testRunner.testCase.getPropertyValue("medicalFacilityId2")
// def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")

// Добавление МО
      sql.execute ("INSERT INTO MEDICAL_ORGANIZATION (ID,ARCHIVED, NAME, NAME_FULL,OGRN, CREATED)" +
"VALUES ((SELECT MAX(ID)+1 FROM MEDICAL_ORGANIZATION ) , 0, 'Тестовая MO', 'Тестовая Медицинская организация', 1544989849849,  TIMESTAMP '1970-01-01 00:00:00.000000') ")

     String sql_query = "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID = ((SELECT max(ID) FROM MEDICAL_ORGANIZATION ))"

     def medicalOrganization = sql.rows(sql_query)

    String medicalOrganizationId =medicalOrganization[0].ID
       log.info ("ID МО: " + medicalOrganizationId)


// Добавление МУ
      sql.execute ("INSERT INTO MEDICAL_FACILITY (ID, ARCHIVED, MEDICAL_ORGANIZATION_ID, NAME_SHORT, NAME, NAME_FULL, IS_HEAD)" +
"VALUES (  (SELECT MAX(ID)+1 FROM MEDICAL_FACILITY) , 0," +medicalOrganizationId +", 'Тестовое МУ', 'Тестовое Медицинское Учреждение', 'Тестовое Медицинское Учреждение',  0) ")

      sql.execute ("INSERT INTO MEDICAL_FACILITY (ID, ARCHIVED, MEDICAL_ORGANIZATION_ID, NAME_SHORT, NAME, NAME_FULL, IS_HEAD)" +
"VALUES (   (SELECT MAX(ID)+1 FROM MEDICAL_FACILITY), 0," +medicalOrganizationId +", 'Тестовое МУ', 'Тестовое Медицинское Учреждение', 'Тестовое Медицинское Учреждение',  0) ")

     String sql_query2= "SELECT * FROM MEDICAL_FACILITY WHERE ID = ((SELECT max(ID) FROM MEDICAL_FACILITY ))"
     String sql_query3= "SELECT * FROM MEDICAL_FACILITY WHERE ID = ((SELECT max(ID)-1 FROM MEDICAL_FACILITY ))"
    def medicalFacility = sql.rows(sql_query2)
    def medicalFacility2 = sql.rows(sql_query3)
     String medicalFacilityId =medicalFacility[0].ID
     String medicalFacilityId2 =medicalFacility2[0].ID
      log.info ("ID МУ: " +medicalFacilityId)
      log.info ("ID МУ2: " +medicalFacilityId2)
      
    testRunner.testCase.setPropertyValue("medicalOrganizationId",medicalOrganizationId)
     testRunner.testCase.setPropertyValue("medicalFacilityId",medicalFacilityId)
     testRunner.testCase.setPropertyValue("medicalFacilityId2",medicalFacilityId2)

     //Выбор typeId с kind=WORK_TIME_DEFINITION ( typeWorkTimeDId)
       String sql_query4 = "SELECT * FROM SAR_SCHRULE_TYPE WHERE KIND = 'WORK_TIME_DEFINITION'"
       def types_W = sql.rows(sql_query4)
       String  typeWorkTimeDId =types_W[0].ID
       testRunner.testCase.setPropertyValue("typeWorkTimeDId",typeWorkTimeDId)

       //Выбор typeId с kind=TREATMENT_REDEFINITION ( typeTreatmentRedefinitionId)
       String sql_query5 = "SELECT * FROM SAR_SCHRULE_TYPE WHERE KIND = 'TREATMENT_REDEFINITION'"
       def types_T = sql.rows(sql_query5)
       String  typeTreatmentRedefinitionId =types_T[0].ID
       String  typeTreatmentRedefinitionKind =types_T[0].KIND
       testRunner.testCase.setPropertyValue("typeTreatmentRedefinitionId",typeTreatmentRedefinitionId)
       testRunner.testCase.setPropertyValue("typeTreatmentRedefinitionKind",typeTreatmentRedefinitionKind)
       
        // Выбор  неархивной возрастной группы  ageGroupId   (ageGroupId)
       String sql_query6 = "SELECT * FROM AGE_GROUP WHERE ARCHIVED =0"
       def ageGroups = sql.rows(sql_query6)
       String ageGroupId =ageGroups[0].ID
       testRunner.testCase.setPropertyValue("ageGroupId",ageGroupId)
        log.info ("ID неархивной возрастной группы: " + ageGroupId)
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Создание location+treatmentRoom" id="15a88f62-7272-4068-bc3c-bdaf4ec45132"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
if (context.dbConnect != null) {      
	sql = context.dbConnect;



//Выбор TREATMENT_ROOM_KIND
String sql_query = "SELECT * FROM TREATMENT_ROOM_KIND WHERE ARCHIVED= 0"
def treKs = sql.rows(sql_query)
String treatRoomKindId =treKs[0].ID
 log.info ("TREATMENT_ROOM_KIND: " + treatRoomKindId)

//Выбор TREATMENT_ROOM_PROFILE_ID
String sql_query1 = "SELECT * FROM TREATMENT_ROOM_PROFILE WHERE ARCHIVED=0"
def trePs = sql.rows(sql_query1)
String treatRoomProfileId =trePs[0].ID
 log.info ("TREATMENT_ROOM_PROFILE: " + treatRoomProfileId)

 //Выбор TREATMENT_ID
String sql_query2 = "SELECT * FROM TREATMENT WHERE ARCHIVED=0"
def tres = sql.rows(sql_query2)
String  treatmentId = tres[0].ID
 log.info ("TREATMENT: " +treatmentId)
 testRunner.testCase.setPropertyValue("treatmentId",treatmentId)

//Выбор DEPARTMENT_NOM_ID
String sql_query3 = "SELECT * FROM DEPARTMENT_NOM"
def noms = sql.rows(sql_query3)
String  nomId = noms[0].ID
 log.info ("DEPARTMENT_NOM: " +nomId)

//Выбор SPECIALIZATION_ID
String sql_query4 = "SELECT * FROM SPECIALIZATION"
def specializations = sql.rows(sql_query4)
String  specializationId = specializations[0].ID
 log.info ("SPECIALIZATION: " +specializationId)

//Выбор LOCATION_ID
String sql_query5 = "SELECT * FROM LOCATION WHERE  ID = ((SELECT max(ID) FROM LOCATION ))"
def locations = sql.rows(sql_query5)
String  locationId = locations[0].ID + 1
 log.info ("locationId: " +locationId)

//Выбор TREATMENT_ROOM_ID
String sql_query6 = "SELECT * FROM TREATMENT_ROOM WHERE  ID = ((SELECT max(ID) FROM TREATMENT_ROOM ))"
def treatmentRooms = sql.rows(sql_query6)
String treatmentRoomId = treatmentRooms[0].ID + 1
 log.info ("treatmentRoomId: " +treatmentRoomId)

 
 def medicalFacilityId= testRunner.testCase.getPropertyValue("medicalFacilityId")
 def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")
 //def locationId= testRunner.testCase.getPropertyValue("locationId")
// def treatmentRoomId= testRunner.testCase.getPropertyValue("treatmentRoomId")

Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', '10.2.172.24:9092')
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)
 
def messageSender = { String topic, String message ->
    log.info( "topic")
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
 def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\"""" +locationId+ """\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Тестовая Н</ns4:roomTitle><ns4:stage>7</ns4:stage><ns4:building id="215"><ns5:buildingAddress>город Москва, бульвар Сиреневый, дом 8</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specializationId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+ medicalFacilityId + """</ns5:medicalFacilityId></ns4:location>"""
 String messageL =sL.toString()
  def topicLocation= testRunner.testCase.testSuite.getPropertyValue("topicLocation")
   log.info(topicLocation)
  String topicLocation1= topicLocation.toString()
  messageSender(topicLocation1, messageL)

 def sT ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:treatmentRoom archived="false" id=\"""" + treatmentRoomId+ """\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:treatmentRoomKindId>"""+ treatRoomKindId +"""</ns4:treatmentRoomKindId><ns4:treatmentRoomProfileId fnsiId="3">"""+ treatRoomProfileId + """</ns4:treatmentRoomProfileId><ns4:specializationId>"""+specializationId+"""</ns4:specializationId><ns5:medicalOrganizationId>"""+ medicalOrganizationId +"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+medicalFacilityId+"""</ns5:medicalFacilityId><ns4:department id="5902191878"><ns5:title>Отделение медицинской помощи взрослому населению на дому</ns5:title><ns5:nomId>"""+nomId+ """</ns5:nomId></ns4:department><ns4:locationId>"""+ locationId +"""</ns4:locationId><ns4:treatments><ns4:treatment><ns4:id>""" + treatmentId + """</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment></ns4:treatments><ns4:equipments><ns4:equipment id="294"><ns5:title>model2020_xxx008</ns5:title></ns4:equipment></ns4:equipments></ns4:treatmentRoom>"""
//def s ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:treatmentRoom archived="false" id=\"""" + treatmentRoomId+ """\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:treatmentRoomKindId>134692977</ns4:treatmentRoomKindId><ns4:treatmentRoomProfileId fnsiId="3">134694386</ns4:treatmentRoomProfileId><ns4:specializationId>125676843</ns4:specializationId><ns5:medicalOrganizationId>204</ns5:medicalOrganizationId><ns5:medicalFacilityId>204</ns5:medicalFacilityId><ns4:department id="5902191878"><ns5:title>Отделение медицинской помощи взрослому населению на дому</ns5:title><ns5:nomId>125692859</ns5:nomId></ns4:department><ns4:locationId>322</ns4:locationId><ns4:treatments><ns4:treatment><ns4:id>128309466</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment></ns4:treatments><ns4:equipments><ns4:equipment id="294"><ns5:title>model2020_xxx008</ns5:title></ns4:equipment></ns4:equipments></ns4:treatmentRoom>"""
 String messageT =sT.toString()
  def topicTreatmentRoom= testRunner.testCase.testSuite.getPropertyValue("topicTreatmentRoom")
   log.info(topicLocation)
  String topicTreatmentRoom1= topicTreatmentRoom.toString()
   messageSender(topicTreatmentRoom1, messageT)

producer.close()

//Поиск созданного кабинета
Boolean rowCount = false
String sql_query_trId = "SELECT * FROM TREATMENT_ROOM WHERE ID=" + treatmentRoomId
int counter = 0

while (rowCount == false &&  counter < 30) {
row = sql (sql_query_trId)
if (row == 1) {
  rowCount = true
  log.info("treatmentRoom found")
  }
else {
  sleep(10000)
  log.info("treatmentRoom not found")
  counter++
  }
}
 testRunner.testCase.setPropertyValue("locationId",locationId)
  testRunner.testCase.setPropertyValue("treatmentRoomId",treatmentRoomId)
} else {
	log.error("Соединение с бд не установлено!");
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Синхронизация ресурса" id="bc77b811-2c56-4109-954c-7f93419f335b"><con:settings/><con:config><script>import groovy.sql.Sql

def locationId = testRunner.testCase.getPropertyValue("locationId")
def medicalFacilityId = testRunner.testCase.getPropertyValue("medicalFacilityId")
def treatmentRoomId = testRunner.testCase.getPropertyValue("treatmentRoomId")

if (context.dbConnect != null) {      
	sql = context.dbConnect;
Boolean rowCount = false
String sql_query = "SELECT * FROM \"RESOURCE\" WHERE MEDICAL_FACILITY_ID=" + medicalFacilityId + "and LOCATION_ID = " + locationId + " and SYNC_STATUS='OK' and PARENT_ID= "+ treatmentRoomId
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
row = sql(sql_query)
if (row == 1) {
  rowCount = true
  log.info("resource found")
  }
else {
  sleep(10000)
  log.info("resource not found")
  counter++
  }
}

def resource = sql.rows(sql_query)
String resourceId =resource[0].ID
 log.info ("ID ресурса: " +resourceId)
testRunner.testCase.setPropertyValue("resourceId",resourceId)
} else {
	log.error("Соединение с бд не установлено!");
}
 </script></con:config></con:testStep><con:testStep type="groovy" name="Выбор дат" id="a70a8232-10e7-4f7d-bfb9-9115c778b946"><con:settings/><con:config><script>import java.time.*;
import java.time.format.*;
import java.time.temporal.*;
import groovy.sql.Sql

if (context.dbConnect != null) {      
	sql = context.dbConnect;
	
def medicalFacilityId = testRunner.testCase.getPropertyValue("medicalFacilityId")

maxEndResource = sql.firstRow("select max(END_DATE) as dt from schedule where medical_facility_id = "+medicalFacilityId);

	if (maxEndResource != null &amp;&amp; maxEndResource.dt != null) {
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.A");
		maxDayDate = LocalDate.parse(maxEndResource.dt.stringValue(), formatter);	

		if (maxDayDate.plusDays(1) &lt;  LocalDate.now() ) {
			maxDayDate = LocalDate.now()
			log.info("11")
			lastDayDate = maxDayDate.with(TemporalAdjusters.lastDayOfMonth());
			testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
	          testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.toString());
		     log.info("Даты расписания:" + maxDayDate.toString()+ "-" + lastDayDate.toString());
			} else {
			    lastDayDate = maxDayDate.plusDays(1).with(TemporalAdjusters.lastDayOfMonth());
		         testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
              	    testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.plusDays(1).toString());
		
		         log.info("Даты расписания:" + maxDayDate.plusDays(1).toString()+ "-" + lastDayDate.toString());
				}		
	} else {
		testRunner.testCase.setPropertyValue("schedulePeriodStart", LocalDate.now().toString());
		testRunner.testCase.setPropertyValue("schedulePeriodEnd",  LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());

		log.info("Даты расписания:" + LocalDate.now().toString()+ "-" + LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());
	}
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch" id="907c14d7-b87f-4585-9204-6a08287bcc65"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="d459e65c-4ed3-4372-b646-fcb34f6ff05e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Композитный ресурс создан" id="c8929cf8-8556-40d7-bac4-c0ee066d1f8f"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {      
	sql = context.dbConnect;

//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

            def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
             log.info ("ID Расписания: " + scheduleId)
            def resourceId= testRunner.testCase.getPropertyValue("resourceId")
             log.info ("ID композитного ресурса: " + resourceId)
 
             String sql_query = "SELECT * FROM SCHEDULE WHERE ID =" + scheduleId

            def schedule = sql.rows(sql_query)

           // String scheduleIsActive =schedule[0].IS_ACTIVE
          // String scheduleIsLocked =schedule[0].IS_LOCKED

            //Проверка что расписание неактивно и разблокировано
            //assert scheduleIsActive=='0'
            //assert scheduleIsLocked=='0'

            //Проверка, что расписание композитного ресурса создано
             String sql_query_resSC ="select  * from RESOURCE_SCHEDULE WHERE SCHEDULE_ID ="+scheduleId+"AND RESOURCE_ID =" + resourceId
             int counter = 0
             Boolean rowCount = false
            while (rowCount == false &amp;&amp;  counter &lt; 30) {
            row = sql(sql_query_resSC)
            if (row == 1) {
              rowCount = true
              log.info("RESOURCE_SCHEDULE found")
              }
            else {
              sleep(10000)
              log.info("RESOURCE_SCHEDULE not found")
              counter++
              }
            }
           //Проверка, что статус композитного ресурса 'NOT_DEFINED'
            def res_schedule = sql.rows(sql_query_resSC)
            String res_scheduleIsStatus =res_schedule[0].STATUS
            String res_scheduleIsId =res_schedule[0].ID
            assert res_scheduleIsStatus=='NOT_DEFINED'

            log.info ("ID расписания композитного ресурса: " + res_scheduleIsId)

            testRunner.testCase.setPropertyValue("res_scheduleIsId",res_scheduleIsId)
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="activateScheduleForBranch" id="ae07b893-19c8-4a0d-817a-8f2a84db5a17"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>activateScheduleForBranch</con:operation><con:request name="activateScheduleForBranch" id="106c3edb-6112-4e73-b0ea-bc34c640d52a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:activateScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId}</v1:scheduleId>\r
         <v1:entityVersion>0</v1:entityVersion>\r
      </typ:activateScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f681e61b-91f7-4048-85b5-4cef6f2318fc"/><con:assertion type="Simple Contains" id="351f3702-f85a-4938-b8c6-1de889c7638d" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId1" id="e3bd571c-6b76-4d26-a010-7781d65f5905"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId1</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>activateScheduleForBranch</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:operationId</con:sourcePath><con:targetType>operationId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_1" id="8d29c0b4-6663-432a-bd90-1edb22d1f721"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
 //username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
    def operationId1= testRunner.testCase.getPropertyValue("operationId1")
     log.info ("ID операции: " + operationId1)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId1
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}

} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="getOperationStatus_1" id="3d4c79b6-b381-41c6-9f63-4b38a7a445a0" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>systemServiceBinding</con:interface><con:operation>getOperationStatus</con:operation><con:request name="getOperationStatus_1" id="97979afc-43ac-462f-b823-b3cbb6dd507e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SystemWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/systemService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getOperationStatusRequest>\r
         <v1:operationId>${activateScheduleForBranch#Response#//*:operationId}</v1:operationId>\r
      </typ:getOperationStatusRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="388a1900-4a87-4ccd-bfd8-86d1553774e6"/><con:assertion type="GroovyScriptAssertion" id="e4539f45-47f5-454e-ad3c-c2d4f54966d3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def result = resp.getNodeValue('//*:status/@id')
def resp_isCompleted = resp.getNodeValue('//*:status/*:isCompleted')
def resp_hasSucceded = resp.getNodeValue('//*:status/*:hasSucceded')
def resp_completenessStatus = resp.getNodeValue('//*:completenessProgress/*:completenessStatus')

// правило создано
assert result != null

// проверка isCompleted
assert resp_isCompleted == 'true'

// проверка hasSucceded 
assert resp_hasSucceded  ==  'true'

// проверка completenessStatus 
assert  resp_completenessStatus  == '100'

log.info(result)
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Получить  сведения о Расписаниях МО/МУ(getScheduleList)" id="f2ce1ba9-4a50-41c5-b293-fa0165ed6c3f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getScheduleList</con:operation><con:request name="Получить  сведения о Расписаниях МО/МУ(getScheduleList)" id="0596876e-baa2-4b69-849a-9f715077940d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>HAdiatullina</user:userName>
         <user:userRoleId>7014</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>112740</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getScheduleListRequest>\r
         <!--1 to 10 repetitions:-->\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <typ:datePeriod>
            <!--Optional:-->
            <v1:start>${#TestCase#schedulePeriodStart}</v1:start>
            <!--Optional:-->
            <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>
         </typ:datePeriod>
      </typ:getScheduleListRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1a3c0e40-64a5-459c-8d26-62adaa44db27"/><con:assertion type="Simple Contains" id="7ef79806-0274-40b7-8bf1-7b693213eac1" name="Contains"><con:configuration><token>medicalFacilityId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule" id="64759867-7a2d-472c-b3f0-79cbb6ba61da"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:sarScheduleId>${#TestCase#res_scheduleIsId}</typ:sarScheduleId>\r
         <typ:info>\r
            <typ:typeId>${#TestCase#typeWorkTimeDId}</typ:typeId>\r
            <typ:comment>Тест_Н</typ:comment>\r
            <typ:datePeriod>\r
               <v1:start>${#TestCase#schedulePeriodStart}</v1:start>\r
               <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>\r
            </typ:datePeriod>\r
            <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
               <v1:dayOfWeek>1</v1:dayOfWeek>\r
               <v1:dayOfWeek>2</v1:dayOfWeek>\r
               <v1:dayOfWeek>3</v1:dayOfWeek>\r
               <v1:dayOfWeek>4</v1:dayOfWeek>\r
               <v1:dayOfWeek>5</v1:dayOfWeek>\r
            </typ:dateTemplate>\r
            <!--Optional:-->\r
            <typ:timeIntervals>\r
               <!--1 or more repetitions:-->\r
               <typ:timeInterval>\r
                  <v1:start>08:01:00</v1:start>\r
                  <v1:end>08:05:00</v1:end>\r
               </typ:timeInterval>\r
            </typ:timeIntervals>\r
            <typ:ageGroups>\r
               <!--1 or more repetitions:-->\r
               <v1:ageGroupId>${#TestCase#ageGroupId}</v1:ageGroupId>\r
            </typ:ageGroups>\r
         </typ:info>\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="ignoreWarnings">true</v1:entry>\r
         </v1:options>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="sarScheduleRuleID"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из запроса
def req_typeId = req.getNodeValue('//*:typeId')
def req_period_start = req.getNodeValue('//*:datePeriod/*:start')
def req_period_end = req.getNodeValue('//*:datePeriod/*:end')
def req_timeIn_start = req.getNodeValue('//*:timeIntervals/*:start')
def req_timeIn_end = req.getNodeValue('//*:timeIntervals/*:end')
def req_age_group = req.getNodeValue('//*:ageGroups/*:ageGroupId')
def req_comment = req.getNodeValue('//*:comment') 

// получаю данные из ответа
def result = resp.getNodeValue('//*:sarScheduleRule/@id')
def resp_typeId = resp.getNodeValue('//*:typeId')
def resp_period_start = resp.getNodeValue('//*:datePeriod/*:start')
def resp_period_end = resp.getNodeValue('//*:datePeriod/*:end')
def resp_timeIn_start = resp.getNodeValue('//*:timeIntervals/*:start')
def resp_timeIn_end = resp.getNodeValue('//*:timeIntervals/*:end')
def resp_age_group = resp.getNodeValue('//*:ageGroups/*:ageGroupId')
def resp_comment = resp.getNodeValue('//*:comment') 

// правило создано
assert result != null

// проверка typeId
assert req_typeId == resp_typeId

// проверка datePeriod
assert req_period_start == resp_period_start 
assert req_period_end == resp_period_end

// проверка timeIntervals
assert req_timeIn_start == resp_timeIn_start 
assert req_timeIn_end == resp_timeIn_end 

// проверка ageGroups
assert req_age_group == resp_age_group

// проверка comment
assert req_comment  == resp_comment

log.info(result)
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sarSheduleRuleId" id="f6657e9d-9f5a-4790-aa83-cd6f1524e7ff"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sarSheduleRuleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createSarScheduleRule</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/sarScheduleService/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns4='http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:sarScheduleRule/@id</con:sourcePath><con:targetType>sarSheduleRuleId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sarSheduleRuleVersion</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createSarScheduleRule</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/sarScheduleService/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns4='http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:sarScheduleRule/@version</con:sourcePath><con:targetType>sarSheduleRuleVersion</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка правила" id="69c9e5ff-f385-4871-bf66-ac771741a8ef"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
    def sarSheduleRuleId= testRunner.testCase.getPropertyValue("sarSheduleRuleId")
     log.info ("ID правила: " + sarSheduleRuleId)
     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
     
     def resourceId= testRunner.testCase.getPropertyValue("resourceId")
      log.info ("ID композитного ресурса: " + resourceId)
      
	 //Проверка, что изменился статус расписание композитного ресурса
	 
     String sql_query_rS ="select  * from RESOURCE_SCHEDULE WHERE SCHEDULE_ID ="+scheduleId+"AND RESOURCE_ID =" + resourceId
     def rSchedule = sql.rows(sql_query_rS)
     String rScheduleStatus =rSchedule[0].STATUS
     assert rScheduleStatus=='DIRTY'
     
 } else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_typeTreatmentRedefinition" id="e90b5784-4c1e-424d-82a9-e4c0c88ea4ff"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_typeTreatmentRedefinition" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:sarScheduleId>${#TestCase#res_scheduleIsId}</typ:sarScheduleId>\r
         <typ:info>\r
            <typ:typeId>${#TestCase#typeTreatmentRedefinitionId}</typ:typeId>\r
             <typ:comment>Тест_Н</typ:comment>

            <typ:datePeriod>\r
               <v1:start>${#TestCase#schedulePeriodStart}</v1:start>\r
               <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>\r
            </typ:datePeriod>\r
 <typ:dateTemplate xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:type="v1:DayOfWeekDatesTemplate" >
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
			   <v1:dayOfWeek>4</v1:dayOfWeek>
			   <v1:dayOfWeek>5</v1:dayOfWeek>
			</typ:dateTemplate>
            <!--Optional:-->
           
            <typ:timeIntervals>\r
               <!--1 or more repetitions:-->\r
               <typ:timeInterval>\r
                  <v1:start>08:01:00</v1:start>\r
                  <v1:end>08:05:00</v1:end>\r
               </typ:timeInterval>\r
            </typ:timeIntervals>\r
            <typ:ageGroups>
               <!--1 or more repetitions:-->
               <v1:ageGroupId>${#TestCase#ageGroupId}</v1:ageGroupId>
            </typ:ageGroups>
               <typ:treatments>
               <!--1 or more repetitions:-->
               <v1:treatmentId>${#TestCase#treatmentId}</v1:treatmentId>
            </typ:treatments>
         </typ:info>\r
          <v1:options>
            <!--Zero or more repetitions:-->
            <v1:entry key="ignoreWarnings">true</v1:entry>
         </v1:options>
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="sarScheduleRuleID"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def result = resp.getNodeValue('//*:sarScheduleRule/@id')
assert result != null
log.info(result)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sarSheduleRuleId_typeTreatmentRedefinitionId" id="3c4f6e76-aa9d-4180-8c47-b1fb7afb0baf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sarSheduleRuleId_t4</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createSarScheduleRule_typeTreatmentRedefinition</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/sarScheduleService/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns4='http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:sarScheduleRule/@id</con:sourcePath><con:targetType>sarSheduleRuleId_t4</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sarSheduleRuleVersion_t4</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createSarScheduleRule_typeTreatmentRedefinition</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/sarScheduleService/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns4='http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:sarScheduleRule/@version</con:sourcePath><con:targetType>sarSheduleRuleVersion_t4</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка правила_typeTreatmentRedefinition" id="56847130-c476-4089-b878-e474c2fa300f"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
    def sarSheduleRuleId_t4= testRunner.testCase.getPropertyValue("sarSheduleRuleId_t4")
     log.info ("ID правила: " + sarSheduleRuleId_t4)
     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
     
     def resourceId= testRunner.testCase.getPropertyValue("resourceId")
      log.info ("ID композитного ресурса: " + resourceId)

      def treatmentId= testRunner.testCase.getPropertyValue("treatmentId")
      log.info ("ID treatment: " + treatmentId)

      String  typeTreatmentRedefinitionId= testRunner.testCase.getPropertyValue("typeTreatmentRedefinitionId")
      log.info ("ID typeTreatmentRedefinition: " + typeTreatmentRedefinitionId)

      String  ageGroupId= testRunner.testCase.getPropertyValue("ageGroupId")
      log.info ("ID ageGroup: " + ageGroupId)
      
	 //Проверка, что изменился статус расписание композитного ресурса
	 
     String sql_query_rS ="select  * from RESOURCE_SCHEDULE WHERE SCHEDULE_ID ="+scheduleId+"AND RESOURCE_ID =" + resourceId
     def rSchedule = sql.rows(sql_query_rS)
     String rScheduleStatus =rSchedule[0].STATUS
     assert rScheduleStatus=='DIRTY'

     //Проверка SAR_SCHRULE
     String sql_query_sS ="select  * from SAR_SCHRULE WHERE ID ="+sarSheduleRuleId_t4
     def sSCHRULE = sql.rows(sql_query_sS)
     String sSCHRULETypeId = sSCHRULE[0].SAR_SCHRULE_TYPE_ID
     assert   sSCHRULETypeId == typeTreatmentRedefinitionId

      //Проверка SAR_SCHRULE_AGE_GROUP
      String sql_query_sSAG ="select  * from SAR_SCHRULE_AGE_GROUP WHERE SAR_SCHRULE_ID ="+sarSheduleRuleId_t4
      def sSAgeGroup = sql.rows(sql_query_sSAG)
      String  sSAgeGroupId =sSAgeGroup[0].AGE_GROUP_ID
      assert   sSAgeGroupId==ageGroupId

       //Проверка SAR_SCHRULE_TREATMENT
      String sql_query_sST ="select  * from SAR_SCHRULE_TREATMENT WHERE SAR_SCHRULE_ID ="+sarSheduleRuleId_t4
      def sSTREATMENT = sql.rows(sql_query_sST)
      String  sSTREATMENTId = sSTREATMENT[0].TREATMENT_ID
      assert  sSTREATMENTId==treatmentId
     
 } else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="applyChangesSarSchedule" id="fa3a0170-501d-447d-bd3e-5f87c5257cc8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>applyChangesToSarSchedule</con:operation><con:request name="applyChangesSarSchedule" id="e2b3cdf5-1215-415c-bd67-3de633ed9509"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:applyChangesToSarScheduleRequest>\r
         <typ:sarScheduleId>${#TestCase#res_scheduleIsId}</typ:sarScheduleId>\r
      </typ:applyChangesToSarScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="31573b9d-4fc6-46ae-b040-c7b98731a656"/><con:assertion type="Simple Contains" id="12a337d2-441b-40f2-ae67-5430a3599e7e" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId" id="98b4cdf7-40b7-406c-b8ee-5b417fb02aaf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>applyChangesSarSchedule</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:operationId</con:sourcePath><con:targetType>operationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция" id="875a0486-bca5-4f08-9b43-03b5ed237827" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
 //username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
    def operationId= testRunner.testCase.getPropertyValue("operationId")
     log.info ("ID операции: " + operationId)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}

} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="getOperationStatus" id="5623ee3d-d308-41e3-8d47-9ad0cde6e7f8" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>systemServiceBinding</con:interface><con:operation>getOperationStatus</con:operation><con:request name="getOperationStatus" id="97979afc-43ac-462f-b823-b3cbb6dd507e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SystemWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/systemService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getOperationStatusRequest>\r
         <v1:operationId>${applyChangesSarSchedule#Response#//*:operationId}</v1:operationId>\r
      </typ:getOperationStatusRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="388a1900-4a87-4ccd-bfd8-86d1553774e6"/><con:assertion type="GroovyScriptAssertion" id="e4539f45-47f5-454e-ad3c-c2d4f54966d3" name="statusId"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def result = resp.getNodeValue('//*:status/@id')
def resp_isCompleted = resp.getNodeValue('//*:status/*:isCompleted')
def resp_hasSucceded = resp.getNodeValue('//*:status/*:hasSucceded')
def resp_completenessStatus = resp.getNodeValue('//*:completenessProgress/*:completenessStatus')

// правило создано
assert result != null

// проверка isCompleted
assert resp_isCompleted == 'true'

// проверка hasSucceded 
assert resp_hasSucceded  ==  'true'

// проверка completenessStatus 
assert  resp_completenessStatus  == '100'

log.info(result)
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка наличия сообщения в топике" id="95e2d658-24a4-424e-8571-635387132712"><con:settings/><con:config><script>import org.apache.kafka.clients.consumer.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerRecord
import java.time.*
import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


    def operationId= testRunner.testCase.getPropertyValue("operationId")
     log.info ("ID операции: " + operationId)

Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', '10.2.172.24:9092')
props.put('group.id', UUID.randomUUID().toString())
props.put("enable.auto.commit", "false")
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
props.put('key.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
props.put('value.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
def offset =null
def value =null
def consumer = new KafkaConsumer(props)

 consumer.subscribe(['ScheduleChange'])

 long t = System.currentTimeMillis()
long end = t + 18000;
while (System.currentTimeMillis()&lt;end)
{
log.info ( "while ")
ConsumerRecords&lt;String, String> records = consumer.poll(18000)
log.info ( "records")
for (ConsumerRecord&lt;String, String> record : records)
{
	def rootNode = new XmlSlurper().parseText(record.value())
	if (rootNode.operationId ==operationId) {
		log.info("Есть сообщение с operationId= "+ operationId)
		value= record.value()
		log.info ("Сообщение:"+value)
		consumer.close()
		log.info ( "close ")
		return
		}
log.info ( "offset = " + record.offset() +" value = " + record.value())
//offset= record.offset()
//value= record.value()
}
}
consumer.close()
log.info ( "close ")
//log.info (offset)
log.info (value)
//def valueScheduleChange = value

} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="groovy" name="Выбор дат_для нового расписания" id="a3451c34-ba58-4c4c-9794-ba8156154a36"><con:settings/><con:config><script>import java.time.*;
import java.time.format.*;
import java.time.temporal.*;
import groovy.sql.Sql

if (context.dbConnect != null) {      
	sql = context.dbConnect;
//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);	
def medicalFacilityId = testRunner.testCase.getPropertyValue("medicalFacilityId")

maxEndResource = sql.firstRow("select max(END_DATE) as dt from schedule where medical_facility_id = "+medicalFacilityId);

	if (maxEndResource != null &amp;&amp; maxEndResource.dt != null) {
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.A");
		maxDayDate = LocalDate.parse(maxEndResource.dt.stringValue(), formatter);	

		if (maxDayDate.plusDays(1) &lt;  LocalDate.now() ) {
			maxDayDate = LocalDate.now()
			log.info("11")
			lastDayDate = maxDayDate.with(TemporalAdjusters.lastDayOfMonth());
			testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
	          testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.toString());
		     log.info("Даты расписания:" + maxDayDate.toString()+ "-" + lastDayDate.toString());
			} else {
			    lastDayDate = maxDayDate.plusDays(1).with(TemporalAdjusters.lastDayOfMonth());
		         testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
              	    testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.plusDays(1).toString());
		
		         log.info("Даты расписания:" + maxDayDate.plusDays(1).toString()+ "-" + lastDayDate.toString());
				}		
	} else {
		testRunner.testCase.setPropertyValue("schedulePeriodStart", LocalDate.now().toString());
		testRunner.testCase.setPropertyValue("schedulePeriodEnd",  LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());

		log.info("Даты расписания:" + LocalDate.now().toString()+ "-" + LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());
	}
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="copyShedule" id="0ba80f24-6820-49d8-82d3-24b85a273094"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>copySchedule</con:operation><con:request name="copyShedule" id="a487c3ec-6a94-4878-abba-e6fec663ebf4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:copyScheduleRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId}</v1:scheduleId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>\r
         </v1:schedulePeriod>\r
           <typ:params>
               <!--Optional:-->
            <typ:sarSchedulesParams>
               <!--Optional:-->
               <typ:sarScheduleRuleTypeKinds>
                  <!--1 to 4 repetitions:-->
                  <typ:sarScheduleRuleTypeKind>${#TestCase#typeTreatmentRedefinitionKind}</typ:sarScheduleRuleTypeKind>
               </typ:sarScheduleRuleTypeKinds>
            </typ:sarSchedulesParams>
         </typ:params>
      </typ:copyScheduleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a3146373-3bbd-4c51-924b-15fdf1774992"/><con:assertion type="SOAP Fault Assertion" id="d5bc3b21-5b98-4b28-b7a6-3c0fcaed18ac" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="371c910b-7692-4ebe-97ce-113e99ee214b" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId из copyShedule" id="6d907cec-7bd1-43a6-968a-f13e52e76197"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>copyShedule</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:operationId</con:sourcePath><con:targetType>operationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция_2" id="1c1fd8b8-7d3d-427d-aa41-213696ac036e"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
        
    def operationId= testRunner.testCase.getPropertyValue("operationId")
     log.info ("ID операции: " + operationId)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}

} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка созданного расписания" id="4fc0e986-ccf8-439e-ae0f-69b7e7092b03"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {      
	sql = context.dbConnect;
// username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

             
            def medicalFacilityId= testRunner.testCase.getPropertyValue("medicalFacilityId")
            def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
            // log.info ("ID Расписания: " + scheduleId)
            def resourceId= testRunner.testCase.getPropertyValue("resourceId")
            // log.info ("ID композитного ресурса: " + resourceId)
            String  typeWorkTimeDId= testRunner.testCase.getPropertyValue("typeWorkTimeDId")
             String  typeTreatmentRedefinitionId= testRunner.testCase.getPropertyValue("typeTreatmentRedefinitionId")
            String  ageGroupId= testRunner.testCase.getPropertyValue("ageGroupId")
            String  schedulePeriodStart = testRunner.testCase.getPropertyValue("schedulePeriodStart")
             String  schedulePeriodEnd = testRunner.testCase.getPropertyValue("schedulePeriodEnd")

            //Нахожу новое расписание
             String sql_query = "SELECT * FROM SCHEDULE WHERE MEDICAL_FACILITY_ID =" + medicalFacilityId + " AND ID != " + scheduleId

            def schedule = sql.rows(sql_query)
           String scheduleId2 =schedule[0].ID
          //  String scheduleIsActive =schedule[0].IS_ACTIVE
          //  String scheduleIsLocked =schedule[0].IS_LOCKED

            //Проверка что расписание неактивно и разблокировано
        //    assert scheduleIsActive=='0'
         //   assert scheduleIsLocked=='0'

            //Проверка, что расписание композитного ресурса создано
             String sql_query_resSC ="select  * from RESOURCE_SCHEDULE WHERE SCHEDULE_ID ="+scheduleId2 +"AND RESOURCE_ID =" + resourceId
             int counter = 0
             Boolean rowCount = false
            while (rowCount == false &amp;&amp;  counter &lt; 30) {
            row = sql(sql_query_resSC)
            if (row == 1) {
              rowCount = true
              log.info("RESOURCE_SCHEDULE found")
              }
            else {
              sleep(10000)
              log.info("RESOURCE_SCHEDULE not found")
              counter++
              }
            }
           //Проверка, что статус композитного ресурса 'DIRTY'
            def res_schedule = sql.rows(sql_query_resSC)
            String res_scheduleIsStatus =res_schedule[0].STATUS
            String res_scheduleIsId2 =res_schedule[0].ID
          assert res_scheduleIsStatus=='DIRTY'


            //Проверка, что создано правило c типом WORK_TIME_DEFINITION
            String sql_query2 = "select  * from SAR_SCHRULE WHERE RESOURCE_SCHEDULE_ID =" + res_scheduleIsId2 + "AND SAR_SCHRULE_TYPE_ID="+typeWorkTimeDId
            def sSCHRULE = sql.rows(sql_query2)
           // String sSCHRULETypeId = sSCHRULE[0].SAR_SCHRULE_TYPE_ID
            String sarSheduleRuleId = sSCHRULE[0].ID
            String sarSheduleRuleVersion = sSCHRULE[0].VERSION
            //String sarSheduleRuleStart = sSCHRULE[0].START_DATE
            //String sarSheduleRuleEnd = sSCHRULE[0].END_DATE
           // assert   sSCHRULETypeId == typeWorkTimeDId
           //assert   sarSheduleRuleStart == schedulePeriodStart
            //assert   sarSheduleRuleEnd == schedulePeriodEnd
            testRunner.testCase.setPropertyValue("sarSheduleRuleId2",sarSheduleRuleId)
             testRunner.testCase.setPropertyValue("sarSheduleRuleVersion2",sarSheduleRuleVersion)
             
             //Проверка, что создано правило c типом TREATMENT_REDEFINITION
            String sql_query3 = "select  * from SAR_SCHRULE WHERE RESOURCE_SCHEDULE_ID =" + res_scheduleIsId2 + "AND SAR_SCHRULE_TYPE_ID="+typeTreatmentRedefinitionId
            def sSCHRULE2 = sql.rows(sql_query3)
            String sarSheduleRuleId2 = sSCHRULE2[0].ID
            String sarSheduleRuleVersion_t42 = sSCHRULE2[0].VERSION
            testRunner.testCase.setPropertyValue("sarSheduleRuleId_t42",sarSheduleRuleId2)
            testRunner.testCase.setPropertyValue("sarSheduleRuleVersion_t42",sarSheduleRuleVersion_t42)

             //Проверка SAR_SCHRULE_AGE_GROUP
             String sql_query_sSAG ="select  * from SAR_SCHRULE_AGE_GROUP WHERE SAR_SCHRULE_ID ="+sarSheduleRuleId
             def sSAgeGroup = sql.rows(sql_query_sSAG)
             String  sSAgeGroupId =sSAgeGroup[0].AGE_GROUP_ID
             assert   sSAgeGroupId==ageGroupId

             //Проверка создания  RESOURCE_SCHEDULE_TIME_SLOTS


             
            log.info ("ID расписания композитного ресурса: " + res_scheduleIsId2)

            testRunner.testCase.setPropertyValue("res_scheduleIsId2",res_scheduleIsId2)
             testRunner.testCase.setPropertyValue("scheduleId2",scheduleId2)

           
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление записи в SYSTEM_LOCKS" id="7cc4bb4b-f1e2-4860-a0ff-504e409e3ad4"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


    def res_scheduleIsId= testRunner.testCase.getPropertyValue("res_scheduleIsId")
    def res_scheduleIsId2= testRunner.testCase.getPropertyValue("res_scheduleIsId2")
    def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
    def scheduleId2= testRunner.testCase.getPropertyValue("scheduleId2")
// Удаляем SYSTEM_LOCKS
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+res_scheduleIsId)
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+res_scheduleIsId2)
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+scheduleId)
       sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+scheduleId2)


//Меняем статус
sql.execute("UPDATE RESOURCE_SCHEDULE SET STATUS='NOT_DEFINED' WHERE ID ="+res_scheduleIsId)  
sql.execute("UPDATE RESOURCE_SCHEDULE SET STATUS='NOT_DEFINED' WHERE ID ="+res_scheduleIsId2) 
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Получаю scheduleVersion" id="dc2990fd-707d-4e98-a5eb-67d4ecb10a73"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
     
      def scheduleId2= testRunner.testCase.getPropertyValue("scheduleId2")
      
     //Получить версию расписания
     String sql_query_sC ="select  * from SCHEDULE WHERE ID ="+ scheduleId
     def schedule = sql.rows(sql_query_sC)
     String sheduleVersion =schedule[0].VERSION
     testRunner.testCase.setPropertyValue("sheduleVersion",sheduleVersion)
      log.info ("ID sheduleVersion: " + sheduleVersion)

           //Получить версию расписания2
     String sql_query_sC2 ="select  * from SCHEDULE WHERE ID ="+ scheduleId2
     def schedule2 = sql.rows(sql_query_sC2)
     String sheduleVersion2 =schedule2[0].VERSION
     testRunner.testCase.setPropertyValue("sheduleVersion2",sheduleVersion2)
      log.info ("ID sheduleVersion: " + sheduleVersion2)
 } else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="deleteSarScheduleRule_type4_2" id="e36cfd48-727f-4a0a-ae97-5bab7f7eeb30"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>deleteSarScheduleRule</con:operation><con:request name="deleteSarScheduleRule_type4_2" id="4d04df96-7dda-4f2d-9bf2-efa3c764c275"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:deleteSarScheduleRuleRequest>
         <typ:sarScheduleRule id="${#TestCase#sarSheduleRuleId_t42}" version="${#TestCase#sarSheduleRuleVersion_t42}">
            <typ:sarScheduleId>${#TestCase#res_scheduleIsId2}</typ:sarScheduleId>
         </typ:sarScheduleRule>
      </typ:deleteSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7c8a21b3-b8c7-4d43-982d-be5aef0c1417"/><con:assertion type="SOAP Fault Assertion" id="f64f094e-42a7-473e-ac33-387af6ee0a10" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteSarScheduleRule_2" id="2430c9d1-eb4a-409f-bcdd-1fbd0731f6b3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>deleteSarScheduleRule</con:operation><con:request name="deleteSarScheduleRule_2" id="4d04df96-7dda-4f2d-9bf2-efa3c764c275"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:deleteSarScheduleRuleRequest>
         <typ:sarScheduleRule id="${#TestCase#sarSheduleRuleId2}" version="${#TestCase#sarSheduleRuleVersion2}">
            <typ:sarScheduleId>${#TestCase#res_scheduleIsId2}</typ:sarScheduleId>
         </typ:sarScheduleRule>
      </typ:deleteSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7c8a21b3-b8c7-4d43-982d-be5aef0c1417"/><con:assertion type="SOAP Fault Assertion" id="75ab0dfd-b6b3-46f9-8de7-fd392b7184c1" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Удаление записи в SYSTEM_LOCKS_1" id="b1c273d0-3fc5-456e-8e8c-fc50fcf28522"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


    def res_scheduleIsId= testRunner.testCase.getPropertyValue("res_scheduleIsId")
    def res_scheduleIsId2= testRunner.testCase.getPropertyValue("res_scheduleIsId2")
    def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
    def scheduleId2= testRunner.testCase.getPropertyValue("scheduleId2")   
// Удаляем SYSTEM_LOCKS
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+res_scheduleIsId)
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+res_scheduleIsId2)
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+scheduleId)
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+scheduleId2)

} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="request" name="deactivateScheduleForBranch" id="ddd91c06-e03d-4e57-9d40-c7b2463099a4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deactivateScheduleForBranch</con:operation><con:request name="deactivateScheduleForBranch" id="35bca311-e77c-460a-9f9e-4a991182ae3f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deactivateScheduleForBranchRequest>\r
         <v1:scheduleId>${createScheduleForBranch#Response#//*:scheduleId}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#sheduleVersion}</v1:entityVersion>\r
      </typ:deactivateScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="2ad5eeba-1b90-452f-a50b-6a11499cde9b"/><con:assertion type="SOAP Fault Assertion" id="f87f7830-1aa6-4edf-94a2-4f54329dd6b0" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch_2" id="ab183a25-84dc-4a8c-8240-d2039e7b10a7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch_2" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId2}</v1:scheduleId>
         <v1:entityVersion>${#TestCase#sheduleVersion2}</v1:entityVersion>
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Удаление записи в SYSTEM_LOCKS2" id="93299a2f-8ce3-471a-b690-507d5608a900"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


    def res_scheduleIsId= testRunner.testCase.getPropertyValue("res_scheduleIsId")
    def res_scheduleIsId2= testRunner.testCase.getPropertyValue("res_scheduleIsId2")
    def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
    def scheduleId2= testRunner.testCase.getPropertyValue("scheduleId2")
    
// Удаляем SYSTEM_LOCKS
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+res_scheduleIsId)
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+res_scheduleIsId2)
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+scheduleId)
      sql.execute ("DELETE FROM  SYSTEM_LOCKS WHERE ENTITY_ID="+scheduleId2)

} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Получаю scheduleVersion_1" id="09ba9da2-a965-46b8-80a2-959460f30920"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
      
     //Получить версию расписания
     String sql_query_sC ="select  * from SCHEDULE WHERE ID ="+ scheduleId
     def schedule = sql.rows(sql_query_sC)
     String sheduleVersion =schedule[0].VERSION
     testRunner.testCase.setPropertyValue("sheduleVersion",sheduleVersion)
      log.info ("ID sheduleVersion: " + sheduleVersion)

} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="deleteSarScheduleRule_type4" id="9c617465-5e97-411c-bf03-ad0eaca45638"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>deleteSarScheduleRule</con:operation><con:request name="deleteSarScheduleRule_type4" id="4d04df96-7dda-4f2d-9bf2-efa3c764c275"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:deleteSarScheduleRuleRequest>
         <typ:sarScheduleRule id="${#TestCase#sarSheduleRuleId_t4}" version="${#TestCase#sarSheduleRuleVersion_t4}">
            <typ:sarScheduleId>${#TestCase#res_scheduleIsId}</typ:sarScheduleId>
         </typ:sarScheduleRule>
      </typ:deleteSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7c8a21b3-b8c7-4d43-982d-be5aef0c1417"/><con:assertion type="SOAP Fault Assertion" id="f64f094e-42a7-473e-ac33-387af6ee0a10" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteSarScheduleRule" id="0398a3ff-6280-4643-a21c-79815e593c5e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>deleteSarScheduleRule</con:operation><con:request name="deleteSarScheduleRule" id="4d04df96-7dda-4f2d-9bf2-efa3c764c275"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:deleteSarScheduleRuleRequest>
         <typ:sarScheduleRule id="${#TestCase#sarSheduleRuleId}" version="${#TestCase#sarSheduleRuleVersion}">
            <typ:sarScheduleId>${#TestCase#res_scheduleIsId}</typ:sarScheduleId>
         </typ:sarScheduleRule>
      </typ:deleteSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7c8a21b3-b8c7-4d43-982d-be5aef0c1417"/><con:assertion type="SOAP Fault Assertion" id="75ab0dfd-b6b3-46f9-8de7-fd392b7184c1" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="8dc238da-9ac1-46b1-ab5d-6c191d2b27c7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#sheduleVersion}</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных сущностей" id="0b5ecade-d66d-44be-bc55-0df2462fb5af"><con:settings/><con:config><script>import groovy.sql.Sql

//if (context.dbConnect != null) {      
//sql = context.dbConnect;

username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


    def medicalFacilityId= testRunner.testCase.getPropertyValue("medicalFacilityId")
    def medicalFacilityId2= testRunner.testCase.getPropertyValue("medicalFacilityId2")
    def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")
    def locationId= testRunner.testCase.getPropertyValue("locationId")
    def treatmentRoomId= testRunner.testCase.getPropertyValue("treatmentRoomId")
    def resourceId= testRunner.testCase.getPropertyValue("resourceId")
    def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
    def scheduleId2= testRunner.testCase.getPropertyValue("scheduleId2")
    
      
// Удаляем оборудование TREATMENT_ROOM_EQUIPMENT
      sql.execute ("DELETE FROM  TREATMENT_ROOM_EQUIPMENT WHERE TREATMENT_ROOM_ID="+treatmentRoomId)
      
    // Удаляем ММ TREATMENT_ROOM_TREATMENT
   sql.execute ("DELETE from TREATMENT_ROOM_TREATMENT WHERE TREATMENT_ROOM_ID="+treatmentRoomId)

   // Удаляем кабинет TREATMENT_ROOM
   sql.execute ("DELETE from TREATMENT_ROOM WHERE ID ="+treatmentRoomId)

   // Удаляем ресурс "RESOURCE"
   sql.execute ("DELETE from \"RESOURCE\" WHERE LOCATION_ID ="+locationId)

   // Удаляем локацию LOCATION
   sql.execute ("DELETE from  LOCATION WHERE ID ="+locationId)

   // Удаляем МУ MEDICAL_FACILITY
   sql.execute ("DELETE  from  MEDICAL_FACILITY WHERE ID ="+medicalFacilityId)

   // Удаляем МУ2 MEDICAL_FACILITY
   sql.execute ("DELETE  from  MEDICAL_FACILITY WHERE ID ="+medicalFacilityId2)

   // Удаляем МО MEDICAL_ORGANIZATION
   sql.execute ("DELETE  from  MEDICAL_ORGANIZATION WHERE ID ="+medicalOrganizationId)
   
//} else {
//	log.error("Соединение с бд не установлено!");
//}</script></con:config></con:testStep><con:properties><con:property><con:name>medicalOrganizationId</con:name><con:value>200001798503</con:value></con:property><con:property><con:name>medicalFacilityId</con:name><con:value>200001798516</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-01-01</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-01-31</con:value></con:property><con:property><con:name>scheduleId</con:name><con:value>13945970</con:value></con:property><con:property><con:name>locationId</con:name><con:value>19296</con:value></con:property><con:property><con:name>treatmentRoomId</con:name><con:value>466</con:value></con:property><con:property><con:name>resourceId</con:name><con:value>30101315303</con:value></con:property><con:property><con:name>res_scheduleIsId</con:name><con:value>1227890</con:value></con:property><con:property><con:name>sarSheduleRuleId</con:name><con:value>880754</con:value></con:property><con:property><con:name>treatmentId</con:name><con:value>135468844</con:value></con:property><con:property><con:name>sarSheduleRuleId_t4</con:name><con:value>880755</con:value></con:property><con:property><con:name>medicalFacilityId2</con:name><con:value>200001798515</con:value></con:property><con:property><con:name>sarSheduleRuleVersion</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSheduleRuleVersion_t4</con:name><con:value>0</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>2</con:value></con:property><con:property><con:name>operationId</con:name><con:value>1435784</con:value></con:property><con:property><con:name>operationId1</con:name><con:value>1435783</con:value></con:property><con:property><con:name>ageGroupId</con:name><con:value>127631257</con:value></con:property><con:property><con:name>typeTreatmentRedefinitionId</con:name><con:value>4</con:value></con:property><con:property><con:name>typeWorkTimeDId</con:name><con:value>1</con:value></con:property><con:property><con:name>scheduleId2</con:name><con:value>13945971</con:value></con:property><con:property><con:name>res_scheduleIsId2</con:name><con:value>1227891</con:value></con:property><con:property><con:name>typeTreatmentRedefinitionKind</con:name><con:value>TREATMENT_REDEFINITION</con:value></con:property><con:property><con:name>sheduleVersion2</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSheduleRuleId2</con:name><con:value>881778</con:value></con:property><con:property><con:name>sarSheduleRuleVersion2</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSheduleRuleVersion_t42</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSheduleRuleId_t42</con:name><con:value>881779</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a9552399-13c7-4f9f-a66c-340101a35750" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="СДР. CreateSarScheduleRule. Основные АС" searchProperties="true"><con:settings><con:setting id="abfe296c-55f7-41c7-b648-8089df85124cfileName">СДР.Основные-АС</con:setting></con:settings><con:testStep type="groovy" name="getTreatmentsWithMapping" id="41f74961-0fff-4bfa-b198-e4d223cdbc86"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithMapping=sql.rows(getTreatmentsWithMapping)
	countTreatmentsWithMapping=treatmentsWithMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithMapping
	lastId=0
	listOfTreatmensWithMapping="0"
	if(countTreatmentsWithMapping>0){
		if(countTreatmentsWithMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatments = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 and t.id not in ("+listOfTreatmensWithMapping+") ORDER BY t.id DESC"
		//log.info(getNonarchivedTreatments)
		nonarchivedTreatments=sql.rows(getNonarchivedTreatments)
		countNonarchivedTreatments=nonarchivedTreatments.size()
		log.info("countNonarchivedTreatments= "+countNonarchivedTreatments)
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
			if(countNonarchivedTreatments>0){
					treatmentId = nonarchivedTreatments[index].TREATMENT_ID.toString()
					treatmentCode = nonarchivedTreatments[index].TREATMENT_CODE.toString()
					treatmentCategoryId = nonarchivedTreatments[index].TREATMENT_CATEGORY_ID.toString()
					treatmentCategoryCode = nonarchivedTreatments[index].TREATMENT_CATEGORY_CODE.toString()
					tCreatedByTest="0"
					tcCreatedByTest="0"
					countNonarchivedTreatments=countNonarchivedTreatments-1
					log.info("Для записи №"+i+" есть неархивная ММ без маппинга, ее id = "+treatmentId)
					index=index+1
			}
			else{
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
				}
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание или подбор вспомогательных сущностей" id="29ef8189-011e-4716-9d17-43a397594de3"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()
def moId = testRunner.testCase.getPropertyValue("moId")


def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	String query = "SELECT * FROM "+table+ " "+condition
	//log.info("insert into  "+table+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+table+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+table+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+table+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "1")
		}
	}
}

def getDoesntExisted (String tableName,String propertyName, int counter=1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		String query = "SELECT max(id)+"+i+" as ID FROM "+table
		def result =sql.rows(query)
		testRunner.testCase.setPropertyValue(propertyName+i, result[0].ID.toString())
		log.info("ID несуществубщей записи в таблице  "+table+ " = "+result[0].ID.toString())
	}
}

def checkExistenceResourceType (String resourceType ){
	String CreatedByTest="0"
	String propertyName1
	String propertyName2
	String result1
	String result2
	String tableName1="RESOURCE_TYPE"
	String tableName2
		if(resourceType=="SPECIAL_AVAILABLE_RESOURCE") { 
			//log.info("СДР")
			propertyName1="resTypeForSarId"
			propertyName2="epId"
			tableName2="EQUIPMENT_PROFILE"
			String query = "SELECT rt.ID as RESOURCE_TYPE_ID, ep.id as EQUIPMENT_PROFILE_ID FROM RESOURCE_TYPE rt JOIN EQUIPMENT_PROFILE ep ON ep.RESOURCE_TYPE_ID =rt.ID WHERE rt.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND rt.ARCHIVED =0 AND ep.ARCHIVED =0"
			//log.info(query)
			def row = sql(query)
			//log.info(row)
			def result =sql.rows(query)
			//log.info(result)
			if (row == 0){
					log.info("В таблицах EQUIPMENT_PROFILE  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -3, 'Тип CДР для нагрузочного тестирования','SPECIAL_AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  EQUIPMENT_PROFILE  (ID, ARCHIVED,RESOURCE_TYPE_ID) values( -3, 0, -3)")
					result1="-3"
					result2="-3"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].EQUIPMENT_PROFILE_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и EQUIPMENT_PROFILE имеют подходящие записи.")
				}
		} else if(resourceType=="AVAILABLE_RESOURCE") { 
		   	log.info("ДР")
		   	tableName2="POSITION_NOM"
		   	propertyName1="resTypeForArId"
			propertyName2="pnId"
			String query1 = "SELECT rt.ID as RESOURCE_TYPE_ID, pn.id as POSITION_NOM_ID  FROM RESOURCE_TYPE rt JOIN POSITION_NOM pn ON pn.RESOURCE_TYPE_ID =rt.id WHERE rt.ARCHIVED =0 AND rt.RESOURCE_KIND ='AVAILABLE_RESOURCE'"
			//log.info(query)
			def row1 = sql(query1)
			//log.info(row)
			def result =sql.rows(query1)
			//log.info(result)
			if (row1 == 0){
					log.info("В таблицах POSITION_NOM  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -4, 'Тип ДР для нагрузочного тестирования','AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  POSITION_NOM (ID,TITLE,RESOURCE_TYPE_ID) values( -2,'Должность для нагрузочного тестирования', -4)")
					result1="-4"
					result2="-4"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].POSITION_NOM_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и POSITION_NOM имеют подходящие записи.")
				}
		} else { 
		  testRunner.fail("Передан некорректный тип ресурса")
		}

	testRunner.testCase.setPropertyValue(propertyName1, result1)
	testRunner.testCase.setPropertyValue(propertyName2, result2)
	testRunner.testCase.setPropertyValue(propertyName1+"CreatedByTest", CreatedByTest)
	testRunner.testCase.setPropertyValue(propertyName2+"CreatedByTest", CreatedByTest)
	log.info("Записан  параметр"+tableName1+ ".ID= "+result1)
	log.info("Записан  параметр "+tableName2+ ".ID= "+result2)


	}
	
checkExistenceResourceType("SPECIAL_AVAILABLE_RESOURCE")

//checkExistenceResourceType("AVAILABLE_RESOURCE")

//шаблончик вызова метода
//checkExistence("", "", "", "","")//"where archived = 0" )

//Подобрать ММ с маппингом


findEntitiesInDBwithConditionOrCreate("tableSpec", "ID,ARCHIVED,TITLE", "-2,0,'Специализация для нагрузочного тестирования'","specId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableEP", "ID,ARCHIVED", "-2,0", "epId",1,"where archived = 0" )

//findEntitiesInDBwithConditionOrCreate("tableRPCM", "ID,NSI_POSITION_CODE_CODE,SUPP_POSITION_CODE_CODE", "-2,'2','2'", "rpcmId",1)

//findEntitiesInDBwithConditionOrCreate("tablePosNom","ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")

findEntitiesInDBwithConditionOrCreate("tableDepNom", "ID,TITLE,\"START\" ", "-2, 'Департамент для нагрузочного тестирования',  TIMESTAMP '2015-11-01 00:00:00.000000' ", "dnId",1)

//findEntitiesInDBwithConditionOrCreate("tablePCalendar", "ID,\"DATE\",PARTICULARITY,ARCHIVED", "-2,TIMESTAMP '2018-01-01 00:00:00.000000', 'HOLIDAY', 0", "prodCalId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "(select min(id)-1),'CODE','Возрастная группа для нагрузочного тестирования',0,0", "agId",1,"where archived = 0 ")

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени ДР для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "arSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило ДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','REJECTION',1", "arSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило ДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','TREATMENT_REDEFINITION',30", "arSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило ДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','AGE_GROUP_RESTRICTION',32", "arSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени CДР для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "sarSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило CДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','REJECTION',1", "sarSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило CДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','AGE_GROUP_RESTRICTION',8", "sarSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило CДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','TREATMENT_REDEFINITION',7", "sarSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-6, 0, 'Правило CДР типа ROUTE_REDEFINITIONCTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','ROUTE_REDEFINITION',9", "sarSchruleRRTypeId",1,"where archived = 0 and KIND='ROUTE_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "-5,'CODE','Архивная возрастная группа для автотестирования',1,0", "archivedAgId",1,"where archived = 1 ")

getDoesntExisted("tableAG", "nonexistentAgId")

getDoesntExisted("tableSarRuleType", "nonexistentSarRuleTypeId")

getDoesntExisted("tableE", "eId")

//getDoesntExisted("JOB_EXECUTION", "JeId")</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/нескольких МУ/Локаций" id="c61d3d5f-a388-4f17-a7b4-7b4f4766eb9b"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.getPropertyValue("moId")
def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()
def specId = testRunner.testCase.getPropertyValue("specId1")

//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =1000, int icount=15) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i <= icount; i++) {
	    if (row != 1) {
		    	if (i==icount){
		    		testRunner.fail("Запись в таблице "+tableName+" с id = "+propertyName+" не найдена.")
		    		break;
		    	}
		      log.info("Запись в таблице "+tableName+" с id = "+propertyName+" пока не найдена. Подождем...")
		      sleep(sleepTime)
		      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+tableName+" с id = "+propertyName+" создана.")
	        break;
	    }
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String id ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+id
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}

def isExistedWithCondition(String tableName, String cond ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE "+cond
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}
//функция отправляет указанное сообщение в укаанный топик
def sendMessageToKafka(String topicName, String s){
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
		log.info( "messageSender: "+topic+"; "+message )
		def key =  UUID.randomUUID().toString()
		def Date date = new Date(); 
		def  long  timestamp= date.getTime()
		def int partition =0
		String compoundMessage = "$message"
		producer.send(
			new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
			{ RecordMetadata metadata, Exception e ->
			log.info( "The offset of the record we just sent is: ${metadata.offset()}")
			} as Callback
			)
			}
	
	def mfMsg =s
	String messageCreateMf =mfMsg.toString()
	def topic= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	String topic1= topic.toString()
	//log.info(topic1+" "+messageCreateMf)
	messageSender(topic1, messageCreateMf)
	
	producer.close() 
}


def existedMO=isExisted("MEDICAL_ORGANIZATION ",moId) 

if (!isExisted("MEDICAL_ORGANIZATION ",moId) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMO.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МО в сервисе Запись.3")
			sendMessageToKafka("topicMO.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МО в сервисе Запись.3')
		}
		checkCreation("MEDICAL_ORGANIZATION ",moId)
}
else {
	log.info("Медицинская организация с id = "+moId+" уже создана")
		testRunner.testCase.setPropertyValue("moId",moId)
}


//Проверить, создана ли запись для головного МУ, если нет - досоздать
if (!isExisted("MEDICAL_FACILITY",moId) ){
	//log.info("Отправляю сообщение")
	sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	if (createEntityInAppointment3 == true){
		log.info("Требуется досоздать МУ в сервисе Запись.3")
		sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	}
	else {
		log.info('Не требуется досоздать МУ в сервисе Запись.3')
	}
	checkCreation("MEDICAL_FACILITY",moId)

}
else {
	log.info("Медицинское учреждение с id = "+moId+" уже создано")
}


// Досоздать необходимое количество МУ, если требуется

int mfId = moId.toInteger()
for (int i = 1; i <counterMF; i++){
	mfId = mfId +1
	if (!isExisted("MEDICAL_FACILITY",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МУ в сервисе Запись.3")
			sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МУ в сервисе Запись.3')
		}
		checkCreation("MEDICAL_FACILITY",mfId.toString())
	
	}
	else {
		log.info("Медицинское учреждение с id = "+mfId+" уже создано")
	}
	testRunner.testCase.setPropertyValue("mfId"+i, mfId.toString())
	
}

mfId = moId.toInteger()
for (int i = 1; i <=counterMF; i++){
	if (!isExisted("LOCATION",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicLocation.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")
		if (createEntityInAppointment3 == true){
				log.info("Требуется досоздать Локацию в сервисе Запись.3")
				sendMessageToKafka("topicLocation.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+moId+"""</ns5:medicalFacilityId></ns4:location>""")
		}
		else {
			log.info('Не требуется досоздать Локацию в сервисе Запись.3')
		}
		checkCreation("LOCATION",mfId.toString())
	}
	else {
		log.info("Локация с id = "+mfId+" уже создана")
	}
	mfId = mfId+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании оборудований" id="6d8c4b44-9337-4428-a9d1-fdb48800596e"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("eId1")
def moId=testRunner.testCase.getPropertyValue("moId")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("mfId1")
def archived=testRunner.testCase.getPropertyValue("archived")
def equipmentModel=testRunner.testCase.getPropertyValue("em")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId")
def equipmentProfileId=testRunner.testCase.getPropertyValue("epId1")

def depId=testRunner.testCase.getPropertyValue("depId")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle")
def depNomId=testRunner.testCase.getPropertyValue("dnId1")
archived =testRunner.testCase.getPropertyValue("archived").toBoolean()
def personalizedService=testRunner.testCase.getPropertyValue("personalizedService")
def capacity=testRunner.testCase.getPropertyValue("capacity")
def tId1=testRunner.testCase.getPropertyValue("tId1")
def tId2=testRunner.testCase.getPropertyValue("tId2")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableE =testRunner.testCase.testSuite.project.getPropertyValue("tableE")
log.info(tableE+id)

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i<=countResources; i++){
	sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived=\""""+archived+"""\" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
	for (int q = 0; q<=10;q++) {
		def getLastItem = "SELECT * FROM "+tableE+"  WHERE ID="+id
		log.info(getLastItem)
		def lastItem= sql.rows(getLastItem)
	
		if ( lastItem.size()== 0){
				log.info("Оборудование пока не найдено. Подождем")
				sleep(5000)
		}
		else if (q==10){
			testRunner.fail("Запись в таблице "+tableE+" не найдена")
		}
		else {
			log.info("Оборудование найдено.")
			testRunner.testCase.setPropertyValue("eId"+i, id.toString())
			testRunner.testCase.setPropertyValue("eIdCreatedByTest"+i, "1")
			break;
		}
	}
	id=id+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка синхронизации ресурсов" id="f1eaece7-93e6-4f1e-bc76-01dae3286048"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i&lt;=countResources; i++){
	def id=testRunner.testCase.getPropertyValue("eId"+i)
	String querySar="select * from "+tableRes+" where RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id
	for (int j = 0; j &lt; 23; j++) {
		
		//log.info(querySar)
		rowsSar = sql.rows(querySar)
		// log.info(rowsSar)
		if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
			log.info("Идет синхронизация ресруса. Подождём...")
			sleep(6000)
		}
		else {
			log.info("Синхрнизация ресурса завершена.")
			break;
		}
	 }
	if (rowsSar[0].SYNC_STATUS=='ERROR'){
		getResSyncError=(" SELECT DISTINCT rsem.code, rsemp.\"KEY\" as entity , rsemp.VALUE FROM RESOURCE_SYNC_ERROR rse JOIN "+tableRes+" res ON res.id=rse.RESOURCE_ID  JOIN RESOURCE_SYNC_ERROR_MSG rsem ON RSE.ID=RSEM.RESOURCE_SYNC_ERROR_ID JOIN RESOURCE_SYNC_ERROR_MSG_PR rsemp ON rsemp.RESOURCE_SYNC_ERROR_MSG_ID=rsem.id WHERE res.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND res.PARENT_ID ="+id)
		errors=sql.rows(getResSyncError)
		testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+"завершена с ошибкой. Код ошибки "+errors[0].CODE+". Сущность, из-за которой произошла ошибка: "+errors[0].entity+", id="+errors[0].VALUE)
	}
	
	testRunner.testCase.setPropertyValue("sarId"+i, rowsSar[0].ID.toString())
}</script></con:config></con:testStep><con:testStep type="groovy" name="Подбор периода расписания" id="c0afe82d-f1b6-40e7-a213-8731211e20dc"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def monthsNumberInSchedule = testRunner.testCase.getPropertyValue("countMonthsInSchedule").toInteger()

def schedulePeriodStart=LocalDate.now()
def schedulePeriodNextDay=schedulePeriodStart.plusDays(1)
def scheduleNewPeriodStart=schedulePeriodStart.plusMonths(monthsNumberInSchedule-1)
def schedulePeriodEnd=scheduleNewPeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def yesterday = schedulePeriodStart.minusDays(1)
def schedulePeriodNextDay2=schedulePeriodStart.plusMonths(1)
log.info("schedulePeriodNextDay "+schedulePeriodNextDay)
log.info("schedulePeriodNextDay2 "+schedulePeriodNextDay2)
log.info("Период расписания с "+schedulePeriodStart+" по "+schedulePeriodEnd)

testRunner.testCase.setPropertyValue("schedulePeriodNextDay",schedulePeriodNextDay.toString());
testRunner.testCase.setPropertyValue("schedulePeriodNextDay2",schedulePeriodNextDay2.toString());
testRunner.testCase.setPropertyValue("schedulePeriodStart1",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd1", schedulePeriodEnd.toString())
testRunner.testCase.setPropertyValue("schedulePeriodStart",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd", schedulePeriodEnd.toString())
log.info("Период расписания №1 с "+schedulePeriodStart+" по "+schedulePeriodEnd)
ospe=schedulePeriodEnd


	
for (int i=2; i &lt;5; i++ ){
	sps=ospe.plusDays(1)
	spe1=ospe.plusMonths(monthsNumberInSchedule)
	spe=spe1.with(TemporalAdjusters.lastDayOfMonth())
	testRunner.testCase.setPropertyValue("schedulePeriodStart"+i,sps.toString());
	testRunner.testCase.setPropertyValue("schedulePeriodEnd"+i, spe.toString())
	log.info("Период расписания №"+i+" с "+sps+" по "+spe)
	ospe=spe
}
def lastDayOfCurrentMounth=schedulePeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def schedulePeriodEndPlusYear=lastDayOfCurrentMounth.plusMonths(monthsNumberInSchedule+13)
testRunner.testCase.setPropertyValue("schedulePeriodEndPlusYear", schedulePeriodEndPlusYear.toString())
log.info("schedulePeriodEndPlusYear: "+schedulePeriodEndPlusYear)
testRunner.testCase.setPropertyValue("yesterday", yesterday.toString())
log.info("yesterday: "+yesterday)</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на текущий месяц" id="0d0d20a2-f4c3-404d-a06a-5bcbcb9fc7db"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на текущий месяц" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="f8f45c55-ec6b-452c-bb1e-e1de8f463d22"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch на текущий месяц</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на существующий период(E412,E413,E414)" id="7dc1c878-143a-46ff-9882-95eaffa3fe54" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на существующий период(E412,E413,E414)" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains E412"><con:configuration><token>E412</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a08420d1-e896-4a83-b915-b173771be93e" name="Contains E413"><con:configuration><token>E413</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="973439ef-43e4-4f3c-8b26-7ba07423810b" name="Contains E414"><con:configuration><token>E414</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch больше чем на год(E411)" id="bda14f97-d08e-4287-95da-105e332903b7" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch больше чем на год(E411)" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart2}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEndPlusYear}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains E411"><con:configuration><token>E411</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания расписаний ресурсов" id="4bd37d31-1c01-4074-bc4e-527d73f2ef52"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()

def checkResourceKind(int id){
	resourseKind=""
		
}
getResources = ("SELECT * FROM \"RESOURCE\" WHERE SYNC_STATUS= 'OK' AND ARCHIVED=0 AND MEDICAL_FACILITY_ID="+mfId)
//log.info(getResources)
resources= sql.rows(getResources)
countResources= sql(getResources)
if ( countResources== 0){
		testRunner.fail("Запись в таблице RESOURCE не найдена")
}

//log.info("countResources "+countResources)

for (int i=0; i&lt;countResources; i++){
	//log.info("i = "+i)
	getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE SCHEDULE_ID="+scheduleId+" AND RESOURCE_ID="+resources[i].ID)
	//log.info(getResourceSchedule)
	resourceSchedule=sql.rows(getResourceSchedule)
	//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
	if ( sql(getResourceSchedule)== 0){
		testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс SCHEDULE_ID="+scheduleId+" и RESOURCE_ID="+resources[i].ID+" не найдена")
	}
	else {
		//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 0
	assert resourceSchedule[0].STATUS == "NOT_DEFINED"
	}
	log.info("Расписание для ресурса "+resources[i].ID+" создано успешно и соответствует требованиям.")
	if (resources[i].RESOURCE_KIND =="SPECIAL_AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("sarScheduleId1",resourceSchedule[0].ID.toString())
	}
	else if (resources[i].RESOURCE_KIND =="AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("arScheduleId1",resourceSchedule[0].ID.toString())
	}
}

log.info("Для всех ресурсов успешно созданы расписания.")</script></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E372" id="1a8ffb8d-1266-48b2-ab6e-bb8aa285e393"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E372" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E372"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E372'

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E379" id="99e9d31a-5de5-44e8-8e79-b32b5d9a4ff3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E379" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>\r
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>${#TestCase#startTime}</v1:start>\r
                     <v1:end>${#TestCase#endTime}</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestSuite#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestSuite#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E379"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E379'

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E385" id="1db4ea70-9077-4935-afb6-4b457767af37" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E385" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestSuite#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="sarScheduleRuleID"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из запроса
def req_typeId = req.getNodeValue('//*:typeId')
def req_period_start = req.getNodeValue('//*:datePeriod/*:start')
def req_period_end = req.getNodeValue('//*:datePeriod/*:end')
def req_timeIn_start = req.getNodeValue('//*:timeIntervals/*:start')
def req_timeIn_end = req.getNodeValue('//*:timeIntervals/*:end')
def req_age_group = req.getNodeValue('//*:ageGroups/*:ageGroupId')
def req_comment = req.getNodeValue('//*:comment') 

// получаю данные из ответа
def result = resp.getNodeValue('//*:sarScheduleRule/@id')
def resp_typeId = resp.getNodeValue('//*:typeId')
def resp_period_start = resp.getNodeValue('//*:datePeriod/*:start')
def resp_period_end = resp.getNodeValue('//*:datePeriod/*:end')
def resp_timeIn_start = resp.getNodeValue('//*:timeIntervals/*:start')
def resp_timeIn_end = resp.getNodeValue('//*:timeIntervals/*:end')
def resp_age_group = resp.getNodeValue('//*:ageGroups/*:ageGroupId')
def resp_comment = resp.getNodeValue('//*:comment') 

// правило создано
assert result != null

// проверка typeId
assert req_typeId == resp_typeId

// проверка datePeriod
assert req_period_start == resp_period_start 
assert req_period_end == resp_period_end

// проверка timeIntervals
assert req_timeIn_start == resp_timeIn_start 
assert req_timeIn_end == resp_timeIn_end 

// проверка ageGroups
assert req_age_group == resp_age_group

// проверка comment
assert req_comment  == resp_comment

log.info(result)
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="90409546-6906-4051-8f5c-6fb515ff3855" name="treatmentId"><con:configuration><token>treatmentId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E378" id="733bbfca-e848-4ad6-8cfe-a6e0abe23786"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E378" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:sarScheduleId>${#TestCase#res_scheduleIsId}</typ:sarScheduleId>\r
         <typ:info>\r
            <typ:typeId>${#TestCase#typeWorkTimeDId}</typ:typeId>\r
             <typ:comment>Тест_Н</typ:comment>

            <typ:datePeriod>\r
               <v1:start>${#TestCase#schedulePeriodStart}</v1:start>\r
               <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>\r
            </typ:datePeriod>\r
            <typ:dateTemplate xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:type="v1:SpecialDayDatesTemplate" >
			   <v1:day>${#TestCase#schedulePeriodStart}</v1:day>
			</typ:dateTemplate>
            <!--Optional:-->
           
            <typ:timeIntervals>\r
               <!--1 or more repetitions:-->\r
               <typ:timeInterval>\r
                  <v1:start>08:01:00</v1:start>\r
                  <v1:end>08:02:00</v1:end>\r
               </typ:timeInterval>\r
            </typ:timeIntervals>\r
            <typ:ageGroups>
               <!--1 or more repetitions:-->
               <v1:ageGroupId>${#TestCase#ageGroupId}</v1:ageGroupId>
            </typ:ageGroups>
         </typ:info>\r
          <v1:options>
            <!--Zero or more repetitions:-->
            <v1:entry key="ignoreWarnings">true</v1:entry>
         </v1:options>
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E184" id="7f410144-b6e7-44cf-a23c-7251c88a6099"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E184" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#noneExistedAgId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestSuite#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E184"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E184'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E185" id="440224b4-121c-423a-998c-10f4035f7428"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E185" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#archivedAgId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestSuite#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E185"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E185'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E351" id="3391670d-aa5d-4e07-9fc9-f697318f682c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E351" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#noneExistedSarRuleTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E351"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E351'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E365" id="e52d0a34-b625-4f26-919c-6bf7bca957c0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E365" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodEnd1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodStart1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E365"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E365'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E363" id="336a4aa2-e4b6-4e7d-910a-b4ad86346cba"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E363" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#yesterday}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E363"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E363'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E367" id="857a1123-cfa6-4279-ae5e-a474513f5e5d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E367" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodStart2}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E367"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E367'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E386" id="625856c0-535b-4975-bc0f-fedbc925c3a4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E386" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleRejectionTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="Simple NotContains" id="2a6ca456-2cf6-452a-973d-0479c566e8d5" name="Not Contains_ageGroupId"><con:configuration><token>ageGroupId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="800eb124-916d-4076-80ec-21d25149a0a3" name="Contains"><con:configuration><token>E386</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E373" id="0583ca67-3d3e-4156-b416-f6602b643e64"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E373" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleWTTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestSuite#tId3}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="Simple Contains" id="7064eeaf-b84f-4f7c-9a26-036de293d86c" name="Contains E373"><con:configuration><token>E373</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Выбор дат2" id="c8cb80f3-c2c0-4081-b896-2e706a849ad9" disabled="true"><con:settings/><con:config><script>import java.time.*;
import java.time.format.*;
import java.time.temporal.*;
import groovy.sql.Sql

if (context.dbConnect != null) {      
	sql = context.dbConnect;
	
def medicalFacilityId = testRunner.testCase.getPropertyValue("medicalFacilityId")

maxEndResource = sql.firstRow("select max(END_DATE) as dt from schedule where medical_facility_id = "+medicalFacilityId);

	if (maxEndResource != null &amp;&amp; maxEndResource.dt != null) {
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.A");
		maxDayDate = LocalDate.parse(maxEndResource.dt.stringValue(), formatter);	

		if (maxDayDate.plusDays(1) &lt;  LocalDate.now() ) {
			maxDayDate = LocalDate.now()
			log.info("11")
			lastDayDate = maxDayDate.with(TemporalAdjusters.lastDayOfMonth());
			testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
			testRunner.testCase.setPropertyValue("schedulePeriodEnd12", lastDayDate.plusDays(400).oString());
	          testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.toString());
		     log.info("Даты расписания:" + maxDayDate.toString()+ "-" + lastDayDate.toString());
			} else {
			    lastDayDate = maxDayDate.plusDays(1).with(TemporalAdjusters.lastDayOfMonth());
		         testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
              	    testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.plusDays(1).toString());
              	    testRunner.testCase.setPropertyValue("schedulePeriodEnd12", lastDayDate.plusDays(400).toString()); 
		         
                   testRunner.testCase.setPropertyValue("afterSchedulePeriodEnd",  lastDayDate.plusDays(1).toString())
                    testRunner.testCase.setPropertyValue("schedulePeriodStart2", maxDayDate.plusDays(3).toString());
		         log.info("Даты расписания:" + maxDayDate.plusDays(1).toString()+ "-" + lastDayDate.toString());
				}		
	} else {
		testRunner.testCase.setPropertyValue("schedulePeriodStart", LocalDate.now().toString());
		testRunner.testCase.setPropertyValue("schedulePeriodEnd",  LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());
          testRunner.testCase.setPropertyValue("afterSchedulePeriodEnd", LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).plusDays(1).toString())
          //testRunner.testCase.setPropertyValue("beforeSchedulePeriodStart",  LocalDate.now().toString())
		log.info("Даты расписания:" + LocalDate.now().toString()+ "-" + LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());
	}

} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch_E416" id="4407654c-0489-435f-b3a3-a9b6e8ece453"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch_E416" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createScheduleForBranchRequest>
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>
         <v1:schedulePeriod>
            <v1:start>${#TestCase#schedulePeriodNextDay2}</v1:start>
            <v1:end>${#TestCase#schedulePeriodEnd2}</v1:end>
         </v1:schedulePeriod>
      </typ:createScheduleForBranchRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="GroovyScriptAssertion" id="38b99e98-74da-4c03-b828-ce27e7be7404" name="E416"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E416'

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Получаю scheduleVersion" id="4950f2f2-b636-4a4f-9917-9c568bacdd8f" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
     
     //Получить версию расписания
     String sql_query_sC ="select  * from SCHEDULE WHERE ID ="+ scheduleId
     def schedule = sql.rows(sql_query_sC)
     String sheduleVersion =schedule[0].VERSION
     testRunner.testCase.setPropertyValue("sheduleVersion",sheduleVersion)
      log.info ("ID sheduleVersion: " + sheduleVersion)
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="groovy" name="Получить версию расписания" id="5317fbd8-eace-42af-bf84-fdfd9a7921c6"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	testRunner.testCase.setPropertyValue("scheduleVersion1", schedule[0].VERSION.toString());
}</script></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="f7b87948-5c78-446b-8471-f280c6f4d5d5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId1}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#scheduleVersion1}</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId" id="d3c30d6c-9e4e-456b-ab3c-d3c2b64b4efb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteScheduleForBranch</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>deleteSchedule1OperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция" id="aefd97f0-ed17-40c7-bace-8991a38bd52b"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
def operationId1= testRunner.testCase.getPropertyValue("deleteSchedule1OperationId")
log.info ("ID операции: " + operationId1)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId1
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка удаления расписания МУ" id="dc63e035-263c-4709-afee-5554b726c0b0"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)> 0){
		testRunner.fail("Запись в таблице SCHEDULE не удалена."+schedule)
}
else {
	log.info("Запись в таблице SCHEDULE удалена.")
}</script></con:config></con:testStep><con:properties><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-01-01</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-01-31</con:value></con:property><con:property><con:name>schedulePeriodEnd12</con:name><con:value>2022-03-07</con:value></con:property><con:property><con:name>beforeSchedulePeriodStart</con:name><con:value>2018-08-31</con:value></con:property><con:property><con:name>afterSchedulePeriodEnd</con:name><con:value>2021-02-01</con:value></con:property><con:property><con:name>scheduleId</con:name><con:value>13925480</con:value></con:property><con:property><con:name>res_scheduleIsId</con:name><con:value>1207400</con:value></con:property><con:property><con:name>treatmentId</con:name><con:value>135468844</con:value></con:property><con:property><con:name>treatmentId2</con:name><con:value>135468854</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>0</con:value></con:property><con:property><con:name>scheduleId1</con:name><con:value>2559079</con:value></con:property><con:property><con:name>sarScheduleId1</con:name><con:value>4750440</con:value></con:property><con:property><con:name>arScheduleId1</con:name><con:value>4750441</con:value></con:property><con:property><con:name>startTime</con:name><con:value>08:00:00</con:value></con:property><con:property><con:name>endTime</con:name><con:value>20:00:00</con:value></con:property><con:property><con:name>scheduleVersion2</con:name><con:value>0</con:value></con:property><con:property><con:name>scheduleVersion1</con:name><con:value>0</con:value></con:property><con:property><con:name>deleteSchedule1OperationId</con:name><con:value>4157546</con:value></con:property><con:property><con:name>archived</con:name><con:value>false</con:value></con:property><con:property><con:name>capacity</con:name><con:value>1</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countMonthsInSchedule</con:name><con:value>1</con:value></con:property><con:property><con:name>countResources </con:name><con:value>1</con:value></con:property><con:property><con:name>countSchedule</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatment</con:name><con:value>3</con:value></con:property><con:property><con:name>depId</con:name><con:value>123456</con:value></con:property><con:property><con:name>depTitle</con:name><con:value>РћРїРёСЃР°РЅРёРµ РѕС‚РґРµР»РµРЅРёСЏ Р°РІС‚РѕС‚РµС‚ СЂРёСЂ2</con:value></con:property><con:property><con:name>em</con:name><con:value>РћР±РѕСЂСѓРґРѕРІР°РЅРёРµ РґР»СЏ РЎР”Р  Р°РІС‚РѕС‚РµСЃС‚ СЂРёСЂ2</con:value></con:property><con:property><con:name>endTimeTR</con:name><con:value>10:00:00</con:value></con:property><con:property><con:name>equipmentId</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentTypeId</con:name><con:value>1236</con:value></con:property><con:property><con:name>moId</con:name><con:value>-10</con:value></con:property><con:property><con:name>personalizedService</con:name><con:value>true</con:value></con:property><con:property><con:name>startTimeTR</con:name><con:value>09:00:00</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>agId</con:name><con:value>110110110</con:value></con:property><con:property><con:name>agId2</con:name><con:value>127631258</con:value></con:property><con:property><con:name>agId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>agIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>archivedAgId1</con:name><con:value>127631257</con:value></con:property><con:property><con:name>archivedAgId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>arId1</con:name><con:value>30101008100</con:value></con:property><con:property><con:name>arId2</con:name><con:value>30101008101</con:value></con:property><con:property><con:name>arSchruleAGTypeId</con:name><con:value>7</con:value></con:property><con:property><con:name>arSchruleAGTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleRejectionTypeId</con:name><con:value>10</con:value></con:property><con:property><con:name>arSchruleRejectionTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleTRTypeId</con:name><con:value>9</con:value></con:property><con:property><con:name>arSchruleTRTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>arSchruleWTTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>arSchruleWTTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>countResources</con:name><con:value>2</con:value></con:property><con:property><con:name>countSchedule</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatment</con:name><con:value>2</con:value></con:property><con:property><con:name>createEntityInAppointment3</con:name><con:value>0</con:value></con:property><con:property><con:name>dnId</con:name><con:value>125692830</con:value></con:property><con:property><con:name>dnIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>epId</con:name><con:value>146017593</con:value></con:property><con:property><con:name>epIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>mfCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-9</con:value></con:property><con:property><con:name>moId</con:name><con:value>-10</con:value></con:property><con:property><con:name>monthsNumberInSchedule</con:name><con:value>1</con:value></con:property><con:property><con:name>noneExistedAgId</con:name><con:value>127631291</con:value></con:property><con:property><con:name>noneExistedSarRuleTypeId</con:name><con:value>9</con:value></con:property><con:property><con:name>pnId</con:name><con:value>109</con:value></con:property><con:property><con:name>pnIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>prodCalId</con:name><con:value>18</con:value></con:property><con:property><con:name>prodCalIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>resTypeForArId</con:name><con:value>158297691</con:value></con:property><con:property><con:name>resTypeForArIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>resTypeForSarId</con:name><con:value>156645371</con:value></con:property><con:property><con:name>resTypeForSarIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>rpcmId</con:name><con:value>-2</con:value></con:property><con:property><con:name>rpcmIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>rtlmId</con:name><con:value>424510</con:value></con:property><con:property><con:name>rtlmId1</con:name><con:value>424510</con:value></con:property><con:property><con:name>rtlmId2</con:name><con:value>-339740</con:value></con:property><con:property><con:name>rtlmId3</con:name><con:value>457900</con:value></con:property><con:property><con:name>rtlmIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>rtlmIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>rtlmIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>rtlmIdcreatedByTest3</con:name><con:value>0</con:value></con:property><con:property><con:name>sarId1</con:name><con:value>30101009123</con:value></con:property><con:property><con:name>sarId2</con:name><con:value>30101009124</con:value></con:property><con:property><con:name>sarSchruleAGTypeId</con:name><con:value>5</con:value></con:property><con:property><con:name>sarSchruleAGTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleRejectionTypeId</con:name><con:value>2</con:value></con:property><con:property><con:name>sarSchruleRejectionTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleRRTypeId</con:name><con:value>7</con:value></con:property><con:property><con:name>sarSchruleRRTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleTRTypeId</con:name><con:value>4</con:value></con:property><con:property><con:name>sarSchruleTRTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleWTTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>sarSchruleWTTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd1</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd2</con:name><con:value>2021-11-30</con:value></con:property><con:property><con:name>schedulePeriodEnd3</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>schedulePeriodEnd4</con:name><con:value>2022-01-31</con:value></con:property><con:property><con:name>schedulePeriodEndPlusYear</con:name><con:value>2022-12-31</con:value></con:property><con:property><con:name>schedulePeriodNextDay</con:name><con:value>2021-10-23</con:value></con:property><con:property><con:name>schedulePeriodNextDay2</con:name><con:value>2021-11-22</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-10-22</con:value></con:property><con:property><con:name>schedulePeriodStart1</con:name><con:value>2021-10-22</con:value></con:property><con:property><con:name>schedulePeriodStart2</con:name><con:value>2021-11-01</con:value></con:property><con:property><con:name>schedulePeriodStart3</con:name><con:value>2021-12-01</con:value></con:property><con:property><con:name>schedulePeriodStart4</con:name><con:value>2022-01-01</con:value></con:property><con:property><con:name>sendOperationStatusMessage</con:name><con:value>1</con:value></con:property><con:property><con:name>specId</con:name><con:value>125676759</con:value></con:property><con:property><con:name>specIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tcCode2</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tcCode3</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tcCodecreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCodecreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCodecreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCodecreatedByTest3</con:name><con:value>0</con:value></con:property><con:property><con:name>tcId</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcId2</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcId3</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>tcIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcIdcreatedByTest3</con:name><con:value>0</con:value></con:property><con:property><con:name>tId</con:name><con:value>128309400</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309400</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135468778</con:value></con:property><con:property><con:name>tId3</con:name><con:value>135468780</con:value></con:property><con:property><con:name>tIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>tIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tIdcreatedByTest3</con:name><con:value>0</con:value></con:property><con:property><con:name>topicLocationEquipment</con:name><con:value>topicLocationEquipment.rir2</con:value></con:property><con:property><con:name>treatmentCode</con:name><con:value>78</con:value></con:property><con:property><con:name>treatmentCode1</con:name><con:value>78</con:value></con:property><con:property><con:name>treatmentCode2</con:name><con:value>469</con:value></con:property><con:property><con:name>treatmentCode3</con:name><con:value>495</con:value></con:property><con:property><con:name>treatmentCodecreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>treatmentCodecreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>treatmentCodecreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>treatmentCodecreatedByTest3</con:name><con:value>0</con:value></con:property><con:property><con:name>yesterday</con:name><con:value>2021-10-21</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="a3bcbf66-f347-4162-b890-4c68a37703eb" name="Copy of 2.1.3.7 Обработка поступающих сообщений из комплекса программных средств для асинхронного обмена сообщениями между программными интерфейсами ЕМИАС"><con:settings><con:setting id="d0e45f14-6816-410b-83c1-1eaeacbb245dfileName">Copy-of-2.1.3.7-Обработка-поступающих-сообщений-из-комплекса-программных-средств-для-асинхронного-обмена-сообщениями-между-программными-интерфейсами-ЕМИАС</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase id="a247d2ee-136d-4573-9be7-1c5a193fd6f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отправка сообщений" searchProperties="true"><con:settings><con:setting id="c5ac3c64-a47c-4634-ba3a-b9c4efcbf0ccfileName">Отправка-сообщений</con:setting></con:settings><con:testStep type="groovy" name="Подбор ID" id="9ddc94cc-454e-47c0-9e26-c261ae686f06"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

String getIdFromDBTable(String tableName, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max(ID)+"+count+" AS ID FROM  "+tableName)
	String id=query[0].ID
	log.info(tableName+" ID:"+id)
	testRunner.testCase.testSuite.setPropertyValue(propertyName, id)
	
} 

getIdFromDBTable("MEDICAL_ORGANIZATION","moId")
getIdFromDBTable("MEDICAL_FACILITY","mfId")
getIdFromDBTable("ADDRESS_OBJECT","aoId")
getIdFromDBTable("LOCATION","locId")
getIdFromDBTable("JOB_EXECUTION","jeId")
getIdFromDBTable("EQUIPMENT","eId")</script></con:config></con:testStep><con:testStep type="groovy" name="5. Отправка сообщения о создании МО" id="839493c3-ca38-44fa-88c9-5b7efea3d37c"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")


String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>Государственное бюджетное учреждение здравоохранения ТЕСТ</ns1:name><ns1:shortName>ГБУЗ ТЕСТ</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="5. Отправка сообщения об изменении  МО" id="89e97cce-f4ed-4c73-9495-b4fb1f733d4e"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/"    xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1"    xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types"    xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/"    xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:change><ns2:organizationAttributes><ns1:name>Государственное бюджетное учреждение здравоохранения ТЕСТ №1</ns1:name><ns1:shortName>ГБУЗ ТЕСТ №1</ns1:shortName><ns1:ogrn>2222222222</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns2:organizationAttributes></ns2:change></ns2:medicalOrganizationInfoMsg>"""
log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="5. Отправка сообщения об архивации МО" id="2d448a55-3f8a-45e1-a96d-b2d3d428bfcc"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")


String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\"    xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/"    xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1"    xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types"    xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="true"/>&lt;/ns2:medicalOrganizationInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="5. Отправка сообщения о выводе МО из архива" id="f8f55452-e1cc-4feb-86a4-0babf8786637"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")


String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\"    xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/"    xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1"    xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types"    xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="false"/>&lt;/ns2:medicalOrganizationInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="6. Отправка сообщения о создании МУ" id="8c806116-d25b-45ac-ab85-1259c0c8f0cb"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId=testRunner.testCase.testSuite.getPropertyValue("aoId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>Тестовое Медицинское Учреждение</ns1:name><ns1:shortName>Тестовое МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+aoId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMUMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="6. Отправка сообщения о изменении МУ" id="04b601e5-671f-415b-802e-797ae8250bd9"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId=testRunner.testCase.testSuite.getPropertyValue("aoId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:change isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>Тестовое Медицинское Учреждение 1</ns1:name><ns1:shortName>Тестовое МУ 1</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>2000-12-25</ns1:periodStart><ns1:periodEnd>2100-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms></ns2:change></ns2:medicalFacilityInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMUMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="6. Отправка сообщения об архивации МУ" id="a9fc3b19-e02c-4488-9910-3c311927c969"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId=testRunner.testCase.testSuite.getPropertyValue("aoId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="true"/>&lt;/ns2:medicalFacilityInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMUMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="6. Отправка сообщения о выводеи МУ из архива" id="2429f37d-1313-471a-83cb-c774e1eabc54"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId=testRunner.testCase.testSuite.getPropertyValue("aoId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="false"/>&lt;/ns2:medicalFacilityInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMUMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="2. Отправка сообщения о создании Локации" id="096bd94e-e274-436e-af0e-ea4603ea8ef5"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Кабинет Кардиологии №103</ns4:roomTitle><ns4:stage>4</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>125676817</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicLocation")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="2. Отправка сообщения о изменении Локации" id="67f4951f-9ca1-4f41-81c3-9ce26dd50537"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="true" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Кабинет Кардиологии №105</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>125676817</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicLocation")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="2. Отправка сообщения о изменении Локации(разархив)" id="0f01c4d3-5320-405e-a658-3acfee22fdbd"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Кабинет Кардиологии №103</ns4:roomTitle><ns4:stage>4</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>125676817</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicLocation")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="3. Отправка сообщения о создании Исполнения должности" id="c20bdaa3-add0-470b-a5dd-de241efe29db"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def jeId=testRunner.testCase.testSuite.getPropertyValue("jeId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+jeId+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>Врач-стоматолог</title><nomId>125684662</nomId><employee id="315666752696"><ns2:snils>01430774313</ns2:snils><ns2:lastName>Иванов</ns2:lastName><ns2:firstName>Петр</ns2:firstName><ns2:middleName>Геннадьевич</ns2:middleName></employee><jobExecutionVolume>0.5</jobExecutionVolume><jobExecutionPeriod><ns2:start>2018-08-07</ns2:start></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable="true" id="1"><ns2:title>Стоматологическое отделение</ns2:title><ns2:nomId>125693222</ns2:nomId></department><specializationId>125676810</specializationId><maternityLeave>0</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="3. Отправка сообщения о изменении Исполнения должности" id="617df67c-38a6-4075-a36f-6a5147ae3865"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def jeId=testRunner.testCase.testSuite.getPropertyValue("jeId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+jeId+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>Врач-педиатр</title><nomId>125684666</nomId><employee id="315666752696"><ns2:snils>01430774313</ns2:snils><ns2:lastName>Антонов</ns2:lastName><ns2:firstName>Антон</ns2:firstName><ns2:middleName>Викторович</ns2:middleName></employee><jobExecutionVolume>0.6</jobExecutionVolume><jobExecutionPeriod><ns2:start>2019-08-07</ns2:start><ns2:end>2019-08-07</ns2:end></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable="false" id="1"><ns2:title>Педиатрическое отделение</ns2:title><ns2:nomId>125693174</ns2:nomId></department><specializationId>125676831</specializationId><maternityLeave>0</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="4. Отправка сообщения о создании Оборудования в локации" id="c9786624-3e30-4dca-b6a8-50d5d6a818a9"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import groovy.xml.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def eId=testRunner.testCase.testSuite.getPropertyValue("eId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<ns4:locationEquipment archived="false" id=\""""+eId+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>1924</ns4:equipmentId><ns4:equipmentTypeNsiId>141507819</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>146017641</ns4:equipmentProfileId><ns4:equipmentModel>111</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id="7126031705"><ns5:title>Отделение неврологии</ns5:title><ns5:nomId>125692874</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>false</ns4:personalizedService><ns4:capacityForRoom>1</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>1283109373</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>1283109372</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicEquipment")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}]]></script></con:config></con:testStep><con:testStep type="groovy" name="4. Отправка сообщения о изненении Оборудования в локации" id="dacd6866-6500-4a8a-92ec-74efca0c5aef"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import groovy.xml.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def eId=testRunner.testCase.testSuite.getPropertyValue("eId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<ns4:locationEquipment archived="true" id=\""""+eId+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>1924</ns4:equipmentId><ns4:equipmentTypeNsiId>141507819</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>146017641</ns4:equipmentProfileId><ns4:equipmentModel>111</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id="7126031705"><ns5:title>Отделение неврологии</ns5:title><ns5:nomId>125692874</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>false</ns4:personalizedService><ns4:capacityForRoom>1</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>1283109373</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>1283109372</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicEquipment")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Очистка созданных данных" id="5abe0256-b58c-431f-a0c8-740fb5eda73a" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def moId= testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId= testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId= testRunner.testCase.testSuite.getPropertyValue("aoId")
def locId= testRunner.testCase.testSuite.getPropertyValue("locId")
def jeId= testRunner.testCase.testSuite.getPropertyValue("jeId")
def eId= testRunner.testCase.testSuite.getPropertyValue("eId")


sql.execute("""DELETE FROM "RESOURCE" WHERE RESOURCE_KIND ='AVAILABLE_RESOURCE' AND  PARENT_ID="""+jeId) 
sql.execute("""DELETE FROM "RESOURCE" WHERE RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="""+eId) 
sql.execute("DELETE FROM  EQUIPMENT_TREATMENT WHERE EQUIPMENT_ID ="+eId) 
sql.execute("DELETE FROM EQUIPMENT WHERE ID="+eId)
sql.execute("DELETE FROM JOB_EXECUTION WHERE ID="+jeId) 
sql.execute("DELETE FROM LOCATION WHERE ID="+locId)
sql.execute("DELETE FROM MEDICAL_FACILITY WHERE ID="+mfId) 
sql.execute("DELETE FROM ADDRESS_OBJECT WHERE ID="+aoId)
sql.execute("DELETE FROM MEDICAL_ORGANIZATION WHERE ID="+moId)</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>moId</con:name><con:value>200001798505</con:value></con:property><con:property><con:name>topicMOMsg</con:name><con:value>MOMsg.rir2</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>mfId</con:name><con:value>200001798501</con:value></con:property><con:property><con:name>aoId</con:name><con:value>6324</con:value></con:property><con:property><con:name>locId</con:name><con:value>7579</con:value></con:property><con:property><con:name>jeId</con:name><con:value>11</con:value></con:property><con:property><con:name>eId</con:name><con:value>1020</con:value></con:property><con:property><con:name>topicMUMsg</con:name><con:value>MUMsg.rir2</con:value></con:property><con:property><con:name>topicLocation</con:name><con:value>SVMRInformerLocation.rir2</con:value></con:property><con:property><con:name>topicJobExecution</con:name><con:value>SVMRInformerJobExecution.rir2</con:value></con:property><con:property><con:name>topicEquipment</con:name><con:value>SVMRInformerLocationEquipment.rir2</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="86741e9a-2527-4a3a-9ecd-c57849534f29" name="График расписания МУ"><con:settings><con:setting id="709881be-c7f8-4820-9bf3-2865354aa4fffileName">График-расписания-МУ</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="cc8ae7d6-23fe-468d-8988-cd784c231f86" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="График работы МУ. АС" searchProperties="true"><con:settings><con:setting id="5d33eeeb-838c-40ee-9876-a3d71159683bfileName">График-работы-МУ.-АС</con:setting></con:settings><con:testStep type="groovy" name="Соединение с БД" id="9af01850-d0c0-40e4-84b0-bd02f01e980c"><con:settings/><con:config><script>import groovy.sql.Sql
//Подготовка соединения с БД
log.info("Подготовка соединения с БД");

username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

if (context.dbConnect == null) {
	timeZone = TimeZone.getTimeZone("Europe/Moscow");
     TimeZone.setDefault(timeZone);
     sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
      log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
  	
  	context.setProperty("dbConnect", sql)
  	log.info("Cоединение с БД успешно установлено");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/МУ" id="2d06f0c1-f21b-4703-850c-e0fc3b4213c0"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

// Добавление МО
      sql.execute ("INSERT INTO MEDICAL_ORGANIZATION (ID,ARCHIVED, NAME, NAME_FULL,OGRN, CREATED)" +
"VALUES ((SELECT MAX(ID)+1 FROM MEDICAL_ORGANIZATION ) , 0, 'Тестовая MO', 'Тестовая Медицинская организация', 1544989849849,  TIMESTAMP '1970-01-01 00:00:00.000000') ")

     String sql_query = "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID = ((SELECT max(ID) FROM MEDICAL_ORGANIZATION ))"

     def medicalOrganization = sql.rows(sql_query)

    String medicalOrganizationId =medicalOrganization[0].ID
       log.info ("ID МО: " + medicalOrganizationId)



// Добавление МУ
      sql.execute ("INSERT INTO MEDICAL_FACILITY (ID, ARCHIVED, MEDICAL_ORGANIZATION_ID, NAME_SHORT, NAME, NAME_FULL, IS_HEAD)" +
"VALUES (  (SELECT MAX(ID)+1 FROM MEDICAL_FACILITY) , 0," +medicalOrganizationId +", 'Тестовое МУ', 'Тестовое Медицинское Учреждение', 'Тестовое Медицинское Учреждение',  0) ")

      sql.execute ("INSERT INTO MEDICAL_FACILITY (ID, ARCHIVED, MEDICAL_ORGANIZATION_ID, NAME_SHORT, NAME, NAME_FULL, IS_HEAD)" +
"VALUES (   (SELECT MAX(ID)+1 FROM MEDICAL_FACILITY), 0," +medicalOrganizationId +", 'Тестовое МУ', 'Тестовое Медицинское Учреждение', 'Тестовое Медицинское Учреждение',  0) ")

     String sql_query2= "SELECT * FROM MEDICAL_FACILITY WHERE ID = ((SELECT max(ID) FROM MEDICAL_FACILITY ))"
     String sql_query3= "SELECT * FROM MEDICAL_FACILITY WHERE ID = ((SELECT max(ID)-1 FROM MEDICAL_FACILITY ))"
    def medicalFacility = sql.rows(sql_query2)
    def medicalFacility2 = sql.rows(sql_query3)
     String medicalFacilityId =medicalFacility[0].ID
     String medicalFacilityId2 =medicalFacility2[0].ID
     String medicalFacilityNotExist =medicalFacility[0].ID+10
      log.info ("ID МУ: " +medicalFacilityId)
      log.info ("ID МУ2: " +medicalFacilityId2)
      log.info ("ID не существующего МУ: " +medicalFacilityNotExist )
      
    testRunner.testCase.setPropertyValue("medicalOrganizationId",medicalOrganizationId)
     testRunner.testCase.setPropertyValue("medicalFacilityId",medicalFacilityId)
     testRunner.testCase.setPropertyValue("medicalFacilityId2",medicalFacilityId2)
     testRunner.testCase.setPropertyValue("medicalFacilityNotExist",medicalFacilityNotExist)
        
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Выбор дат" id="b0ed519a-783a-46dd-8c3c-916599ee742d"><con:settings/><con:config><script>import java.time.*;
import java.time.format.*;
import java.time.temporal.*;
import groovy.sql.Sql

if (context.dbConnect != null) {      
	sql = context.dbConnect;
	
def medicalFacilityId = testRunner.testCase.getPropertyValue("medicalFacilityId")

maxEndResource = sql.firstRow("select max(END_DATE) as dt from schedule where medical_facility_id = "+medicalFacilityId);

	if (maxEndResource != null &amp;&amp; maxEndResource.dt != null) {
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.A");
		maxDayDate = LocalDate.parse(maxEndResource.dt.stringValue(), formatter);	

		if (maxDayDate.plusDays(1) &lt;  LocalDate.now() ) {
			maxDayDate = LocalDate.now()
			log.info("11")
			lastDayDate = maxDayDate.with(TemporalAdjusters.lastDayOfMonth());
			testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
	          testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.toString());
		     log.info("Даты расписания:" + maxDayDate.toString()+ "-" + lastDayDate.toString());
			} else {
			    lastDayDate = maxDayDate.plusDays(1).with(TemporalAdjusters.lastDayOfMonth());
		         testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
              	    testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.plusDays(1).toString());
		
		         log.info("Даты расписания:" + maxDayDate.plusDays(1).toString()+ "-" + lastDayDate.toString());
				}		
	} else {
		testRunner.testCase.setPropertyValue("schedulePeriodStart", LocalDate.now().toString());
		testRunner.testCase.setPropertyValue("schedulePeriodEnd",  LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());

		log.info("Даты расписания:" + LocalDate.now().toString()+ "-" + LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());
	}
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch" id="7e6b9ecf-9299-4809-9241-9bfbf0cc650d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="d5bc335e-fdb1-4b6e-b796-ad5ee2457fa2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getWorkHoursForBranch_E122" id="91841ef7-4d4b-4f20-b0d2-4d73949c9355"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getWorkHoursForBranch</con:operation><con:request name="getWorkHoursForBranch_E122" id="4382362a-08c0-4d17-aaeb-1c6e911c3f51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityNotExist}</v1:medicalFacilityId>\r
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d14c1bf-e65d-4db7-95d6-19d556451c15"/><con:assertion type="GroovyScriptAssertion" id="89b2cf70-aaff-40b5-a11c-7a1860b9f41c" name="E122"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E122'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getWorkHoursForBranch" id="baef451a-bb7a-4a75-9ddb-c4bfc18a428c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getWorkHoursForBranch</con:operation><con:request name="getWorkHoursForBranch" id="4382362a-08c0-4d17-aaeb-1c6e911c3f51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d14c1bf-e65d-4db7-95d6-19d556451c15"/><con:assertion type="Simple NotContains" id="d5d4d193-6324-4dbd-afab-107764aead3b" name="Not Contains_workHoursForDayOfWeek"><con:configuration><token>workHoursForDayOfWeek</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="setWorkHoursForBranch_E434" id="a06a9427-fc7d-4e7d-a291-0ea774c8e490"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>setWorkHoursForBranch</con:operation><con:request name="setWorkHoursForBranch_E434" id="61704b6f-03d5-4362-9f9d-c248e41d7322"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>01:00:00</v1:start>\r
               <v1:end>01:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>02:00:00</v1:start>\r
               <v1:end>02:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
      </typ:setWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="838e6fc7-84b6-4dce-beb3-ad38d1e8420d"/><con:assertion type="GroovyScriptAssertion" id="a4bb9fc6-840b-45bc-befd-6552304382c5" name="E434"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E434'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="setWorkHoursForBranch_E435" id="62ef10fc-ab11-4a1a-97e6-09d019fce66f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>setWorkHoursForBranch</con:operation><con:request name="setWorkHoursForBranch_E435" id="61704b6f-03d5-4362-9f9d-c248e41d7322"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>01:00:00</v1:start>\r
               <v1:end>01:00:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
      </typ:setWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="838e6fc7-84b6-4dce-beb3-ad38d1e8420d"/><con:assertion type="GroovyScriptAssertion" id="a4bb9fc6-840b-45bc-befd-6552304382c5" name="E435"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E435'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="setWorkHoursForBranch_E122" id="45cd7c2c-18cd-4b0b-b39e-3b4acaea7c30"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>setWorkHoursForBranch</con:operation><con:request name="setWorkHoursForBranch_E122" id="61704b6f-03d5-4362-9f9d-c248e41d7322"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityNotExist}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>01:00:00</v1:start>\r
               <v1:end>01:01:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
      </typ:setWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="838e6fc7-84b6-4dce-beb3-ad38d1e8420d"/><con:assertion type="GroovyScriptAssertion" id="a4bb9fc6-840b-45bc-befd-6552304382c5" name="E122"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E122'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="RemoveWorkHoursForBranch_E122" id="6d22d048-602a-47b7-b35d-e59e300278ff"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>removeWorkHoursForBranch</con:operation><con:request name="RemoveWorkHoursForBranch_E122" id="c97a4f2d-959c-4948-b660-8af58938d5b1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:removeWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityNotExist}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>2</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>3</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>4</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>5</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>6</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>7</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
      </typ:removeWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e7859e29-828a-4086-8199-3a8bfd880499"/><con:assertion type="GroovyScriptAssertion" id="fe031a2a-0215-47ea-a648-ceb2f8649be3" name="E122"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E122'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Получаю scheduleVersion" id="8f1f33c5-f567-4c54-940a-9201a82281e4"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
     
     //Получить версию расписания
     String sql_query_sC ="select  * from SCHEDULE WHERE ID ="+ scheduleId
     def schedule = sql.rows(sql_query_sC)
     String sheduleVersion =schedule[0].VERSION
     testRunner.testCase.setPropertyValue("sheduleVersion",sheduleVersion)
      log.info ("ID sheduleVersion: " + sheduleVersion)
 } else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="70f121b5-99d1-4e75-b408-2bf7628aae21"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${createScheduleForBranch#Response#//*:scheduleId}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#sheduleVersion}</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных сущностей" id="bb6389ef-c095-477e-b0a4-343abc686113"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

    def medicalFacilityId= testRunner.testCase.getPropertyValue("medicalFacilityId")
    def medicalFacilityId2= testRunner.testCase.getPropertyValue("medicalFacilityId2")
    def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")
    

   // Удаляем МУ MEDICAL_FACILITY
   sql.execute ("DELETE  from  MEDICAL_FACILITY WHERE ID ="+medicalFacilityId)

   // Удаляем МУ2 MEDICAL_FACILITY
   sql.execute ("DELETE  from  MEDICAL_FACILITY WHERE ID ="+medicalFacilityId2)

   // Удаляем МО MEDICAL_ORGANIZATION
   sql.execute ("DELETE  from  MEDICAL_ORGANIZATION WHERE ID ="+medicalOrganizationId)
   
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:properties><con:property><con:name>scheduleId</con:name><con:value>13905032</con:value></con:property><con:property><con:name>medicalOrganizationId</con:name><con:value>200001798489</con:value></con:property><con:property><con:name>medicalFacilityId</con:name><con:value>200001717378</con:value></con:property><con:property><con:name>medicalFacilityId2</con:name><con:value>200001717377</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2020-12-01</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2020-12-31</con:value></con:property><con:property><con:name>locationId</con:name><con:value>19242</con:value></con:property><con:property><con:name>treatmentRoomId</con:name><con:value>429</con:value></con:property><con:property><con:name>resourceId</con:name><con:value>30100700899</con:value></con:property><con:property><con:name>res_scheduleIsId</con:name><con:value/></con:property><con:property><con:name>treatmentId</con:name><con:value>128309313</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>0</con:value></con:property><con:property><con:name>medicalFacilityNotExist</con:name><con:value>200001717388</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="4b78707e-359a-49d2-afa9-c817ede611f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="График работы МУ. Создание\получение\удаление." searchProperties="true"><con:settings><con:setting id="2bce4e78-3568-4f96-89bd-a964cb35934ffileName">График-работы-МУ.-Создание%5Cполучение%5Cудаление.</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Соединение с БД" id="ab8c9d3a-50f5-4be9-a11d-2e0b24ec9958"><con:settings/><con:config><script>import groovy.sql.Sql
//Подготовка соединения с БД
log.info("Подготовка соединения с БД");

username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

if (context.dbConnect == null) {
	timeZone = TimeZone.getTimeZone("Europe/Moscow");
     TimeZone.setDefault(timeZone);
     sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
      log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
  	
  	context.setProperty("dbConnect", sql)
  	log.info("Cоединение с БД успешно установлено");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/МУ" id="aa3041f2-56a5-4727-8031-ae574d4ccc1d"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

// Добавление МО
      sql.execute ("INSERT INTO MEDICAL_ORGANIZATION (ID,ARCHIVED, NAME, NAME_FULL,OGRN, CREATED)" +
"VALUES ((SELECT MAX(ID)+1 FROM MEDICAL_ORGANIZATION ) , 0, 'Тестовая MO', 'Тестовая Медицинская организация', 1544989849849,  TIMESTAMP '1970-01-01 00:00:00.000000') ")

     String sql_query = "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID = ((SELECT max(ID) FROM MEDICAL_ORGANIZATION ))"

     def medicalOrganization = sql.rows(sql_query)

    String medicalOrganizationId =medicalOrganization[0].ID
       log.info ("ID МО: " + medicalOrganizationId)


// Добавление МУ
      sql.execute ("INSERT INTO MEDICAL_FACILITY (ID, ARCHIVED, MEDICAL_ORGANIZATION_ID, NAME_SHORT, NAME, NAME_FULL, IS_HEAD)" +
"VALUES (  (SELECT MAX(ID)+1 FROM MEDICAL_FACILITY) , 0," +medicalOrganizationId +", 'Тестовое МУ', 'Тестовое Медицинское Учреждение', 'Тестовое Медицинское Учреждение',  0) ")

      sql.execute ("INSERT INTO MEDICAL_FACILITY (ID, ARCHIVED, MEDICAL_ORGANIZATION_ID, NAME_SHORT, NAME, NAME_FULL, IS_HEAD)" +
"VALUES (   (SELECT MAX(ID)+1 FROM MEDICAL_FACILITY), 0," +medicalOrganizationId +", 'Тестовое МУ', 'Тестовое Медицинское Учреждение', 'Тестовое Медицинское Учреждение',  0) ")

     String sql_query2= "SELECT * FROM MEDICAL_FACILITY WHERE ID = ((SELECT max(ID) FROM MEDICAL_FACILITY ))"
     String sql_query3= "SELECT * FROM MEDICAL_FACILITY WHERE ID = ((SELECT max(ID)-1 FROM MEDICAL_FACILITY ))"
    def medicalFacility = sql.rows(sql_query2)
    def medicalFacility2 = sql.rows(sql_query3)
     String medicalFacilityId =medicalFacility[0].ID
     String medicalFacilityId2 =medicalFacility2[0].ID
      log.info ("ID МУ: " +medicalFacilityId)
      log.info ("ID МУ2: " +medicalFacilityId2)
      
    testRunner.testCase.setPropertyValue("medicalOrganizationId",medicalOrganizationId)
     testRunner.testCase.setPropertyValue("medicalFacilityId",medicalFacilityId)
     testRunner.testCase.setPropertyValue("medicalFacilityId2",medicalFacilityId2)

        
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Выбор дат" id="da237ec2-2656-47a1-85e0-4a3a0cd37842"><con:settings/><con:config><script>import java.time.*;
import java.time.format.*;
import java.time.temporal.*;
import groovy.sql.Sql

if (context.dbConnect != null) {      
	sql = context.dbConnect;
	
def medicalFacilityId = testRunner.testCase.getPropertyValue("medicalFacilityId")

maxEndResource = sql.firstRow("select max(END_DATE) as dt from schedule where medical_facility_id = "+medicalFacilityId);

	if (maxEndResource != null &amp;&amp; maxEndResource.dt != null) {
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.A");
		maxDayDate = LocalDate.parse(maxEndResource.dt.stringValue(), formatter);	

		if (maxDayDate.plusDays(1) &lt;  LocalDate.now() ) {
			maxDayDate = LocalDate.now()
			log.info("11")
			lastDayDate = maxDayDate.with(TemporalAdjusters.lastDayOfMonth());
			testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
	          testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.toString());
		     log.info("Даты расписания:" + maxDayDate.toString()+ "-" + lastDayDate.toString());
			} else {
			    lastDayDate = maxDayDate.plusDays(1).with(TemporalAdjusters.lastDayOfMonth());
		         testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
              	    testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.plusDays(1).toString());
		
		         log.info("Даты расписания:" + maxDayDate.plusDays(1).toString()+ "-" + lastDayDate.toString());
				}		
	} else {
		testRunner.testCase.setPropertyValue("schedulePeriodStart", LocalDate.now().toString());
		testRunner.testCase.setPropertyValue("schedulePeriodEnd",  LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());

		log.info("Даты расписания:" + LocalDate.now().toString()+ "-" + LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());
	}
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch" id="8ac6972e-e130-48dc-a3c7-cb5793c428c4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="edc36436-fd74-44c5-b8ee-d775529cd09f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="setWorkHoursForBranch" id="2f5800b8-f626-4aec-a2d8-14e9ea60b2f0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>setWorkHoursForBranch</con:operation><con:request name="setWorkHoursForBranch" id="61704b6f-03d5-4362-9f9d-c248e41d7322"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>01:00:00</v1:start>\r
               <v1:end>01:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>2</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>02:00:00</v1:start>\r
               <v1:end>02:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>3</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>03:00:00</v1:start>\r
               <v1:end>03:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>4</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>04:00:00</v1:start>\r
               <v1:end>04:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>5</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>05:00:00</v1:start>\r
               <v1:end>05:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>6</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>06:00:00</v1:start>\r
               <v1:end>06:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>7</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>07:00:00</v1:start>\r
               <v1:end>07:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
      </typ:setWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="838e6fc7-84b6-4dce-beb3-ad38d1e8420d"/><con:assertion type="SOAP Fault Assertion" id="5c3e5863-4fe5-4662-8a43-8910ba2e4efe" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getWorkHoursForBranch" id="e0d1acd0-bd38-464c-975d-b0688cb68299"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getWorkHoursForBranch</con:operation><con:request name="getWorkHoursForBranch" id="4382362a-08c0-4d17-aaeb-1c6e911c3f51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d14c1bf-e65d-4db7-95d6-19d556451c15"/><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_1"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>1</dayOfWeek>
  <workHours>
    <start>01:00:00</start>
    <end>01:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_2"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>2</dayOfWeek>
  <workHours>
    <start>02:00:00</start>
    <end>02:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_3"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>3</dayOfWeek>
  <workHours>
    <start>03:00:00</start>
    <end>03:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_4"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>4</dayOfWeek>
  <workHours>
    <start>04:00:00</start>
    <end>04:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_5"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>5</dayOfWeek>
  <workHours>
    <start>05:00:00</start>
    <end>05:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_6"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>6</dayOfWeek>
  <workHours>
    <start>06:00:00</start>
    <end>06:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_7"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>7</dayOfWeek>
  <workHours>
    <start>07:00:00</start>
    <end>07:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getWorkHoursForBranch_3дня" id="2e603075-aaf9-42a8-88a9-6be4a8e49517"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getWorkHoursForBranch</con:operation><con:request name="getWorkHoursForBranch_3дня" id="4382362a-08c0-4d17-aaeb-1c6e911c3f51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <v1:dayOfWeek>1</v1:dayOfWeek>
         <v1:dayOfWeek>5</v1:dayOfWeek>
         <v1:dayOfWeek>7</v1:dayOfWeek>
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d14c1bf-e65d-4db7-95d6-19d556451c15"/><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_1"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>1</dayOfWeek>
  <workHours>
    <start>01:00:00</start>
    <end>01:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_5"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>5</dayOfWeek>
  <workHours>
    <start>05:00:00</start>
    <end>05:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_7"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>7</dayOfWeek>
  <workHours>
    <start>07:00:00</start>
    <end>07:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_2"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>2</dayOfWeek>
  <workHours>
    <start>02:00:00</start>
    <end>02:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_3"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>3</dayOfWeek>
  <workHours>
    <start>03:00:00</start>
    <end>03:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_4"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>4</dayOfWeek>
  <workHours>
    <start>04:00:00</start>
    <end>04:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_6"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>6</dayOfWeek>
  <workHours>
    <start>06:00:00</start>
    <end>06:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="setWorkHoursForBranch_редактирование" id="96d5f7db-24b1-4fb5-8c44-058941100ef2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>setWorkHoursForBranch</con:operation><con:request name="setWorkHoursForBranch_редактирование" id="61704b6f-03d5-4362-9f9d-c248e41d7322"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>11:00:00</v1:start>\r
               <v1:end>11:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>2</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>12:00:00</v1:start>\r
               <v1:end>12:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>3</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>13:00:00</v1:start>\r
               <v1:end>13:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>4</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>14:00:00</v1:start>\r
               <v1:end>14:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>5</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>15:00:00</v1:start>\r
               <v1:end>15:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>6</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>16:00:00</v1:start>\r
               <v1:end>16:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>7</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>17:00:00</v1:start>\r
               <v1:end>17:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
      </typ:setWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="838e6fc7-84b6-4dce-beb3-ad38d1e8420d"/><con:assertion type="SOAP Fault Assertion" id="5c3e5863-4fe5-4662-8a43-8910ba2e4efe" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getWorkHoursForBranch_послередактирования" id="7b7f1470-2c2b-4095-9fab-07062c0bb160"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getWorkHoursForBranch</con:operation><con:request name="getWorkHoursForBranch_послередактирования" id="4382362a-08c0-4d17-aaeb-1c6e911c3f51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d14c1bf-e65d-4db7-95d6-19d556451c15"/><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_1"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>1</dayOfWeek>
  <workHours>
    <start>11:00:00</start>
    <end>11:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_2"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>2</dayOfWeek>
  <workHours>
    <start>12:00:00</start>
    <end>12:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_3"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>3</dayOfWeek>
  <workHours>
    <start>13:00:00</start>
    <end>13:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_4"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>4</dayOfWeek>
  <workHours>
    <start>14:00:00</start>
    <end>14:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_5"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>5</dayOfWeek>
  <workHours>
    <start>15:00:00</start>
    <end>15:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_6"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>6</dayOfWeek>
  <workHours>
    <start>16:00:00</start>
    <end>16:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_7"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>7</dayOfWeek>
  <workHours>
    <start>17:00:00</start>
    <end>17:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="RemoveWorkHoursForBranch" id="ba25b0f0-8144-4ffb-b002-8581d4fddc0c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>removeWorkHoursForBranch</con:operation><con:request name="RemoveWorkHoursForBranch" id="c97a4f2d-959c-4948-b660-8af58938d5b1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:removeWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>2</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>3</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>4</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>5</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>6</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>7</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
      </typ:removeWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e7859e29-828a-4086-8199-3a8bfd880499"/><con:assertion type="SOAP Fault Assertion" id="2e012446-8a68-41c2-8be0-6ccf0393965f" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getWorkHoursForBranch_послеУдаления" id="aee71a11-493d-4ca0-93e5-110344441b1e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getWorkHoursForBranch</con:operation><con:request name="getWorkHoursForBranch_послеУдаления" id="4382362a-08c0-4d17-aaeb-1c6e911c3f51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d14c1bf-e65d-4db7-95d6-19d556451c15"/><con:assertion type="Simple NotContains" id="10d9c31d-921f-4815-942b-d7a0e4d3259d" name="NotContains_workHoursForDayOfWeek"><con:configuration><token>workHoursForDayOfWeek</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="setWorkHoursForBranch_для1дня" id="7b3509d3-a632-478a-ab40-4ab5d440908b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>setWorkHoursForBranch</con:operation><con:request name="setWorkHoursForBranch_для1дня" id="61704b6f-03d5-4362-9f9d-c248e41d7322"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:setWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:workHoursForDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
            <v1:workHours>\r
               <v1:start>01:00:00</v1:start>\r
               <v1:end>01:30:00</v1:end>\r
            </v1:workHours>\r
         </typ:workHoursForDayOfWeek>\r
      </typ:setWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="838e6fc7-84b6-4dce-beb3-ad38d1e8420d"/><con:assertion type="SOAP Fault Assertion" id="5c3e5863-4fe5-4662-8a43-8910ba2e4efe" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getWorkHoursForBranch_для1дня" id="17868b15-6d1c-464a-8d11-42168c30db9d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getWorkHoursForBranch</con:operation><con:request name="getWorkHoursForBranch_для1дня" id="4382362a-08c0-4d17-aaeb-1c6e911c3f51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d14c1bf-e65d-4db7-95d6-19d556451c15"/><con:assertion type="XPath Match" id="f0389149-c2b0-40f4-ac04-15cf23841249" name="dayOfWeek_1"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/faults/';
declare namespace ns5='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns3='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//*:workHoursForDayOfWeek</path><content><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>1</dayOfWeek>
  <workHours>
    <start>01:00:00</start>
    <end>01:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_2"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>2</dayOfWeek>
  <workHours>
    <start>02:00:00</start>
    <end>02:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_3"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>3</dayOfWeek>
  <workHours>
    <start>03:00:00</start>
    <end>03:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_4"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>4</dayOfWeek>
  <workHours>
    <start>04:00:00</start>
    <end>04:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_6"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>6</dayOfWeek>
  <workHours>
    <start>06:00:00</start>
    <end>06:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_5"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>5</dayOfWeek>
  <workHours>
    <start>05:00:00</start>
    <end>05:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_dayOfWeek_7"><con:configuration><token><![CDATA[<workHoursForDayOfWeek xmlns="http://emias.mos.ru/supp/rir2/core/v1/" xmlns:ns2="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns5="http://emias.mos.ru/supp/rir2/journalService/v1/types/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <dayOfWeek>7</dayOfWeek>
  <workHours>
    <start>07:00:00</start>
    <end>07:30:00</end>
  </workHours>
</workHoursForDayOfWeek>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="RemoveWorkHoursForBranch_для1дня" id="ead7306d-4ceb-40a0-b9a5-f3ac1577dfe9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>removeWorkHoursForBranch</con:operation><con:request name="RemoveWorkHoursForBranch_для1дня" id="c97a4f2d-959c-4948-b660-8af58938d5b1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:removeWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
         <!--1 to 7 repetitions:-->\r
         <typ:removeDayOfWeek>\r
            <v1:dayOfWeek>1</v1:dayOfWeek>\r
         </typ:removeDayOfWeek>\r
      </typ:removeWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e7859e29-828a-4086-8199-3a8bfd880499"/><con:assertion type="SOAP Fault Assertion" id="2e012446-8a68-41c2-8be0-6ccf0393965f" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getWorkHoursForBranch_послеУдаления1дня" id="1b0bdede-0dfc-4669-9fb2-05aa880dfb94"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getWorkHoursForBranch</con:operation><con:request name="getWorkHoursForBranch_послеУдаления1дня" id="4382362a-08c0-4d17-aaeb-1c6e911c3f51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getWorkHoursForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#medicalFacilityId}</v1:medicalFacilityId>\r
      </typ:getWorkHoursForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d14c1bf-e65d-4db7-95d6-19d556451c15"/><con:assertion type="Simple NotContains" id="ac8fa5a9-4f04-4940-ba05-28862a7aa4b3" name="NotContains_workHoursForDayOfWeek"><con:configuration><token>workHoursForDayOfWeek</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Получаю scheduleVersion" id="ed3b00c7-0590-47a2-8c75-fb24e8da082f"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;

     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
     
     //Получить версию расписания
     String sql_query_sC ="select  * from SCHEDULE WHERE ID ="+ scheduleId
     def schedule = sql.rows(sql_query_sC)
     String sheduleVersion =schedule[0].VERSION
     testRunner.testCase.setPropertyValue("sheduleVersion",sheduleVersion)
      log.info ("ID sheduleVersion: " + sheduleVersion)
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="06dd0f84-50fc-4e66-8c3b-3f3e7f0d22f9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${createScheduleForBranch#Response#//*:scheduleId}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#sheduleVersion}</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных сущностей" id="21480957-12fc-41ce-b737-106e5701513a"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

    def medicalFacilityId= testRunner.testCase.getPropertyValue("medicalFacilityId")
    def medicalFacilityId2= testRunner.testCase.getPropertyValue("medicalFacilityId2")
    def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")
    

   // Удаляем МУ MEDICAL_FACILITY
   sql.execute ("DELETE  from  MEDICAL_FACILITY WHERE ID ="+medicalFacilityId)

   // Удаляем МУ2 MEDICAL_FACILITY
   sql.execute ("DELETE  from  MEDICAL_FACILITY WHERE ID ="+medicalFacilityId2)

   // Удаляем МО MEDICAL_ORGANIZATION
   sql.execute ("DELETE  from  MEDICAL_ORGANIZATION WHERE ID ="+medicalOrganizationId)
   
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:properties><con:property><con:name>scheduleId</con:name><con:value>14703718</con:value></con:property><con:property><con:name>medicalOrganizationId</con:name><con:value>200001798509</con:value></con:property><con:property><con:name>medicalFacilityId</con:name><con:value>200001798510</con:value></con:property><con:property><con:name>medicalFacilityId2</con:name><con:value>200001798509</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-09-28</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-09-30</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>db_rir2_user</con:name><con:value>EMIAS_RIR2</con:value></con:property><con:property><con:name>db_rir2_password</con:name><con:value>EMIAS_RIR2</con:value></con:property><con:property><con:name>db_rir2_con</con:name><con:value>@10.2.172.16:1521/rir2.mosgorzdrav.local</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="d526b89a-a27c-478f-9a38-54ca53979d0f" name="Маршруты"><con:settings><con:setting id="afb9a591-a4a7-4d9c-aeb9-55ce787ab677fileName">Маршруты</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="ca626b1b-6457-485d-9bfb-06336883de83" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маршруты. АС" searchProperties="true"><con:settings><con:setting id="aa6575e3-60d3-4d1b-8a24-075d5109ee20fileName">Маршруты.-АС</con:setting></con:settings><con:testStep type="groovy" name="Соединение с БД" id="a14c8d60-9881-4669-8c8a-cd83b6e348a9"><con:settings/><con:config><script>import groovy.sql.Sql
//Подготовка соединения с БД
log.info("Подготовка соединения с БД");

username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

if (context.dbConnect == null) {
	timeZone = TimeZone.getTimeZone("Europe/Moscow");
     TimeZone.setDefault(timeZone);
     sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
      log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
  	
  	context.setProperty("dbConnect", sql)
  	log.info("Cоединение с БД успешно установлено");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Создание и подбор данных" id="5c451a6d-bdb7-4d6a-a604-7d1262401143"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

      // Добавление МО и МО2
     String sql_query = "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID = ((SELECT max(ID) FROM MEDICAL_ORGANIZATION ))"
     def medicalOrganization = sql.rows(sql_query)
     String medicalOrganizationId =medicalOrganization[0].ID+1
     String medicalOrganizationId2 =medicalOrganization[0].ID+2
    
      sql.execute ("INSERT INTO MEDICAL_ORGANIZATION (ID,ARCHIVED, NAME, NAME_FULL,OGRN, CREATED)" +
"VALUES ("+ medicalOrganizationId +" , 0, 'Тестовая MO', 'Тестовая Медицинская организация', 1544989849849,  TIMESTAMP '1970-01-01 00:00:00.000000') ")

      sql.execute ("INSERT INTO MEDICAL_ORGANIZATION (ID,ARCHIVED, NAME, NAME_FULL,OGRN, CREATED)" +
"VALUES ("+ medicalOrganizationId2 +" , 0, 'Тестовая MO', 'Тестовая Медицинская организация2', 1544989849849,  TIMESTAMP '1970-01-01 00:00:00.000000') ")
       log.info ("ID МО: " + medicalOrganizationId)
       log.info ("ID МО2: " + medicalOrganizationId2)

      //Получаю МО_Name
      
       String sql_query2= "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID ="+ medicalOrganizationId
       String sql_query3= "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID ="+ medicalOrganizationId2
       def medicalOrganization1 = sql.rows(sql_query2)
       def medicalOrganization2 = sql.rows(sql_query3)
       String medicalOrganizationTitle =medicalOrganization1[0].NAME
       String medicalOrganizationTitle2 =medicalOrganization2[0].NAME
       log.info ("ID МО_Name: " + medicalOrganizationTitle)
       log.info ("ID МО2_Name: " + medicalOrganizationTitle2)

       //Нахожу  TREATMENT
       String sql_query4 = "SELECT * FROM TREATMENT WHERE ARCHIVED=0"
       def tres = sql.rows(sql_query4)
       String  treatmentId = tres[0].ID
       String  treatmentCode = tres[0].CODE
       String  treatmentTitle = tres[0].TITLE
       String  treatmentCategoryId = tres[0].TREATMENT_CATEGORY_ID
        log.info ("TREATMENT: " +treatmentId)

       String  treatmentId2 = tres[1].ID
       String  treatmentCode2= tres[1].CODE
       String  treatmentTitle2 = tres[1].TITLE
       String  treatmentCategoryId2 = tres[1].TREATMENT_CATEGORY_ID
        log.info ("TREATMENT2: " +treatmentId2)
        
       //Нахожу CATEGORY_CODE
        String sql_query5 = "SELECT * FROM TREATMENT_CATEGORY WHERE ID ="+ treatmentCategoryId
       def treatmentCategory = sql.rows(sql_query5)
       String  treatmentCategoryCode= treatmentCategory[0].CODE  
        //Нахожу CATEGORY_CODE2
        String sql_query6 = "SELECT * FROM TREATMENT_CATEGORY WHERE ID ="+ treatmentCategoryId2
       def treatmentCategory2 = sql.rows(sql_query6)   
       String  treatmentCategoryCode2= treatmentCategory[0].CODE  

      // Нахожу routeIdNotExist
     String sql_query7 = "SELECT * FROM ROUTE WHERE ID = ((SELECT max(ID) FROM ROUTE ))"
     def routeNotExist = sql.rows(sql_query7)
     String routeIdNotExist =routeNotExist[0].ID+10
      
     testRunner.testCase.setPropertyValue("medicalOrganizationId",medicalOrganizationId)
     testRunner.testCase.setPropertyValue("medicalOrganizationId2",medicalOrganizationId2)
     testRunner.testCase.setPropertyValue("medicalOrganizationTitle",medicalOrganizationTitle)
     testRunner.testCase.setPropertyValue("medicalOrganizationTitle2",medicalOrganizationTitle2)
     testRunner.testCase.setPropertyValue("treatmentId",treatmentId)
     testRunner.testCase.setPropertyValue("treatmentCode",treatmentCode)
      testRunner.testCase.setPropertyValue("treatmentTitle",treatmentTitle)
      testRunner.testCase.setPropertyValue("treatmentCategoryCode",treatmentCategoryCode)
     testRunner.testCase.setPropertyValue("treatmentId2",treatmentId2)
     testRunner.testCase.setPropertyValue("treatmentCode2",treatmentCode2)
      testRunner.testCase.setPropertyValue("treatmentTitle2",treatmentTitle2)
      testRunner.testCase.setPropertyValue("treatmentCategoryCode2",treatmentCategoryCode2)
      testRunner.testCase.setPropertyValue("routeIdNotExist",routeIdNotExist)
        
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="request" name="createRoute" id="ed57ab3e-e253-4743-8f5b-0d1595e7ab48"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" id="e27be46d-6249-4337-976a-08f83dbe350e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:ownerMedicalOrganizationId>${#TestCase#medicalOrganizationId}</typ:ownerMedicalOrganizationId>\r
         <typ:info>\r
            <v1:document>1</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId}" code="${#TestCase#treatmentCode}">\r
               <v1:title>${#TestCase#treatmentTitle}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f8896a0a-91b3-4a00-9dae-36360cf29ae1"/><con:assertion type="Simple Contains" id="c9d4371d-4572-4cda-b25d-ba72a8aca977" name="id"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="baadc681-6b5d-48f7-bd51-e51e9700b027" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createRoute_E602" id="5a177cbc-2804-46a5-b1fd-369f43810495"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute_E602" id="e27be46d-6249-4337-976a-08f83dbe350e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:ownerMedicalOrganizationId>${#TestCase#medicalOrganizationId}</typ:ownerMedicalOrganizationId>\r
         <typ:info>\r
            <v1:document>1</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId}" code="${#TestCase#treatmentCode}">\r
               <v1:title>${#TestCase#treatmentTitle}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f8896a0a-91b3-4a00-9dae-36360cf29ae1"/><con:assertion type="GroovyScriptAssertion" id="82798b61-6fb2-4f77-9818-e5207e7edc1b" name="E602"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E602'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить RouteId" id="6b943d90-8587-4996-a23a-164f13adb965"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>routeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:id</con:sourcePath><con:targetType>routeId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getRoute_E601" id="104ff243-086e-444b-8fc4-03b8621350f2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>getRoute</con:operation><con:request name="getRoute_E601" id="1d0aa434-af54-429f-827c-6f109367c3b2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getRouteRequest>\r
         <typ:routeId>${#TestCase#routeIdNotExist}</typ:routeId>\r
      </typ:getRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dac1f7da-25d0-4d82-8a11-e85cd60f4bae"/><con:assertion type="GroovyScriptAssertion" id="38df9c65-d836-4a1a-9aa4-86d40194ab53" name="E601"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E601'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="editRoute_E601" id="4d56c541-0838-4c4e-aa82-3523221ec9c6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>editRoute</con:operation><con:request name="editRoute_E601" id="72ba79b3-224c-41fb-931b-5f325a9d3461"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:editRouteRequest>\r
         <typ:routeId>${#TestCase#routeIdNotExist}</typ:routeId>\r
         <typ:info>\r
            <v1:document>2</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId2}" code="${#TestCase#treatmentCode2}">
               <v1:title>${#TestCase#treatmentTitle2}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode2}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:editRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="06960c45-53f1-4b76-9127-9a597ea13206"/><con:assertion type="GroovyScriptAssertion" id="73ef063e-aa26-437d-85d0-229d0626d230" name="E601"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E601'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="editRoute_E605" id="ee7e62e3-cc8e-4c53-b9b3-7e4fb80738bd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>editRoute</con:operation><con:request name="editRoute_E605" id="72ba79b3-224c-41fb-931b-5f325a9d3461"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:editRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
         <typ:info>\r
            <v1:document>1</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId}" code="${#TestCase#treatmentCode}">
               <v1:title>${#TestCase#treatmentTitle}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:editRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="06960c45-53f1-4b76-9127-9a597ea13206"/><con:assertion type="GroovyScriptAssertion" id="73ef063e-aa26-437d-85d0-229d0626d230" name="E605"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E605'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createRoute_2" id="87e4ee75-d11d-402c-ad3a-1f24f6b17795"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute_2" id="e27be46d-6249-4337-976a-08f83dbe350e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:ownerMedicalOrganizationId>${#TestCase#medicalOrganizationId}</typ:ownerMedicalOrganizationId>\r
         <typ:info>\r
            <v1:document>2</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId}" code="${#TestCase#treatmentCode}">\r
               <v1:title>${#TestCase#treatmentTitle}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f8896a0a-91b3-4a00-9dae-36360cf29ae1"/><con:assertion type="Simple Contains" id="c9d4371d-4572-4cda-b25d-ba72a8aca977" name="id"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="baadc681-6b5d-48f7-bd51-e51e9700b027" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить RouteId2" id="ba92eb74-fd51-4cf8-8d26-32a999770541"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>routeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute_2</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:id</con:sourcePath><con:targetType>routeId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="editRoute_E602" id="43f79fc4-0e98-4211-aaf4-809bc2aba086"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>editRoute</con:operation><con:request name="editRoute_E602" id="72ba79b3-224c-41fb-931b-5f325a9d3461"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:editRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
         <typ:info>\r
            <v1:document>2</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId}" code="${#TestCase#treatmentCode}">
               <v1:title>${#TestCase#treatmentTitle}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:editRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="06960c45-53f1-4b76-9127-9a597ea13206"/><con:assertion type="GroovyScriptAssertion" id="73ef063e-aa26-437d-85d0-229d0626d230" name="E602"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E602'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="archiveRoute2" id="fa7f3ccd-1f76-4274-b6c2-79b12c5f1d91"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>archiveRoute</con:operation><con:request name="archiveRoute2" id="4b513d18-b93f-4543-a822-70ae10cc2e09"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:archiveRouteRequest>\r
         <typ:routeId>${#TestCase#routeId2}</typ:routeId>\r
      </typ:archiveRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="aefb5811-3fe6-40d3-8660-7da0f058ebaa"/><con:assertion type="SOAP Fault Assertion" id="a97e5ddd-3e76-4ee1-a1bf-0c640a6551bf" name="Not SOAP Fault"/><con:assertion type="GroovyScriptAssertion" id="7ebe0a62-6a25-4522-8b4c-ca7f1816a960" name="result_true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из ответа
def result_resp = resp.getNodeValue('//*:result')


// проверка result
assert result_resp ==  'true'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="editRoute (изменяем 1ый, чтобы совпадал со 2м)" id="6d4bdca5-866a-4801-94f7-47c876a5a9f0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>editRoute</con:operation><con:request name="editRoute (изменяем 1ый, чтобы совпадал со 2м)" id="72ba79b3-224c-41fb-931b-5f325a9d3461"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:editRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
         <typ:info>\r
            <v1:document>2</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId}" code="${#TestCase#treatmentCode}">
               <v1:title>${#TestCase#treatmentTitle}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:editRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="06960c45-53f1-4b76-9127-9a597ea13206"/><con:assertion type="GroovyScriptAssertion" id="73ef063e-aa26-437d-85d0-229d0626d230" name="result_true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из ответа
def result_resp = resp.getNodeValue('//*:result')


// проверка result
assert result_resp ==  'true'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="archiveRoute_E601" id="0aebface-75b1-4767-8b0d-c12983086e71"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>archiveRoute</con:operation><con:request name="archiveRoute_E601" id="4b513d18-b93f-4543-a822-70ae10cc2e09"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:archiveRouteRequest>\r
         <typ:routeId>${#TestCase#routeIdNotExist}</typ:routeId>\r
      </typ:archiveRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="aefb5811-3fe6-40d3-8660-7da0f058ebaa"/><con:assertion type="GroovyScriptAssertion" id="15ad964d-b9c1-49a6-b233-c2bb59bc79d9" name="E601"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E601'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="archiveRoute" id="3e80ea36-b6c3-4889-8f8f-d5fc2a3cbe2e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>archiveRoute</con:operation><con:request name="archiveRoute" id="4b513d18-b93f-4543-a822-70ae10cc2e09"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:archiveRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:archiveRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="aefb5811-3fe6-40d3-8660-7da0f058ebaa"/><con:assertion type="SOAP Fault Assertion" id="a97e5ddd-3e76-4ee1-a1bf-0c640a6551bf" name="Not SOAP Fault"/><con:assertion type="GroovyScriptAssertion" id="7ebe0a62-6a25-4522-8b4c-ca7f1816a960" name="result_true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из ответа
def result_resp = resp.getNodeValue('//*:result')


// проверка result
assert result_resp ==  'true'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="archiveRoute_E603" id="cfc9c583-7fbe-49b4-b113-21f6825a54bd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>archiveRoute</con:operation><con:request name="archiveRoute_E603" id="4b513d18-b93f-4543-a822-70ae10cc2e09"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:archiveRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:archiveRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="aefb5811-3fe6-40d3-8660-7da0f058ebaa"/><con:assertion type="GroovyScriptAssertion" id="15ad964d-b9c1-49a6-b233-c2bb59bc79d9" name="E603"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E603'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="restoreArchivedRoute_E601" id="4c7e783a-1310-41a0-b3f0-c583b295c6de"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>restoreArchivedRoute</con:operation><con:request name="restoreArchivedRoute_E601" id="53a7db39-f706-475a-8307-a2bd0eb3804a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:restoreArchivedRouteRequest>\r
         <typ:routeId>${#TestCase#routeIdNotExist}</typ:routeId>\r
      </typ:restoreArchivedRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9b65d101-3e12-476b-9edf-323b86274b87"/><con:assertion type="GroovyScriptAssertion" id="a5a4973b-c828-4100-9daf-d96c06a89c6d" name="E601"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E601'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="restoreArchivedRoute" id="339e6178-82c4-4d54-8632-9576d2c0a032"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>restoreArchivedRoute</con:operation><con:request name="restoreArchivedRoute" id="53a7db39-f706-475a-8307-a2bd0eb3804a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:restoreArchivedRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:restoreArchivedRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9b65d101-3e12-476b-9edf-323b86274b87"/><con:assertion type="GroovyScriptAssertion" id="262aecc4-f477-4da0-a769-dbd3c14b25f3" name="result_true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из ответа
def result_resp = resp.getNodeValue('//*:result')


// проверка result
assert result_resp ==  'true'</scriptText></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="53696bea-3332-4e5f-850f-0c7651da4680" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="restoreArchivedRoute_E604" id="a4f19c44-1d01-4f9a-b0e9-1431193f0001"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>restoreArchivedRoute</con:operation><con:request name="restoreArchivedRoute_E604" id="53a7db39-f706-475a-8307-a2bd0eb3804a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:restoreArchivedRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:restoreArchivedRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9b65d101-3e12-476b-9edf-323b86274b87"/><con:assertion type="GroovyScriptAssertion" id="a5a4973b-c828-4100-9daf-d96c06a89c6d" name="E604"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E604'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="restoreArchivedRoute_E602" id="49745d9c-5724-4b93-b789-230878de2afc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>restoreArchivedRoute</con:operation><con:request name="restoreArchivedRoute_E602" id="53a7db39-f706-475a-8307-a2bd0eb3804a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:restoreArchivedRouteRequest>\r
         <typ:routeId>${#TestCase#routeId2}</typ:routeId>\r
      </typ:restoreArchivedRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9b65d101-3e12-476b-9edf-323b86274b87"/><con:assertion type="GroovyScriptAssertion" id="a5a4973b-c828-4100-9daf-d96c06a89c6d" name="E602"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E602'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных сущностей" id="0b6a2eb0-8445-415d-85b2-bfdc10189f7c"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

//username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
//password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
//dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

//sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);


    def routeId= testRunner.testCase.getPropertyValue("routeId")
     def routeId2= testRunner.testCase.getPropertyValue("routeId2")
   // def medicalFacilityId2= testRunner.testCase.getPropertyValue("medicalFacilityId2")
    def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")
    def medicalOrganizationId2= testRunner.testCase.getPropertyValue("medicalOrganizationId2")

   // Удаляем запись в DIRECT_MEDICAL_ORGANIZATIONS
   sql.execute ("DELETE  from  DIRECT_MEDICAL_ORGANIZATIONS WHERE ROUTE_ID ="+routeId)
   sql.execute ("DELETE  from  DIRECT_MEDICAL_ORGANIZATIONS WHERE ROUTE_ID ="+routeId2)
   
   // Удаляем запись в RECEIVE_MEDICAL_ORGANIZATIONS
   sql.execute ("DELETE  from  RECEIVE_MEDICAL_ORGANIZATIONS WHERE ROUTE_ID ="+routeId)
   sql.execute ("DELETE  from  RECEIVE_MEDICAL_ORGANIZATIONS WHERE ROUTE_ID ="+routeId2)
   
    // Удаляем запись в ROUTE_JOURNAL
   sql.execute ("DELETE  from  ROUTE_JOURNAL WHERE ROUTE_ID ="+routeId)  
   sql.execute ("DELETE  from  ROUTE_JOURNAL WHERE ROUTE_ID ="+routeId2)  
   
     // Удаляем запись в ROUTE_TREATMENTS
   sql.execute ("DELETE  from  ROUTE_TREATMENTS WHERE ROUTE_ID ="+routeId)    
   sql.execute ("DELETE  from  ROUTE_TREATMENTS WHERE ROUTE_ID ="+routeId2)  
   
     // Удаляем запись в ROUTE
   sql.execute ("DELETE  from  ROUTE WHERE ID ="+routeId)       
   sql.execute ("DELETE  from  ROUTE WHERE ID ="+routeId2)   
   
   // Удаляем МО MEDICAL_ORGANIZATION
   sql.execute ("DELETE  from  MEDICAL_ORGANIZATION WHERE ID ="+medicalOrganizationId)

      // Удаляем МО2 MEDICAL_ORGANIZATION
   sql.execute ("DELETE  from  MEDICAL_ORGANIZATION WHERE ID ="+medicalOrganizationId2)
   
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:properties><con:property><con:name>medicalOrganizationId</con:name><con:value>200001798489</con:value></con:property><con:property><con:name>treatmentId</con:name><con:value>135468844</con:value></con:property><con:property><con:name>medicalOrganizationId2</con:name><con:value>200001798490</con:value></con:property><con:property><con:name>medicalOrganizationTitle</con:name><con:value>Тестовая MO</con:value></con:property><con:property><con:name>medicalOrganizationTitle2</con:name><con:value>Тестовая MO</con:value></con:property><con:property><con:name>treatmentCategoryCode</con:name><con:value>RADIO_CARDIO</con:value></con:property><con:property><con:name>treatmentTitle</con:name><con:value>Компьютерная томография органов грудной клетки, органов брюшной полости, органов малого таза</con:value></con:property><con:property><con:name>treatmentCode</con:name><con:value>518</con:value></con:property><con:property><con:name>routeId</con:name><con:value>47785</con:value></con:property><con:property><con:name>ownerMOId_resp</con:name><con:value>200001798457</con:value></con:property><con:property><con:name>docId_resp</con:name><con:value>2</con:value></con:property><con:property><con:name>receiveTreatmentId_resp</con:name><con:value>128309374</con:value></con:property><con:property><con:name>receiveTreatmentCode_resp</con:name><con:value>19</con:value></con:property><con:property><con:name>receiveTreatmentTitle_resp</con:name><con:value>Спирография при записи на автоматических аппаратах</con:value></con:property><con:property><con:name>receiveTreatmentCatCode_resp</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>directMOId_resp</con:name><con:value>200001798458</con:value></con:property><con:property><con:name>receiveMOId_resp</con:name><con:value>200001798457</con:value></con:property><con:property><con:name>treatmentId2</con:name><con:value>135468854</con:value></con:property><con:property><con:name>treatmentCode2</con:name><con:value>604</con:value></con:property><con:property><con:name>treatmentTitle2</con:name><con:value>Компьютерная томография лицевого отдела черепа с контрастированием</con:value></con:property><con:property><con:name>treatmentCategoryCode2</con:name><con:value>RADIO_CARDIO</con:value></con:property><con:property><con:name>routeIdNotExist</con:name><con:value>47766</con:value></con:property><con:property><con:name>routeId2</con:name><con:value>47786</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="b6c65eee-f862-4330-ba48-f3cf2d5ff180" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание\измененение\ архивация маршрута" searchProperties="true"><con:settings><con:setting id="6a685d02-3522-465e-aaa7-7e3d6afbbe07fileName">Создание%5Cизмененение%5C-архивация-маршрута</con:setting></con:settings><con:testStep type="groovy" name="Соединение с БД" id="7e34aafd-2866-4a5c-b1e0-aea23e8f3328"><con:settings/><con:config><script>import groovy.sql.Sql
//Подготовка соединения с БД
log.info("Подготовка соединения с БД");

username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

if (context.dbConnect == null) {
	timeZone = TimeZone.getTimeZone("Europe/Moscow");
     TimeZone.setDefault(timeZone);
     sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
      log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
  	
  	context.setProperty("dbConnect", sql)
  	log.info("Cоединение с БД успешно установлено");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Создание и подбор данных" id="fadda825-0d6b-44dc-8c39-ba8be0c7bc15"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

      // Добавление МО и МО2
     String sql_query = "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID = ((SELECT max(ID) FROM MEDICAL_ORGANIZATION ))"
     def medicalOrganization = sql.rows(sql_query)
     String medicalOrganizationId =medicalOrganization[0].ID+1
     String medicalOrganizationId2 =medicalOrganization[0].ID+2
    
      sql.execute ("INSERT INTO MEDICAL_ORGANIZATION (ID,ARCHIVED, NAME, NAME_FULL,OGRN, CREATED)" +
"VALUES ("+ medicalOrganizationId +" , 0, 'Тестовая MO', 'Тестовая Медицинская организация', 1544989849849,  TIMESTAMP '1970-01-01 00:00:00.000000') ")

      sql.execute ("INSERT INTO MEDICAL_ORGANIZATION (ID,ARCHIVED, NAME, NAME_FULL,OGRN, CREATED)" +
"VALUES ("+ medicalOrganizationId2 +" , 0, 'Тестовая MO', 'Тестовая Медицинская организация2', 1544989849849,  TIMESTAMP '1970-01-01 00:00:00.000000') ")
       log.info ("ID МО: " + medicalOrganizationId)
       log.info ("ID МО2: " + medicalOrganizationId2)

      //Получаю МО_Name
      
       String sql_query2= "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID ="+ medicalOrganizationId
       String sql_query3= "SELECT * FROM MEDICAL_ORGANIZATION WHERE ID ="+ medicalOrganizationId2
       def medicalOrganization1 = sql.rows(sql_query2)
       def medicalOrganization2 = sql.rows(sql_query3)
       String medicalOrganizationTitle =medicalOrganization1[0].NAME
       String medicalOrganizationTitle2 =medicalOrganization2[0].NAME
       log.info ("ID МО_Name: " + medicalOrganizationTitle)
       log.info ("ID МО2_Name: " + medicalOrganizationTitle2)

       //Нахожу  TREATMENT
       String sql_query4 = "SELECT * FROM TREATMENT WHERE ARCHIVED=0"
       def tres = sql.rows(sql_query4)
       String  treatmentId = tres[0].ID
       String  treatmentCode = tres[0].CODE
       String  treatmentTitle = tres[0].TITLE
       String  treatmentCategoryId = tres[0].TREATMENT_CATEGORY_ID
        log.info ("TREATMENT: " +treatmentId)

       String  treatmentId2 = tres[1].ID
       String  treatmentCode2= tres[1].CODE
       String  treatmentTitle2 = tres[1].TITLE
       String  treatmentCategoryId2 = tres[1].TREATMENT_CATEGORY_ID
        log.info ("TREATMENT2: " +treatmentId2)
        
       //Нахожу CATEGORY_CODE
        String sql_query5 = "SELECT * FROM TREATMENT_CATEGORY WHERE ID ="+ treatmentCategoryId
       def treatmentCategory = sql.rows(sql_query5)
       String  treatmentCategoryCode= treatmentCategory[0].CODE  
        //Нахожу CATEGORY_CODE2
        String sql_query6 = "SELECT * FROM TREATMENT_CATEGORY WHERE ID ="+ treatmentCategoryId2
       def treatmentCategory2 = sql.rows(sql_query6)   
       String  treatmentCategoryCode2= treatmentCategory[0].CODE  

      
     testRunner.testCase.setPropertyValue("medicalOrganizationId",medicalOrganizationId)
     testRunner.testCase.setPropertyValue("medicalOrganizationId2",medicalOrganizationId2)
     testRunner.testCase.setPropertyValue("medicalOrganizationTitle",medicalOrganizationTitle)
     testRunner.testCase.setPropertyValue("medicalOrganizationTitle2",medicalOrganizationTitle2)
     testRunner.testCase.setPropertyValue("treatmentId",treatmentId)
     testRunner.testCase.setPropertyValue("treatmentCode",treatmentCode)
      testRunner.testCase.setPropertyValue("treatmentTitle",treatmentTitle)
      testRunner.testCase.setPropertyValue("treatmentCategoryCode",treatmentCategoryCode)
     testRunner.testCase.setPropertyValue("treatmentId2",treatmentId2)
     testRunner.testCase.setPropertyValue("treatmentCode2",treatmentCode2)
      testRunner.testCase.setPropertyValue("treatmentTitle2",treatmentTitle2)
      testRunner.testCase.setPropertyValue("treatmentCategoryCode2",treatmentCategoryCode2)

        
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="request" name="createRoute" id="47ace174-9955-4e69-9dda-557f8924a16c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" id="e27be46d-6249-4337-976a-08f83dbe350e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:ownerMedicalOrganizationId>${#TestCase#medicalOrganizationId}</typ:ownerMedicalOrganizationId>\r
         <typ:info>\r
            <v1:document>1</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId}" code="${#TestCase#treatmentCode}">\r
               <v1:title>${#TestCase#treatmentTitle}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f8896a0a-91b3-4a00-9dae-36360cf29ae1"/><con:assertion type="Simple Contains" id="c9d4371d-4572-4cda-b25d-ba72a8aca977" name="id"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="baadc681-6b5d-48f7-bd51-e51e9700b027" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить RouteId" id="148971c9-2b9f-4db6-b912-00aee0c74eeb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>routeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:id</con:sourcePath><con:targetType>routeId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getRoute" id="77702892-3b1d-406d-810a-5b9bc283090d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>getRoute</con:operation><con:request name="getRoute" id="1d0aa434-af54-429f-827c-6f109367c3b2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:getRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dac1f7da-25d0-4d82-8a11-e85cd60f4bae"/><con:assertion type="GroovyScriptAssertion" id="ce1cd7d4-dd36-4b56-a5f6-5b41b73fc997" name="routeId"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из запроса
def routeId_req = req.getNodeValue('//*:routeId')

// получаю данные из ответа
def routeId_resp = resp.getNodeValue('//*:route/@id')
def  routeIsActive_resp = resp.getNodeValue('//*:route/@isActive')


// проверка id
assert routeId_req  == routeId_resp

// проверка isActive
assert routeIsActive_resp ==  'true'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Данные маршрута из ответа" id="9c0bc37a-b9c8-4de7-850e-b5bd289a5b30"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ownerMOId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:ownerMedicalOrganizationId</con:sourcePath><con:targetType>ownerMOId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath>
</con:targetPath><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>docId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:document</con:sourcePath><con:targetType>docId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveTreatmentId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveTreatment/@id</con:sourcePath><con:targetType>receiveTreatmentId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath>
</con:targetPath><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveTreatmentCode_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveTreatment/@code</con:sourcePath><con:targetType>receiveTreatmentCode_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveTreatmentTitle_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveTreatment/*:title</con:sourcePath><con:targetType>receiveTreatmentTitle_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveTreatmentCatCode_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveTreatment/*:categoryCode</con:sourcePath><con:targetType>receiveTreatmentCatCode_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>directMOId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:directMedicalOrganization/*:id</con:sourcePath><con:targetType>directMOId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveMOId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveMedicalOrganization/*:id</con:sourcePath><con:targetType>receiveMOId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверяю данные из create и get" id="62c6941d-b4dc-4c2b-bd8f-b44d91876c6d"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

if (context.dbConnect != null) {      
sql = context.dbConnect;



    def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")
    def medicalOrganizationId2= testRunner.testCase.getPropertyValue("medicalOrganizationId2")   
    def treatmentId= testRunner.testCase.getPropertyValue("treatmentId")
    def treatmentCategoryCode= testRunner.testCase.getPropertyValue("treatmentCategoryCode")
    def treatmentTitle= testRunner.testCase.getPropertyValue("treatmentTitle")
    def treatmentCode= testRunner.testCase.getPropertyValue("treatmentCode")
    
    def receiveTreatmentId_resp= testRunner.testCase.getPropertyValue("receiveTreatmentId_resp")
    def receiveTreatmentCode_resp= testRunner.testCase.getPropertyValue("receiveTreatmentCode_resp")
    def receiveTreatmentTitle_resp= testRunner.testCase.getPropertyValue("receiveTreatmentTitle_resp")
    def receiveTreatmentCatCode_resp= testRunner.testCase.getPropertyValue("receiveTreatmentCatCode_resp")
    def directMOId_resp= testRunner.testCase.getPropertyValue("directMOId_resp")
    def receiveMOId_resp= testRunner.testCase.getPropertyValue("receiveMOId_resp")    
    def ownerMOId_resp= testRunner.testCase.getPropertyValue("ownerMOId_resp")
    def docId_resp= testRunner.testCase.getPropertyValue("docId_resp")
        
   // Проверяю данные из запроса и ответа

   assert  medicalOrganizationId ==ownerMOId_resp
   assert  treatmentId ==receiveTreatmentId_resp
   assert  treatmentTitle ==receiveTreatmentTitle_resp
   assert  treatmentCode ==receiveTreatmentCode_resp
   assert  treatmentCategoryCode ==receiveTreatmentCatCode_resp
   assert  medicalOrganizationId ==directMOId_resp
   assert  medicalOrganizationId2 ==receiveMOId_resp
   
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="request" name="editRoute" id="47cf4cb7-e6b6-41c9-979d-b436fd282f70"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>editRoute</con:operation><con:request name="editRoute" id="72ba79b3-224c-41fb-931b-5f325a9d3461"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:editRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
         <typ:info>\r
            <v1:document>2</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveTreatment id="${#TestCase#treatmentId2}" code="${#TestCase#treatmentCode2}">
               <v1:title>${#TestCase#treatmentTitle2}</v1:title>\r
               <v1:categoryCode>${#TestCase#treatmentCategoryCode2}</v1:categoryCode>\r
            </v1:receiveTreatment>\r
            <!--1 or more repetitions:-->\r
            <v1:directMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId2}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle2}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:directMedicalOrganization>\r
            <!--1 or more repetitions:-->\r
            <v1:receiveMedicalOrganization>\r
               <v1:medicalOrganization>\r
                  <v1:id>${#TestCase#medicalOrganizationId}</v1:id>\r
                  <v1:title>${#TestCase#medicalOrganizationTitle}</v1:title>\r
               </v1:medicalOrganization>\r
            </v1:receiveMedicalOrganization>\r
         </typ:info>\r
      </typ:editRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="06960c45-53f1-4b76-9127-9a597ea13206"/><con:assertion type="SOAP Fault Assertion" id="2ee05a4a-7fba-4d31-9808-b46a7b95b2ce" name="result_true"/><con:assertion type="GroovyScriptAssertion" id="bc3c86cd-5865-43c3-94a6-ee26d8e6fa1b" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из ответа
def result_resp = resp.getNodeValue('//*:result')


// проверка result
assert result_resp ==  'true'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getRoute после изменения" id="fcd4f574-445e-4c70-9de4-99370f6a0b18"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>getRoute</con:operation><con:request name="getRoute после изменения" id="1d0aa434-af54-429f-827c-6f109367c3b2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:getRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dac1f7da-25d0-4d82-8a11-e85cd60f4bae"/><con:assertion type="GroovyScriptAssertion" id="ce1cd7d4-dd36-4b56-a5f6-5b41b73fc997" name="routeId"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из запроса
def routeId_req = req.getNodeValue('//*:routeId')

// получаю данные из ответа
def routeId_resp = resp.getNodeValue('//*:route/@id')
def  routeIsActive_resp = resp.getNodeValue('//*:route/@isActive')


// проверка id
assert routeId_req  == routeId_resp

// проверка isActive
assert routeIsActive_resp ==  'true'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Данные маршрута из ответа после изменения" id="fbfd478c-2c06-4a0e-bef8-112401515371"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ownerMOId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute после изменения</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:ownerMedicalOrganizationId</con:sourcePath><con:targetType>ownerMOId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath>
</con:targetPath><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>docId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute после изменения</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:document</con:sourcePath><con:targetType>docId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveTreatmentId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute после изменения</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveTreatment/@id</con:sourcePath><con:targetType>receiveTreatmentId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath>
</con:targetPath><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveTreatmentCode_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute после изменения</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveTreatment/@code</con:sourcePath><con:targetType>receiveTreatmentCode_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveTreatmentTitle_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute после изменения</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveTreatment/*:title</con:sourcePath><con:targetType>receiveTreatmentTitle_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveTreatmentCatCode_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute после изменения</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveTreatment/*:categoryCode</con:sourcePath><con:targetType>receiveTreatmentCatCode_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>directMOId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute после изменения</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:directMedicalOrganization/*:id</con:sourcePath><con:targetType>directMOId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receiveMOId_resp</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getRoute после изменения</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/routeService/v1/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:receiveMedicalOrganization/*:id</con:sourcePath><con:targetType>receiveMOId_resp</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверяю данные из edit и get" id="11973444-45d9-4e80-a2c2-80bd849ba1fa"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

if (context.dbConnect != null) {      
sql = context.dbConnect;



    def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")
    def medicalOrganizationId2= testRunner.testCase.getPropertyValue("medicalOrganizationId2")   
    def treatmentId2= testRunner.testCase.getPropertyValue("treatmentId2")
    def treatmentCategoryCode2= testRunner.testCase.getPropertyValue("treatmentCategoryCode2")
    def treatmentTitle2= testRunner.testCase.getPropertyValue("treatmentTitle2")
    def treatmentCode2= testRunner.testCase.getPropertyValue("treatmentCode2")
    
    def receiveTreatmentId_resp= testRunner.testCase.getPropertyValue("receiveTreatmentId_resp")
    def receiveTreatmentCode_resp= testRunner.testCase.getPropertyValue("receiveTreatmentCode_resp")
    def receiveTreatmentTitle_resp= testRunner.testCase.getPropertyValue("receiveTreatmentTitle_resp")
    def receiveTreatmentCatCode_resp= testRunner.testCase.getPropertyValue("receiveTreatmentCatCode_resp")
    def directMOId_resp= testRunner.testCase.getPropertyValue("directMOId_resp")
    def receiveMOId_resp= testRunner.testCase.getPropertyValue("receiveMOId_resp")    
    def ownerMOId_resp= testRunner.testCase.getPropertyValue("ownerMOId_resp")
    def docId_resp= testRunner.testCase.getPropertyValue("docId_resp")
        
   // Проверяю данные из запроса и ответа

   assert  medicalOrganizationId ==ownerMOId_resp
   assert  treatmentId2 ==receiveTreatmentId_resp
   assert  treatmentTitle2 ==receiveTreatmentTitle_resp
   assert  treatmentCode2 ==receiveTreatmentCode_resp
   assert  treatmentCategoryCode2 ==receiveTreatmentCatCode_resp
   assert  medicalOrganizationId2 ==directMOId_resp
   assert  medicalOrganizationId ==receiveMOId_resp
   
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:testStep type="request" name="archiveRoute" id="79e8cd37-d2f1-4193-b8a6-4b5e971a5053"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>archiveRoute</con:operation><con:request name="archiveRoute" id="4b513d18-b93f-4543-a822-70ae10cc2e09"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:archiveRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:archiveRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="aefb5811-3fe6-40d3-8660-7da0f058ebaa"/><con:assertion type="SOAP Fault Assertion" id="a97e5ddd-3e76-4ee1-a1bf-0c640a6551bf" name="Not SOAP Fault"/><con:assertion type="GroovyScriptAssertion" id="7ebe0a62-6a25-4522-8b4c-ca7f1816a960" name="result_true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из ответа
def result_resp = resp.getNodeValue('//*:result')


// проверка result
assert result_resp ==  'true'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getRoute после архивации" id="8c2c18a0-1249-4d6b-bd74-aa98f2d49997"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>getRoute</con:operation><con:request name="getRoute после архивации" id="1d0aa434-af54-429f-827c-6f109367c3b2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:getRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dac1f7da-25d0-4d82-8a11-e85cd60f4bae"/><con:assertion type="GroovyScriptAssertion" id="ce1cd7d4-dd36-4b56-a5f6-5b41b73fc997" name="isActive_false"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из запроса
def routeId_req = req.getNodeValue('//*:routeId')

// получаю данные из ответа
def routeId_resp = resp.getNodeValue('//*:route/@id')
def  routeIsActive_resp = resp.getNodeValue('//*:route/@isActive')


// проверка id
assert routeId_req  == routeId_resp

// проверка isActive
assert routeIsActive_resp ==  'false'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="restoreArchivedRoute" id="6895ff47-2434-461d-bbdd-fc563bddaea6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>restoreArchivedRoute</con:operation><con:request name="restoreArchivedRoute" id="53a7db39-f706-475a-8307-a2bd0eb3804a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:restoreArchivedRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:restoreArchivedRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9b65d101-3e12-476b-9edf-323b86274b87"/><con:assertion type="GroovyScriptAssertion" id="262aecc4-f477-4da0-a769-dbd3c14b25f3" name="result_true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из ответа
def result_resp = resp.getNodeValue('//*:result')


// проверка result
assert result_resp ==  'true'</scriptText></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="53696bea-3332-4e5f-850f-0c7651da4680" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getRoute после отмены архивации" id="25453058-456c-4736-ae30-02da47eadf52"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>getRoute</con:operation><con:request name="getRoute после отмены архивации" id="1d0aa434-af54-429f-827c-6f109367c3b2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getRouteRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:getRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dac1f7da-25d0-4d82-8a11-e85cd60f4bae"/><con:assertion type="GroovyScriptAssertion" id="ce1cd7d4-dd36-4b56-a5f6-5b41b73fc997" name="isActive_true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из запроса
def routeId_req = req.getNodeValue('//*:routeId')

// получаю данные из ответа
def routeId_resp = resp.getNodeValue('//*:route/@id')
def  routeIsActive_resp = resp.getNodeValue('//*:route/@isActive')


// проверка id
assert routeId_req  == routeId_resp

// проверка isActive
assert routeIsActive_resp ==  'true'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getRouteHistory" id="b413b944-4b8d-4153-857a-402f171fe9b5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>getRouteHistory</con:operation><con:request name="getRouteHistory" id="22b75ce9-fcfe-4552-9ae0-79e0659a76ac"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:getRouteHistoryRequest>\r
         <typ:routeId>${#TestCase#routeId}</typ:routeId>\r
      </typ:getRouteHistoryRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3684d04c-c1b4-46ef-a0e1-a5548ed08806"/><con:assertion type="SOAP Fault Assertion" id="c05f69e1-62cb-4e17-93b6-1850d088dba1" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="be3cf2b2-f4aa-4d18-bb78-b689bcf3f3f4" name="RESTORE"><con:configuration><path>declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:journalListItem/*:eventType</path><content>RESTORE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="be3cf2b2-f4aa-4d18-bb78-b689bcf3f3f4" name="ARCHIVE"><con:configuration><path>declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:journalListItem/*:eventType</path><content>ARCHIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="be3cf2b2-f4aa-4d18-bb78-b689bcf3f3f4" name="EDIT"><con:configuration><path>declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:journalListItem/*:eventType</path><content>EDIT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="be3cf2b2-f4aa-4d18-bb78-b689bcf3f3f4" name="CREATE"><con:configuration><path>declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:journalListItem/*:eventType</path><content>CREATE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных сущностей" id="30d2bdb5-fdf1-484a-b696-7edcc2603064"><con:settings/><con:config><script>import groovy.sql.Sql

if (context.dbConnect != null) {      
sql = context.dbConnect;

    def routeId= testRunner.testCase.getPropertyValue("routeId")
   // def medicalFacilityId2= testRunner.testCase.getPropertyValue("medicalFacilityId2")
    def medicalOrganizationId= testRunner.testCase.getPropertyValue("medicalOrganizationId")
    def medicalOrganizationId2= testRunner.testCase.getPropertyValue("medicalOrganizationId2")

   // Удаляем запись в DIRECT_MEDICAL_ORGANIZATIONS
   sql.execute ("DELETE  from  DIRECT_MEDICAL_ORGANIZATIONS WHERE ROUTE_ID ="+routeId)

   // Удаляем запись в RECEIVE_MEDICAL_ORGANIZATIONS
   sql.execute ("DELETE  from  RECEIVE_MEDICAL_ORGANIZATIONS WHERE ROUTE_ID ="+routeId)

    // Удаляем запись в ROUTE_JOURNAL
   sql.execute ("DELETE  from  ROUTE_JOURNAL WHERE ROUTE_ID ="+routeId)  

     // Удаляем запись в ROUTE_TREATMENTS
   sql.execute ("DELETE  from  ROUTE_TREATMENTS WHERE ROUTE_ID ="+routeId)    

     // Удаляем запись в ROUTE
   sql.execute ("DELETE  from  ROUTE WHERE ID ="+routeId)       

   // Удаляем МО MEDICAL_ORGANIZATION
   sql.execute ("DELETE  from  MEDICAL_ORGANIZATION WHERE ID ="+medicalOrganizationId)

      // Удаляем МО2 MEDICAL_ORGANIZATION
   sql.execute ("DELETE  from  MEDICAL_ORGANIZATION WHERE ID ="+medicalOrganizationId2)
   
} else {
	log.error("Соединение с бд не установлено!");
}</script></con:config></con:testStep><con:properties><con:property><con:name>medicalOrganizationId</con:name><con:value>200001798509</con:value></con:property><con:property><con:name>treatmentId</con:name><con:value>135468844</con:value></con:property><con:property><con:name>medicalOrganizationId2</con:name><con:value>200001798510</con:value></con:property><con:property><con:name>medicalOrganizationTitle</con:name><con:value>Тестовая MO</con:value></con:property><con:property><con:name>medicalOrganizationTitle2</con:name><con:value>Тестовая MO</con:value></con:property><con:property><con:name>treatmentCategoryCode</con:name><con:value>RADIO_CARDIO</con:value></con:property><con:property><con:name>treatmentTitle</con:name><con:value>Компьютерная томография органов грудной клетки, органов брюшной полости, органов малого таза</con:value></con:property><con:property><con:name>treatmentCode</con:name><con:value>518</con:value></con:property><con:property><con:name>routeId</con:name><con:value>103751</con:value></con:property><con:property><con:name>ownerMOId_resp</con:name><con:value>200001798509</con:value></con:property><con:property><con:name>docId_resp</con:name><con:value>2</con:value></con:property><con:property><con:name>receiveTreatmentId_resp</con:name><con:value>135468854</con:value></con:property><con:property><con:name>receiveTreatmentCode_resp</con:name><con:value>604</con:value></con:property><con:property><con:name>receiveTreatmentTitle_resp</con:name><con:value>Компьютерная томография лицевого отдела черепа с контрастированием</con:value></con:property><con:property><con:name>receiveTreatmentCatCode_resp</con:name><con:value>RADIO_CARDIO</con:value></con:property><con:property><con:name>directMOId_resp</con:name><con:value>200001798510</con:value></con:property><con:property><con:name>receiveMOId_resp</con:name><con:value>200001798509</con:value></con:property><con:property><con:name>treatmentId2</con:name><con:value>135468854</con:value></con:property><con:property><con:name>treatmentCode2</con:name><con:value>604</con:value></con:property><con:property><con:name>treatmentTitle2</con:name><con:value>Компьютерная томография лицевого отдела черепа с контрастированием</con:value></con:property><con:property><con:name>treatmentCategoryCode2</con:name><con:value>RADIO_CARDIO</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>db_rir2_user</con:name><con:value>EMIAS_RIR2</con:value></con:property><con:property><con:name>db_rir2_password</con:name><con:value>EMIAS_RIR2</con:value></con:property><con:property><con:name>db_rir2_con</con:name><con:value>@10.2.172.16:1521/rir2.mosgorzdrav.local</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="8f6ec82f-f8d1-4aca-a120-e5efe2e10686" name="обработка пушей от НСИ2"><con:settings><con:setting id="23d4573f-e6fb-4037-9725-39ae2db62917fileName">обработка-пушей-от-НСИ2</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="ceffb862-f73d-4b43-8665-4273f7030a91" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AGE_GROUP" searchProperties="true"><con:settings><con:setting id="6a1fa8a8-bbf8-4faa-a8a5-cf2d5e56cd27fileName">AGE_GROUP</con:setting></con:settings><con:testStep type="request" name="Создание записи в AGE_GROUP, action = ADDED" id="fcf501de-e990-41be-97c4-794ecfcbe720"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в AGE_GROUP, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1163</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#agId1}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="4303" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="4303" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="FROM" field_id="" type="">
								<values>
									<value>${#TestCase#from}</value>
								</values>
							</attribute>
							<attribute name="TO" field_id="" type="">
								<values>
									<value>${#TestCase#to}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="082072c0-5971-446d-afab-f9c6826e9c46" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="906b242b-c6cc-4e70-9041-6e9ef8a2129a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи" id="0c900126-49bd-488f-8ddd-357aee8e0c82"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("agId1")
getLastItem = ("SELECT * FROM AGE_GROUP  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице AGE_GROUP не найдена")
}
else {
	log.info("Запись в таблице  AGE_GROUP найдена")
	//log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code")
	def req_title = testRunner.testCase.getPropertyValue("title")
	def req_from=testRunner.testCase.getPropertyValue("from")
	def req_to = testRunner.testCase.getPropertyValue("to")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_from = lastItem[0].FROM.toString()
	def db_to = lastItem[0].TO.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_code ==req_code
	assert db_title ==req_title
	assert db_from ==req_from
	assert db_to ==req_to
	log.info("Запись в таблице созданна корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Создание существующей записи в AGE_GROUP, action = ADDED" id="06ea97cb-2de8-432f-8b59-41b89f92bf2f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание существующей записи в AGE_GROUP, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1163</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#agId1}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="4303" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="4303" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="FROM" field_id="" type="">
								<values>
									<value>${#TestCase#from}</value>
								</values>
							</attribute>
							<attribute name="TO" field_id="" type="">
								<values>
									<value>${#TestCase#to}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="082072c0-5971-446d-afab-f9c6826e9c46" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="906b242b-c6cc-4e70-9041-6e9ef8a2129a" name="Contains ERROR"><con:configuration><token>ERROR: Элемент с таким ПК уже существует</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в AGE_GROUP, action = MODIFIED" id="33f1b62f-7453-46ec-9c32-bd149a6cd89e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в AGE_GROUP, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1163</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#agId2}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="4303" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="4303" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="FROM" field_id="" type="">
								<values>
									<value>${#TestCase#from}</value>
								</values>
							</attribute>
							<attribute name="TO" field_id="" type="">
								<values>
									<value>${#TestCase#to}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="082072c0-5971-446d-afab-f9c6826e9c46" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="906b242b-c6cc-4e70-9041-6e9ef8a2129a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи2" id="b1252565-3190-489c-9d47-e58443eb75ca"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("agId2")
getLastItem = ("SELECT * FROM AGE_GROUP  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице AGE_GROUP не найдена")
}
else {
	log.info("Запись в таблице  AGE_GROUP найдена")
	//log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code")
	def req_title = testRunner.testCase.getPropertyValue("title")
	def req_from=testRunner.testCase.getPropertyValue("from")
	def req_to = testRunner.testCase.getPropertyValue("to")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_from = lastItem[0].FROM.toString()
	def db_to = lastItem[0].TO.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_code ==req_code
	assert db_title ==req_title
	assert db_from ==req_from
	assert db_to ==req_to
	log.info("Запись в таблице созданна корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в AGE_GROUP, action = MODIFIED" id="653b47d0-074a-448d-9023-ad69b641cf95"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в AGE_GROUP, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1163</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#agId1}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="4303" type="">
								<values>
									<value>${#TestCase#code2}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="4303" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="FROM" field_id="" type="">
								<values>
									<value>${#TestCase#from2}</value>
								</values>
							</attribute>
							<attribute name="TO" field_id="" type="">
								<values>
									<value>${#TestCase#to2}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="082072c0-5971-446d-afab-f9c6826e9c46" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="906b242b-c6cc-4e70-9041-6e9ef8a2129a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка измененияя записи" id="7f35553b-6ad2-4a1b-b75c-adb30c3f8563"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("agId1")
getLastItem = ("SELECT * FROM AGE_GROUP  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице AGE_GROUP не найдена")
}
else {
	log.info("Запись в таблице  AGE_GROUP найдена")
	//log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code2")
	def req_title = testRunner.testCase.getPropertyValue("title2")
	def req_from=testRunner.testCase.getPropertyValue("from2")
	def req_to = testRunner.testCase.getPropertyValue("to2")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_from = lastItem[0].FROM.toString()
	def db_to = lastItem[0].TO.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "1"
	assert db_code ==req_code
	assert db_title ==req_title
	assert db_from ==req_from
	assert db_to ==req_to
	log.info("Запись в таблице изменена корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Архивирование несуществующей записи в AGE_GROUP, action = DELETED" id="1cb57383-bef4-454d-aa06-c85ee5d15b65"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Архивирование несуществующей записи в AGE_GROUP, action = DELETED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1163</category>
						</categories>
						<data action="DELETED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#agId3}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="4303" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="4303" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="FROM" field_id="" type="">
								<values>
									<value>${#TestCase#from}</value>
								</values>
							</attribute>
							<attribute name="TO" field_id="" type="">
								<values>
									<value>${#TestCase#to}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="082072c0-5971-446d-afab-f9c6826e9c46" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="906b242b-c6cc-4e70-9041-6e9ef8a2129a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия записи" id="78620289-7357-44f6-a785-4ea0dd99ac51"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("agId3")
getLastItem = ("SELECT * FROM AGE_GROUP  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)> 0){
		testRunner.fail("Запись в таблице AGE_GROUP создана")
}
else {
	log.info("Запись в таблице AGE_GROUP не создана")
	//log.info(lastItem)
}</script></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>AGE_GROUP_CODE</con:value></con:property><con:property><con:name>title</con:name><con:value>Тестовая Возрастная группа</con:value></con:property><con:property><con:name>from</con:name><con:value>0</con:value></con:property><con:property><con:name>to</con:name><con:value>216</con:value></con:property><con:property><con:name>code2</con:name><con:value>AGE_GROUP_CODE1</con:value></con:property><con:property><con:name>title2</con:name><con:value>Тестовая Возрастная группа1</con:value></con:property><con:property><con:name>from2</con:name><con:value>1</con:value></con:property><con:property><con:name>to2</con:name><con:value>217</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="69a6eed6-9a8f-48dc-874b-6c10c941eea5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="EQUIPMENT_PROFILE" searchProperties="true"><con:settings><con:setting id="42a813f4-86dd-4217-92d6-498169d35a34fileName">EQUIPMENT_PROFILE</con:setting></con:settings><con:testStep type="groovy" name="Подбор идентификаторов" id="b1e1ac3c-dfc6-4266-b994-79deba007915"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
String n=testRunner.testCase.getPropertyValue("n") 

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

String getIdFromDBTable(String tableName, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max(ID)+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" propertyName "+propertyName)
} 

for (int i =1; i &lt;4;i++){
	getIdFromDBTable("EQUIPMENT_PROFILE", "id"+i, n+(i-1))
}

int value =n.toInteger()+3
log.info("n":value.toString())
testRunner.testCase.setPropertyValue("n",value.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Создание или подбор типов ресурсов" id="04b9d67e-0538-4677-9574-6d7fac9d7eb8"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkExistence (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	//log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info("query2 "+query2)
			def result2 =sql.rows(query2)
			//log.info("result2 "+result2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+tableName+ ".ID= "+resultId)
	}

def getDoesntExisted (String tableName,String propertyName){
	String query = "SELECT max(id)+1 as ID FROM "+tableName
	def result =sql.rows(query)
	testRunner.testCase.setPropertyValue("noneExisted"+propertyName, result[0].ID.toString())
	log.info("ID несуществующей записи в таблице  "+tableName+ " = "+result[0].ID.toString())
}
resKind=testRunner.testCase.getPropertyValue("resKind")
resKind2=""
rightResourceKind=""
wrongresourceKind=""
if (resKind=="ДР"){
	rightResourceKind="AVAILABLE_RESOURCE"
	wrongresourceKind="SPECIAL_AVAILABLE_RESOURCE"
	resKind2="СДР"
}
else if(resKind=="СДР"){
	rightResourceKind="SPECIAL_AVAILABLE_RESOURCE"
	wrongresourceKind="AVAILABLE_RESOURCE"
	resKind2="ДР"
}
else {
	testRunner.fail("Передан некорректный тип ресурса: "+resKind)
}
list="0"
for (int i=1; i&lt;3;i++){
	checkExistence("RESOURCE_TYPE", "ID,TITLE,RESOURCE_KIND,ARCHIVED", "-"+i+", 'Неархивный тип ресурса вида "+resKind+" для теста обработки сообщений по POSITION_NOM','"+rightResourceKind+"',0", "resTypeId"+i,"where archived = 0 and RESOURCE_KIND ='"+rightResourceKind+"' and id not in ("+list+")" )
	resTypeId =testRunner.testCase.getPropertyValue("resTypeId"+i)
	list=list+","+resTypeId
}

checkExistence("RESOURCE_TYPE", "ID,TITLE,RESOURCE_KIND,ARCHIVED", "-3, 'Архивный тип ресурса вида "+resKind+" для теста обработки сообщений по POSITION_NOM','"+rightResourceKind+"',1", "archivedResTypeId","where archived = 1 and RESOURCE_KIND ='"+rightResourceKind+"' " )

checkExistence("RESOURCE_TYPE", "ID,TITLE,RESOURCE_KIND,ARCHIVED", "-4, 'Неархивный тип ресурса вида "+resKind2+" для теста обработки сообщений по POSITION_NOM','"+wrongresourceKind+"',0", "wrongResTypeId","where archived = 0 and RESOURCE_KIND ='"+wrongresourceKind+"'" )

getDoesntExisted("RESOURCE_TYPE", "ResTypeId")</script></con:config></con:testStep><con:testStep type="request" name="Создание записи в EQUIPMENT_PROFILE, action= ADDED" id="9c19a303-ab44-4b7c-8d82-8260dfd1b745"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в EQUIPMENT_PROFILE, action= ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">${#TestCase#catalogNSI}</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#id1}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи" id="7fe5434c-9dcb-4774-86be-d7a31f575517"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId1")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице создана корректно.")
}


</script></con:config></con:testStep><con:testStep type="request" name="Создание существующей записи в EQUIPMENT_PROFILE, action= ADDED" id="3138639f-e7e3-4407-8b4d-066c68cacf56"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание существующей записи в EQUIPMENT_PROFILE, action= ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">${#TestCase#catalogNSI}</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#id1}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains ERROR"><con:configuration><token>ERROR: Элемент с таким ПК уже существует</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в EQUIPMENT_PROFILE, action= MODIFIED" id="e4a41794-75c1-460e-96f4-6df15b9ee0e8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в EQUIPMENT_PROFILE, action= MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">${#TestCase#catalogNSI}</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#id2}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи2" id="98a7be1a-619c-49fa-855a-7a470d55dee9"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id2")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId1")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице создана корректно.")
}


</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в EQUIPMENT_PROFILE, action= MODIFIED" id="2f967abf-e9bb-46d9-a9bf-a47fe87e8552"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в EQUIPMENT_PROFILE, action= MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">${#TestCase#catalogNSI}</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#id1}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId2}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи" id="2aebf886-5d1e-4d6b-9c07-d077e1428591"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId2")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="1"
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице изменена корректно.")
}


</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в EQUIPMENT_PROFILE с некорректным resource type id, action= MODIFIED" id="d6d6380b-2efe-49b8-87d3-9b74a7baf53d" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в EQUIPMENT_PROFILE с некорректным resource type id, action= MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">${#TestCase#catalogNSI}</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#id1}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#wrongResTypeId}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="ERROR"><con:configuration><token>ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия изменения записи" id="ccece7f2-b72b-4789-98be-11e332769682" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId2")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="1"
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице изменена корректно.")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="0b8318f3-f93d-4faf-9b41-ca18c786b93d"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")


sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def deleteCreatedByTest(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName1)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	
	testRunner.testCase.testSuite.removeProperty( propertyName+"createdByTest" )
	testRunner.testCase.testSuite.removeProperty(propertyName)

}
table = testRunner.testCase.getPropertyValue("table")
for (int i =1; i &lt;4;i++){
	id = testRunner.testCase.getPropertyValue("id"+i)
	sql.execute("DELETE FROM "+table+" WHERE ID ="+id)
}


deleteCreatedByTest("RESOURCE_TYPE", "resTypeId1")
deleteCreatedByTest("RESOURCE_TYPE", "resTypeId2")
deleteCreatedByTest("RESOURCE_TYPE", "archivedResTypeId")</script></con:config></con:testStep><con:properties><con:property><con:name>resKind</con:name><con:value>СДР</con:value></con:property><con:property><con:name>resTypeId1</con:name><con:value>156645371</con:value></con:property><con:property><con:name>resTypeId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>resTypeId2</con:name><con:value>156645372</con:value></con:property><con:property><con:name>resTypeId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>archivedResTypeId</con:name><con:value>156645370</con:value></con:property><con:property><con:name>archivedResTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>wrongResTypeId</con:name><con:value>-2</con:value></con:property><con:property><con:name>wrongResTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>noneExistedResTypeId</con:name><con:value>158297752</con:value></con:property><con:property><con:name>table</con:name><con:value>EQUIPMENT_PROFILE</con:value></con:property><con:property><con:name>catalogNSI</con:name><con:value>2277</con:value></con:property><con:property><con:name>n</con:name><con:value>4</con:value></con:property><con:property><con:name>id1</con:name><con:value>5000214926</con:value></con:property><con:property><con:name>id2</con:name><con:value>5000214927</con:value></con:property><con:property><con:name>id3</con:name><con:value>5000214928</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="061c0dd5-4392-4a1c-adb7-9c6d0fbfcf0a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="POSITION_NOM" searchProperties="true"><con:settings><con:setting id="d859a868-c56d-4992-bbbf-b536938ba69dfileName">POSITION_NOM</con:setting></con:settings><con:testStep type="groovy" name="Создание или подбор типов ресурсов" id="75a28785-91b5-4ffd-9bc5-55ccff525f53"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkExistence (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	//log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info("query2 "+query2)
			def result2 =sql.rows(query2)
			//log.info("result2 "+result2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+tableName+ ".ID= "+resultId)
	}

def getDoesntExisted (String tableName,String propertyName){
	String query = "SELECT max(id)+1 as ID FROM "+tableName
	def result =sql.rows(query)
	testRunner.testCase.setPropertyValue("noneExisted"+propertyName, result[0].ID.toString())
	log.info("ID несуществующей записи в таблице  "+tableName+ " = "+result[0].ID.toString())
}
resKind=testRunner.testCase.getPropertyValue("resKind")
resKind2=""
rightResourceKind=""
wrongresourceKind=""
if (resKind=="ДР"){
	rightResourceKind="AVAILABLE_RESOURCE"
	wrongresourceKind="SPECIAL_AVAILABLE_RESOURCE"
	resKind2="СДР"
}
else if(resKind=="СДР"){
	rightResourceKind="SPECIAL_AVAILABLE_RESOURCE"
	wrongresourceKind="AVAILABLE_RESOURCE"
	resKind2="ДР"
}
else {
	testRunner.fail("Передан некорректный тип ресурса: "+resKind)
}
list="0"
for (int i=1; i&lt;3;i++){
	checkExistence("RESOURCE_TYPE", "ID,TITLE,RESOURCE_KIND,ARCHIVED", "-"+i+", 'Неархивный тип ресурса вида "+resKind+" для теста обработки сообщений по POSITION_NOM','"+rightResourceKind+"',0", "resTypeId"+i,"where archived = 0 and RESOURCE_KIND ='"+rightResourceKind+"' and id not in ("+list+")" )
	resTypeId =testRunner.testCase.getPropertyValue("resTypeId"+i)
	list=list+","+resTypeId
}

checkExistence("RESOURCE_TYPE", "ID,TITLE,RESOURCE_KIND,ARCHIVED", "-3, 'Архивный тип ресурса вида "+resKind+" для теста обработки сообщений по POSITION_NOM','"+rightResourceKind+"',1", "archivedResTypeId","where archived = 1 and RESOURCE_KIND ='"+rightResourceKind+"' " )

checkExistence("RESOURCE_TYPE", "ID,TITLE,RESOURCE_KIND,ARCHIVED", "-4, 'Неархивный тип ресурса вида "+resKind2+" для теста обработки сообщений по POSITION_NOM','"+wrongresourceKind+"',0", "wrongResTypeId","where archived = 0 and RESOURCE_KIND ='"+wrongresourceKind+"'" )

getDoesntExisted("RESOURCE_TYPE", "ResTypeId")</script></con:config></con:testStep><con:testStep type="request" name="Создание записи в POSITION_NOM, action= ADDED" id="b5db073d-fb92-4139-82f1-e3e231a7838f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в POSITION_NOM, action= ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pnId1}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>${#TestCase#start}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
									<value>${#TestCase#end}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи" id="4defeca8-59a3-4d9d-b33b-9f7eaff39be4"><con:settings/><con:config><script>import groovy.sql.Sql
import java.*
import java.text.SimpleDateFormat
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("pnId1")
getLastItem = ("SELECT * FROM POSITION_NOM  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице POSITION_NOM не найдена")
}
else {
	log.info("Запись в таблице  POSITION_NOM найдена")
	//log.info(lastItem)
	def req_title=testRunner.testCase.getPropertyValue("title")
	def req_start = testRunner.testCase.getPropertyValue("start")
	def req_end = testRunner.testCase.getPropertyValue("end")
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId1")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_start = lastItem[0]."START".toString()
	def db_end = lastItem[0]."END".toString()
	def db_title = lastItem[0].TITLE.toString()
	SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat format2 = new SimpleDateFormat("dd.MM.yyyy");
	Date startDate = format2.parse(req_start);
	//log.info("startDate "+ startDate)
	stringStartDate=format1.format(startDate)
	//log.info("stringStartDate "+ stringStartDate)
	Date endDate = format2.parse(req_end);
	//log.info("endtDate "+ endtDate)
	stringEndDate=format1.format(endDate)
	//log.info("stringEndDate "+ stringEndDate)
	assert  db_start.replace(" 00:00:00.0","") == stringStartDate
	assert  db_end.replace(" 00:00:00.0","") == stringEndDate
	assert  db_title ==req_title
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице создана корректно.")
}


</script></con:config></con:testStep><con:testStep type="request" name="Создание существующей записи в POSITION_NOM, action= ADDED" id="e9ad7d41-9d4b-427e-923f-98467852bc5c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание существующей записи в POSITION_NOM, action= ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pnId1}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>${#TestCase#start}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains ERROR"><con:configuration><token>ERROR: Элемент с таким ПК уже существует</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в POSITION_NOM без end, action= MODIFIED" id="576118fc-ca9e-4c4b-af3e-5a230bb5f7ab"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в POSITION_NOM без end, action= MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pnId2}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>${#TestCase#start}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи2" id="e33615a2-c2d3-4228-9d6e-7a3555f76f23"><con:settings/><con:config><script>import groovy.sql.Sql
import java.*
import java.text.SimpleDateFormat
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("pnId2")
getLastItem = ("SELECT * FROM POSITION_NOM  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице POSITION_NOM не найдена")
}
else {
	log.info("Запись в таблице  POSITION_NOM найдена")
	//log.info(lastItem)
	def req_title=testRunner.testCase.getPropertyValue("title")
	def req_start = testRunner.testCase.getPropertyValue("start")
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId1")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_start = lastItem[0]."START".toString()
	def db_end = lastItem[0]."END"
	def db_title = lastItem[0].TITLE.toString()
	SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat format2 = new SimpleDateFormat("dd.MM.yyyy");
	Date startDate = format2.parse(req_start);
	//log.info("startDate "+ startDate)
	stringStartDate=format1.format(startDate)
	//log.info("stringStartDate "+ stringStartDate)
	assert  db_start.replace(" 00:00:00.0","") == stringStartDate
	assert  db_end == null
	assert  db_title ==req_title
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице создана корректно.")
}


</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в POSITION_NOM без end, action= MODIFIED" id="a0451075-49d4-41b2-9080-ed2578f3e372"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в POSITION_NOM без end, action= MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pnId1}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>${#TestCase#start2}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId2}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи" id="35f03075-7c32-4799-8d5d-5ef4cc078ef8"><con:settings/><con:config><script>import groovy.sql.Sql
import java.*
import java.text.SimpleDateFormat
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("pnId1")
getLastItem = ("SELECT * FROM POSITION_NOM  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице POSITION_NOM не найдена")
}
else {
	log.info("Запись в таблице  POSITION_NOM найдена")
	//log.info(lastItem)
	def req_title=testRunner.testCase.getPropertyValue("title2")
	def req_start = testRunner.testCase.getPropertyValue("start2")
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId2")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_start = lastItem[0]."START".toString()
	def db_end = lastItem[0]."END"
	def db_title = lastItem[0].TITLE.toString()
	SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat format2 = new SimpleDateFormat("dd.MM.yyyy");
	Date startDate = format2.parse(req_start);
	//log.info("startDate "+ startDate)
	stringStartDate=format1.format(startDate)
	//log.info("stringStartDate "+ stringStartDate)
	assert  db_start.replace(" 00:00:00.0","") == stringStartDate
	assert  db_end == null
	assert  db_title ==req_title
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице изменена корректно.")
}


</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в POSITION_NOM с end, action= MODIFIED" id="3c5d5871-36e1-427f-a0d8-15c137dbafcd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в POSITION_NOM с end, action= MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pnId1}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>${#TestCase#start}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
								<value>${#TestCase#end}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи2" id="8018c418-7120-4d48-96ec-bd671aea3ba7"><con:settings/><con:config><script>import groovy.sql.Sql
import java.*
import java.text.SimpleDateFormat
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("pnId1")
getLastItem = ("SELECT * FROM POSITION_NOM  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице POSITION_NOM не найдена")
}
else {
	log.info("Запись в таблице  POSITION_NOM найдена")
	//log.info(lastItem)
	def req_title=testRunner.testCase.getPropertyValue("title")
	def req_start = testRunner.testCase.getPropertyValue("start")
	def req_end = testRunner.testCase.getPropertyValue("end")
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId1")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_start = lastItem[0]."START".toString()
	def db_end = lastItem[0]."END".toString()
	def db_title = lastItem[0].TITLE.toString()
	SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat format2 = new SimpleDateFormat("dd.MM.yyyy");
	Date startDate = format2.parse(req_start);
	//log.info("startDate "+ startDate)
	stringStartDate=format1.format(startDate)
	//log.info("stringStartDate "+ stringStartDate)
	Date endDate = format2.parse(req_end);
	//log.info("endtDate "+ endtDate)
	stringEndDate=format1.format(endDate)
	//log.info("stringEndDate "+ stringEndDate)
	assert  db_start.replace(" 00:00:00.0","") == stringStartDate
	assert  db_end.replace(" 00:00:00.0","") == stringEndDate
	assert  db_title ==req_title
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице изменена корректно.")
}


</script></con:config></con:testStep><con:testStep type="request" name="Создание записи в POSITION_NOM с несуществующим resource_type_id, action= ADDED" id="54ce01c5-2889-40b9-8c47-05cda8434f7a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в POSITION_NOM с несуществующим resource_type_id, action= ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pnId3}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>${#TestCase#start}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
									<value>${#TestCase#end}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#noneExistedResTypeId}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains ERROR"><con:configuration><token>ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия записи" id="47f3abec-30c8-42e7-8bf1-e66bdaaff66e"><con:settings/><con:config><script>import groovy.sql.Sql
import java.*
import java.text.SimpleDateFormat
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("pnId3")
getLastItem = ("SELECT * FROM POSITION_NOM  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		log.info("Запись в таблице  POSITION_NOM не найдена")
}
else {
	testRunner.fail("Запись в таблице POSITION_NOM найдена")
}


</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в POSITION_NOM с несуществующим resource_type_id, action= MODIFIED" id="19730dc8-26cf-410f-b70a-d763693d04f5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в POSITION_NOM с несуществующим resource_type_id, action= MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pnId1}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>${#TestCase#start2}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
								<value>${#TestCase#end}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#resTypeId3}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains ERROR"><con:configuration><token>ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия изменений записи" id="76c14a86-b833-4335-8d20-3212bff8de74"><con:settings/><con:config><script>import groovy.sql.Sql
import java.*
import java.text.SimpleDateFormat
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("pnId1")
getLastItem = ("SELECT * FROM POSITION_NOM  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице POSITION_NOM не найдена")
}
else {
	log.info("Запись в таблице  POSITION_NOM найдена")
	//log.info(lastItem)
	def req_title=testRunner.testCase.getPropertyValue("title")
	def req_start = testRunner.testCase.getPropertyValue("start")
	def req_end = testRunner.testCase.getPropertyValue("end")
	def req_resTypeId = testRunner.testCase.getPropertyValue("resTypeId1")
	def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID.toString()
	def db_start = lastItem[0]."START".toString()
	def db_end = lastItem[0]."END".toString()
	def db_title = lastItem[0].TITLE.toString()
	SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat format2 = new SimpleDateFormat("dd.MM.yyyy");
	Date startDate = format2.parse(req_start);
	//log.info("startDate "+ startDate)
	stringStartDate=format1.format(startDate)
	//log.info("stringStartDate "+ stringStartDate)
	Date endDate = format2.parse(req_end);
	//log.info("endtDate "+ endtDate)
	stringEndDate=format1.format(endDate)
	//log.info("stringEndDate "+ stringEndDate)
	assert  db_start.replace(" 00:00:00.0","") == stringStartDate
	assert  db_end.replace(" 00:00:00.0","") == stringEndDate
	assert  db_title ==req_title
	assert  db_resTypeId ==req_resTypeId
	log.info("Запись в таблице осталась в прежнем состоянии.")
}


</script></con:config></con:testStep><con:testStep type="request" name="Создание записи в POSITION_NOM с неподходящим по типу resource_type_id, action= ADDED" id="3381b64e-2183-47f2-9f0b-ce7cde61dbaa" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в POSITION_NOM с неподходящим по типу resource_type_id, action= ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pnId3}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>${#TestCase#start}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
									<value>${#TestCase#end}${#TestCase#time}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_TYPE_ID" field_id="" type="">
								<values>
									<value>${#TestCase#wrongResTypeId}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains ERROR"><con:configuration><token>ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия записи2" id="3110ad9c-0b8b-45e2-ace3-afbe5c5e32ef" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import java.*
import java.text.SimpleDateFormat
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("pnId3")
getLastItem = ("SELECT * FROM POSITION_NOM  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		log.info("Запись в таблице  POSITION_NOM не найдена")
}
else {
	testRunner.fail("Запись в таблице POSITION_NOM найдена")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="d4d1f874-724d-42f8-9c8c-70f0927a6076"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")


sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def deleteCreatedByTest(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName1)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	
	testRunner.testCase.testSuite.removeProperty( propertyName+"createdByTest" )
	testRunner.testCase.testSuite.removeProperty(propertyName)

}

deleteCreatedByTest("RESOURCE_TYPE", "resTypeId1")
deleteCreatedByTest("RESOURCE_TYPE", "resTypeId2")
deleteCreatedByTest("RESOURCE_TYPE", "archivedResTypeId")</script></con:config></con:testStep><con:properties><con:property><con:name>title</con:name><con:value>Тестовая номенклатура должностей</con:value></con:property><con:property><con:name>start</con:name><con:value>01.02.1999</con:value></con:property><con:property><con:name>end</con:name><con:value>10.01.2000</con:value></con:property><con:property><con:name>title2</con:name><con:value>Тестовая номенклатура должностей2</con:value></con:property><con:property><con:name>start2</con:name><con:value>01.01.2020</con:value></con:property><con:property><con:name>end2</con:name><con:value/></con:property><con:property><con:name>resTypeId1</con:name><con:value>158297691</con:value></con:property><con:property><con:name>resTypeId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>resTypeId2</con:name><con:value>-2</con:value></con:property><con:property><con:name>resTypeId2createdByTest</con:name><con:value>1</con:value></con:property><con:property><con:name>archivedResTypeId</con:name><con:value>158297690</con:value></con:property><con:property><con:name>archivedResTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>noneExistedResTypeId</con:name><con:value>158297752</con:value></con:property><con:property><con:name>time</con:name><con:value> 00:00:00</con:value></con:property><con:property><con:name>resKind</con:name><con:value>ДР</con:value></con:property><con:property><con:name>wrongResTypeId</con:name><con:value>156645371</con:value></con:property><con:property><con:name>wrongResTypeIdcreatedByTest</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="13076ab2-3a78-4009-a6f2-12771da8cb11" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PRODUCTION_CALENDAR" searchProperties="true"><con:settings><con:setting id="2a4dbc8e-e7d9-41da-87f1-20718a16a632fileName">PRODUCTION_CALENDAR</con:setting></con:settings><con:testStep type="request" name="Создание записи в PRODUCTION_CALENDAR" id="e4f487df-96a2-49b0-9325-ec84af291995"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в PRODUCTION_CALENDAR" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1230</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#pcId1}</value>
								</values>
							</attribute>
							<attribute name="archived" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="date" field_id="" type="">
								<values>
									<value>${#TestCase#date}</value>
								</values>
							</attribute>
							<attribute name="particularity" field_id="" type="">
								<values>
									<value>${#TestCase#particularity}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="efa40d25-912d-40bc-ae6f-6ff2370dff3d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1a987a06-5208-4251-818b-38ae5f9f407a" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи" id="18dc61e6-4366-44b7-b78a-d19c75942d62"><con:settings/><con:config><script>import groovy.sql.Sql
import java.*
import java.text.SimpleDateFormat
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("pcId1")
getLastItem = ("SELECT * FROM PRODUCTION_CALENDAR  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице PRODUCTION_CALENDAR не найдена")
}
else {
	log.info("Запись в таблице  PRODUCTION_CALENDAR найдена")
	//log.info(lastItem)
	def req_particularity=testRunner.testCase.getPropertyValue("particularity")
	def req_date = testRunner.testCase.getPropertyValue("date")
	def db_particularity = lastItem[0].PARTICULARITY.toString()
	def db_date = lastItem[0]."DATE".toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat format2 = new SimpleDateFormat("dd.MM.yyyy");
	Date date = format2.parse(req_date);
	//log.info("date "+ date)
	stringDate=format1.format(date)
	//log.info("stringDate "+ stringDate)
	assert  db_date.replace(" 00:00:00.0","") == stringDate
	assert db_archived == "0"
	assert  db_particularity ==req_particularity
	log.info("Запись в таблице созданна корректно.")
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>particularity</con:name><con:value>STATE_AS_WEDNESDAY</con:value></con:property><con:property><con:name>date</con:name><con:value>28.02.2021</con:value></con:property><con:property><con:name>particularity2</con:name><con:value>HOLIDAY</con:value></con:property><con:property><con:name>date2</con:name><con:value>27.02.2021</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="03d403d1-f3a8-457b-ab11-f1ecbd27510b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RESOURCE_TYPE" searchProperties="true"><con:settings><con:setting id="02e58bcb-1d0b-4e6d-9e6e-3162ec5c6be6fileName">RESOURCE_TYPE</con:setting></con:settings><con:testStep type="request" name="Создание записи в RESOURCE_TYPE, action = ADDED" id="54657b3f-a736-4973-97c6-b6397b3e0f8a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в RESOURCE_TYPE, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">2504</category>
						</categories>
						<data action="ADDED">
							<attribute name="GLOBAL_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_KIND" field_id="" type="">
								<values>
									<value>${#TestCase#resSarKind}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="nonExistedAttribute" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="IS_DELETED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="OK Response"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи" id="263456a0-723c-4bdc-9d45-ffb285491d60"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("resTypeId1")
getLastItem = ("SELECT * FROM RESOURCE_TYPE WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице RESOURCE_TYPE не найдена")
}
else {
	log.info("Запись в таблице  RESOURCE_TYPE найдена")
	//log.info(lastItem)
	def req_resKind=testRunner.testCase.getPropertyValue("resSarKind")
	def req_title = testRunner.testCase.getPropertyValue("title")
	def db_res_kind = lastItem[0].RESOURCE_KIND.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_res_kind ==req_resKind
	assert db_title ==req_title
	log.info("Запись в таблице созданна корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Создание существующей записи в RESOURCE_TYPE, action = ADDED" id="449a8bf4-ad7b-4d26-bfbe-4f83257dba6a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание существующей записи в RESOURCE_TYPE, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">2504</category>
						</categories>
						<data action="ADDED">
							<attribute name="GLOBAL_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_KIND" field_id="" type="">
								<values>
									<value>${#TestCase#resSarKind}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="nonExistedAttribute" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="IS_DELETED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="ERROR"><con:configuration><token>ERROR: Элемент с таким ПК уже существует</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в RESOURCE_TYPE, action = MODIFIED" id="52114c22-5838-46a4-9412-e7c82949e92c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в RESOURCE_TYPE, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">2504</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="GLOBAL_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId2}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_KIND" field_id="" type="">
								<values>
									<value>${#TestCase#resArKind}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="nonExistedAttribute" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="IS_DELETED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId2}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="OK Response"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи2" id="54b50284-c01c-4a1b-b105-3c59d59b1b4d"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("resTypeId2")
getLastItem = ("SELECT * FROM RESOURCE_TYPE WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице RESOURCE_TYPE не найдена")
}
else {
	log.info("Запись в таблице  RESOURCE_TYPE найдена")
	//log.info(lastItem)
	def req_resKind=testRunner.testCase.getPropertyValue("resArKind")
	def req_title = testRunner.testCase.getPropertyValue("title")
	def db_res_kind = lastItem[0].RESOURCE_KIND.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_res_kind ==req_resKind
	assert db_title ==req_title
	log.info("Запись в таблице созданна корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в RESOURCE_TYPE, action = MODIFIED" id="31a10445-393f-4102-a388-20ec6cbaab76"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в RESOURCE_TYPE, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">2504</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="GLOBAL_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_KIND" field_id="" type="">
								<values>
									<value>${#TestCase#resArKind}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="nonExistedAttribute" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="IS_DELETED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="OK Response"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи" id="672e198b-cb86-47e7-8771-d1fb6fbbd8eb"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("resTypeId1")
getLastItem = ("SELECT * FROM RESOURCE_TYPE WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице RESOURCE_TYPE не найдена")
}
else {
	log.info("Запись в таблице  RESOURCE_TYPE найдена")
	//log.info(lastItem)
	def req_resKind=testRunner.testCase.getPropertyValue("resArKind")
	def req_title = testRunner.testCase.getPropertyValue("title2")
	def db_res_kind = lastItem[0].RESOURCE_KIND.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "1"
	assert db_res_kind ==req_resKind
	assert db_title ==req_title
	log.info("Запись в таблице изменена корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Изменение архивности записи в RESOURCE_TYPE, action = MODIFIED" id="e62ca12f-43ca-473d-b7da-9f4ec3b312c9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение архивности записи в RESOURCE_TYPE, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">2504</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="GLOBAL_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_KIND" field_id="" type="">
								<values>
									<value>${#TestCase#resArKind}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="nonExistedAttribute" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="IS_DELETED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="OK Response"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи2" id="5409f0e9-8d34-4419-a915-dff563838a63"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.testSuite.getPropertyValue("resTypeId1")
getLastItem = ("SELECT * FROM RESOURCE_TYPE WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице RESOURCE_TYPE не найдена")
}
else {
	log.info("Запись в таблице  RESOURCE_TYPE найдена")
	//log.info(lastItem)
	def req_resKind=testRunner.testCase.getPropertyValue("resArKind")
	def req_title = testRunner.testCase.getPropertyValue("title2")
	def db_res_kind = lastItem[0].RESOURCE_KIND.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_res_kind ==req_resKind
	assert db_title ==req_title
	log.info("Запись в таблице изменена корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Архивирование несуществующей записи в RESOURCE_TYPE, action = DELETED" id="18097638-ceed-42ad-af01-aca79085f7e5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Архивирование несуществующей записи в RESOURCE_TYPE, action = DELETED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">2504</category>
						</categories>
						<data action="DELETED">
							<attribute name="GLOBAL_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId3}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_KIND" field_id="" type="">
								<values>
									<value>${#TestCase#resArKind}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="nonExistedAttribute" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="IS_DELETED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId3}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="OK Response"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в RESOURCE_TYPE с несуществующим видом ресурса, action = ADDED" id="a470907a-43ec-4ca2-a2e8-593d38246775"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в RESOURCE_TYPE с несуществующим видом ресурса, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">2504</category>
						</categories>
						<data action="ADDED">
							<attribute name="GLOBAL_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId3}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_KIND" field_id="" type="">
								<values>
									<value>${#TestCase#nonExistedResKind}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="nonExistedAttribute" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="IS_DELETED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId3}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="ERROR"><con:configuration><token>ERROR: В наборе данных передано необрабатываемое значение атрибута RESOURCE_KIND</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Изменение записи в RESOURCE_TYPE с несуществующим видом ресурса, action = MODIFIED" id="a30de15c-7a48-4db1-abcc-3cc7d4fcf36a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в RESOURCE_TYPE с несуществующим видом ресурса, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">2504</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="GLOBAL_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId1}</value>
								</values>
							</attribute>
							<attribute name="RESOURCE_KIND" field_id="" type="">
								<values>
									<value>${#TestCase#nonExistedResKind}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="nonExistedAttribute" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="IS_DELETED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestSuite#resTypeId3}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="ERROR"><con:configuration><token>ERROR: В наборе данных передано необрабатываемое значение атрибута RESOURCE_KIND</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>title</con:name><con:value>Тестовый тип ресурса</con:value></con:property><con:property><con:name>resSarKind</con:name><con:value>SPECIAL_AVAILABLE_RESOURCE</con:value></con:property><con:property><con:name>resArKind</con:name><con:value>AVAILABLE_RESOURCE</con:value></con:property><con:property><con:name>nonExistedResKind</con:name><con:value>AVAILABLE_RESOURCE2</con:value></con:property><con:property><con:name>title2</con:name><con:value>Тестовый тип ресурса2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="299fed52-c9ac-44fb-b5c4-8bd11a087d1f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TREATMENT" searchProperties="true"><con:settings><con:setting id="430cf6e4-95cd-450a-96d7-484e7c179688fileName">TREATMENT</con:setting></con:settings><con:testStep type="groovy" name="Подбор id и treatment_category_id" id="15af5dad-433b-4b68-86e8-cd8cbe7daba5"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
 n=testRunner.testCase.getPropertyValue("n")
 count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getIdFromDBTable(String tableName, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max(ID)+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" propertyName "+propertyName)
} 

for (int i =1; i &lt;=count;i++){
	getIdFromDBTable("TREATMENT", "tId"+i, n+(i-1))
}

getIdFromDBTable("TREATMENT_CATEGORY", "nonExistedTcId")

getTreatmentCategry=("SELECT id FROM TREATMENT_CATEGORY WHERE ARCHIVED=0")
getTCid=sql.rows(getTreatmentCategry)
countTCid=sql(getTreatmentCategry)
for (int i=1; i&lt;=2; i++){
	if(countTCid>= i){
		testRunner.testCase.setPropertyValue("existedTcId"+i, getTCid[i-1].ID.toString())
		testRunner.testCase.setPropertyValue("existedTcIdcreatedByTest"+i, "0")
	}
	else {
		sql.execute("insert into TREATMENT_CATEGORY (id, code, title, archived) values (-"+i+",'CODE', 'Категория ММдля проверки пушей по каталогу tretment',0) ")
		testRunner.testCase.setPropertyValue("existedTcId"+i, "CODE")
		testRunner.testCase.setPropertyValue("existedTcIdcreatedByTest"+i, "1")
	}
}

int count2=count -1
int value =n.toInteger()+count2
//log.info("n":value.toString())
testRunner.testCase.setPropertyValue("n",value.toString())</script></con:config></con:testStep><con:testStep type="request" name="Создание записи в TREATMENT, action = ADDED" id="b45cd5a7-d809-4697-a7d3-7cf25f2d790b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в TREATMENT, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>NSI2</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:ChangeElement>\r
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1191</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tId1}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="TREATMENT_CATEGORY_ID" field_id="" type="">
								<values>
									<value>${#TestCase#existedTcId1}</value>
								</values>
							</attribute>
							<attribute name="DEFAULT_DURATION" field_id="" type="">
								<values>
									<value>${#TestCase#default_duration}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>\r
      </typ:ChangeElement>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="9452048c-9642-4d31-b9ad-b998eaa777fb" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="24765d63-1ae9-4589-ba5b-483898bcc083" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи" id="7b3bdec2-b7a3-4e1a-b0fe-d3ddcb6f626f"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tId1")
getLastItem = ("SELECT * FROM TREATMENT  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице TREATMENT не найдена")
}
else {
	log.info("Запись в таблице  TREATMENT найдена")
	//log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code")
	def req_title = testRunner.testCase.getPropertyValue("title")
	def req_default_duration = testRunner.testCase.getPropertyValue("default_duration")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_default_duration = lastItem[0].DEFAULT_DURATION.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_code ==req_code
	assert db_title ==req_title
	assert db_default_duration ==req_default_duration
	log.info("Запись в таблице созданна корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Создание существующей записи в TREATMENT, action = ADDED" id="ad6bc425-3ade-4a96-a68f-dc4a347d554d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание существующей записи в TREATMENT, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>NSI2</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:ChangeElement>\r
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1191</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tId1}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="TREATMENT_CATEGORY_ID" field_id="" type="">
								<values>
									<value>${#TestCase#existedTcId1}</value>
								</values>
							</attribute>
							<attribute name="DEFAULT_DURATION" field_id="" type="">
								<values>
									<value>${#TestCase#default_duration}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>\r
      </typ:ChangeElement>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="9452048c-9642-4d31-b9ad-b998eaa777fb" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="24765d63-1ae9-4589-ba5b-483898bcc083" name="Contains ERROR"><con:configuration><token>ERROR: Элемент с таким ПК уже существует</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в TREATMENT, action = MODIFIED" id="8c145b9d-866a-4a7a-b99b-f39cdeb3c318"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в TREATMENT, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>NSI2</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:ChangeElement>\r
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1191</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tId2}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
							<attribute name="TREATMENT_CATEGORY_ID" field_id="" type="">
								<values>
									<value>${#TestCase#existedTcId1}</value>
								</values>
							</attribute>
							<attribute name="DEFAULT_DURATION" field_id="" type="">
								<values>
									<value>${#TestCase#default_duration}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>\r
      </typ:ChangeElement>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="9452048c-9642-4d31-b9ad-b998eaa777fb" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="24765d63-1ae9-4589-ba5b-483898bcc083" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи2" id="bac9ad5b-d368-4788-8917-f988377e9fde"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tId2")
getLastItem = ("SELECT * FROM TREATMENT  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице TREATMENT не найдена")
}
else {
	log.info("Запись в таблице  TREATMENT найдена")
	//log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code")
	def req_title = testRunner.testCase.getPropertyValue("title")
	def req_default_duration = testRunner.testCase.getPropertyValue("default_duration")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_default_duration = lastItem[0].DEFAULT_DURATION.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_code ==req_code
	assert db_title ==req_title
	assert db_default_duration ==req_default_duration
	log.info("Запись в таблице созданна корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в TREATMENT, action = MODIFIED" id="169b3663-1bb5-443e-b9a0-3bbac014dbdc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в TREATMENT, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>NSI2</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:ChangeElement>\r
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1191</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tId1}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code2}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
							<attribute name="TREATMENT_CATEGORY_ID" field_id="" type="">
								<values>
									<value>${#TestCase#existedTcId2}</value>
								</values>
							</attribute>
							<attribute name="DEFAULT_DURATION" field_id="" type="">
								<values>
									<value>${#TestCase#default_duration2}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>\r
      </typ:ChangeElement>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="9452048c-9642-4d31-b9ad-b998eaa777fb" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="24765d63-1ae9-4589-ba5b-483898bcc083" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи" id="b9884a8b-ef36-48b4-86e3-ca96f95752de"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tId1")
getLastItem = ("SELECT * FROM TREATMENT  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице TREATMENT не найдена")
}
else {
	log.info("Запись в таблице  TREATMENT найдена")
	//log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code2")
	def req_title = testRunner.testCase.getPropertyValue("title2")
	def req_default_duration = testRunner.testCase.getPropertyValue("default_duration2")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_default_duration = lastItem[0].DEFAULT_DURATION.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "1"
	assert db_code ==req_code
	assert db_title ==req_title
	assert db_default_duration ==req_default_duration
	log.info("Запись в таблице изменена корректно.")
}

</script></con:config></con:testStep><con:testStep type="request" name="Архивирование несуществующей записи в TREATMENT, action = DELETED" id="ba44f844-1878-45ae-8d02-965882cc856a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Архивирование несуществующей записи в TREATMENT, action = DELETED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>NSI2</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:ChangeElement>\r
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1191</category>
					</categories>
						<data action="DELETED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tId3}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code2}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
							<attribute name="TREATMENT_CATEGORY_ID" field_id="" type="">
								<values>
									<value>${#TestSuite#existedTcId2}</value>
								</values>
							</attribute>
							<attribute name="DEFAULT_DURATION" field_id="" type="">
								<values>
									<value>${#TestCase#default_duration2}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>\r
      </typ:ChangeElement>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="9452048c-9642-4d31-b9ad-b998eaa777fb" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="24765d63-1ae9-4589-ba5b-483898bcc083" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия записи" id="c2cc6109-ce79-4c32-9c1d-d42d59c7761a"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tId3")
getLastItem = ("SELECT * FROM TREATMENT  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)> 0){
		testRunner.fail("Запись в таблице TREATMENT создана")
}
else {
	log.info("Запись в таблице  TREATMENT_CATEGORY не создана")
	//log.info(lastItem)
}</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в TREATMENT, вывод из архива, action = MODIFIED" id="70c85e32-67a6-4ec9-9a5c-fd21dee439fa"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в TREATMENT, вывод из архива, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>NSI2</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:ChangeElement>\r
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1191</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tId1}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code2}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
							<attribute name="TREATMENT_CATEGORY_ID" field_id="" type="">
								<values>
									<value>${#TestCase#existedTcId2}</value>
								</values>
							</attribute>
							<attribute name="DEFAULT_DURATION" field_id="" type="">
								<values>
									<value>${#TestCase#default_duration2}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>\r
      </typ:ChangeElement>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="9452048c-9642-4d31-b9ad-b998eaa777fb" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="24765d63-1ae9-4589-ba5b-483898bcc083" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи2" id="ba40f003-c242-40e7-b6a8-67b4befe7a62"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tId1")
getLastItem = ("SELECT * FROM TREATMENT  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице TREATMENT не найдена")
}
else {
	log.info("Запись в таблице  TREATMENT найдена")
	//log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code2")
	def req_title = testRunner.testCase.getPropertyValue("title2")
	def req_default_duration = testRunner.testCase.getPropertyValue("default_duration2")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_default_duration = lastItem[0].DEFAULT_DURATION.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_code ==req_code
	assert db_title ==req_title
	assert db_default_duration ==req_default_duration
	log.info("Запись в таблице изменена корректно.")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Очистка созданных записей" id="df3ff297-6976-4fb1-a866-5404040f8994"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
String n=testRunner.testCase.getPropertyValue("n") 

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def deleteCreatedByTest(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.testSuite.removeProperty(propertyName)
	testRunner.testCase.testSuite.removeProperty(propertyName+"createdByTest")

}


for (int i =1; i &lt;=n;i++){
	id=testRunner.testCase.getPropertyValue("tId"+i) 
	sql.execute("DELETE FROM TREATMENT WHERE ID="+id)
}
for (int i=1; i&lt;=2; i++){
	deleteCreatedByTest("TREATMENT_CATEGORY","existedTcId"+i)
}</script></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>TEST_TREATMENT</con:value></con:property><con:property><con:name>title</con:name><con:value>Тестовая Медицинская манипуляция</con:value></con:property><con:property><con:name>code2</con:name><con:value>TEST_TREATMENT1</con:value></con:property><con:property><con:name>title2</con:name><con:value>Тестовая Медицинская манипуляция1</con:value></con:property><con:property><con:name>default_duration</con:name><con:value>1</con:value></con:property><con:property><con:name>default_duration2</con:name><con:value>2</con:value></con:property><con:property><con:name>n</con:name><con:value>8</con:value></con:property><con:property><con:name>tId1</con:name><con:value>1283109433</con:value></con:property><con:property><con:name>tId2</con:name><con:value>1283109434</con:value></con:property><con:property><con:name>tId3</con:name><con:value>1283109435</con:value></con:property><con:property><con:name>nonExistedTcId</con:name><con:value>141228526</con:value></con:property><con:property><con:name>existedTcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>existedTcIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTcId2</con:name><con:value>128627842</con:value></con:property><con:property><con:name>existedTcIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tId4</con:name><con:value>1283109406</con:value></con:property><con:property><con:name>tId5</con:name><con:value>1283109407</con:value></con:property><con:property><con:name>tId6</con:name><con:value>1283109408</con:value></con:property><con:property><con:name>tId7</con:name><con:value>1283109409</con:value></con:property><con:property><con:name>tId8</con:name><con:value>1283109410</con:value></con:property><con:property><con:name>tId9</con:name><con:value>1283109411</con:value></con:property><con:property><con:name>tId10</con:name><con:value>1283109412</con:value></con:property><con:property><con:name>tId11</con:name><con:value>1283109683</con:value></con:property><con:property><con:name>tId12</con:name><con:value>1283109684</con:value></con:property><con:property><con:name>tId13</con:name><con:value>1283109685</con:value></con:property><con:property><con:name>tId14</con:name><con:value>1283109686</con:value></con:property><con:property><con:name>tId15</con:name><con:value>1283109687</con:value></con:property><con:property><con:name>tId16</con:name><con:value>1283109688</con:value></con:property><con:property><con:name>tId17</con:name><con:value>1283109689</con:value></con:property><con:property><con:name>tId18</con:name><con:value>1283109690</con:value></con:property><con:property><con:name>tId19</con:name><con:value>1283109691</con:value></con:property><con:property><con:name>tId20</con:name><con:value>1283109692</con:value></con:property><con:property><con:name>tId21</con:name><con:value>1283109693</con:value></con:property><con:property><con:name>tId22</con:name><con:value>1283109694</con:value></con:property><con:property><con:name>tId23</con:name><con:value>1283109695</con:value></con:property><con:property><con:name>tId24</con:name><con:value>1283109696</con:value></con:property><con:property><con:name>tId25</con:name><con:value>1283109697</con:value></con:property><con:property><con:name>tId26</con:name><con:value>1283109698</con:value></con:property><con:property><con:name>tId27</con:name><con:value>1283109699</con:value></con:property><con:property><con:name>tId28</con:name><con:value>1283109700</con:value></con:property><con:property><con:name>tId29</con:name><con:value>1283109701</con:value></con:property><con:property><con:name>tId30</con:name><con:value>1283109702</con:value></con:property><con:property><con:name>tId31</con:name><con:value>1283109703</con:value></con:property><con:property><con:name>tId32</con:name><con:value>1283109704</con:value></con:property><con:property><con:name>tId33</con:name><con:value>1283109705</con:value></con:property><con:property><con:name>tId34</con:name><con:value>1283109706</con:value></con:property><con:property><con:name>tId35</con:name><con:value>1283109707</con:value></con:property><con:property><con:name>tId36</con:name><con:value>1283109708</con:value></con:property><con:property><con:name>tId37</con:name><con:value>1283109709</con:value></con:property><con:property><con:name>tId38</con:name><con:value>1283109710</con:value></con:property><con:property><con:name>tId39</con:name><con:value>1283109711</con:value></con:property><con:property><con:name>tId40</con:name><con:value>1283109712</con:value></con:property><con:property><con:name>tId41</con:name><con:value>1283109713</con:value></con:property><con:property><con:name>tId42</con:name><con:value>1283109714</con:value></con:property><con:property><con:name>tId43</con:name><con:value>1283109715</con:value></con:property><con:property><con:name>tId44</con:name><con:value>1283109716</con:value></con:property><con:property><con:name>tId45</con:name><con:value>1283109717</con:value></con:property><con:property><con:name>tId46</con:name><con:value>1283109718</con:value></con:property><con:property><con:name>tId47</con:name><con:value>1283109719</con:value></con:property><con:property><con:name>tId48</con:name><con:value>1283109720</con:value></con:property><con:property><con:name>tId49</con:name><con:value>1283109721</con:value></con:property><con:property><con:name>tId50</con:name><con:value>1283109722</con:value></con:property><con:property><con:name>tId51</con:name><con:value>1283109723</con:value></con:property><con:property><con:name>count</con:name><con:value>3</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="d5874a6c-a442-4e24-b752-27c7187ec03b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TREATMENT_CATEGORY" searchProperties="true"><con:settings><con:setting id="f6f7b483-b884-4fd3-b6e8-22a6c3d37203fileName">TREATMENT_CATEGORY</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Подбор Id" id="bd78b45b-06bd-4bef-be3d-ed04772871c6"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n").toInteger()

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

String getIdFromDBTable(String tableName, String propertyName, int count="1") { 
	def query=sql.rows("SELECT max(ID)+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" propertyName "+propertyName)
} 

for (int i =1; i &lt;4;i++){
	getIdFromDBTable("TREATMENT_CATEGORY", "tcId"+i, n+i)
	
}
n2=n+3
testRunner.testCase.setPropertyValue("n", n2.toString())</script></con:config></con:testStep><con:testStep type="request" name="Создание записи в TREATMENT_CATEGORY, action = ADDED" id="9d95aad2-d721-4471-a0ed-8095f0cc33e8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в TREATMENT_CATEGORY, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1222</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tcId1}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="OK Response"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи" id="9135c2bc-572d-4c44-b85f-4608ce830e7e"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tcId1")
getLastItem = ("SELECT * FROM TREATMENT_CATEGORY  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице TREATMENT_CATEGORY не найдена")
}
else {
	log.info("Запись в таблице  TREATMENT_CATEGORY найдена")
	log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code")
	def req_title = testRunner.testCase.getPropertyValue("title")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_code ==req_code
	assert db_title ==db_title
	log.info("Запись в таблице созданна корректно.")
}</script></con:config></con:testStep><con:testStep type="request" name="Создание существующей записи в TREATMENT_CATEGORY, action = ADDED" id="c8da8b46-15e7-4de4-9edd-bff219c7645c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание существующей записи в TREATMENT_CATEGORY, action = ADDED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1222</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tcId1}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="ERROR Response"><con:configuration><token>ERROR: Элемент с таким ПК уже существует</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в TREATMENT_CATEGORY, action = MODIFIED" id="a0580720-476d-4811-9916-3ed54b66471b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в TREATMENT_CATEGORY, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1222</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tcId2}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="dd56f558-9fd4-4b26-bbe7-9bc7101c9d42" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="e5458444-333f-44fb-9a6e-7276a65c686a" name="OK Response"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи2" id="4d29e8cf-2335-4fcd-883c-83da2241445c"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tcId2")
getLastItem = ("SELECT * FROM TREATMENT_CATEGORY  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице TREATMENT_CATEGORY не найдена")
}
else {
	log.info("Запись в таблице  TREATMENT_CATEGORY найдена")
	log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code")
	def req_title = testRunner.testCase.getPropertyValue("title")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_code ==req_code
	assert db_title ==db_title
	log.info("Запись в таблице созданна корректно.")
}</script></con:config></con:testStep><con:testStep type="request" name="Изменение записи в TREATMENT_CATEGORY, action = MODIFIED" id="804c12f6-37cf-421d-af15-cab1b48fa2b3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в TREATMENT_CATEGORY, action = MODIFIED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1222</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tcId1}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code2}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title2}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="Simple Contains" id="42872993-1c98-4efb-9d68-6de9dd622a94" name="Contains"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="c01d436f-f8a2-45c4-91d3-4626a670d2de" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи" id="b8ecdc56-494b-4045-8d19-ed44c3c85d28"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tcId1")
getLastItem = ("SELECT * FROM TREATMENT_CATEGORY  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице TREATMENT_CATEGORY не найдена")
}
else {
	log.info("Запись в таблице  TREATMENT_CATEGORY найдена")
	log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code2")
	def req_title = testRunner.testCase.getPropertyValue("title2")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "0"
	assert db_code ==req_code
	assert db_title ==db_title
	log.info("Запись в таблице изменена корректно.")
}</script></con:config></con:testStep><con:testStep type="request" name="Архивирование записи в TREATMENT_CATEGORY, action = DELETED" id="0c3cf8fc-6832-4cbe-b074-40f759939db5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Архивирование записи в TREATMENT_CATEGORY, action = DELETED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1222</category>
						</categories>
						<data action="DELETED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tcId1}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="Simple Contains" id="ab44ba5c-dbff-4cc1-8ec9-71d9da58fa80" name="Contains"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка архивирования записи" id="adaa879a-f63e-4012-961e-667e3758feca"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tcId1")
getLastItem = ("SELECT * FROM TREATMENT_CATEGORY  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице TREATMENT_CATEGORY не найдена")
}
else {
	log.info("Запись в таблице  TREATMENT_CATEGORY найдена")
	log.info(lastItem)
	def req_code=testRunner.testCase.getPropertyValue("code2")
	def req_title = testRunner.testCase.getPropertyValue("title2")
	def db_code = lastItem[0].CODE.toString()
	def db_title = lastItem[0].TITLE.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert db_archived == "1"
	assert db_code ==req_code
	assert db_title ==db_title
	log.info("Запись в таблице архивирована корректно.")
}</script></con:config></con:testStep><con:testStep type="request" name="Архивирование несуществующей записи в TREATMENT_CATEGORY, action = DELETED" id="5c9cd6b2-7557-49cf-9c53-3789a3a9756b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Архивирование несуществующей записи в TREATMENT_CATEGORY, action = DELETED" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1222</category>
						</categories>
						<data action="DELETED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tcId3}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>${#TestCase#code}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>${#TestCase#title}</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:assertion type="SOAP Fault Assertion" id="b7e183b5-ad51-439f-8947-1d628cc16a95" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="8ca72716-0bd5-4ba7-a3ff-ec124a457660" name="Contains OK"><con:configuration><token>OK</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка отсутствия записи" id="f49b2f1b-fec0-429c-970a-c8ce4e8779a6"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("tcId3")
getLastItem = ("SELECT * FROM TREATMENT_CATEGORY  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)> 0){
		testRunner.fail("Запись в таблице TREATMENT_CATEGORY создана")
}
else {
	log.info("Запись в таблице  TREATMENT_CATEGORY не создана")
	//log.info(lastItem)
}</script></con:config></con:testStep><con:testStep type="groovy" name="Очистка созданных записей" id="6be35980-9bf8-4d7e-b6cd-d9417474c03a"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
String n=testRunner.testCase.getPropertyValue("n") 

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

for (int i=1; i&lt;=3; i++){
	id=testRunner.testCase.getPropertyValue("tсId"+i) 
	sql.execute("DELETE FROM TREATMENT_CATEGORY WHERE ID="+id)
}</script></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>TEST_TREATMENT_CATEGORY</con:value></con:property><con:property><con:name>title</con:name><con:value>Тестовая Категория Медицинских манипуляций</con:value></con:property><con:property><con:name>code2</con:name><con:value>TEST_TREATMENT_CATEGORY2</con:value></con:property><con:property><con:name>title2</con:name><con:value>Тестовая Категория Медицинских манипуляций2</con:value></con:property><con:property><con:name>default_duration</con:name><con:value>1</con:value></con:property><con:property><con:name>default_duration2</con:name><con:value>2</con:value></con:property><con:property><con:name>tcId3</con:name><con:value>141228526</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>141228524</con:value></con:property><con:property><con:name>tcId2</con:name><con:value>141228525</con:value></con:property><con:property><con:name>n</con:name><con:value>9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="42e3f225-56b5-4e31-9af0-2000921c5a4a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка пушей от НСИ2 о создание/изменение записей" searchProperties="true"><con:settings><con:setting id="54e1027d-b9d2-400f-a125-a72c05e9d7cffileName">Обработка-пушей-от-НСИ2-о-создание%2Fизменение-записей</con:setting></con:settings><con:testStep type="request" name="Создание записи в TREATMENT_ROOM_KIND" id="ddfc4472-0d38-464a-9191-c5ba65e253ba"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в TREATMENT_ROOM_KIND" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1343</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#trkId}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>0</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>TEST_TREATMENT_ROOM_KIND</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>Тестовый Вид специализированного кабинета</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Изменение записи в TREATMENT_ROOM_KIND" id="6bd1f59c-b8aa-4114-bf4a-07c39dbb0054"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в TREATMENT_ROOM_KIND" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1343</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#trkId}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>TEST_TREATMENT_ROOM_KIND1</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>Тестовый Вид специализированного кабинета1</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Изменение записи в TREATMENT" id="80df2b46-43cb-472a-b84c-4b977a8944f9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в TREATMENT" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1191</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#tId}</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="" type="">
								<values>
									<value>TEST_TREATMENT1</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="" type="">
								<values>
									<value>Тестовая Медицинская манипуляция1</value>
								</values>
							</attribute>
							<attribute name="TREATMENT_CATEGORY_ID" field_id="" type="">
								<values>
									<value>${#TestCase#tcId2}</value>
								</values>
							</attribute>
							<attribute name="DEFAULT_DURATION" field_id="" type="">
								<values>
									<value>2</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Изменение записи в PRODUCTION_CALENDAR" id="b24476f1-8d67-484c-a33e-aa1bb4c85a3b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в PRODUCTION_CALENDAR" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1230</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#pcId}</value>
								</values>
							</attribute>
							<attribute name="archived" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="date" field_id="" type="">
								<values>
									<value>28.02.2022</value>
								</values>
							</attribute>
							<attribute name="particularity" field_id="" type="">
								<values>
									<value>HOLIDAY</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в DEPARTMENT_NOM" id="cc7f57cc-9bf0-4142-b4dd-efb8480c321c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в DEPARTMENT_NOM" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1132</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#dnId}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>Тестовая Номенклатура подразделений</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>30.10.1900</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
									<value>01.01.2020</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Изменение записи в DEPARTMENT_NOM" id="7ab0f8df-fe14-49d6-a5b2-91836cd4b613"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в DEPARTMENT_NOM" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1132</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#dnId}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>Тестовая Номенклатура подразделений1</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>31.10.1900</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
									<value>10.01.2020</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Создание записи в POSITION_NOM" id="3f9a159d-a8a0-43ab-aa82-9771ad9eae7f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Создание записи в POSITION_NOM" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="ADDED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#pnId}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>Тестовая Номенклатура должностей</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>30.10.1900 00:00:00</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
									<value>01.02.2020 00:00:00</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Изменение записи в POSITION_NOM" id="90e4039c-ed5c-4ac0-beb6-45d297e4e858"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в POSITION_NOM" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1129</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#pnId}</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>Тестовая Номенклатура должностей1</value>
								</values>
							</attribute>
							<attribute name="START" field_id="" type="">
								<values>
									<value>31.10.1900 00:00:00</value>
								</values>
							</attribute>
							<attribute name="END" field_id="" type="">
								<values>
									<value>02.02.2020 00:00:00</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Изменение записи в AGE_GROUP" id="885f4102-e7f5-4dd0-93c7-ff01a63865bd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>getSoap</con:interface><con:operation>get</con:operation><con:request name="Изменение записи в AGE_GROUP" id="44dac4b0-a98f-4280-9770-7a96b11e8829"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#PushWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pushaccepterProduct/pushaccepterService/v1/types/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>NSI2</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <typ:ChangeElement>
         <typ:in><![CDATA[<package xmlns:ns2="http://ehd.mos.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" count="1" id="10000437">
					<catalog name="">
						<categories>
							<category idHier="" nameHier="">1163</category>
						</categories>
						<data action="MODIFIED">
							<attribute name="global_id" field_id="" type="">
								<values>
									<value>${#TestCase#agId}</value>
								</values>
							</attribute>
							<attribute name="CODE" field_id="4303" type="">
								<values>
									<value>AGE_GROUP_CODE1</value>
								</values>
							</attribute>
							<attribute name="TITLE" field_id="4303" type="">
								<values>
									<value>Тестовая Возрастная группа1</value>
								</values>
							</attribute>
							<attribute name="ARCHIVED" field_id="4303" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="FROM" field_id="" type="">
								<values>
									<value>1</value>
								</values>
							</attribute>
							<attribute name="TO" field_id="" type="">
								<values>
									<value>310</value>
								</values>
							</attribute>
						</data>
					</catalog>
				</package>]]]]>><![CDATA[</typ:in>
      </typ:ChangeElement>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a462e50b-6ca5-433b-84c0-35c0c680f8fd"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных сущностей" id="f67d3548-64c1-45f5-ad35-feac2ac7772f" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def trkId= testRunner.testCase.getPropertyValue("trkId")
def tcId= testRunner.testCase.getPropertyValue("tcId")
def tId= testRunner.testCase.getPropertyValue("tId")
def sId= testRunner.testCase.getPropertyValue("sId")
def dnId= testRunner.testCase.getPropertyValue("dnId")
def epId= testRunner.testCase.getPropertyValue("epId")
def agId= testRunner.testCase.getPropertyValue("agId")
def pcId= testRunner.testCase.getPropertyValue("pcId")
def pnId= testRunner.testCase.getPropertyValue("pnId")


 sql.execute("DELETE FROM TREATMENT_ROOM_KIND WHERE ID IN ("+trkId+")")
 sql.execute("DELETE FROM TREATMENT_CATEGORY  WHERE ID IN ("+tcId+")")
  sql.execute("DELETE FROM TREATMENT  WHERE ID IN ("+tId+")")
 sql.execute("DELETE FROM SPECIALIZATION  WHERE ID IN ("+sId+")")
  sql.execute("DELETE FROM DEPARTMENT_NOM   WHERE ID IN ("+dnId+")")
 sql.execute("DELETE FROM EQUIPMENT_PROFILE  WHERE ID IN ("+epId+")")
  sql.execute("DELETE FROM AGE_GROUP  WHERE ID IN ("+agId+")")
 sql.execute("DELETE FROM  PRODUCTION_CALENDAR  WHERE ID IN ("+pcId+")")
  sql.execute("DELETE FROM POSITION_NOM  WHERE ID IN ("+pnId+")")
 
 </script></con:config></con:testStep><con:properties><con:property><con:name>trkId</con:name><con:value>134692986</con:value></con:property><con:property><con:name>tcId</con:name><con:value>141228460</con:value></con:property><con:property><con:name>tId</con:name><con:value>141525723</con:value></con:property><con:property><con:name>sId</con:name><con:value>125676868</con:value></con:property><con:property><con:name>dnId</con:name><con:value>125694290</con:value></con:property><con:property><con:name>epId</con:name><con:value>132</con:value></con:property><con:property><con:name>agId</con:name><con:value>127631268</con:value></con:property><con:property><con:name>pcId</con:name><con:value>53</con:value></con:property><con:property><con:name>pnId</con:name><con:value>1093</con:value></con:property><con:property><con:name>tcId2</con:name><con:value>141228451</con:value></con:property><con:property><con:name>n</con:name><con:value>10</con:value></con:property><con:property><con:name>tсId</con:name><con:value>141228456</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="07534c76-0a9f-49ff-90c9-41f79cc4753f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Подбор ID" searchProperties="true"><con:settings><con:setting id="ebe5e50a-8d50-4c17-bc1c-01ede43ca34cfileName">Подбор-ID</con:setting></con:settings><con:testStep type="groovy" name="Подбор идентификаторов" id="4fab489d-9a85-4fe0-8f89-c0538196a733"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
String n=testRunner.testCase.getPropertyValue("n") 

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

String getIdFromDBTable(String tableName, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max(ID)+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.testSuite.setPropertyValue(propertyName, id)
	log.info(" propertyName "+propertyName)
} 

for (int i =1; i &lt;4;i++){
	getIdFromDBTable("TREATMENT_CATEGORY", "tcId"+i, n+(i-1))
	getIdFromDBTable("TREATMENT", "tId"+i, n+(i-1))
	getIdFromDBTable("SPECIALIZATION", "sId"+i, n+(i-1))
	getIdFromDBTable("DEPARTMENT_NOM", "dnId"+i, n+(i-1))
	getIdFromDBTable("EQUIPMENT_PROFILE", "epId"+i, n+(i-1))
	getIdFromDBTable("AGE_GROUP", "agId"+i, n+(i-1))
	getIdFromDBTable("PRODUCTION_CALENDAR", "pcId"+i, n+(i-1))
	getIdFromDBTable("POSITION_NOM", "pnId"+i, n+(i-1))
	getIdFromDBTable("RESOURCE_TYPE", "resTypeId"+i, n+(i-1))
	getIdFromDBTable("EQUIPMENT_PROFILE", "equipmentProfileId"+i, n+(i-1))
}

/*
int value =n.toInteger()+1
log.info("n":value.toString())
testRunner.testCase.setPropertyValue("n",value.toString())*/

getIdFromDBTable("TREATMENT_CATEGORY", "existedTcId1", "0")
getIdFromDBTable("TREATMENT_CATEGORY", "existedTcId2", "-1")
</script></con:config></con:testStep><con:properties><con:property><con:name>n</con:name><con:value>6</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>tcId1</con:name><con:value>141228511</con:value></con:property><con:property><con:name>tcId2</con:name><con:value>141228512</con:value></con:property><con:property><con:name>tcId3</con:name><con:value>141228513</con:value></con:property><con:property><con:name>tId1</con:name><con:value>1283109433</con:value></con:property><con:property><con:name>sId1</con:name><con:value>125676924</con:value></con:property><con:property><con:name>dnId1</con:name><con:value>5000228688</con:value></con:property><con:property><con:name>epId1</con:name><con:value>5000214946</con:value></con:property><con:property><con:name>agId1</con:name><con:value>127631320</con:value></con:property><con:property><con:name>pcId1</con:name><con:value>128650521</con:value></con:property><con:property><con:name>pnId1</con:name><con:value>5000228750</con:value></con:property><con:property><con:name>tId2</con:name><con:value>1283109434</con:value></con:property><con:property><con:name>sId2</con:name><con:value>125676925</con:value></con:property><con:property><con:name>dnId2</con:name><con:value>5000228689</con:value></con:property><con:property><con:name>epId2</con:name><con:value>5000214947</con:value></con:property><con:property><con:name>agId2</con:name><con:value>127631321</con:value></con:property><con:property><con:name>pcId2</con:name><con:value>128650522</con:value></con:property><con:property><con:name>pnId2</con:name><con:value>5000228751</con:value></con:property><con:property><con:name>tId3</con:name><con:value>1283109435</con:value></con:property><con:property><con:name>sId3</con:name><con:value>125676926</con:value></con:property><con:property><con:name>dnId3</con:name><con:value>5000228690</con:value></con:property><con:property><con:name>epId3</con:name><con:value>5000214948</con:value></con:property><con:property><con:name>agId3</con:name><con:value>127631322</con:value></con:property><con:property><con:name>pcId3</con:name><con:value>128650523</con:value></con:property><con:property><con:name>pnId3</con:name><con:value>5000228752</con:value></con:property><con:property><con:name>resTypeId3</con:name><con:value>158297813</con:value></con:property><con:property><con:name>equipmentProfileId1</con:name><con:value>5000214946</con:value></con:property><con:property><con:name>equipmentProfileId2</con:name><con:value>5000214947</con:value></con:property><con:property><con:name>equipmentProfileId3</con:name><con:value>5000214948</con:value></con:property><con:property><con:name>resTypeId1</con:name><con:value>158297811</con:value></con:property><con:property><con:name>resTypeId2</con:name><con:value>158297812</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="c697dc63-c093-442c-b690-e70751113e0e" name="Обработка сообщений от свмр2"><con:settings><con:setting id="40c3ddab-c51c-4f3b-b0a4-432fdf36f51dfileName">Обработка-сообщений-от-свмр2</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase id="95101f92-7d13-4e03-85b5-cf18c08906b8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка сообщений о создании/изменении Локации" searchProperties="true"><con:settings><con:setting id="b7fe80fd-4df3-4747-bdf9-2b60aae8b275fileName">Обработка-сообщений-о-создании%2Fизменении-Локации</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="1352775b-d186-4b0b-8c58-2b914c678dba"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.getPropertyValue("table")
tableMO = testRunner.testCase.getPropertyValue("tableMO")
tableAO = testRunner.testCase.getPropertyValue("tableAO")
tableMF = testRunner.testCase.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.getPropertyValue("tableSpec")

checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-10,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId", "where archived=0")
existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-10, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId", "where archive=0")
existedAoId = testRunner.testCase.getPropertyValue("existedAoId")

listMfIds="0"
listSpecIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())
}</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Локации, переданы все параметры" id="28265422-3f21-4c21-98d1-66b3952420ab"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def locId=testRunner.testCase.getPropertyValue("id1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def title=testRunner.testCase.getPropertyValue("title1")
def stage=testRunner.testCase.getPropertyValue("stage1")
def topicLocation=testRunner.testCase.getPropertyValue("topicLocation")

sendMessageToKafka(topicLocation,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>"""+title+"""</ns4:roomTitle><ns4:stage>"""+stage+"""</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+spec+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в LOCATION" id="66898c59-78d0-4660-bea0-95a01140bbcb"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_title = testRunner.testCase.getPropertyValue("title1")
	def req_stage = testRunner.testCase.getPropertyValue("stage1")
	def req_mfId = testRunner.testCase.getPropertyValue("existedMfId1")
	def req_spec = testRunner.testCase.getPropertyValue("existedSpecId1")
	def db_title = lastItem[0].ROOM_TITLE.toString()
	def db_stage = lastItem[0].STAGE.toString()
	def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
	def db_spec = lastItem[0].SPECIALIZATION_ID.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_title ==  req_title
	assert  db_stage == req_stage
	assert  db_mfId ==req_mfId
	assert  db_spec ==req_spec
	log.info("Запись в таблице "+table+" создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Локации, переданы обязательные" id="a9b39765-7f33-4953-9769-7be405ff22f4"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def locId=testRunner.testCase.getPropertyValue("id2")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def title=testRunner.testCase.getPropertyValue("title1")
def stage=testRunner.testCase.getPropertyValue("stage1")
def topicLocation=testRunner.testCase.getPropertyValue("topicLocation")

sendMessageToKafka(topicLocation,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>"""+title+"""</ns4:roomTitle><ns4:stage>"""+stage+"""</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в LOCATION 2" id="f950eaff-c426-4fef-8055-c160d5cefb76"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id2")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_title = testRunner.testCase.getPropertyValue("title1")
	def req_stage = testRunner.testCase.getPropertyValue("stage1")
	def req_mfId = testRunner.testCase.getPropertyValue("existedMfId1")
	def db_title = lastItem[0].ROOM_TITLE.toString()
	def db_stage = lastItem[0].STAGE.toString()
	def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
	def db_spec = lastItem[0].SPECIALIZATION_ID
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_title ==  req_title
	assert  db_stage == req_stage
	assert  db_mfId ==req_mfId
	assert  db_spec ==null
	log.info("Запись в таблице "+table+" создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании архивной Локации" id="a95bf820-1f32-4d4a-898f-ccaee6e60923"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def locId=testRunner.testCase.getPropertyValue("id3")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def title=testRunner.testCase.getPropertyValue("title1")
def stage=testRunner.testCase.getPropertyValue("stage1")
def topicLocation=testRunner.testCase.getPropertyValue("topicLocation")

sendMessageToKafka(topicLocation,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="true" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>"""+title+"""</ns4:roomTitle><ns4:stage>"""+stage+"""</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+spec+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в LOCATION 3" id="7c9b1876-9c20-4ca8-8675-8b5e1b5d85ab"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id3")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_title = testRunner.testCase.getPropertyValue("title1")
	def req_stage = testRunner.testCase.getPropertyValue("stage1")
	def req_mfId = testRunner.testCase.getPropertyValue("existedMfId1")
	def req_spec = testRunner.testCase.getPropertyValue("existedSpecId1")
	def db_title = lastItem[0].ROOM_TITLE.toString()
	def db_stage = lastItem[0].STAGE.toString()
	def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
	def db_spec = lastItem[0].SPECIALIZATION_ID.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="1"
	assert  db_title ==  req_title
	assert  db_stage == req_stage
	assert  db_mfId ==req_mfId
	assert  db_spec ==req_spec
	log.info("Запись в таблице "+table+" создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о изменении и выводе Локации из архива,атрибут archived не передан, переданы обязательные параметры" id="b2d870e2-88ef-4d95-ab76-5787d294a806"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def locId=testRunner.testCase.getPropertyValue("id3")
def mfId=testRunner.testCase.getPropertyValue("existedMfId2")
def spec=testRunner.testCase.getPropertyValue("existedSpecId2")
def title=testRunner.testCase.getPropertyValue("title2")
def stage=testRunner.testCase.getPropertyValue("stage2")
def topicLocation=testRunner.testCase.getPropertyValue("topicLocation")

sendMessageToKafka(topicLocation,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>"""+title+"""</ns4:roomTitle><ns4:stage>"""+stage+"""</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в LOCATION 4" id="d865f1be-1d8e-4140-afbf-d02bafa47163"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id3")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_title = testRunner.testCase.getPropertyValue("title2")
	def req_stage = testRunner.testCase.getPropertyValue("stage2")
	def req_mfId = testRunner.testCase.getPropertyValue("existedMfId2")
	def req_spec = testRunner.testCase.getPropertyValue("existedSpecId2")
	def db_title = lastItem[0].ROOM_TITLE.toString()
	def db_stage = lastItem[0].STAGE.toString()
	def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
	def db_spec = lastItem[0].SPECIALIZATION_ID
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_title ==  req_title
	assert  db_stage == req_stage
	assert  db_mfId ==req_mfId
	assert  db_spec ==null
	log.info("Запись в таблице "+table+" изменена корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о изменении и архивировании Локации, переданы обязательные параметры" id="e44f86ae-5a63-4963-aacc-06d005ff203d"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def locId=testRunner.testCase.getPropertyValue("id3")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def title=testRunner.testCase.getPropertyValue("title1")
def stage=testRunner.testCase.getPropertyValue("stage1")
def topicLocation=testRunner.testCase.getPropertyValue("topicLocation")

sendMessageToKafka(topicLocation,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="true" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>"""+title+"""</ns4:roomTitle><ns4:stage>"""+stage+"""</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+spec+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в LOCATION 5" id="36f4eec7-4bfa-4116-b829-6a3f46cf5caa"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id3")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_title = testRunner.testCase.getPropertyValue("title1")
	def req_stage = testRunner.testCase.getPropertyValue("stage1")
	def req_mfId = testRunner.testCase.getPropertyValue("existedMfId1")
	def req_spec = testRunner.testCase.getPropertyValue("existedSpecId1")
	def db_title = lastItem[0].ROOM_TITLE.toString()
	def db_stage = lastItem[0].STAGE.toString()
	def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
	def db_spec = lastItem[0].SPECIALIZATION_ID.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="1"
	assert  db_title ==  req_title
	assert  db_stage == req_stage
	assert  db_mfId ==req_mfId
	assert  db_spec ==req_spec
	log.info("Запись в таблице "+table+" изменена корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о изменении и выводе Локации из архива, атрибут archived передан" id="7af99474-c297-4ce4-8be1-7b86582b189a"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def locId=testRunner.testCase.getPropertyValue("id3")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def title=testRunner.testCase.getPropertyValue("title1")
def stage=testRunner.testCase.getPropertyValue("stage1")
def topicLocation=testRunner.testCase.getPropertyValue("topicLocation")

sendMessageToKafka(topicLocation,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>"""+title+"""</ns4:roomTitle><ns4:stage>"""+stage+"""</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+spec+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в LOCATION 6" id="258c9049-b89d-42cf-bb45-652e1f29a480"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id3")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_title = testRunner.testCase.getPropertyValue("title1")
	def req_stage = testRunner.testCase.getPropertyValue("stage1")
	def req_mfId = testRunner.testCase.getPropertyValue("existedMfId1")
	def req_spec = testRunner.testCase.getPropertyValue("existedSpecId1")
	def db_title = lastItem[0].ROOM_TITLE.toString()
	def db_stage = lastItem[0].STAGE.toString()
	def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
	def db_spec = lastItem[0].SPECIALIZATION_ID.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_title ==  req_title
	assert  db_stage == req_stage
	assert  db_mfId ==req_mfId
	assert  db_spec ==req_spec
	log.info("Запись в таблице "+table+" изменена корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="e52070a2-ff3c-44bb-ae07-2eeabfd54e6c"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.getPropertyValue("count").toInteger()
table = testRunner.testCase.getPropertyValue("table")
tableMO = testRunner.testCase.getPropertyValue("tableMO")
tableAO = testRunner.testCase.getPropertyValue("tableAO")
tableSpec = testRunner.testCase.getPropertyValue("tableSpec")
tableMF = testRunner.testCase.getPropertyValue("tableMF")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.testSuite.removeProperty(propertyName)
	testRunner.testCase.testSuite.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	iString=i.toString()
	deleteEntryFromTableById(table, "id"+iString)
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
}

deleteCreatedByTestInTestCase(tableAO, "existedAoId")
deleteCreatedByTestInTestCase(tableMO, "existedMoId")
</script></con:config></con:testStep><con:properties><con:property><con:name>count</con:name><con:value>3</con:value></con:property><con:property><con:name>table</con:name><con:value>LOCATION</con:value></con:property><con:property><con:name>tableMF</con:name><con:value>MEDICAL_FACILITY</con:value></con:property><con:property><con:name>tableMO</con:name><con:value>MEDICAL_ORGANIZATION</con:value></con:property><con:property><con:name>tableAO</con:name><con:value>ADDRESS_OBJECT</con:value></con:property><con:property><con:name>tableSpec</con:name><con:value>SPECIALIZATION</con:value></con:property><con:property><con:name>existedMoId</con:name><con:value>103</con:value></con:property><con:property><con:name>existedMoIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedAoId</con:name><con:value>142</con:value></con:property><con:property><con:name>existedAoIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMfId1</con:name><con:value>162</con:value></con:property><con:property><con:name>existedMfId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedSpecId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>existedSpecId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMfId2</con:name><con:value>163</con:value></con:property><con:property><con:name>existedMfId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedSpecId2</con:name><con:value>125676760</con:value></con:property><con:property><con:name>existedSpecId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>topicLocation</con:name><con:value>topicLocation.rir2</con:value></con:property><con:property><con:name>title1</con:name><con:value>Автотестовая Локация РиР2</con:value></con:property><con:property><con:name>title2</con:name><con:value>Автотестовая Локация РиР2 изменена</con:value></con:property><con:property><con:name>stage1</con:name><con:value>1</con:value></con:property><con:property><con:name>stage2</con:name><con:value>2</con:value></con:property><con:property><con:name>id1</con:name><con:value>7611</con:value></con:property><con:property><con:name>id2</con:name><con:value>7612</con:value></con:property><con:property><con:name>existedMfId3</con:name><con:value>143</con:value></con:property><con:property><con:name>existedMfId3createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedSpecId3</con:name><con:value>125676761</con:value></con:property><con:property><con:name>existedSpecId3createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>id3</con:name><con:value>7613</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="3678ce85-7b75-478d-9aaa-cbd13590c514" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка сообщений о создании/изменении МО" searchProperties="true"><con:settings><con:setting id="fc9570bd-34f2-451f-8d7c-7f7d0ed32ef3fileName">Обработка-сообщений-о-создании%2Fизменении-МО</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="2a14d493-bcd5-4a4b-a076-9a0765bd5061"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
 n=testRunner.testCase.getPropertyValue("n")
 count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedIdFromDBTable(String tableName, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max(ID)+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

for (int i =1; i &lt;=count;i++){
	getNonExistedIdFromDBTable("MEDICAL_ORGANIZATION", "id"+i, i.toString())
	}

	</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании МО" id="cebca6cd-89a9-4e95-89c4-691691e5cdf9"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def moId=testRunner.testCase.getPropertyValue("id1")
def name=testRunner.testCase.getPropertyValue("name")
def shortName=testRunner.testCase.getPropertyValue("shortName")
def ogrn=testRunner.testCase.getPropertyValue("ogrn")
def regDate=testRunner.testCase.getPropertyValue("regDate")

sendMessageToKafka("topicMO.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>"""+name+"""</ns1:name><ns1:shortName>"""+shortName+"""</ns1:shortName><ns1:ogrn>"""+ogrn+"""</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>"""+regDate+"""</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи" id="2b02b12d-a188-4fd5-b944-e80ee4b6ad26"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_name = testRunner.testCase.getPropertyValue("name")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName")
	def req_ogrn = testRunner.testCase.getPropertyValue("ogrn")
	def req_regDate = testRunner.testCase.getPropertyValue("regDate")
	def db_name = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME.toString()
	def db_ogrn = lastItem[0].OGRN.toString()
	def db_regDate = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_closed == null
	assert  db_name ==req_name
	assert  db_shortName ==req_shortName
	assert  db_ogrn ==req_ogrn
	assert  db_regDate.replace(" 00:00:00.0","") ==req_regDate
	log.info("Запись в таблице создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Проверка создания записи" id="8ec929aa-6287-498e-86d7-5420988811af" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
String[] req = ["name", "shortName", "ogrn"]
String[] dbColumns = ["NAME_FULL", "NAME", "OGRN","CREATED"]

log.info(req.length)

def checkEntry(String idPropertyName, String tableName,String[] requestsParams, String[] dbColumnsNames){
	id = testRunner.testCase.getPropertyValue(idPropertyName)
	table = testRunner.testCase.getPropertyValue(tableName)
	log.info("table"+table)
	getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
	lastItem= sql.rows(getLastItem)
	if ( sql(getLastItem) !=0){
		log.info("Запись в таблице "+table+" найдена")
		for(int i=0; i&lt;requestsParams.length; i++){
				def reqParamValue = testRunner.testCase.getPropertyValue(requestsParams[i])
				String columnName=dbColumnsNames[i]
				log.info(columnName)
				def dbColumnValue = lastItem[0].get(columnName).toString()
				log.info(dbColumnValue)
				assert  dbColumnValue == reqParamValue
		}
		log.info("Запись в таблице создана корректно.")
	}
	else {
		testRunner.fail("Запись в таблице "+table+" не найдена")
	}
}
checkEntry("moId1","table",req,dbColumns)
	/*//log.info(lastItem)
		def req_name = testRunner.testCase.getPropertyValue("name")
		def req_shortName = testRunner.testCase.getPropertyValue("shortName")
		def req_ogrn = testRunner.testCase.getPropertyValue("ogrn")
		def req_regDate = testRunner.testCase.getPropertyValue("regDate")
		def db_name = lastItem[0].RESOURCE_TYPE_ID.toString()
		def db_shortName = lastItem[0].RESOURCE_TYPE_ID.toString()
		def db_ogrn = lastItem[0].ARCHIVED.toString()
		def db_regDate = lastItem[0].ARCHIVED.toString()
		def db_archived = lastItem[0].ARCHIVED.toString()
		assert  db_archived =="0"
		assert  db_resTypeId ==req_resTypeId*/</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о изменении МО" id="cdd5f204-e618-45c1-8361-34e68189e4de"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def moId=testRunner.testCase.getPropertyValue("id1")
def name=testRunner.testCase.getPropertyValue("name2")
def shortName=testRunner.testCase.getPropertyValue("shortName2")
def ogrn=testRunner.testCase.getPropertyValue("ogrn2")
def regDate=testRunner.testCase.getPropertyValue("regDate2")
def topicMO=testRunner.testCase.getPropertyValue("topicMO")

sendMessageToKafka(topicMO,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/"    xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1"    xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types"    xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/"    xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:change><ns2:organizationAttributes><ns1:name>"""+name+"""</ns1:name><ns1:shortName>"""+shortName+"""</ns1:shortName><ns1:ogrn>"""+ogrn+"""</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>"""+regDate+"""</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns2:organizationAttributes></ns2:change></ns2:medicalOrganizationInfoMsg>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи" id="c8c9366e-cd4f-4ca6-9365-f012dcd6de33"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_name = testRunner.testCase.getPropertyValue("name2")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName2")
	def req_ogrn = testRunner.testCase.getPropertyValue("ogrn2")
	def req_regDate = testRunner.testCase.getPropertyValue("regDate2")
	def db_name = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME.toString()
	def db_ogrn = lastItem[0].OGRN.toString()
	def db_regDate = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_closed == null
	assert  db_name ==req_name
	assert  db_shortName ==req_shortName
	assert  db_ogrn ==req_ogrn
	assert  db_regDate.replace(" 00:00:00.0","") ==req_regDate
	log.info("Запись в таблице изменена корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об архивировании МО" id="beebb011-a623-4aaf-a013-97fc1fe19006"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def moId=testRunner.testCase.getPropertyValue("id1")
def topicMO=testRunner.testCase.getPropertyValue("topicMO")

sendMessageToKafka(topicMO,"""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="true"/>&lt;/ns2:medicalOrganizationInfoMsg>""")

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка архивирования записи" id="1d5beff2-da45-46c9-a29c-a74ea764f378"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_name = testRunner.testCase.getPropertyValue("name2")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName2")
	def req_ogrn = testRunner.testCase.getPropertyValue("ogrn2")
	def req_regDate = testRunner.testCase.getPropertyValue("regDate2")
	def db_name = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME.toString()
	def db_ogrn = lastItem[0].OGRN.toString()
	def db_regDate = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="1"
	assert  db_closed == null
	assert  db_name ==req_name
	assert  db_shortName ==req_shortName
	assert  db_ogrn ==req_ogrn
	assert  db_regDate.replace(" 00:00:00.0","") ==req_regDate
	log.info("Запись в таблице изменена корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о выводе МО из архива" id="57ec8b44-b242-4e62-8c98-56dcb47c4d84"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def moId=testRunner.testCase.getPropertyValue("id1")
def topicMO=testRunner.testCase.getPropertyValue("topicMO")

sendMessageToKafka(topicMO,"""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="false"/>&lt;/ns2:medicalOrganizationInfoMsg>""")

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка вывода записи из архива" id="993a57dc-131d-41ef-9205-417f51aa9dbe"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_name = testRunner.testCase.getPropertyValue("name2")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName2")
	def req_ogrn = testRunner.testCase.getPropertyValue("ogrn2")
	def req_regDate = testRunner.testCase.getPropertyValue("regDate2")
	def db_name = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME.toString()
	def db_ogrn = lastItem[0].OGRN.toString()
	def db_regDate = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_closed == null
	assert  db_name ==req_name
	assert  db_shortName ==req_shortName
	assert  db_ogrn ==req_ogrn
	assert  db_regDate.replace(" 00:00:00.0","") ==req_regDate
	log.info("Запись в таблице изменена корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="69c1736e-079f-4261-a796-7adc3d23680e"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

 count=testRunner.testCase.getPropertyValue("count").toInteger()
table = testRunner.testCase.getPropertyValue("table")
def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue("id1")
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
} 

for (int i =1; i &lt;=count;i++){
	deleteEntryFromTableById(table, "id"+i.toString())
	}

	</script></con:config></con:testStep><con:properties><con:property><con:name>count</con:name><con:value>2</con:value></con:property><con:property><con:name>moId1</con:name><con:value>200001798500</con:value></con:property><con:property><con:name>moId2</con:name><con:value>200001798501</con:value></con:property><con:property><con:name>name</con:name><con:value>Длинное имя медицинской органиации</con:value></con:property><con:property><con:name>shortName</con:name><con:value>Короткое имя МО</con:value></con:property><con:property><con:name>ogrn</con:name><con:value>1234567890-ab</con:value></con:property><con:property><con:name>regDate</con:name><con:value>2020-01-01</con:value></con:property><con:property><con:name>name2</con:name><con:value>Длинное имя медицинской органиации2</con:value></con:property><con:property><con:name>shortName2</con:name><con:value>Короткое имя МО2</con:value></con:property><con:property><con:name>ogrn2</con:name><con:value>1234567890-a2</con:value></con:property><con:property><con:name>regDate2</con:name><con:value>2021-01-01</con:value></con:property><con:property><con:name>table</con:name><con:value>MEDICAL_ORGANIZATION</con:value></con:property><con:property><con:name>id1</con:name><con:value>200001798509</con:value></con:property><con:property><con:name>id2</con:name><con:value>200001798510</con:value></con:property><con:property><con:name>topicMO</con:name><con:value>topicMO.rir2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="2339d828-6a87-4b1a-90fe-0db6db610bd3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка сообщений о создании/изменении МУ" searchProperties="true"><con:settings><con:setting id="6d22fb30-16da-45d7-8871-65b8349bd532fileName">Обработка-сообщений-о-создании%2Fизменении-МУ</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="1d7cb620-4719-49e4-a6d1-d1ae1e1b7653"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
 n=testRunner.testCase.getPropertyValue("n")
 count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 
def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.getPropertyValue("table")
tableMO = testRunner.testCase.getPropertyValue("tableMO")
tableAO = testRunner.testCase.getPropertyValue("tableAO")

for (int i =1; i &lt;=count;i++){
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())
	getNonExistedColumnFromDBTable(tableAO, "ID", "aoId"+i, i.toString())
	getNonExistedColumnFromDBTable(tableAO, "GLOBAL_ID", "aoGlobalId"+i, i.toString())	
}
listMoIds="0"
listAoIds="0"
for(int i =1; i &lt;=2;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-10,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-10, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0 and id not in ("+listAoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
}</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании головного МУ и создании АО" id="2dac5260-6812-4228-afb9-af3e7a6936dc"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def mfId=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def name=testRunner.testCase.getPropertyValue("name")
def shortName=testRunner.testCase.getPropertyValue("shortName")
def aoId=testRunner.testCase.getPropertyValue("aoId1")
def aoAddress=testRunner.testCase.getPropertyValue("aoAddress")
def aoGlobalId=testRunner.testCase.getPropertyValue("aoGlobalId1")
def isHead=testRunner.testCase.getPropertyValue("isHead")
def closed=testRunner.testCase.getPropertyValue("closed")
def created=testRunner.testCase.getPropertyValue("created")
def topicMF=testRunner.testCase.getPropertyValue("topicMF")

sendMessageToKafka(topicMF,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead=\""""+isHead+"""\"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>"""+name+"""</ns1:name><ns1:shortName>"""+shortName+"""</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>"""+created+"""</ns1:periodStart><ns1:periodEnd>"""+closed+"""</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+aoId+"""\"><ns1:addressShort id=\""""+aoGlobalId+"""\"><ns1:addressString>"""+aoAddress+"""</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в MEDICAL_FACILITY" id="43352ef4-aac6-476b-908b-187b2557cd8f"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
//log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_isHead = testRunner.testCase.getPropertyValue("isHead").toBoolean()
	def req_moId = testRunner.testCase.getPropertyValue("existedMoId1")
	def req_aoId = testRunner.testCase.getPropertyValue("aoId1")
	def req_name = testRunner.testCase.getPropertyValue("name")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName")
	def req_created = testRunner.testCase.getPropertyValue("created")
	def req_closed = testRunner.testCase.getPropertyValue("closed")
	def db_name = lastItem[0].NAME.toString()
	def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
	def db_nameFull = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME_SHORT.toString()
	def db_isHead = lastItem[0].IS_HEAD.toBoolean()
	def db_aoId = lastItem[0].ADDRESS_OBJECT_ID.toString()
	def db_created = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_name ==req_name
	assert  db_nameFull ==req_name
	assert  db_shortName ==req_shortName
	assert  db_aoId ==req_aoId
	assert  db_moId ==req_moId
	assert  db_isHead ==req_isHead
	assert  db_created.replace(" 00:00:00.0","") ==req_created
	assert  db_closed.replace(" 00:00:00.0","") ==req_closed
	log.info("Запись в таблице "+table+" создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в ADDRESS_OBJECT" id="95e016df-5228-44d8-8ecc-4e502ae46b8d"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("aoId1")
table = testRunner.testCase.getPropertyValue("tableAO")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_globalId = testRunner.testCase.getPropertyValue("aoGlobalId1")
	def req_address = testRunner.testCase.getPropertyValue("aoAddress")
	
	def db_globalId = lastItem[0].GLOBAL_ID.toString()
	def db_address = lastItem[0].ADDRESS_STRING.toString()
	def db_updated = lastItem[0].UPDATED.toString()
	def db_archived = lastItem[0].ARCHIVE.toString()
	
	assert  db_archived =="0"
	assert  db_globalId ==req_globalId
	assert  db_address ==req_address
	//return db_updated
	log.info("Запись в таблице создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании не головного МУ с изменением АО" id="cfe5293f-e952-4f21-bfa9-40c19b4bd0be"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def mfId=testRunner.testCase.getPropertyValue("id2")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def name=testRunner.testCase.getPropertyValue("name")
def shortName=testRunner.testCase.getPropertyValue("shortName")
def aoId=testRunner.testCase.getPropertyValue("aoId1")
def aoAddress=testRunner.testCase.getPropertyValue("aoAddress2")
def aoGlobalId=testRunner.testCase.getPropertyValue("aoGlobalId2")
def isHead=testRunner.testCase.getPropertyValue("isntHead")
def closed=testRunner.testCase.getPropertyValue("closed")
def created=testRunner.testCase.getPropertyValue("created")
def topicMF=testRunner.testCase.getPropertyValue("topicMF")

sendMessageToKafka(topicMF,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead=\""""+isHead+"""\"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>"""+name+"""</ns1:name><ns1:shortName>"""+shortName+"""</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>"""+created+"""</ns1:periodStart><ns1:periodEnd>"""+closed+"""</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="true" id=\""""+aoId+"""\"><ns1:addressShort id=\""""+aoGlobalId+"""\"><ns1:addressString>"""+aoAddress+"""</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в MEDICAL_FACILITY 1" id="39c47ea8-7331-49cc-866c-07c1ed2239f8"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id2")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
//log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_isHead = testRunner.testCase.getPropertyValue("isntHead").toBoolean()
	def req_moId = testRunner.testCase.getPropertyValue("existedMoId1")
	def req_aoId = testRunner.testCase.getPropertyValue("aoId1")
	def req_name = testRunner.testCase.getPropertyValue("name")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName")
	def req_created = testRunner.testCase.getPropertyValue("created")
	def req_closed = testRunner.testCase.getPropertyValue("closed")
	def db_name = lastItem[0].NAME.toString()
	def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
	def db_nameFull = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME_SHORT.toString()
	def db_isHead = lastItem[0].IS_HEAD.toBoolean()
	def db_aoId = lastItem[0].ADDRESS_OBJECT_ID.toString()
	def db_created = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_name ==req_name
	assert  db_nameFull ==req_name
	assert  db_shortName ==req_shortName
	assert  db_aoId ==req_aoId
	assert  db_moId ==req_moId
	assert  db_isHead ==req_isHead
	assert  db_created.replace(" 00:00:00.0","") ==req_created
	assert  db_closed.replace(" 00:00:00.0","") ==req_closed
	log.info("Запись в таблице "+table+" создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в ADDRESS_OBJECT" id="92289460-232b-40b8-87f0-cc138c85747c"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("aoId1")
table = testRunner.testCase.getPropertyValue("tableAO")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_globalId = testRunner.testCase.getPropertyValue("aoGlobalId1")
	def req_address = testRunner.testCase.getPropertyValue("aoAddress")
	
	def db_globalId = lastItem[0].GLOBAL_ID.toString()
	def db_address = lastItem[0].ADDRESS_STRING.toString()
	def db_updated = lastItem[0].UPDATED.toString()
	def db_archived = lastItem[0].ARCHIVE.toString()
	
	assert  db_archived =="0"
	assert  db_globalId ==req_globalId
	assert  db_address ==req_address
	//return db_updated
	log.info("Запись в таблице создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании головного МУс существущим АО, переданы только обязательные параметры" id="dbd4b046-752a-4490-b61f-5f6a337c4371"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def mfId=testRunner.testCase.getPropertyValue("id3")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def name=testRunner.testCase.getPropertyValue("name")
def shortName=testRunner.testCase.getPropertyValue("shortName")
def aoId=testRunner.testCase.getPropertyValue("aoId1")
def aoAddress=testRunner.testCase.getPropertyValue("aoAddress")
def aoGlobalId=testRunner.testCase.getPropertyValue("aoGlobalId1")
def isHead=testRunner.testCase.getPropertyValue("isHead")
def closed=testRunner.testCase.getPropertyValue("closed")
def created=testRunner.testCase.getPropertyValue("created")
def topicMF=testRunner.testCase.getPropertyValue("topicMF")

sendMessageToKafka(topicMF,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead=\""""+isHead+"""\"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>"""+name+"""</ns1:name><ns1:shortName>"""+shortName+"""</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>"""+created+"""</ns1:periodStart><ns1:periodEnd>"""+closed+"""</ns1:periodEnd><ns2:addressObject archived="false" id=\""""+aoId+"""\"><ns1:addressShort id=\""""+aoGlobalId+"""\"><ns1:addressString>"""+aoAddress+"""</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в MEDICAL_FACILITY 2" id="ce308a45-26dc-4db3-9ae9-914d4e5d9f40"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id3")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
//log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_isHead = testRunner.testCase.getPropertyValue("isHead").toBoolean()
	def req_moId = testRunner.testCase.getPropertyValue("existedMoId1")
	def req_aoId = testRunner.testCase.getPropertyValue("aoId1")
	def req_name = testRunner.testCase.getPropertyValue("name")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName")
	def req_created = testRunner.testCase.getPropertyValue("created")
	def req_closed = testRunner.testCase.getPropertyValue("closed")
	def db_name = lastItem[0].NAME.toString()
	def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
	def db_nameFull = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME_SHORT.toString()
	def db_isHead = lastItem[0].IS_HEAD.toBoolean()
	def db_aoId = lastItem[0].ADDRESS_OBJECT_ID.toString()
	def db_created = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_name ==req_name
	assert  db_nameFull ==req_name
	assert  db_shortName ==req_shortName
	assert  db_aoId ==req_aoId
	assert  db_moId ==req_moId
	assert  db_isHead ==req_isHead
	assert  db_created.replace(" 00:00:00.0","") ==req_created
	assert  db_closed.replace(" 00:00:00.0","") ==req_closed
	log.info("Запись в таблице "+table+" создана корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о изменении всех параметров головного МУ и попытка изменения АО" id="de43049c-acb2-4746-86e1-c19229ec8e89"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def mfId=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId2")
def name=testRunner.testCase.getPropertyValue("name2")
def shortName=testRunner.testCase.getPropertyValue("shortName2")
def aoId=testRunner.testCase.getPropertyValue("aoId1")
def aoAddress=testRunner.testCase.getPropertyValue("aoAddress")
def aoGlobalId=testRunner.testCase.getPropertyValue("aoGlobalId1")
def isHead=testRunner.testCase.getPropertyValue("isntHead")
def closed=testRunner.testCase.getPropertyValue("closed2")
def created=testRunner.testCase.getPropertyValue("created2")
def topicMF=testRunner.testCase.getPropertyValue("topicMF")

sendMessageToKafka(topicMF,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:change isHead=\""""+isHead+"""\"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>"""+name+"""</ns1:name><ns1:shortName>"""+shortName+"""</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>"""+created+"""</ns1:periodStart><ns1:periodEnd>"""+closed+"""</ns1:periodEnd></ns2:change></ns2:medicalFacilityInfoMsg>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в MEDICAL_FACILITY" id="a0a5d5b9-2765-453f-a428-f8ac697851a9"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
//log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_isHead = testRunner.testCase.getPropertyValue("isntHead").toBoolean()
	def req_moId = testRunner.testCase.getPropertyValue("existedMoId2")
	def req_aoId = testRunner.testCase.getPropertyValue("aoId1")
	def req_name = testRunner.testCase.getPropertyValue("name2")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName2")
	def req_created = testRunner.testCase.getPropertyValue("created2")
	def req_closed = testRunner.testCase.getPropertyValue("closed2")
	def db_name = lastItem[0].NAME.toString()
	def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
	def db_nameFull = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME_SHORT.toString()
	def db_isHead = lastItem[0].IS_HEAD.toBoolean()
	def db_aoId = lastItem[0].ADDRESS_OBJECT_ID.toString()
	def db_created = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_name ==req_name
	assert  db_nameFull ==req_name
	assert  db_shortName ==req_shortName
	assert  db_aoId ==req_aoId
	assert  db_moId ==req_moId
	assert  db_isHead ==req_isHead
	assert  db_created.replace(" 00:00:00.0","") ==req_created
	assert  db_closed.replace(" 00:00:00.0","") ==req_closed
	log.info("Запись в таблице "+table+" изменена корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о изменении is_head МУ" id="78e37c52-d90a-4993-827b-c9e2cb60a0bc"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def mfId=testRunner.testCase.getPropertyValue("id1")
def isHead=testRunner.testCase.getPropertyValue("isHead")
def topicMF=testRunner.testCase.getPropertyValue("topicMF")

sendMessageToKafka(topicMF,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:change isHead=\""""+isHead+"""\"></ns2:change></ns2:medicalFacilityInfoMsg>""")

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в MEDICAL_FACILITY 2" id="8de9bee8-25d6-4f1f-bf96-5b63e4a12606"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
//log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_isHead = testRunner.testCase.getPropertyValue("isHead").toBoolean()
	def req_moId = testRunner.testCase.getPropertyValue("existedMoId2")
	def req_aoId = testRunner.testCase.getPropertyValue("aoId1")
	def req_name = testRunner.testCase.getPropertyValue("name2")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName2")
	def req_created = testRunner.testCase.getPropertyValue("created2")
	def req_closed = testRunner.testCase.getPropertyValue("closed2")
	def db_name = lastItem[0].NAME.toString()
	def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
	def db_nameFull = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME_SHORT.toString()
	def db_isHead = lastItem[0].IS_HEAD.toBoolean()
	def db_aoId = lastItem[0].ADDRESS_OBJECT_ID.toString()
	def db_created = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_name ==req_name
	assert  db_nameFull ==req_name
	assert  db_shortName ==req_shortName
	assert  db_aoId ==req_aoId
	assert  db_moId ==req_moId
	assert  db_isHead ==req_isHead
	assert  db_created.replace(" 00:00:00.0","") ==req_created
	assert  db_closed.replace(" 00:00:00.0","") ==req_closed
	log.info("Запись в таблице "+table+" изменена корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о архивации МУ" id="9ef2c9d9-f6ac-4be5-b5c5-e6f8ea43bb35"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def mfId=testRunner.testCase.getPropertyValue("id1")
def topicMF=testRunner.testCase.getPropertyValue("topicMF")

sendMessageToKafka(topicMF,"""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="true"/>&lt;/ns2:medicalFacilityInfoMsg>""")

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка архивации записи в MEDICAL_FACILITY" id="d9685e4d-e542-47c1-9894-39379236e8d1"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
//log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_isHead = testRunner.testCase.getPropertyValue("isHead").toBoolean()
	def req_moId = testRunner.testCase.getPropertyValue("existedMoId2")
	def req_aoId = testRunner.testCase.getPropertyValue("aoId1")
	def req_name = testRunner.testCase.getPropertyValue("name2")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName2")
	def req_created = testRunner.testCase.getPropertyValue("created2")
	def req_closed = testRunner.testCase.getPropertyValue("closed2")
	def db_name = lastItem[0].NAME.toString()
	def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
	def db_nameFull = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME_SHORT.toString()
	def db_isHead = lastItem[0].IS_HEAD.toBoolean()
	def db_aoId = lastItem[0].ADDRESS_OBJECT_ID.toString()
	def db_created = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="1"
	assert  db_name ==req_name
	assert  db_nameFull ==req_name
	assert  db_shortName ==req_shortName
	assert  db_aoId ==req_aoId
	assert  db_moId ==req_moId
	assert  db_isHead ==req_isHead
	assert  db_created.replace(" 00:00:00.0","") ==req_created
	assert  db_closed.replace(" 00:00:00.0","") ==req_closed
	log.info("Запись в таблице "+table+" изменена корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о выводе МУ из архива" id="7921c10d-fb49-43f5-9420-bf58bb65a649"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def mfId=testRunner.testCase.getPropertyValue("id1")
def topicMF=testRunner.testCase.getPropertyValue("topicMF")

sendMessageToKafka(topicMF,"""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="false"/>&lt;/ns2:medicalFacilityInfoMsg>""")

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка вывода записи  из архива в MEDICAL_FACILITY" id="e3259ba0-2f61-4a4d-affd-0c42c51a1a93"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.getPropertyValue("table")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
//log.info(getLastItem)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
	def req_isHead = testRunner.testCase.getPropertyValue("isHead").toBoolean()
	def req_moId = testRunner.testCase.getPropertyValue("existedMoId2")
	def req_aoId = testRunner.testCase.getPropertyValue("aoId1")
	def req_name = testRunner.testCase.getPropertyValue("name2")
	def req_shortName = testRunner.testCase.getPropertyValue("shortName2")
	def req_created = testRunner.testCase.getPropertyValue("created2")
	def req_closed = testRunner.testCase.getPropertyValue("closed2")
	def db_name = lastItem[0].NAME.toString()
	def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
	def db_nameFull = lastItem[0].NAME_FULL.toString()
	def db_shortName = lastItem[0].NAME_SHORT.toString()
	def db_isHead = lastItem[0].IS_HEAD.toBoolean()
	def db_aoId = lastItem[0].ADDRESS_OBJECT_ID.toString()
	def db_created = lastItem[0].CREATED.toString()
	def db_closed = lastItem[0].CLOSED.toString()
	def db_archived = lastItem[0].ARCHIVED.toString()
	assert  db_archived =="0"
	assert  db_name ==req_name
	assert  db_nameFull ==req_name
	assert  db_shortName ==req_shortName
	assert  db_aoId ==req_aoId
	assert  db_moId ==req_moId
	assert  db_isHead ==req_isHead
	assert  db_created.replace(" 00:00:00.0","") ==req_created
	assert  db_closed.replace(" 00:00:00.0","") ==req_closed
	log.info("Запись в таблице "+table+" изменена корректно.")
}


//ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="8f8aaabb-e2e8-4fff-81e9-64e08369c3a7"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.getPropertyValue("count").toInteger()
table = testRunner.testCase.getPropertyValue("table")
tableMO = testRunner.testCase.getPropertyValue("tableMO")
tableAO = testRunner.testCase.getPropertyValue("tableAO")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.testSuite.removeProperty(propertyName)
	testRunner.testCase.testSuite.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	iString=i.toString()
	deleteEntryFromTableById(table, "id"+iString)
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
}

for (int i =1; i &lt;=count;i++){
	deleteEntryFromTableById(tableAO, "aoId"+i.toString())
}
	</script></con:config></con:testStep><con:properties><con:property><con:name>count</con:name><con:value>4</con:value></con:property><con:property><con:name>topicMF</con:name><con:value>topicMF.rir2</con:value></con:property><con:property><con:name>table</con:name><con:value>MEDICAL_FACILITY</con:value></con:property><con:property><con:name>tableMO</con:name><con:value>MEDICAL_ORGANIZATION</con:value></con:property><con:property><con:name>tableAO</con:name><con:value>ADDRESS_OBJECT</con:value></con:property><con:property><con:name>id1</con:name><con:value>200001798509</con:value></con:property><con:property><con:name>id2</con:name><con:value>200001798510</con:value></con:property><con:property><con:name>existedMoId</con:name><con:value>103</con:value></con:property><con:property><con:name>existedMoIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedAoId</con:name><con:value>142</con:value></con:property><con:property><con:name>existedAoIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>6324</con:value></con:property><con:property><con:name>aoId2</con:name><con:value>6325</con:value></con:property><con:property><con:name>name</con:name><con:value>Автотествое МУ РиР2</con:value></con:property><con:property><con:name>name2</con:name><con:value>Автотествое МУ РиР2 измененное</con:value></con:property><con:property><con:name>shortName</con:name><con:value>МУ Тест</con:value></con:property><con:property><con:name>shortName2</con:name><con:value>МУ Тест2</con:value></con:property><con:property><con:name>isHead</con:name><con:value>true</con:value></con:property><con:property><con:name>isntHead</con:name><con:value>false</con:value></con:property><con:property><con:name>closed</con:name><con:value>1991-12-25</con:value></con:property><con:property><con:name>closed2</con:name><con:value>1991-11-25</con:value></con:property><con:property><con:name>created</con:name><con:value>1991-12-22</con:value></con:property><con:property><con:name>created2</con:name><con:value>1991-12-20</con:value></con:property><con:property><con:name>aoAddress</con:name><con:value>город Москва, улица Псковская, дом 10, корпус 1</con:value></con:property><con:property><con:name>aoAddress2</con:name><con:value>город Москва, улица Псковская, дом 10, корпус 2</con:value></con:property><con:property><con:name>aoGlobalId1</con:name><con:value>145827186</con:value></con:property><con:property><con:name>aoGlobalId2</con:name><con:value>145827187</con:value></con:property><con:property><con:name>id3</con:name><con:value>200001798511</con:value></con:property><con:property><con:name>aoId3</con:name><con:value>6326</con:value></con:property><con:property><con:name>aoGlobalId3</con:name><con:value>145827188</con:value></con:property><con:property><con:name>id4</con:name><con:value>200001798512</con:value></con:property><con:property><con:name>aoId4</con:name><con:value>6327</con:value></con:property><con:property><con:name>aoGlobalId4</con:name><con:value>145827189</con:value></con:property><con:property><con:name>existedMoId1</con:name><con:value>103</con:value></con:property><con:property><con:name>existedMoId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedAoId1</con:name><con:value>142</con:value></con:property><con:property><con:name>existedAoId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMoId2</con:name><con:value>120</con:value></con:property><con:property><con:name>existedMoId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedAoId2</con:name><con:value>143</con:value></con:property><con:property><con:name>existedAoId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMoId3</con:name><con:value>103</con:value></con:property><con:property><con:name>existedMoId3createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedAoId3</con:name><con:value>142</con:value></con:property><con:property><con:name>existedAoId3createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMoId4</con:name><con:value>103</con:value></con:property><con:property><con:name>existedMoId4createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedAoId4</con:name><con:value>142</con:value></con:property><con:property><con:name>existedAoId4createdByTest</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="12bb9506-8ffd-444e-b8a8-744aaaabc4c9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отправка сообщений" searchProperties="true"><con:settings><con:setting id="7ab5c75a-eebd-4b2c-b00d-8c05b9e4433afileName">Отправка-сообщений</con:setting></con:settings><con:testStep type="groovy" name="Подбор ID" id="9acc849d-0ad2-44e9-9479-49985098b7d8"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

String getIdFromDBTable(String tableName, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max(ID)+"+count+" AS ID FROM  "+tableName)
	id=""
	if(query[0].ID !=null){
		id=query[0].ID.toString()
	}
	else{
		id="1"
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.testSuite.setPropertyValue(propertyName, id)
	
} 

getIdFromDBTable("MEDICAL_ORGANIZATION","moId")
getIdFromDBTable("MEDICAL_FACILITY","mfId")
getIdFromDBTable("ADDRESS_OBJECT","aoId")
getIdFromDBTable("LOCATION","locId")
getIdFromDBTable("JOB_EXECUTION","jeId")
getIdFromDBTable("EQUIPMENT","eId")</script></con:config></con:testStep><con:testStep type="groovy" name="5. Отправка сообщения о создании МО" id="d5c85640-6174-4aff-b6e7-1bc70a317bbc"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>Государственное бюджетное учреждение здравоохранения ТЕСТ</ns1:name><ns1:shortName>ГБУЗ ТЕСТ</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="5. Отправка сообщения об изменении  МО" id="c7ae39df-d52f-4fd7-88c3-10c29beaa2ec"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/"    xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1"    xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types"    xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/"    xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:change><ns2:organizationAttributes><ns1:name>Государственное бюджетное учреждение здравоохранения ТЕСТ №1</ns1:name><ns1:shortName>ГБУЗ ТЕСТ №1</ns1:shortName><ns1:ogrn>2222222222</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns2:organizationAttributes></ns2:change></ns2:medicalOrganizationInfoMsg>"""
log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="5. Отправка сообщения об архивации МО" id="008f4482-f624-4b82-9c10-a5062d1d93a5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\"    xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/"    xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1"    xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types"    xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="true"/>&lt;/ns2:medicalOrganizationInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="5. Отправка сообщения о выводе МО из архива" id="db164e2c-5e73-45c0-b12c-add699132c5f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\"    xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/"    xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1"    xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types"    xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="false"/>&lt;/ns2:medicalOrganizationInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="6. Отправка сообщения о создании МУ" id="6f07a44c-33f2-48e8-9f7f-46cfcfbcf8ce"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId=testRunner.testCase.testSuite.getPropertyValue("aoId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>Тестовое Медицинское Учреждение</ns1:name><ns1:shortName>Тестовое МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+aoId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMUMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="6. Отправка сообщения о изменении МУ" id="dc7fdbf6-b7e1-49a9-8a93-be265c9ace7d"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId=testRunner.testCase.testSuite.getPropertyValue("aoId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:change isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>Тестовое Медицинское Учреждение 1</ns1:name><ns1:shortName>Тестовое МУ 1</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>2000-12-25</ns1:periodStart><ns1:periodEnd>2100-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms></ns2:change></ns2:medicalFacilityInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMUMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="6. Отправка сообщения об архивации МУ" id="85a4ad39-bb38-4163-b559-3de2c8d88c2e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId=testRunner.testCase.testSuite.getPropertyValue("aoId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="true"/>&lt;/ns2:medicalFacilityInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMUMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="6. Отправка сообщения о выводеи МУ из архива" id="0f430875-6cf7-4de8-94fc-5ed295f919c9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId=testRunner.testCase.testSuite.getPropertyValue("aoId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>&lt;ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">&lt;ns2:archive archived="false"/>&lt;/ns2:medicalFacilityInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMUMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="2. Отправка сообщения о создании Локации" id="9a312ff2-2ee5-48d6-ba80-53e1287fe48d"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers = testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Кабинет Кардиологии №103</ns4:roomTitle><ns4:stage>4</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>125676817</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicLocation")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="2. Отправка сообщения о изменении Локации" id="61aaed72-16f1-4657-b630-02d47a38ddbf"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers = testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="true" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Кабинет Кардиологии №105</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>125676817</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicLocation")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="2. Отправка сообщения о изменении Локации(разархив)" id="2b51debd-102b-4161-9ad1-900713606749"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers = testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+locId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Кабинет Кардиологии №103</ns4:roomTitle><ns4:stage>4</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>125676817</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicLocation")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="3. Отправка сообщения о создании Исполнения должности" id="485fc221-15fd-4473-8553-b411926d33a7"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers = testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def jeId=testRunner.testCase.testSuite.getPropertyValue("jeId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+jeId+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>Врач-стоматолог</title><nomId>226</nomId><employee id="315666752696"><ns2:snils>01430774313</ns2:snils><ns2:lastName>Иванов</ns2:lastName><ns2:firstName>Петр</ns2:firstName><ns2:middleName>Геннадьевич</ns2:middleName></employee><jobExecutionVolume>0.5</jobExecutionVolume><jobExecutionPeriod><ns2:start>2018-08-07</ns2:start></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable="true" id="1"><ns2:title>Стоматологическое отделение</ns2:title><ns2:nomId>125693222</ns2:nomId></department><specializationId>125676810</specializationId><maternityLeave>0</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="3. Отправка сообщения о изменении Исполнения должности" id="0bd37e9d-f389-4bc2-986f-d49ebba610eb"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers = testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def jeId=testRunner.testCase.testSuite.getPropertyValue("jeId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+jeId+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>Врач-педиатр</title><nomId>227</nomId><employee id="315666752696"><ns2:snils>01430774313</ns2:snils><ns2:lastName>Антонов</ns2:lastName><ns2:firstName>Антон</ns2:firstName><ns2:middleName>Викторович</ns2:middleName></employee><jobExecutionVolume>0.6</jobExecutionVolume><jobExecutionPeriod><ns2:start>2019-08-07</ns2:start><ns2:end>2019-08-07</ns2:end></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable="false" id="1"><ns2:title>Педиатрическое отделение</ns2:title><ns2:nomId>125693174</ns2:nomId></department><specializationId>125676831</specializationId><maternityLeave>0</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="4. Отправка сообщения о создании Оборудования в локации" id="77be4173-dd84-4770-b3d8-122631ea8541"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import groovy.xml.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers = testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def eId=testRunner.testCase.testSuite.getPropertyValue("eId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:locationEquipment archived="false" id=\""""+eId+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>1890</ns4:equipmentId><ns4:equipmentTypeNsiId>141507559</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>146017638</ns4:equipmentProfileId><ns4:equipmentModel>test 2</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id="7126031735"><ns5:title>Дневной стационар №1</ns5:title><ns5:nomId>125693053</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>false</ns4:personalizedService><ns4:capacityForRoom>1</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>141478870</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicEquipment")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}]]></script></con:config></con:testStep><con:testStep type="groovy" name="4. Отправка сообщения о изненении Оборудования в локации" id="43823bd9-5dc7-4391-bd30-f8672366f089"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import groovy.xml.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers = testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def eId=testRunner.testCase.testSuite.getPropertyValue("eId")

//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:locationEquipment archived="false" id=\""""+eId+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>1892</ns4:equipmentId><ns4:equipmentTypeNsiId>141507556</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>146017647</ns4:equipmentProfileId><ns4:equipmentModel>test 200</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id="7126031735"><ns5:title>Дневной стационар №2</ns5:title><ns5:nomId>125693053</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>false</ns4:personalizedService><ns4:capacityForRoom>1</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>135468810</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicEquipment")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Очистка созданных данных" id="8ba43947-3b61-41b2-a1f5-5645ce825dca" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def moId= testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId= testRunner.testCase.testSuite.getPropertyValue("mfId")
def aoId= testRunner.testCase.testSuite.getPropertyValue("aoId")
def locId= testRunner.testCase.testSuite.getPropertyValue("locId")
def jeId= testRunner.testCase.testSuite.getPropertyValue("jeId")
def eId= testRunner.testCase.testSuite.getPropertyValue("eId")


sql.execute("""DELETE FROM "RESOURCE" WHERE RESOURCE_KIND ='AVAILABLE_RESOURCE' AND  PARENT_ID="""+jeId) 
sql.execute("""DELETE FROM "RESOURCE" WHERE RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="""+eId) 
sql.execute("DELETE FROM  EQUIPMENT_TREATMENT WHERE EQUIPMENT_ID ="+eId) 
sql.execute("DELETE FROM EQUIPMENT WHERE ID="+eId)
sql.execute("DELETE FROM JOB_EXECUTION WHERE ID="+jeId) 
sql.execute("DELETE FROM LOCATION WHERE ID="+locId)
sql.execute("DELETE FROM MEDICAL_FACILITY WHERE ID="+mfId) 
sql.execute("DELETE FROM ADDRESS_OBJECT WHERE ID="+aoId)
sql.execute("DELETE FROM MEDICAL_ORGANIZATION WHERE ID="+moId)</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>moId</con:name><con:value>-2000</con:value></con:property><con:property><con:name>topicMOMsg</con:name><con:value>MOMsg.rir2</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.194.2:9092</con:value></con:property><con:property><con:name>mfId</con:name><con:value>-1996</con:value></con:property><con:property><con:name>aoId</con:name><con:value>6319</con:value></con:property><con:property><con:name>locId</con:name><con:value>-1996</con:value></con:property><con:property><con:name>jeId</con:name><con:value>1</con:value></con:property><con:property><con:name>eId</con:name><con:value>762</con:value></con:property><con:property><con:name>topicMUMsg</con:name><con:value>MUMsg.rir2</con:value></con:property><con:property><con:name>topicLocation</con:name><con:value>SVMRInformerLocation.rir2</con:value></con:property><con:property><con:name>topicJobExecution</con:name><con:value>SVMRInformerJobExecution.rir2</con:value></con:property><con:property><con:name>topicEquipment</con:name><con:value>SVMRInformerLocationEquipment.rir2</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="ff454f82-800e-476b-9dd5-9a91837f0c38" name="Обработка сообщений по Исполнению должности"><con:settings><con:setting id="96b187d4-15d6-4ed5-a318-ce9c618872f8fileName">Обработка-сообщений-по-Исполнению-должности</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="f5ab3233-5cee-4a16-a898-099f377e2f6f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение + архивация Исполнения должности" searchProperties="true"><con:settings><con:setting id="3e14bcf2-ad23-4a45-9ed2-5853ff0e4e0dfileName">Изменение-%2B-архивация-Исполнения-должности</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="f20da743-d663-466e-ae9e-31b3029e0123"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'AVAILABLE_RESOURCE', 0","resourceTypeAR", "where archived=0 and RESOURCE_KIND='AVAILABLE_RESOURCE'")
resourceTypeAR = testRunner.testCase.getPropertyValue("resourceTypeAR")

listMfIds="0"
listSpecIds="0"
listMoIds="0"
listAoIds="0"
listDepNomIds="0"
listPosNomIds="0"
listLocIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-"+i+"0,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-"+i+"0, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0")
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
	
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId

	checkExistenceAndSetPropertiesToTC(tableDepNom,"ID, TITLE, \"START\", \"END\"","--"+i+"0,'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId"+i, "where id not in ("+listDepNomIds+")")
	existedDepNomId = testRunner.testCase.getPropertyValue("existedDepNomId"+i)
	listDepNomIds=listDepNomIds+","+existedDepNomId

	checkExistenceAndSetPropertiesToTC(tablePosNom,"ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")
	existedPosNomId = testRunner.testCase.getPropertyValue("existedPosNomId"+i)
	listPosNomIds=listPosNomIds+","+existedPosNomId

	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "-10 ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId"+i, "where archived='0'  and id not in ("+listLocIds+")")
	existedLocId = testRunner.testCase.getPropertyValue("existedLocId"+i)
	listLocIds=listLocIds+","+existedLocId
	
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())

	getNonExistedColumnFromDBTable(tableLoc, "ID","locId"+i)
	locId = testRunner.testCase.getPropertyValue("locId"+i)
	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId+" ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"locId"+i, "where id ="+locId)
}</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Исполнения должности" id="0eb88279-ca0f-45c5-bd62-c7b33fa1794b"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("Id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def title=testRunner.testCase.getPropertyValue("title1")
def nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def snils=testRunner.testCase.getPropertyValue("snils1")

def lastName=testRunner.testCase.getPropertyValue("lastName1")
def firstName=testRunner.testCase.getPropertyValue("firstName1")
def middleName=testRunner.testCase.getPropertyValue("middleName1")
def jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")

def start=testRunner.testCase.getPropertyValue("start1")
def manageable=testRunner.testCase.getPropertyValue("manageableTrue")
def departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")

def departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveFalse")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

sendMessageToKafka(topicJobExecution,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+id+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>"""+title+"""</title><nomId>"""+nomId+"""</nomId><employee id=\""""+employeeId+"""\"><ns2:snils>"""+snils+"""</ns2:snils><ns2:lastName>"""+lastName+"""</ns2:lastName><ns2:firstName>"""+firstName+"""</ns2:firstName><ns2:middleName>"""+middleName+"""</ns2:middleName></employee><jobExecutionVolume>"""+jobExecutionVolume+"""</jobExecutionVolume><jobExecutionPeriod><ns2:start>"""+start+"""</ns2:start></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable=\""""+manageable+"""\" id=\""""+departmentId+"""\"><ns2:title>"""+departmentTitle+"""</ns2:title><ns2:nomId>"""+departmentNomId+"""</ns2:nomId></department><specializationId>"""+spec+"""</specializationId><maternityLeave>"""+maternityLeave+"""</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в JOB_EXECUTION" id="3f3c43c0-387f-4e16-9f08-fea4d3bec1e0"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_title=testRunner.testCase.getPropertyValue("title1")
def req_nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def req_employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def req_snils=testRunner.testCase.getPropertyValue("snils1")
def req_lastName=testRunner.testCase.getPropertyValue("lastName1")
def req_firstName=testRunner.testCase.getPropertyValue("firstName1")
def req_middleName=testRunner.testCase.getPropertyValue("middleName1")
def req_jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")
def req_start=testRunner.testCase.getPropertyValue("start1")
def req_manageable=testRunner.testCase.getPropertyValue("manageableTrue").toBoolean()
def req_departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def req_maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveFalse").toBoolean()
def req_spec=testRunner.testCase.getPropertyValue("existedSpecId1")

def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].DEFAULT_MEDICAL_FACILITY_ID.toString()
def db_employeeId = lastItem[0].EMPLOYEE_ID.toString()
def db_snils = lastItem[0].EMPLOYEE_SNILS.toString()
def db_lastName = lastItem[0].EMPLOYEE_LAST_NAME.toString()
def db_firstName = lastItem[0].EMPLOYEE_FIRST_NAME.toString()
def db_middleName = lastItem[0].EMPLOYEE_MIDDLE_NAME.toString()
def db_jobExecutionVolume = lastItem[0].JOB_EXECUTION_VOLUME.toString()
def db_start = lastItem[0].JOB_EXECUTION_STARTED.toString()
def db_end = lastItem[0].JOB_EXECUTION_FINISHED
def db_nomId = lastItem[0].POSITION_NOM_ID.toString()
def db_title = lastItem[0].POSITION_TITLE.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_spec = lastItem[0].SPECIALIZATION_ID.toString()
def db_maternityLeave = lastItem[0].MATERNITY_LEAVE.toBoolean()
def db_locId = lastItem[0].DEFAULT_LOCATION_ID.toString()

assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_employeeId == req_employeeId
assert  db_snils == req_snils
assert  db_lastName == req_lastName
assert  db_firstName == req_firstName
assert  db_middleName == req_middleName
assert  db_jobExecutionVolume == req_jobExecutionVolume
assert  db_start.replace(" 00:00:00.0","") == req_start
assert  db_end == null
assert  db_nomId == req_nomId
assert  db_title == req_title
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_spec == req_spec
assert  db_maternityLeave == req_maternityLeave
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="a35df52a-1303-4fa2-8da9-c20c584f1fee"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_lastName=testRunner.testCase.getPropertyValue("lastName1")
def req_firstName=testRunner.testCase.getPropertyValue("firstName1")
def req_middleName=testRunner.testCase.getPropertyValue("middleName1")
String resTitle=req_lastName+" "+req_firstName+" "+req_middleName

def db_id = lastItem[0].ID
def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_title = lastItem[0].TITLE
def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID
def db_spec = lastItem[0].SPECIALIZATION_ID
def db_depId = lastItem[0].DEPARTMENT_ID
def db_depTitle = lastItem[0].DEPARTMENT_TITLE
def db_depNomId = lastItem[0].DEPARTMENT_NOM_ID
def db_funcKind = lastItem[0].FUNCTION_KIND
def db_funcId = lastItem[0].FUNCTION_ID
def db_funcTitle = lastItem[0].FUNCTION_TITLE
def db_funcVolume = lastItem[0].FUNCTION_VOLUME
def db_locId = lastItem[0].LOCATION_ID
def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()
def db_parentTypeId = lastItem[0].PARENT_TYPE_ID

assert  db_id != null
assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_title == resTitle
assert  db_resTypeId == null
assert  db_spec ==null
assert  db_depId ==null
assert  db_depTitle ==null
assert  db_depNomId ==null
assert  db_funcKind ==null
assert  db_funcId ==null
assert  db_funcTitle ==null
assert  db_funcVolume ==null
assert  db_locId ==null
assert  db_syncStatus =='IN_PROGRESS'
assert  db_parentTypeId ==null

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об изменении Исполнения должности" id="1c98deee-27ee-4a5a-a6c3-4d68ecb2f33d"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("Id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId2")
def mfId=testRunner.testCase.getPropertyValue("existedMfId2")
def locId=testRunner.testCase.getPropertyValue("existedLocId2")

def title=testRunner.testCase.getPropertyValue("title2")
def nomId=testRunner.testCase.getPropertyValue("existedPosNomId2")
def employeeId=testRunner.testCase.getPropertyValue("employeeId2")
def snils=testRunner.testCase.getPropertyValue("snils2")

def lastName=testRunner.testCase.getPropertyValue("lastName2")
def firstName=testRunner.testCase.getPropertyValue("firstName2")
def middleName=testRunner.testCase.getPropertyValue("middleName2")
def jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume2")

def start=testRunner.testCase.getPropertyValue("start2")
def end=testRunner.testCase.getPropertyValue("end1")
def manageable=testRunner.testCase.getPropertyValue("manageableTrue")
def departmentId=testRunner.testCase.getPropertyValue("departmentId2")
def departmentTitle=testRunner.testCase.getPropertyValue("departmentId2")

def departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")
def maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveTrue")
def spec=testRunner.testCase.getPropertyValue("existedSpecId2")
def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

sendMessageToKafka(topicJobExecution,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+id+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>"""+title+"""</title><nomId>"""+nomId+"""</nomId><employee id=\""""+employeeId+"""\"><ns2:snils>"""+snils+"""</ns2:snils><ns2:lastName>"""+lastName+"""</ns2:lastName><ns2:firstName>"""+firstName+"""</ns2:firstName><ns2:middleName>"""+middleName+"""</ns2:middleName></employee><jobExecutionVolume>"""+jobExecutionVolume+"""</jobExecutionVolume><jobExecutionPeriod><ns2:start>"""+start+"""</ns2:start><ns2:end>"""+end+"""</ns2:end></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable=\""""+manageable+"""\" id=\""""+departmentId+"""\"><ns2:title>"""+departmentTitle+"""</ns2:title><ns2:nomId>"""+departmentNomId+"""</ns2:nomId></department><specializationId>"""+spec+"""</specializationId><maternityLeave>"""+maternityLeave+"""</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в JOB_EXECUTION" id="d1f066fd-c455-45ac-9450-2b298570ee66"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId2")
def req_title=testRunner.testCase.getPropertyValue("title2")
def req_nomId=testRunner.testCase.getPropertyValue("existedPosNomId2")
def req_employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def req_snils=testRunner.testCase.getPropertyValue("snils1")
def req_lastName=testRunner.testCase.getPropertyValue("lastName2")
def req_firstName=testRunner.testCase.getPropertyValue("firstName2")
def req_middleName=testRunner.testCase.getPropertyValue("middleName2")
def req_jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume2")
def req_start=testRunner.testCase.getPropertyValue("start1")
def req_end=testRunner.testCase.getPropertyValue("end1")
def req_manageable=testRunner.testCase.getPropertyValue("manageableTrue").toBoolean()
def req_departmentId=testRunner.testCase.getPropertyValue("departmentId2")
def req_departmentTitle=testRunner.testCase.getPropertyValue("departmentId2")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")
def req_maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveTrue").toBoolean()
def req_spec=testRunner.testCase.getPropertyValue("existedSpecId2")

def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].DEFAULT_MEDICAL_FACILITY_ID.toString()
def db_employeeId = lastItem[0].EMPLOYEE_ID.toString()
def db_snils = lastItem[0].EMPLOYEE_SNILS.toString()
def db_lastName = lastItem[0].EMPLOYEE_LAST_NAME.toString()
def db_firstName = lastItem[0].EMPLOYEE_FIRST_NAME.toString()
def db_middleName = lastItem[0].EMPLOYEE_MIDDLE_NAME.toString()
def db_jobExecutionVolume = lastItem[0].JOB_EXECUTION_VOLUME.toString()
def db_start = lastItem[0].JOB_EXECUTION_STARTED.toString()
def db_end = lastItem[0].JOB_EXECUTION_FINISHED.toString()
def db_nomId = lastItem[0].POSITION_NOM_ID.toString()
def db_title = lastItem[0].POSITION_TITLE.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_spec = lastItem[0].SPECIALIZATION_ID.toString()
def db_maternityLeave = lastItem[0].MATERNITY_LEAVE.toBoolean()
def db_locId = lastItem[0].DEFAULT_LOCATION_ID.toString()

assert  db_archived == true
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_employeeId == req_employeeId
assert  db_snils == req_snils
assert  db_lastName == req_lastName
assert  db_firstName == req_firstName
assert  db_middleName == req_middleName
assert  db_jobExecutionVolume == req_jobExecutionVolume
assert  db_start.replace(" 00:00:00.0","") == req_start
assert  db_end.replace(" 00:00:00.0","") == req_end
assert  db_nomId == req_nomId
assert  db_title == req_title
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_spec == req_spec
assert  db_maternityLeave == req_maternityLeave
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в RESOURCE" id="2918ecd9-e2a9-4615-9ee3-3333460bd48b"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена")
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_lastName=testRunner.testCase.getPropertyValue("lastName1")
def req_firstName=testRunner.testCase.getPropertyValue("firstName1")
def req_middleName=testRunner.testCase.getPropertyValue("middleName1")
String resTitle=req_lastName+" "+req_firstName+" "+req_middleName

def db_id = lastItem[0].ID
def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_title = lastItem[0].TITLE
def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID
def db_spec = lastItem[0].SPECIALIZATION_ID
def db_depId = lastItem[0].DEPARTMENT_ID
def db_depTitle = lastItem[0].DEPARTMENT_TITLE
def db_depNomId = lastItem[0].DEPARTMENT_NOM_ID
def db_funcKind = lastItem[0].FUNCTION_KIND
def db_funcId = lastItem[0].FUNCTION_ID
def db_funcTitle = lastItem[0].FUNCTION_TITLE
def db_funcVolume = lastItem[0].FUNCTION_VOLUME
def db_locId = lastItem[0].LOCATION_ID
def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()
def db_parentTypeId = lastItem[0].PARENT_TYPE_ID

assert  db_id != null
assert  db_syncStatus =='IN_PROGRESS'


def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" изменена  корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="b32e64b2-f0c5-42a0-8e0e-0c935a552281"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tablePosNom, "existedPosNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeAR")
}


</script></con:config></con:testStep><con:properties><con:property><con:name>title1</con:name><con:value>Название должности автотест</con:value></con:property><con:property><con:name>title2</con:name><con:value>Название должности автотест 2</con:value></con:property><con:property><con:name>employeeId1</con:name><con:value>214456</con:value></con:property><con:property><con:name>employeeId2</con:name><con:value>2456356</con:value></con:property><con:property><con:name>snils1</con:name><con:value>25899524</con:value></con:property><con:property><con:name>snils2</con:name><con:value>85478566</con:value></con:property><con:property><con:name>lastName1</con:name><con:value>Фамилия автотест</con:value></con:property><con:property><con:name>lastName2</con:name><con:value>Фамилия автотест2</con:value></con:property><con:property><con:name>firstName1</con:name><con:value>Имя автотест</con:value></con:property><con:property><con:name>firstName2</con:name><con:value>Имя автотест2</con:value></con:property><con:property><con:name>middleName1</con:name><con:value>Отчетсво</con:value></con:property><con:property><con:name>middleName2</con:name><con:value>Отчетсво2</con:value></con:property><con:property><con:name>jobExecutionVolume1</con:name><con:value>1</con:value></con:property><con:property><con:name>jobExecutionVolume2</con:name><con:value>2</con:value></con:property><con:property><con:name>start1</con:name><con:value>1999-01-01</con:value></con:property><con:property><con:name>start2</con:name><con:value>1999-01-02</con:value></con:property><con:property><con:name>end1</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>end2</con:name><con:value>2200-10-01</con:value></con:property><con:property><con:name>manageableTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>manageableFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>departmentId1</con:name><con:value>222</con:value></con:property><con:property><con:name>departmentId2</con:name><con:value>223</con:value></con:property><con:property><con:name>departmentTitle1</con:name><con:value>Название подразделения автотест</con:value></con:property><con:property><con:name>departmentTitle2</con:name><con:value>Название подразделения автотест2</con:value></con:property><con:property><con:name>maternityLeaveTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>maternityLeaveFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="6a2a90cd-a23d-49c6-87ce-ce2a595e9ec7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="При создании Исполнения должности передали jobExecutionPeriod.end_ID7733" searchProperties="true"><con:settings><con:setting id="f210bfbc-4e9d-434f-a0c0-a519ab3de1a1fileName">При-создании-Исполнения-должности-передали-jobExecutionPeriod.end_ID7733</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="ea1a4c38-2b59-49f9-a4ed-6f18349fde32"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'AVAILABLE_RESOURCE', 0","resourceTypeAR", "where archived=0 and RESOURCE_KIND='AVAILABLE_RESOURCE'")
resourceTypeAR = testRunner.testCase.getPropertyValue("resourceTypeAR")

listMfIds="0"
listSpecIds="0"
listMoIds="0"
listAoIds="0"
listDepNomIds="0"
listPosNomIds="0"
listLocIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-"+i+"0,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-"+i+"0, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0")
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
	
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId

	checkExistenceAndSetPropertiesToTC(tableDepNom,"ID, TITLE, \"START\", \"END\"","--"+i+"0,'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId"+i, "where id not in ("+listDepNomIds+")")
	existedDepNomId = testRunner.testCase.getPropertyValue("existedDepNomId"+i)
	listDepNomIds=listDepNomIds+","+existedDepNomId

	checkExistenceAndSetPropertiesToTC(tablePosNom,"ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")
	existedPosNomId = testRunner.testCase.getPropertyValue("existedPosNomId"+i)
	listPosNomIds=listPosNomIds+","+existedPosNomId

	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "-10 ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId"+i, "where archived='0'  and id not in ("+listLocIds+")")
	existedLocId = testRunner.testCase.getPropertyValue("existedLocId"+i)
	listLocIds=listLocIds+","+existedLocId
	
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())

	getNonExistedColumnFromDBTable(tableLoc, "ID","locId"+i)
	locId = testRunner.testCase.getPropertyValue("locId"+i)
	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId+" ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"locId"+i, "where id ="+locId)
}</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Исполнения должности" id="498bea1c-d614-42d6-aad9-d86b189475e3"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("Id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def title=testRunner.testCase.getPropertyValue("title1")
def nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def snils=testRunner.testCase.getPropertyValue("snils1")

def lastName=testRunner.testCase.getPropertyValue("lastName1")
def firstName=testRunner.testCase.getPropertyValue("firstName1")
def middleName=testRunner.testCase.getPropertyValue("middleName1")
def jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")

def start=testRunner.testCase.getPropertyValue("start1")
def end=testRunner.testCase.getPropertyValue("end1")
def manageable=testRunner.testCase.getPropertyValue("manageableTrue")
def departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")

def departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveTrue")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

sendMessageToKafka(topicJobExecution,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+id+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>"""+title+"""</title><nomId>"""+nomId+"""</nomId><employee id=\""""+employeeId+"""\"><ns2:snils>"""+snils+"""</ns2:snils><ns2:lastName>"""+lastName+"""</ns2:lastName><ns2:firstName>"""+firstName+"""</ns2:firstName><ns2:middleName>"""+middleName+"""</ns2:middleName></employee><jobExecutionVolume>"""+jobExecutionVolume+"""</jobExecutionVolume><jobExecutionPeriod><ns2:start>"""+start+"""</ns2:start><ns2:end>"""+end+"""</ns2:end></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable=\""""+manageable+"""\" id=\""""+departmentId+"""\"><ns2:title>"""+departmentTitle+"""</ns2:title><ns2:nomId>"""+departmentNomId+"""</ns2:nomId></department><specializationId>"""+spec+"""</specializationId><maternityLeave>"""+maternityLeave+"""</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в JOB_EXECUTION" id="468f2667-f1c1-42cb-955b-b3ba2e1d773d"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
log.info(lastItem)
if ( sql(getLastItem) != 0){
		testRunner.fail("Запись в таблице "+table+" найдена")
}
else {
	log.info("Запись в таблице "+table+" не найдена")
	//log.info(lastItem)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="2b9decc6-40ff-4405-984c-2a2b25a710c9"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem) != 0){
		testRunner.fail("Запись в таблице "+table+" найдена")
}
else {
	log.info("Запись в таблице "+table+" не найдена")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="65394bc1-9714-481a-82b4-7532848c25cc"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tablePosNom, "existedPosNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeAR")
}


</script></con:config></con:testStep><con:properties><con:property><con:name>title1</con:name><con:value>Название должности автотест</con:value></con:property><con:property><con:name>title2</con:name><con:value>Название должности автотест 2</con:value></con:property><con:property><con:name>employeeId1</con:name><con:value>214456</con:value></con:property><con:property><con:name>employeeId2</con:name><con:value>2456356</con:value></con:property><con:property><con:name>snils1</con:name><con:value>25899524</con:value></con:property><con:property><con:name>snils2</con:name><con:value>85478566</con:value></con:property><con:property><con:name>lastName1</con:name><con:value>Фамилия автотест</con:value></con:property><con:property><con:name>lastName2</con:name><con:value>Фамилия автотест2</con:value></con:property><con:property><con:name>firstName1</con:name><con:value>Имя автотест</con:value></con:property><con:property><con:name>firstName2</con:name><con:value>Имя автотест2</con:value></con:property><con:property><con:name>middleName1</con:name><con:value>Отчетсво</con:value></con:property><con:property><con:name>middleName2</con:name><con:value>Отчетсво2</con:value></con:property><con:property><con:name>jobExecutionVolume1</con:name><con:value>1</con:value></con:property><con:property><con:name>jobExecutionVolume2</con:name><con:value>2</con:value></con:property><con:property><con:name>start1</con:name><con:value>1999-01-01</con:value></con:property><con:property><con:name>start2</con:name><con:value>1999-01-02</con:value></con:property><con:property><con:name>end1</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>end2</con:name><con:value>2200-10-01</con:value></con:property><con:property><con:name>manageableTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>manageableFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>departmentId1</con:name><con:value>222</con:value></con:property><con:property><con:name>departmentId2</con:name><con:value>223</con:value></con:property><con:property><con:name>departmentTitle1</con:name><con:value>Название подразделения автотест</con:value></con:property><con:property><con:name>departmentTitle2</con:name><con:value>Название подразделения автотест2</con:value></con:property><con:property><con:name>maternityLeaveTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>maternityLeaveFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="05d0181c-94f8-45d1-8d67-c67a587904ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности, НЕ подлежат обработке (department.manageable = false)_ID7732" searchProperties="true"><con:settings><con:setting id="0c6bcf71-3591-4f31-b158-9633297fbd76fileName">Создание-Исполнения-должности%2C-НЕ-подлежат-обработке-%28department.manageable-%3D-false%29_ID7732</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="2e68f73e-8fdf-4a17-883f-2291f3d135f7"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'AVAILABLE_RESOURCE', 0","resourceTypeAR", "where archived=0 and RESOURCE_KIND='AVAILABLE_RESOURCE'")
resourceTypeAR = testRunner.testCase.getPropertyValue("resourceTypeAR")

listMfIds="0"
listSpecIds="0"
listMoIds="0"
listAoIds="0"
listDepNomIds="0"
listPosNomIds="0"
listLocIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-"+i+"0,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-"+i+"0, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0")
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
	
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId

	checkExistenceAndSetPropertiesToTC(tableDepNom,"ID, TITLE, \"START\", \"END\"","--"+i+"0,'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId"+i, "where id not in ("+listDepNomIds+")")
	existedDepNomId = testRunner.testCase.getPropertyValue("existedDepNomId"+i)
	listDepNomIds=listDepNomIds+","+existedDepNomId

	checkExistenceAndSetPropertiesToTC(tablePosNom,"ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")
	existedPosNomId = testRunner.testCase.getPropertyValue("existedPosNomId"+i)
	listPosNomIds=listPosNomIds+","+existedPosNomId

	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "-10 ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId"+i, "where archived='0'  and id not in ("+listLocIds+")")
	existedLocId = testRunner.testCase.getPropertyValue("existedLocId"+i)
	listLocIds=listLocIds+","+existedLocId
	
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())

	getNonExistedColumnFromDBTable(tableLoc, "ID","locId"+i)
	locId = testRunner.testCase.getPropertyValue("locId"+i)
	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId+" ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"locId"+i, "where id ="+locId)
}</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Исполнения должности" id="b410b01a-e8db-499a-8ebe-318271de4703"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("Id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def title=testRunner.testCase.getPropertyValue("title1")
def nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def snils=testRunner.testCase.getPropertyValue("snils1")

def lastName=testRunner.testCase.getPropertyValue("lastName1")
def firstName=testRunner.testCase.getPropertyValue("firstName1")
def middleName=testRunner.testCase.getPropertyValue("middleName1")
def jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")

def start=testRunner.testCase.getPropertyValue("start1")
def manageable=testRunner.testCase.getPropertyValue("manageableFalse")
def departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")

def departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveTrue")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

sendMessageToKafka(topicJobExecution,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+id+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>"""+title+"""</title><nomId>"""+nomId+"""</nomId><employee id=\""""+employeeId+"""\"><ns2:snils>"""+snils+"""</ns2:snils><ns2:lastName>"""+lastName+"""</ns2:lastName><ns2:firstName>"""+firstName+"""</ns2:firstName><ns2:middleName>"""+middleName+"""</ns2:middleName></employee><jobExecutionVolume>"""+jobExecutionVolume+"""</jobExecutionVolume><jobExecutionPeriod><ns2:start>"""+start+"""</ns2:start></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable=\""""+manageable+"""\" id=\""""+departmentId+"""\"><ns2:title>"""+departmentTitle+"""</ns2:title><ns2:nomId>"""+departmentNomId+"""</ns2:nomId></department><specializationId>"""+spec+"""</specializationId><maternityLeave>"""+maternityLeave+"""</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в JOB_EXECUTION" id="ec74363f-797e-4b58-82da-6570118fb3d4"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
log.info(lastItem)
if ( sql(getLastItem) != 0){
		testRunner.fail("Запись в таблице "+table+" найдена")
}
else {
	log.info("Запись в таблице "+table+" не найдена")
	//log.info(lastItem)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="7d8eb7c3-ea1e-422b-8b9a-e6afa5cb4776"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem) != 0){
		testRunner.fail("Запись в таблице "+table+" найдена")
}
else {
	log.info("Запись в таблице "+table+" не найдена")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="3035f8c1-35b1-4541-8763-07f33b990c4e"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tablePosNom, "existedPosNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeAR")
}


</script></con:config></con:testStep><con:properties><con:property><con:name>title1</con:name><con:value>Название должности автотест</con:value></con:property><con:property><con:name>title2</con:name><con:value>Название должности автотест 2</con:value></con:property><con:property><con:name>employeeId1</con:name><con:value>214456</con:value></con:property><con:property><con:name>employeeId2</con:name><con:value>2456356</con:value></con:property><con:property><con:name>snils1</con:name><con:value>25899524</con:value></con:property><con:property><con:name>snils2</con:name><con:value>85478566</con:value></con:property><con:property><con:name>lastName1</con:name><con:value>Фамилия автотест</con:value></con:property><con:property><con:name>lastName2</con:name><con:value>Фамилия автотест2</con:value></con:property><con:property><con:name>firstName1</con:name><con:value>Имя автотест</con:value></con:property><con:property><con:name>firstName2</con:name><con:value>Имя автотест2</con:value></con:property><con:property><con:name>middleName1</con:name><con:value>Отчетсво</con:value></con:property><con:property><con:name>middleName2</con:name><con:value>Отчетсво2</con:value></con:property><con:property><con:name>jobExecutionVolume1</con:name><con:value>1</con:value></con:property><con:property><con:name>jobExecutionVolume2</con:name><con:value>2</con:value></con:property><con:property><con:name>start1</con:name><con:value>1999-01-01</con:value></con:property><con:property><con:name>start2</con:name><con:value>1999-01-02</con:value></con:property><con:property><con:name>end1</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>end2</con:name><con:value>2200-10-01</con:value></con:property><con:property><con:name>manageableTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>manageableFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>departmentId1</con:name><con:value>222</con:value></con:property><con:property><con:name>departmentId2</con:name><con:value>223</con:value></con:property><con:property><con:name>departmentTitle1</con:name><con:value>Название подразделения автотест</con:value></con:property><con:property><con:name>departmentTitle2</con:name><con:value>Название подразделения автотест2</con:value></con:property><con:property><con:name>maternityLeaveTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>maternityLeaveFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="4d2c5578-e9b1-4527-a6e2-d4cabc2f1101" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности ID7739" searchProperties="true"><con:settings><con:setting id="26c10805-6a04-4a38-8582-8c7c8537690cfileName">Создание-Исполнения-должности-ID7739</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="5bdf49cd-ba1e-4259-b644-8d86e716efa1"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'AVAILABLE_RESOURCE', 0","resourceTypeAR", "where archived=0 and RESOURCE_KIND='AVAILABLE_RESOURCE'")
resourceTypeAR = testRunner.testCase.getPropertyValue("resourceTypeAR")

listMfIds="0"
listSpecIds="0"
listMoIds="0"
listAoIds="0"
listDepNomIds="0"
listPosNomIds="0"
listLocIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-"+i+"0,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-"+i+"0, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0")
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
	
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId

	checkExistenceAndSetPropertiesToTC(tableDepNom,"ID, TITLE, \"START\", \"END\"","--"+i+"0,'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId"+i, "where id not in ("+listDepNomIds+")")
	existedDepNomId = testRunner.testCase.getPropertyValue("existedDepNomId"+i)
	listDepNomIds=listDepNomIds+","+existedDepNomId

	checkExistenceAndSetPropertiesToTC(tablePosNom,"ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")
	existedPosNomId = testRunner.testCase.getPropertyValue("existedPosNomId"+i)
	listPosNomIds=listPosNomIds+","+existedPosNomId

	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "-10 ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId"+i, "where archived='0'  and id not in ("+listLocIds+")")
	existedLocId = testRunner.testCase.getPropertyValue("existedLocId"+i)
	listLocIds=listLocIds+","+existedLocId
	
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())

	getNonExistedColumnFromDBTable(tableLoc, "ID","locId"+i)
	locId = testRunner.testCase.getPropertyValue("locId"+i)
	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId+" ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"locId"+i, "where id ="+locId)
}</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в JOB_EXECUTION" id="5360a221-7419-488c-9535-340ab2f32b6e"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_title=testRunner.testCase.getPropertyValue("title1")
def req_nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def req_employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def req_snils=testRunner.testCase.getPropertyValue("snils1")
def req_lastName=testRunner.testCase.getPropertyValue("lastName1")
def req_firstName=testRunner.testCase.getPropertyValue("firstName1")
def req_middleName=testRunner.testCase.getPropertyValue("middleName1")
def req_jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")
def req_start=testRunner.testCase.getPropertyValue("start1")
def req_manageable=testRunner.testCase.getPropertyValue("manageableTrue").toBoolean()
def req_departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def req_maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveFalse").toBoolean()
def req_spec=testRunner.testCase.getPropertyValue("existedSpecId1")

def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].DEFAULT_MEDICAL_FACILITY_ID.toString()
def db_employeeId = lastItem[0].EMPLOYEE_ID.toString()
def db_snils = lastItem[0].EMPLOYEE_SNILS.toString()
def db_lastName = lastItem[0].EMPLOYEE_LAST_NAME.toString()
def db_firstName = lastItem[0].EMPLOYEE_FIRST_NAME.toString()
def db_middleName = lastItem[0].EMPLOYEE_MIDDLE_NAME.toString()
def db_jobExecutionVolume = lastItem[0].JOB_EXECUTION_VOLUME.toString()
def db_start = lastItem[0].JOB_EXECUTION_STARTED.toString()
def db_end = lastItem[0].JOB_EXECUTION_FINISHED
def db_nomId = lastItem[0].POSITION_NOM_ID.toString()
def db_title = lastItem[0].POSITION_TITLE.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_spec = lastItem[0].SPECIALIZATION_ID.toString()
def db_maternityLeave = lastItem[0].MATERNITY_LEAVE.toBoolean()
def db_locId = lastItem[0].DEFAULT_LOCATION_ID.toString()

assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_employeeId == req_employeeId
assert  db_snils == req_snils
assert  db_lastName == req_lastName
assert  db_firstName == req_firstName
assert  db_middleName == req_middleName
assert  db_jobExecutionVolume == req_jobExecutionVolume
assert  db_start.replace(" 00:00:00.0","") == req_start
assert  db_end == null
assert  db_nomId == req_nomId
assert  db_title == req_title
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_spec == req_spec
assert  db_maternityLeave == req_maternityLeave
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Исполнения должности" id="85c4579c-8b40-4e6a-bb9b-4f5b2c06cfb6"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("Id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def title=testRunner.testCase.getPropertyValue("title1")
def nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def snils=testRunner.testCase.getPropertyValue("snils1")

def lastName=testRunner.testCase.getPropertyValue("lastName1")
def firstName=testRunner.testCase.getPropertyValue("firstName1")
def middleName=testRunner.testCase.getPropertyValue("middleName1")
def jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")

def start=testRunner.testCase.getPropertyValue("start1")
def manageable=testRunner.testCase.getPropertyValue("manageableTrue")
def departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")

def departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveFalse")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

sendMessageToKafka(topicJobExecution,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+id+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>"""+title+"""</title><nomId>"""+nomId+"""</nomId><employee id=\""""+employeeId+"""\"><ns2:snils>"""+snils+"""</ns2:snils><ns2:lastName>"""+lastName+"""</ns2:lastName><ns2:firstName>"""+firstName+"""</ns2:firstName><ns2:middleName>"""+middleName+"""</ns2:middleName></employee><jobExecutionVolume>"""+jobExecutionVolume+"""</jobExecutionVolume><jobExecutionPeriod><ns2:start>"""+start+"""</ns2:start></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable=\""""+manageable+"""\" id=\""""+departmentId+"""\"><ns2:title>"""+departmentTitle+"""</ns2:title><ns2:nomId>"""+departmentNomId+"""</ns2:nomId></department><specializationId>"""+spec+"""</specializationId><maternityLeave>"""+maternityLeave+"""</maternityLeave><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId><defaultLocationId>"""+locId+"""</defaultLocationId></jobExecution>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="0bc5add8-cb07-499e-84ed-f58a4a75df28"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_lastName=testRunner.testCase.getPropertyValue("lastName1")
def req_firstName=testRunner.testCase.getPropertyValue("firstName1")
def req_middleName=testRunner.testCase.getPropertyValue("middleName1")
String resTitle=req_lastName+" "+req_firstName+" "+req_middleName

def db_id = lastItem[0].ID
def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_title = lastItem[0].TITLE
def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID
def db_spec = lastItem[0].SPECIALIZATION_ID
def db_depId = lastItem[0].DEPARTMENT_ID
def db_depTitle = lastItem[0].DEPARTMENT_TITLE
def db_depNomId = lastItem[0].DEPARTMENT_NOM_ID
def db_funcKind = lastItem[0].FUNCTION_KIND
def db_funcId = lastItem[0].FUNCTION_ID
def db_funcTitle = lastItem[0].FUNCTION_TITLE
def db_funcVolume = lastItem[0].FUNCTION_VOLUME
def db_locId = lastItem[0].LOCATION_ID
def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()
def db_parentTypeId = lastItem[0].PARENT_TYPE_ID

assert  db_id != null
assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_title == resTitle
assert  db_resTypeId == null
assert  db_spec ==null
assert  db_depId ==null
assert  db_depTitle ==null
assert  db_depNomId ==null
assert  db_funcKind ==null
assert  db_funcId ==null
assert  db_funcTitle ==null
assert  db_funcVolume ==null
assert  db_locId ==null
assert  db_syncStatus =='IN_PROGRESS'
assert  db_parentTypeId ==null

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="d080aac5-8b60-4518-bdbb-d049f1e3a3f6"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tablePosNom, "existedPosNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeAR")
}


</script></con:config></con:testStep><con:properties><con:property><con:name>title1</con:name><con:value>Название должности автотест</con:value></con:property><con:property><con:name>title2</con:name><con:value>Название должности автотест 2</con:value></con:property><con:property><con:name>employeeId1</con:name><con:value>214456</con:value></con:property><con:property><con:name>employeeId2</con:name><con:value>2456356</con:value></con:property><con:property><con:name>snils1</con:name><con:value>25899524</con:value></con:property><con:property><con:name>snils2</con:name><con:value>85478566</con:value></con:property><con:property><con:name>lastName1</con:name><con:value>Фамилия автотест</con:value></con:property><con:property><con:name>lastName2</con:name><con:value>Фамилия автотест2</con:value></con:property><con:property><con:name>firstName1</con:name><con:value>Имя автотест</con:value></con:property><con:property><con:name>firstName2</con:name><con:value>Имя автотест2</con:value></con:property><con:property><con:name>middleName1</con:name><con:value>Отчетсво</con:value></con:property><con:property><con:name>middleName2</con:name><con:value>Отчетсво2</con:value></con:property><con:property><con:name>jobExecutionVolume1</con:name><con:value>1</con:value></con:property><con:property><con:name>jobExecutionVolume2</con:name><con:value>2</con:value></con:property><con:property><con:name>start1</con:name><con:value>1999-01-01</con:value></con:property><con:property><con:name>start2</con:name><con:value>1999-01-02</con:value></con:property><con:property><con:name>end1</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>end2</con:name><con:value>2200-10-01</con:value></con:property><con:property><con:name>manageableTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>manageableFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>departmentId1</con:name><con:value>222</con:value></con:property><con:property><con:name>departmentId2</con:name><con:value>223</con:value></con:property><con:property><con:name>departmentTitle1</con:name><con:value>Название подразделения автотест</con:value></con:property><con:property><con:name>departmentTitle2</con:name><con:value>Название подразделения автотест2</con:value></con:property><con:property><con:name>maternityLeaveTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>maternityLeaveFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="7755f7b4-7882-4de2-a34d-48120703631c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности без локациии и признака maternity_leave" searchProperties="true"><con:settings><con:setting id="381bc4d5-8c19-4524-8792-c3b90b60b158fileName">Создание-Исполнения-должности-без-локациии-и-признака-maternity_leave</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="9f3a6df7-2c46-4c55-81ff-caa34c69d14d"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'AVAILABLE_RESOURCE', 0","resourceTypeAR", "where archived=0 and RESOURCE_KIND='AVAILABLE_RESOURCE'")
resourceTypeAR = testRunner.testCase.getPropertyValue("resourceTypeAR")

listMfIds="0"
listSpecIds="0"
listMoIds="0"
listAoIds="0"
listDepNomIds="0"
listPosNomIds="0"
listLocIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-"+i+"0,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-"+i+"0, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0")
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
	
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId

	checkExistenceAndSetPropertiesToTC(tableDepNom,"ID, TITLE, \"START\", \"END\"","--"+i+"0,'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId"+i, "where id not in ("+listDepNomIds+")")
	existedDepNomId = testRunner.testCase.getPropertyValue("existedDepNomId"+i)
	listDepNomIds=listDepNomIds+","+existedDepNomId

	checkExistenceAndSetPropertiesToTC(tablePosNom,"ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")
	existedPosNomId = testRunner.testCase.getPropertyValue("existedPosNomId"+i)
	listPosNomIds=listPosNomIds+","+existedPosNomId

	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "-10 ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId"+i, "where archived='0'  and id not in ("+listLocIds+")")
	existedLocId = testRunner.testCase.getPropertyValue("existedLocId"+i)
	listLocIds=listLocIds+","+existedLocId
	
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())

	getNonExistedColumnFromDBTable(tableLoc, "ID","locId"+i)
	locId = testRunner.testCase.getPropertyValue("locId"+i)
	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId+" ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"locId"+i, "where id ="+locId)
}</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Исполнения должности" id="33474811-9496-4aa0-a081-de22c4af65ba"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("Id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def title=testRunner.testCase.getPropertyValue("title1")
def nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def snils=testRunner.testCase.getPropertyValue("snils1")

def lastName=testRunner.testCase.getPropertyValue("lastName1")
def firstName=testRunner.testCase.getPropertyValue("firstName1")
def middleName=testRunner.testCase.getPropertyValue("middleName1")
def jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")

def start=testRunner.testCase.getPropertyValue("start1")
def manageable=testRunner.testCase.getPropertyValue("manageableTrue")
def departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")

def departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveFalse")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

sendMessageToKafka(topicJobExecution,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+id+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>"""+title+"""</title><nomId>"""+nomId+"""</nomId><employee id=\""""+employeeId+"""\"><ns2:snils>"""+snils+"""</ns2:snils><ns2:lastName>"""+lastName+"""</ns2:lastName><ns2:firstName>"""+firstName+"""</ns2:firstName><ns2:middleName>"""+middleName+"""</ns2:middleName></employee><jobExecutionVolume>"""+jobExecutionVolume+"""</jobExecutionVolume><jobExecutionPeriod><ns2:start>"""+start+"""</ns2:start></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable=\""""+manageable+"""\" id=\""""+departmentId+"""\"><ns2:title>"""+departmentTitle+"""</ns2:title><ns2:nomId>"""+departmentNomId+"""</ns2:nomId></department><specializationId>"""+spec+"""</specializationId><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId></jobExecution>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в JOB_EXECUTION" id="3d9b7fd4-85f1-4349-ab70-361a9262374c"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_title=testRunner.testCase.getPropertyValue("title1")
def req_nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def req_employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def req_snils=testRunner.testCase.getPropertyValue("snils1")
def req_lastName=testRunner.testCase.getPropertyValue("lastName1")
def req_firstName=testRunner.testCase.getPropertyValue("firstName1")
def req_middleName=testRunner.testCase.getPropertyValue("middleName1")
def req_jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")
def req_start=testRunner.testCase.getPropertyValue("start1")
def req_manageable=testRunner.testCase.getPropertyValue("manageableTrue").toBoolean()
def req_departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def req_spec=testRunner.testCase.getPropertyValue("existedSpecId1")

def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].DEFAULT_MEDICAL_FACILITY_ID.toString()
def db_employeeId = lastItem[0].EMPLOYEE_ID.toString()
def db_snils = lastItem[0].EMPLOYEE_SNILS.toString()
def db_lastName = lastItem[0].EMPLOYEE_LAST_NAME.toString()
def db_firstName = lastItem[0].EMPLOYEE_FIRST_NAME.toString()
def db_middleName = lastItem[0].EMPLOYEE_MIDDLE_NAME.toString()
def db_jobExecutionVolume = lastItem[0].JOB_EXECUTION_VOLUME.toString()
def db_start = lastItem[0].JOB_EXECUTION_STARTED.toString()
def db_end = lastItem[0].JOB_EXECUTION_FINISHED
def db_nomId = lastItem[0].POSITION_NOM_ID.toString()
def db_title = lastItem[0].POSITION_TITLE.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_spec = lastItem[0].SPECIALIZATION_ID.toString()
def db_maternityLeave = lastItem[0].MATERNITY_LEAVE.toBoolean()
def db_locId = lastItem[0].DEFAULT_LOCATION_ID

assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_employeeId == req_employeeId
assert  db_snils == req_snils
assert  db_lastName == req_lastName
assert  db_firstName == req_firstName
assert  db_middleName == req_middleName
assert  db_jobExecutionVolume == req_jobExecutionVolume
assert  db_start.replace(" 00:00:00.0","") == req_start
assert  db_end == null
assert  db_nomId == req_nomId
assert  db_title == req_title
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_spec == req_spec
assert  db_maternityLeave == false
assert  db_locId == null 
	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="cdecb43e-35d3-477d-b431-5698fb2a3b8d"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_lastName=testRunner.testCase.getPropertyValue("lastName1")
def req_firstName=testRunner.testCase.getPropertyValue("firstName1")
def req_middleName=testRunner.testCase.getPropertyValue("middleName1")
String resTitle=req_lastName+" "+req_firstName+" "+req_middleName

def db_id = lastItem[0].ID
def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_title = lastItem[0].TITLE
def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID
def db_spec = lastItem[0].SPECIALIZATION_ID
def db_depId = lastItem[0].DEPARTMENT_ID
def db_depTitle = lastItem[0].DEPARTMENT_TITLE
def db_depNomId = lastItem[0].DEPARTMENT_NOM_ID
def db_funcKind = lastItem[0].FUNCTION_KIND
def db_funcId = lastItem[0].FUNCTION_ID
def db_funcTitle = lastItem[0].FUNCTION_TITLE
def db_funcVolume = lastItem[0].FUNCTION_VOLUME
def db_locId = lastItem[0].LOCATION_ID
def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()
def db_parentTypeId = lastItem[0].PARENT_TYPE_ID

assert  db_id != null
assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_title == resTitle
assert  db_resTypeId == null
assert  db_spec ==null
assert  db_depId ==null
assert  db_depTitle ==null
assert  db_depNomId ==null
assert  db_funcKind ==null
assert  db_funcId ==null
assert  db_funcTitle ==null
assert  db_funcVolume ==null
assert  db_locId ==null
assert  db_syncStatus =='IN_PROGRESS'
assert  db_parentTypeId ==null

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="5d9a65c9-fe41-44af-8391-20239e0f0833"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='AVAILABLE_RESOURCE' and parent_id="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tablePosNom, "existedPosNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeAR")
}


</script></con:config></con:testStep><con:properties><con:property><con:name>title1</con:name><con:value>Название должности автотест</con:value></con:property><con:property><con:name>title2</con:name><con:value>Название должности автотест 2</con:value></con:property><con:property><con:name>employeeId1</con:name><con:value>214456</con:value></con:property><con:property><con:name>employeeId2</con:name><con:value>2456356</con:value></con:property><con:property><con:name>snils1</con:name><con:value>25899524</con:value></con:property><con:property><con:name>snils2</con:name><con:value>85478566</con:value></con:property><con:property><con:name>lastName1</con:name><con:value>Фамилия автотест</con:value></con:property><con:property><con:name>lastName2</con:name><con:value>Фамилия автотест2</con:value></con:property><con:property><con:name>firstName1</con:name><con:value>Имя автотест</con:value></con:property><con:property><con:name>firstName2</con:name><con:value>Имя автотест2</con:value></con:property><con:property><con:name>middleName1</con:name><con:value>Отчетсво</con:value></con:property><con:property><con:name>middleName2</con:name><con:value>Отчетсво2</con:value></con:property><con:property><con:name>jobExecutionVolume1</con:name><con:value>1</con:value></con:property><con:property><con:name>jobExecutionVolume2</con:name><con:value>2</con:value></con:property><con:property><con:name>start1</con:name><con:value>1999-01-01</con:value></con:property><con:property><con:name>start2</con:name><con:value>1999-01-02</con:value></con:property><con:property><con:name>end1</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>end2</con:name><con:value>2200-10-01</con:value></con:property><con:property><con:name>manageableTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>manageableFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>departmentId1</con:name><con:value>222</con:value></con:property><con:property><con:name>departmentId2</con:name><con:value>223</con:value></con:property><con:property><con:name>departmentTitle1</con:name><con:value>Название подразделения автотест</con:value></con:property><con:property><con:name>departmentTitle2</con:name><con:value>Название подразделения автотест2</con:value></con:property><con:property><con:name>maternityLeaveTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>maternityLeaveFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>topicJobExecution</con:name><con:value>topicJobExecution.rir2</con:value></con:property><con:property><con:name>count</con:name><con:value>2</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="67dd54fc-0e24-4be6-b361-586ed7c59798" name="Обработка сообщений по Оборудованию в локации"><con:settings><con:setting id="152309d1-81ba-4b0b-b0f2-c1943e3c300cfileName">Обработка-сообщений-по-Оборудованию-в-локации</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="8bb4f824-41ac-49d9-b3d8-e1d1fe505318" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение всех параметров Оборудования в локации_ID76600" searchProperties="true"><con:settings><con:setting id="44fc1dcf-1b32-49df-82bf-d7385d8be929fileName">Изменение-всех-параметров-Оборудования-в-локации_ID76600</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Подбор id" id="2564c432-30dd-4289-95ec-a52c29fc3188"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 


def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+tableName+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"createdByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"createdByTest"+nextI, "1")
		}
	}
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")

findEntitiesInDBwithConditionOrCreate("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'SPECIAL_AVAILABLE_RESOURCE', 0","resourceTypeSAR",1, "where archived=0 and RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE'")
resourceTypeSAR = testRunner.testCase.getPropertyValue("resourceTypeSAR1")

findEntitiesInDBwithConditionOrCreate(tableTC,"ID, CODE, TITLE, ARCHIVED", "(select min(id)-5 from "+tableTC+") ,'autotest','Категория ММ автотест','0'","tcId", 1,"where archived='0'")
tcId = testRunner.testCase.getPropertyValue("tcId1")

findEntitiesInDBwithConditionOrCreate(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","(select min(id)-5 from "+tableMO+"),0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId",2, "where archived=0 ")
existedMoId = testRunner.testCase.getPropertyValue("existedMoId1")

findEntitiesInDBwithConditionOrCreate(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "(select min(id)-5 from "+tableAO+"), 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId", 1,"where archive=0")
existedAoId = testRunner.testCase.getPropertyValue("existedAoId1")

findEntitiesInDBwithConditionOrCreate(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","(select min(id)-5 from "+tableMF+"),"+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId",2, "where archived=0")
existedMfId = testRunner.testCase.getPropertyValue("existedMfId1")

findEntitiesInDBwithConditionOrCreate(tableDepNom,"ID, TITLE, \"START\", \"END\"","(select min(id)-5 from "+tableDepNom+"),'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId", 2)

findEntitiesInDBwithConditionOrCreate(tableEP,"ID, ARCHIVED, RESOURCE_TYPE_ID", "(select min(id)-5 from "+tableEP+"),0,"+resourceTypeSAR,"existedEPId",2, "where archived =0")

findEntitiesInDBwithConditionOrCreate(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "(select min(id)-5 from "+tableLoc+"),'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId",2, "where archived='0'")

getNonExistedColumnFromDBTable(table, "ID","id1", "1")
getNonExistedColumnFromDBTable(tableLoc, "ID","locId1")
getNonExistedColumnFromDBTable(table, "ID","id2", "2")
getNonExistedColumnFromDBTable(tableLoc, "ID","locId2")
locId1=testRunner.testCase.getPropertyValue("locId1")
locId2=testRunner.testCase.getPropertyValue("locId2")
findEntitiesInDBwithConditionOrCreate(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId1+",'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId1",1, "where archived='0' and id = "+locId1)
findEntitiesInDBwithConditionOrCreate(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId2+",'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId2",1, "where archived='0' and id = "+locId2)

treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()

findEntitiesInDBwithConditionOrCreate(tableT,"ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE", "(select min(id)-5 from "+tableT+")'0', 'ММ автотест РиР2', 1,"+tcId+",'test' ","existedTId",treatmentCount, "where archived='0'")
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Оборудования" id="707e01b3-7ca8-4eac-be4b-5e8244a80cdf"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId1")

def depId=testRunner.testCase.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def personalizedService=testRunner.testCase.getPropertyValue("true")
def capacity=testRunner.testCase.getPropertyValue("capacity1")
def tId1=testRunner.testCase.getPropertyValue("existedTId1")
def tId2=testRunner.testCase.getPropertyValue("existedTId2")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived="false" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT" id="9bbc0ece-d400-470f-8fb7-fcddf67104e2"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("true").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity1")
def req_departmentId=testRunner.testCase.getPropertyValue("depId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT_TREATMENT" id="d811d177-e1d4-4df3-85e5-2a5f10251d8c"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableET")
getEquipmentTreatments = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id)
equipmentTreatments= sql.rows(getEquipmentTreatments)
if ( equipmentTreatments.size()== 2){
		log.info("В таблице "+table+" найдено нужное количество записей")
}
else {
	testRunner.fail("Количество записей в таблице "+table+" не соответствует ожидаемому, найдено "+equipmentTreatments.size()+" записей.")
}

for (int i=1; i&lt;=2; i++){
		tId = testRunner.testCase.getPropertyValue("existedTId"+i)
		getEquipmentTreatment = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id+" and TREATMENT_ID="+tId)
		//log.info(sql(getEquipmentTreatment))
		if (sql(getEquipmentTreatment)== 1){
			treatment = sql.rows(getEquipmentTreatment)
			if (i==1){
				assert treatment[0].USE_BY_DEFAULT == 1
			}
			else{
				assert treatment[0].USE_BY_DEFAULT == 0	
			}
		}
		else{
			testRunner.fail("В таблице "+table+" не найдена запись для ММ "+tId)	
		}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="9fb2f1e7-5625-4688-a978-607b35f1e2e2"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")


def db_id = lastItem[0].ID
def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_title = lastItem[0].TITLE
def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID
def db_spec = lastItem[0].SPECIALIZATION_ID
def db_depId = lastItem[0].DEPARTMENT_ID
def db_depTitle = lastItem[0].DEPARTMENT_TITLE
def db_depNomId = lastItem[0].DEPARTMENT_NOM_ID
def db_funcKind = lastItem[0].FUNCTION_KIND
def db_funcId = lastItem[0].FUNCTION_ID
def db_funcTitle = lastItem[0].FUNCTION_TITLE
def db_funcVolume = lastItem[0].FUNCTION_VOLUME
def db_locId = lastItem[0].LOCATION_ID
def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()
def db_parentTypeId = lastItem[0].PARENT_TYPE_ID

assert  db_id != null
assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_title == req_model
assert  db_syncStatus =='IN_PROGRESS'
assert  db_resTypeId == null
assert  db_spec ==null
assert  db_depId ==null
assert  db_depTitle ==null
assert  db_depNomId ==null
assert  db_funcKind ==null
assert  db_funcId ==null
assert  db_funcTitle ==null
assert  db_funcVolume ==null
assert  db_locId ==null
assert  db_parentTypeId ==null

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Ожидание окончания синхронизации ресурса" id="f74eb065-5af6-406e-a4cd-9c0f6ad9d109"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
	 for (int j = 0; j &lt; 21; j++) {
		String querySar="SELECT * FROM "+table+"  WHERE RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id
		rowsSar = sql.rows(querySar)
		if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
			if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS' &amp;&amp; j==20){
				testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+" не завершена, время ожидания завершено.")
			}
			else {
				log.info("Ресурс ожидает синхронизации. Подождем...")
				sleep(6000)
			}
		}
		else {
			log.info("Ресурс синхронизирован, статус синхронизации : "+rowsSar[0].SYNC_STATUS)
			break;
		}
	 }
	 if (rowsSar[0].SYNC_STATUS=='ERROR'){
		testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+" завершена с ошибкой.")
	 }</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об изменении Оборудования" id="1cad805a-55c8-4fe6-8e95-768bb4cd664e"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId2")
def mfId=testRunner.testCase.getPropertyValue("existedMfId2")
def locId=testRunner.testCase.getPropertyValue("existedLocId2")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel2")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId2")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId2")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId2")

def depId=testRunner.testCase.getPropertyValue("depId2")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle2")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")

def personalizedService=testRunner.testCase.getPropertyValue("false")
def capacity=testRunner.testCase.getPropertyValue("capacity2")
def tId1=testRunner.testCase.getPropertyValue("existedTId3")
def tId2=testRunner.testCase.getPropertyValue("existedTId4")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived="true" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в EQUIPMENT" id="45a06755-3cb4-4595-a171-a0888c37d1ff"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId2")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel2")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId2")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId2")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("false").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity2")
def req_departmentId=testRunner.testCase.getPropertyValue("depId2")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle2")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == true
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" изменена корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в EQUIPMENT_TREATMENT" id="8cc82c56-5303-4b1d-b558-eb0d6f8bb618"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableET")
getEquipmentTreatments = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id)
equipmentTreatments= sql.rows(getEquipmentTreatments)
if ( equipmentTreatments.size()== 2){
		log.info("В таблице "+table+" найдено нужное количество записей")
}
else {
	testRunner.fail("Количество записей в таблице "+table+" не соответствует ожидаемому, найдено "+equipmentTreatments.size()+" записей.")
}

for (int i=3; i&lt;=4; i++){
		tId = testRunner.testCase.getPropertyValue("existedTId"+i)
		getEquipmentTreatment = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id+" and TREATMENT_ID="+tId)
		//log.info(sql(getEquipmentTreatment))
		if (sql(getEquipmentTreatment)== 1){
			treatment = sql.rows(getEquipmentTreatment)
			if (i==3){
				assert treatment[0].USE_BY_DEFAULT == 1
			}
			else{
				assert treatment[0].USE_BY_DEFAULT == 0	
			}
		}
		else{
			testRunner.fail("В таблице "+table+" не найдена запись для ММ "+tId)	
		}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в RESOURCE" id="cac2e742-b607-4052-9f18-28cd19d2a99c"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)

def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()


assert  db_syncStatus =='IN_PROGRESS'


def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" изменена корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об изменении Оборудования с archived=false" id="801f5d42-e1fa-49b6-8d5a-82d1e22a32fd"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId2")
def mfId=testRunner.testCase.getPropertyValue("existedMfId2")
def locId=testRunner.testCase.getPropertyValue("existedLocId2")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel2")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId2")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId2")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId2")

def depId=testRunner.testCase.getPropertyValue("depId2")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle2")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")

def personalizedService=testRunner.testCase.getPropertyValue("false")
def capacity=testRunner.testCase.getPropertyValue("capacity2")
def tId1=testRunner.testCase.getPropertyValue("existedTId3")
def tId2=testRunner.testCase.getPropertyValue("existedTId4")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived="false" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в EQUIPMENT2" id="d4b41211-a7e5-47b4-951f-05ae2f6063b5"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId2")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel2")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId2")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId2")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("false").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity2")
def req_departmentId=testRunner.testCase.getPropertyValue("depId2")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle2")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" изменена корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об изменении Оборудования с archived=true" id="c5dd0fd6-7703-4e73-b565-0bc7faac7f9e"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId2")
def mfId=testRunner.testCase.getPropertyValue("existedMfId2")
def locId=testRunner.testCase.getPropertyValue("existedLocId2")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel2")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId2")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId2")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId2")

def depId=testRunner.testCase.getPropertyValue("depId2")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle2")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")

def personalizedService=testRunner.testCase.getPropertyValue("false")
def capacity=testRunner.testCase.getPropertyValue("capacity2")
def tId1=testRunner.testCase.getPropertyValue("existedTId3")
def tId2=testRunner.testCase.getPropertyValue("existedTId4")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived="true" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в EQUIPMENT3" id="12dd765d-12b4-4c47-bc3d-1a77a580a09b"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId2")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel2")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId2")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId2")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("false").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity2")
def req_departmentId=testRunner.testCase.getPropertyValue("depId2")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle2")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == true
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" изменена корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения об изменении Оборудования без archived" id="ca56383e-8af5-4c2e-8986-58166de62095"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId2")
def mfId=testRunner.testCase.getPropertyValue("existedMfId2")
def locId=testRunner.testCase.getPropertyValue("existedLocId2")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel2")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId2")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId2")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId2")

def depId=testRunner.testCase.getPropertyValue("depId2")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle2")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")

def personalizedService=testRunner.testCase.getPropertyValue("false")
def capacity=testRunner.testCase.getPropertyValue("capacity2")
def tId1=testRunner.testCase.getPropertyValue("existedTId3")
def tId2=testRunner.testCase.getPropertyValue("existedTId4")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived="false" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка изменения записи в EQUIPMENT4" id="4807f71c-cfbf-41a0-8fea-3eb38e94001b"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId2")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel2")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId2")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId2")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("false").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity2")
def req_departmentId=testRunner.testCase.getPropertyValue("depId2")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle2")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId2")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" изменена корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="b9a17e6a-3de4-44ba-9406-eefec2d52fbc"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id="+id)
	sql.execute("delete from "+tableET+" where EQUIPMENT_ID="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableEP, "existedEPId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeSAR")
}

treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i &lt;=treatmentCount;i++){
	deleteCreatedByTestInTestCase(tableT, "existedTId"+i)
}
deleteCreatedByTestInTestCase(tableTC, "tcId")
</script></con:config></con:testStep><con:properties><con:property><con:name>treatmentCount</con:name><con:value>4</con:value></con:property><con:property><con:name>n</con:name><con:value>2</con:value></con:property><con:property><con:name>count</con:name><con:value>2</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId2</con:name><con:value>254645</con:value></con:property><con:property><con:name>equipmentModel1</con:name><con:value>Название модели оборудования автотест рир</con:value></con:property><con:property><con:name>equipmentModel2</con:name><con:value>Название модели оборудования автотест рир2</con:value></con:property><con:property><con:name>personalizedServiceTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>personalizedServiceFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>capacity1</con:name><con:value>1</con:value></con:property><con:property><con:name>capacity2</con:name><con:value>2</con:value></con:property><con:property><con:name>depId1</con:name><con:value>123456</con:value></con:property><con:property><con:name>depId2</con:name><con:value>234567</con:value></con:property><con:property><con:name>depTitle1</con:name><con:value>Описание отделения автотет</con:value></con:property><con:property><con:name>depTitle2</con:name><con:value>Описание отделения автотет2</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentTypeId1</con:name><con:value>10</con:value></con:property><con:property><con:name>equipmentTypeId2</con:name><con:value>11</con:value></con:property><con:property><con:name>true</con:name><con:value>true</con:value></con:property><con:property><con:name>false</con:name><con:value>false</con:value></con:property><con:property><con:name>resourceTypeSAR1</con:name><con:value>156645371</con:value></con:property><con:property><con:name>resourceTypeSARcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMoIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedAoIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMfIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMfIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedDepNomIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedDepNomIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedEPIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedEPIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId11</con:name><con:value>7725</con:value></con:property><con:property><con:name>existedLocId1createdByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>existedLocId21</con:name><con:value>7725</con:value></con:property><con:property><con:name>existedLocId2createdByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest3</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest4</con:name><con:value>0</con:value></con:property><con:property><con:name>tcId2</con:name><con:value>128627842</con:value></con:property><con:property><con:name>tcIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMoIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMoId1</con:name><con:value>103</con:value></con:property><con:property><con:name>existedMoId2</con:name><con:value>120</con:value></con:property><con:property><con:name>existedAoId1</con:name><con:value>142</con:value></con:property><con:property><con:name>existedMfId1</con:name><con:value>162</con:value></con:property><con:property><con:name>existedMfId2</con:name><con:value>163</con:value></con:property><con:property><con:name>existedDepNomId1</con:name><con:value>125692830</con:value></con:property><con:property><con:name>existedDepNomId2</con:name><con:value>125692831</con:value></con:property><con:property><con:name>existedEPId1</con:name><con:value>123</con:value></con:property><con:property><con:name>existedEPId2</con:name><con:value>146017593</con:value></con:property><con:property><con:name>id1</con:name><con:value>1175</con:value></con:property><con:property><con:name>locId1</con:name><con:value>7725</con:value></con:property><con:property><con:name>id2</con:name><con:value>1176</con:value></con:property><con:property><con:name>locId2</con:name><con:value>7725</con:value></con:property><con:property><con:name>existedTId1</con:name><con:value>135468844</con:value></con:property><con:property><con:name>existedTId2</con:name><con:value>135468854</con:value></con:property><con:property><con:name>existedTId3</con:name><con:value>135468856</con:value></con:property><con:property><con:name>existedTId4</con:name><con:value>135468858</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="8b7bcdb8-2dd8-434c-8e9e-2dccec15c3d9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Оборудования в локации без archived_ID76585" searchProperties="true"><con:settings><con:setting id="46815ef8-d10a-4886-988e-60d4f1ad1ed4fileName">Создание-Оборудования-в-локации-без-archived_ID76585</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="c9c23bf9-6d12-4589-9235-e08e8a916fd5"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'SPECIAL_AVAILABLE_RESOURCE', 0","resourceTypeSAR", "where archived=0 and RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE'")
resourceTypeSAR = testRunner.testCase.getPropertyValue("resourceTypeSAR")

checkExistenceAndSetPropertiesToTC(tableTC,"ID, CODE, TITLE, ARCHIVED", "-10 ,'autotest','Категория ММ автотест','0'","tcId", "where archived='0'")
tcId = testRunner.testCase.getPropertyValue("tcId")

listMfIds="0"
listSpecIds="0"
listMoIds="0"
listAoIds="0"
listDepNomIds="0"
listEPIds="0"
listLocIds="0"
listTIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-"+i+"0,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-"+i+"0, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0")
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
	
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId

	checkExistenceAndSetPropertiesToTC(tableDepNom,"ID, TITLE, \"START\", \"END\"","--"+i+"0,'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId"+i, "where id not in ("+listDepNomIds+")")
	existedDepNomId = testRunner.testCase.getPropertyValue("existedDepNomId"+i)
	listDepNomIds=listDepNomIds+","+existedDepNomId

	checkExistenceAndSetPropertiesToTC(tableEP,"ID, ARCHIVED, RESOURCE_TYPE_ID", "--"+i+"0 ,0,"+resourceTypeSAR,"existedEPId"+i, "where archived =0 and id not in ("+listEPIds+")")
	existedEPId = testRunner.testCase.getPropertyValue("existedEPId"+i)
	listEPIds=listEPIds+","+existedEPId

	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "-10 ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId"+i, "where archived='0'  and id not in ("+listLocIds+")")
	existedLocId = testRunner.testCase.getPropertyValue("existedLocId"+i)
	listLocIds=listLocIds+","+existedLocId

	
	
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())

	getNonExistedColumnFromDBTable(tableLoc, "ID","locId"+i)
	locId = testRunner.testCase.getPropertyValue("locId"+i)
	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId+" ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"locId"+i, "where id ="+locId)
}
treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i &lt;=treatmentCount;i++){
	checkExistenceAndSetPropertiesToTC(tableT,"ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE", "-1"+i+" ,'0', 'ММ автотест РиР2', 1,"+tcId+",'test' ","existedTId"+i, "where archived='0'  and id not in ("+listTIds+")")
	existedTId = testRunner.testCase.getPropertyValue("existedTId"+i)
	listTIds=listTIds+","+existedTId
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Оборудования" id="cd706e88-ec35-4fa9-a062-d902c881f8ad"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId1")

def depId=testRunner.testCase.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def personalizedService=testRunner.testCase.getPropertyValue("true")
def capacity=testRunner.testCase.getPropertyValue("capacity1")
def tId1=testRunner.testCase.getPropertyValue("existedTId1")
def tId2=testRunner.testCase.getPropertyValue("existedTId2")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT" id="50daf28c-31ad-4eee-bd83-db1039ba0ee4"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("true").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity1")
def req_departmentId=testRunner.testCase.getPropertyValue("depId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT_TREATMENT" id="93f00ca6-0112-4de5-9882-b99a4e6dfe26"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableET")
getEquipmentTreatments = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id)
equipmentTreatments= sql.rows(getEquipmentTreatments)
if ( equipmentTreatments.size()== 2){
		log.info("В таблице "+table+" найдено нужное количество записей")
}
else {
	testRunner.fail("Количество записей в таблице "+table+" не соответствует ожидаемому, найдено "+equipmentTreatments.size()+" записей.")
}

for (int i=1; i&lt;=2; i++){
		tId = testRunner.testCase.getPropertyValue("existedTId"+i)
		getEquipmentTreatment = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id+" and TREATMENT_ID="+tId)
		//log.info(sql(getEquipmentTreatment))
		if (sql(getEquipmentTreatment)== 1){
			treatment = sql.rows(getEquipmentTreatment)
			if (i==1){
				assert treatment[0].USE_BY_DEFAULT == 1
			}
			else{
				assert treatment[0].USE_BY_DEFAULT == 0	
			}
		}
		else{
			testRunner.fail("В таблице "+table+" не найдена запись для ММ "+tId)	
		}
}
/*
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("true").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity1")
def req_departmentId=testRunner.testCase.getPropertyValue("depId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="7e69b5fc-755c-462d-8c5b-f4963009dae9"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")


def db_id = lastItem[0].ID
def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_title = lastItem[0].TITLE
def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID
def db_spec = lastItem[0].SPECIALIZATION_ID
def db_depId = lastItem[0].DEPARTMENT_ID
def db_depTitle = lastItem[0].DEPARTMENT_TITLE
def db_depNomId = lastItem[0].DEPARTMENT_NOM_ID
def db_funcKind = lastItem[0].FUNCTION_KIND
def db_funcId = lastItem[0].FUNCTION_ID
def db_funcTitle = lastItem[0].FUNCTION_TITLE
def db_funcVolume = lastItem[0].FUNCTION_VOLUME
def db_locId = lastItem[0].LOCATION_ID
def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()
def db_parentTypeId = lastItem[0].PARENT_TYPE_ID

assert  db_id != null
assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_title == req_model
assert  db_syncStatus =='IN_PROGRESS'
assert  db_resTypeId == null
assert  db_spec ==null
assert  db_depId ==null
assert  db_depTitle ==null
assert  db_depNomId ==null
assert  db_funcKind ==null
assert  db_funcId ==null
assert  db_funcTitle ==null
assert  db_funcVolume ==null
assert  db_locId ==null
assert  db_parentTypeId ==null

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="c2d331f8-4075-45e5-a18c-140264019bae"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id="+id)
	sql.execute("delete from "+tableET+" where EQUIPMENT_ID="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableEP, "existedEPId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeSAR")
}

treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i &lt;=treatmentCount;i++){
	deleteCreatedByTestInTestCase(tableT, "existedTId"+i)
}
deleteCreatedByTestInTestCase(tableTC, "tcId")
</script></con:config></con:testStep><con:properties><con:property><con:name>treatmentCount</con:name><con:value>2</con:value></con:property><con:property><con:name>n</con:name><con:value>2</con:value></con:property><con:property><con:name>count</con:name><con:value>2</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId2</con:name><con:value>254645</con:value></con:property><con:property><con:name>equipmentModel1</con:name><con:value>Название модели оборудования автотест рир</con:value></con:property><con:property><con:name>equipmentModel2</con:name><con:value>Название модели оборудования автотест рир2</con:value></con:property><con:property><con:name>personalizedServiceTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>personalizedServiceFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>capacity1</con:name><con:value>1</con:value></con:property><con:property><con:name>capacity2</con:name><con:value>2</con:value></con:property><con:property><con:name>depId1</con:name><con:value>123456</con:value></con:property><con:property><con:name>depId2</con:name><con:value>234567</con:value></con:property><con:property><con:name>depTitle1</con:name><con:value>Описание отделения автотет</con:value></con:property><con:property><con:name>depTitle2</con:name><con:value>Описание отделения автотет2</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentTypeId1</con:name><con:value>10</con:value></con:property><con:property><con:name>equipmentTypeId2</con:name><con:value>11</con:value></con:property><con:property><con:name>true</con:name><con:value>true</con:value></con:property><con:property><con:name>false</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="368a3b6c-b686-4010-9441-11ef60243ef1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Оборудования в локации с 100 ММ_ID76619" searchProperties="true"><con:settings><con:setting id="e4abc564-cf34-43b7-a4d3-896fd8159cb5fileName">Создание-Оборудования-в-локации-с-100-ММ_ID76619</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Подбор id" id="d82a2cbe-3ca1-4d7a-a140-dc7403b5f571"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 


def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+tableName+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"createdByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"createdByTest"+nextI, "1")
		}
	}
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
findEntitiesInDBwithConditionOrCreate("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'SPECIAL_AVAILABLE_RESOURCE', 0","resourceTypeSAR",1, "where archived=0 and RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE'")
resourceTypeSAR = testRunner.testCase.getPropertyValue("resourceTypeSAR1")

findEntitiesInDBwithConditionOrCreate(tableTC,"ID, CODE, TITLE, ARCHIVED", "(select min(id)-5 from "+tableTC+") ,'autotest','Категория ММ автотест','0'","tcId", 1,"where archived='0'")
tcId = testRunner.testCase.getPropertyValue("tcId1")

findEntitiesInDBwithConditionOrCreate(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","(select min(id)-5 from "+tableMO+"),0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId",1, "where archived=0 ")
existedMoId = testRunner.testCase.getPropertyValue("existedMoId1")

findEntitiesInDBwithConditionOrCreate(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "(select min(id)-5 from "+tableAO+"), 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId", 1,"where archive=0")
existedAoId = testRunner.testCase.getPropertyValue("existedAoId1")

findEntitiesInDBwithConditionOrCreate(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","(select min(id)-5 from "+tableMF+"),"+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId",2, "where archived=0")
existedMfId = testRunner.testCase.getPropertyValue("existedMfId1")

findEntitiesInDBwithConditionOrCreate(tableDepNom,"ID, TITLE, \"START\", \"END\"","(select min(id)-5 from "+tableDepNom+"),'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId", 2)

findEntitiesInDBwithConditionOrCreate(tableEP,"ID, ARCHIVED, RESOURCE_TYPE_ID", "(select min(id)-5 from "+tableEP+"),0,"+resourceTypeSAR,"existedEPId",2, "where archived =0")

findEntitiesInDBwithConditionOrCreate(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "(select min(id)-5 from "+tableLoc+"),'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId",2, "where archived='0'")

getNonExistedColumnFromDBTable(table, "ID","id1", "1")
getNonExistedColumnFromDBTable(tableLoc, "ID","locId1")
getNonExistedColumnFromDBTable(table, "ID","id2", "2")
getNonExistedColumnFromDBTable(tableLoc, "ID","locId2")
locId1=testRunner.testCase.getPropertyValue("locId1")
locId2=testRunner.testCase.getPropertyValue("locId2")
findEntitiesInDBwithConditionOrCreate(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId1+",'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId1",1, "where archived='0' and id = "+locId1)
findEntitiesInDBwithConditionOrCreate(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId2+",'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId2",1, "where archived='0' and id = "+locId2)

treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()

findEntitiesInDBwithConditionOrCreate(tableT,"ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE", "(select min(id)-5 from "+tableT+")'0', 'ММ автотест РиР2', 1,"+tcId+",'test' ","existedTId",treatmentCount, "where archived='0'")
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Оборудования" id="3172fdaf-8f0a-4904-a177-4b7562b896dc"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

String treatments=""
treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i <=treatmentCount;i++){
	def treatmetId=testRunner.testCase.getPropertyValue("existedTId"+i)
	if(i==1){
		treatments=treatments+"<ns4:treatment><ns4:id>"+treatmetId+"</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment>"
	}
	else {
		treatments=treatments+"<ns4:treatment><ns4:id>"+treatmetId+"</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment>"
	}
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId1")

def depId=testRunner.testCase.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def personalizedService=testRunner.testCase.getPropertyValue("true")
def capacity=testRunner.testCase.getPropertyValue("capacity1")
def tId1=testRunner.testCase.getPropertyValue("existedTId1")
def tId2=testRunner.testCase.getPropertyValue("existedTId2")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments>"""+treatments+"""</ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT" id="ba42b5c5-8abc-43cb-b133-47ec135be15d"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("true").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity1")
def req_departmentId=testRunner.testCase.getPropertyValue("depId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT_TREATMENT" id="0fae6bd2-f9f3-40e9-aab0-c3b5477b8ab1"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableET")
getEquipmentTreatments = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id)
equipmentTreatments= sql.rows(getEquipmentTreatments)
if ( equipmentTreatments.size()== treatmentCount){
		log.info("В таблице "+table+" найдено нужное количество записей")
}
else {
	testRunner.fail("Количество записей в таблице "+table+" не соответствует ожидаемому, найдено "+equipmentTreatments.size()+" записей.")
}


for (int i=1; i&lt;=treatmentCount; i++){
		tId = testRunner.testCase.getPropertyValue("existedTId"+i)
		getEquipmentTreatment = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id+" and TREATMENT_ID="+tId)
		//log.info(sql(getEquipmentTreatment))
		if (sql(getEquipmentTreatment)== 1){
			treatment = sql.rows(getEquipmentTreatment)
			if (i==1){
				assert treatment[0].USE_BY_DEFAULT == 1
			}
			else{
				assert treatment[0].USE_BY_DEFAULT == 0	
			}
		}
		else{
			testRunner.fail("В таблице "+table+" не найдена запись для ММ "+tId)	
		}
}
/*
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("true").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity1")
def req_departmentId=testRunner.testCase.getPropertyValue("depId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="0c663420-751f-40c1-952c-c5df1c22561e"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")


def db_id = lastItem[0].ID
def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_title = lastItem[0].TITLE
def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID
def db_spec = lastItem[0].SPECIALIZATION_ID
def db_depId = lastItem[0].DEPARTMENT_ID
def db_depTitle = lastItem[0].DEPARTMENT_TITLE
def db_depNomId = lastItem[0].DEPARTMENT_NOM_ID
def db_funcKind = lastItem[0].FUNCTION_KIND
def db_funcId = lastItem[0].FUNCTION_ID
def db_funcTitle = lastItem[0].FUNCTION_TITLE
def db_funcVolume = lastItem[0].FUNCTION_VOLUME
def db_locId = lastItem[0].LOCATION_ID
def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()
def db_parentTypeId = lastItem[0].PARENT_TYPE_ID

assert  db_id != null
assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_title == req_model
assert  db_syncStatus =='IN_PROGRESS'
assert  db_resTypeId == null
assert  db_spec ==null
assert  db_depId ==null
assert  db_depTitle ==null
assert  db_depNomId ==null
assert  db_funcKind ==null
assert  db_funcId ==null
assert  db_funcTitle ==null
assert  db_funcVolume ==null
assert  db_locId ==null
assert  db_parentTypeId ==null

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="da173815-0bed-406c-9327-c32df789b905"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id="+id)
	sql.execute("delete from "+tableET+" where EQUIPMENT_ID="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableEP, "existedEPId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeSAR")
}

treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i &lt;=treatmentCount;i++){
	deleteCreatedByTestInTestCase(tableT, "existedTId"+i)
}
deleteCreatedByTestInTestCase(tableTC, "tcId")
</script></con:config></con:testStep><con:properties><con:property><con:name>treatmentCount</con:name><con:value>100</con:value></con:property><con:property><con:name>n</con:name><con:value>2</con:value></con:property><con:property><con:name>count</con:name><con:value>2</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId2</con:name><con:value>254645</con:value></con:property><con:property><con:name>equipmentModel1</con:name><con:value>Название модели оборудования автотест рир</con:value></con:property><con:property><con:name>equipmentModel2</con:name><con:value>Название модели оборудования автотест рир2</con:value></con:property><con:property><con:name>personalizedServiceTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>personalizedServiceFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>capacity1</con:name><con:value>1</con:value></con:property><con:property><con:name>capacity2</con:name><con:value>2</con:value></con:property><con:property><con:name>depId1</con:name><con:value>123456</con:value></con:property><con:property><con:name>depId2</con:name><con:value>234567</con:value></con:property><con:property><con:name>depTitle1</con:name><con:value>Описание отделения автотет</con:value></con:property><con:property><con:name>depTitle2</con:name><con:value>Описание отделения автотет2</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentTypeId1</con:name><con:value>10</con:value></con:property><con:property><con:name>equipmentTypeId2</con:name><con:value>11</con:value></con:property><con:property><con:name>true</con:name><con:value>true</con:value></con:property><con:property><con:name>false</con:name><con:value>false</con:value></con:property><con:property><con:name>resourceTypeSAR1</con:name><con:value>156645371</con:value></con:property><con:property><con:name>resourceTypeSARcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMoIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedAoIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMfIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedMfIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedDepNomIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedDepNomIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedEPIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedEPIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId11</con:name><con:value>7726</con:value></con:property><con:property><con:name>existedLocId1createdByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>existedLocId21</con:name><con:value>7726</con:value></con:property><con:property><con:name>existedLocId2createdByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest3</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest4</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest5</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest6</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest7</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest8</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest9</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest10</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest11</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest12</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest13</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest14</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest15</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest16</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest17</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest18</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest19</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest20</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest21</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest22</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest23</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest24</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest25</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest26</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest27</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest28</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest29</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest30</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest31</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest32</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest33</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest34</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest35</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest36</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest37</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest38</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest39</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest40</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest41</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest42</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest43</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest44</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest45</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest46</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest47</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest48</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest49</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest50</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest51</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest52</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest53</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest54</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest55</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest56</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest57</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest58</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest59</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest60</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest61</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest62</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest63</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest64</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest65</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest66</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest67</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest68</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest69</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest70</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest71</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest72</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest73</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest74</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest75</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest76</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest77</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest78</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest79</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest80</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest81</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest82</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest83</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest84</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest85</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest86</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest87</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest88</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest89</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest90</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest91</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest92</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest93</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest94</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest95</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest96</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest97</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest98</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest99</con:name><con:value>0</con:value></con:property><con:property><con:name>existedTIdcreatedByTest100</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a7eaf283-1be5-484b-9eac-39f40a5679f0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Оборудования в локации с archived=false_ID76586" searchProperties="true"><con:settings><con:setting id="1bbbea99-bda7-4176-9b95-5b43c7385556fileName">Создание-Оборудования-в-локации-с-archived%3Dfalse_ID76586</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Подбор id" id="8f4627e1-3ebf-43a5-8ce4-02066617e966"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'SPECIAL_AVAILABLE_RESOURCE', 0","resourceTypeSAR", "where archived=0 and RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE'")
resourceTypeSAR = testRunner.testCase.getPropertyValue("resourceTypeSAR")

checkExistenceAndSetPropertiesToTC(tableTC,"ID, CODE, TITLE, ARCHIVED", "-10 ,'autotest','Категория ММ автотест','0'","tcId", "where archived='0'")
tcId = testRunner.testCase.getPropertyValue("tcId")

listMfIds="0"
listSpecIds="0"
listMoIds="0"
listAoIds="0"
listDepNomIds="0"
listEPIds="0"
listLocIds="0"
listTIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-"+i+"0,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-"+i+"0, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0")
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
	
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId

	checkExistenceAndSetPropertiesToTC(tableDepNom,"ID, TITLE, \"START\", \"END\"","--"+i+"0,'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId"+i, "where id not in ("+listDepNomIds+")")
	existedDepNomId = testRunner.testCase.getPropertyValue("existedDepNomId"+i)
	listDepNomIds=listDepNomIds+","+existedDepNomId

	checkExistenceAndSetPropertiesToTC(tableEP,"ID, ARCHIVED, RESOURCE_TYPE_ID", "--"+i+"0 ,0,"+resourceTypeSAR,"existedEPId"+i, "where archived =0 and id not in ("+listEPIds+")")
	existedEPId = testRunner.testCase.getPropertyValue("existedEPId"+i)
	listEPIds=listEPIds+","+existedEPId

	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "-10 ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId"+i, "where archived='0'  and id not in ("+listLocIds+")")
	existedLocId = testRunner.testCase.getPropertyValue("existedLocId"+i)
	listLocIds=listLocIds+","+existedLocId

	
	
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())

	getNonExistedColumnFromDBTable(tableLoc, "ID","locId"+i)
	locId = testRunner.testCase.getPropertyValue("locId"+i)
	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId+" ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"locId"+i, "where id ="+locId)
}
treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i &lt;=treatmentCount;i++){
	checkExistenceAndSetPropertiesToTC(tableT,"ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE", "-1"+i+" ,'0', 'ММ автотест РиР2', 1,"+tcId+",'test' ","existedTId"+i, "where archived='0'  and id not in ("+listTIds+")")
	existedTId = testRunner.testCase.getPropertyValue("existedTId"+i)
	listTIds=listTIds+","+existedTId
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Оборудования" id="b352ed10-eb01-47bd-b13b-a5ea8cbb5349"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId1")

def depId=testRunner.testCase.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def personalizedService=testRunner.testCase.getPropertyValue("true")
def capacity=testRunner.testCase.getPropertyValue("capacity1")
def tId1=testRunner.testCase.getPropertyValue("existedTId1")
def tId2=testRunner.testCase.getPropertyValue("existedTId2")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived="false" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT" id="05f7b01e-9202-4b8d-a61f-7b6e8404c875"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("true").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity1")
def req_departmentId=testRunner.testCase.getPropertyValue("depId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT_TREATMENT" id="3c1705c9-fb08-4d16-8e2b-6418f12f3b38"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableET")
getEquipmentTreatments = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id)
equipmentTreatments= sql.rows(getEquipmentTreatments)
if ( equipmentTreatments.size()== treatmentCount){
		log.info("В таблице "+table+" найдено нужное количество записей")
}
else {
	testRunner.fail("Количество записей в таблице "+table+" не соответствует ожидаемому, найдено "+equipmentTreatments.size()+" записей.")
}

for (int i=1; i&lt;=2; i++){
		tId = testRunner.testCase.getPropertyValue("existedTId"+i)
		getEquipmentTreatment = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id+" and TREATMENT_ID="+tId)
		//log.info(sql(getEquipmentTreatment))
		if (sql(getEquipmentTreatment)== 1){
			treatment = sql.rows(getEquipmentTreatment)
			if (i==1){
				assert treatment[0].USE_BY_DEFAULT == 1
			}
			else{
				assert treatment[0].USE_BY_DEFAULT == 0	
			}
		}
		else{
			testRunner.fail("В таблице "+table+" не найдена запись для ММ "+tId)	
		}
}
/*
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_locId=testRunner.testCase.getPropertyValue("existedLocId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")
def req_equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def req_typeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def req_profileId=testRunner.testCase.getPropertyValue("existedEPId1")
def req_personalizedService=testRunner.testCase.getPropertyValue("true").toBoolean()
def req_capacity=testRunner.testCase.getPropertyValue("capacity1")
def req_departmentId=testRunner.testCase.getPropertyValue("depId1")
def req_departmentTitle=testRunner.testCase.getPropertyValue("depTitle1")
def req_departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def db_archived = lastItem[0].ARCHIVED.toString()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_typeId = lastItem[0].EQUIPMENT_TYPE_ID.toString()
def db_model = lastItem[0].EQUIPMENT_MODEL.toString()
def db_equipmentId = lastItem[0].EQUIPMENT_ID.toString()
def db_profileId = lastItem[0].EQUIPMENT_PROFILE_ID.toString()
def db_personalizedService = lastItem[0].PERSONALIZED_SERVICE.toString()
def db_capacity = lastItem[0].CAPACITY_FOR_ROOM.toString()
def db_departmentId = lastItem[0].DEPARTMENT_ID.toString()
def db_departmentTitle = lastItem[0].DEPARTMENT_TITLE.toString()
def db_departmentNomId = lastItem[0].DEPARTMENT_NOM_ID.toString()
def db_locId = lastItem[0].LOCATION_ID.toString()

assert  db_archived.toBoolean() == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_typeId == req_typeId
assert  db_equipmentId == req_equipmentId
assert  db_profileId == req_profileId
assert  db_personalizedService.toBoolean() == req_personalizedService
assert  db_capacity == req_capacity
assert  db_model == req_model
assert  db_departmentId == req_departmentId
assert  db_departmentTitle == req_departmentTitle
assert  db_departmentNomId == req_departmentNomId
assert  db_locId == req_locId
	log.info("Запись в таблице "+table+" создана корректно.")
}*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="c032af59-21e9-464d-ad58-85d243cbfb76"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+table+" не найдена")
}
else {
	log.info("Запись в таблице "+table+" найдена"+lastItem[0].ID)
	//log.info(lastItem)
def req_moId=testRunner.testCase.getPropertyValue("existedMoId1")
def req_mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def req_model=testRunner.testCase.getPropertyValue("equipmentModel1")


def db_id = lastItem[0].ID
def db_archived = lastItem[0].ARCHIVED.toBoolean()
def db_moId = lastItem[0].MEDICAL_ORGANIZATION_ID.toString()
def db_mfId = lastItem[0].MEDICAL_FACILITY_ID.toString()
def db_title = lastItem[0].TITLE
def db_resTypeId = lastItem[0].RESOURCE_TYPE_ID
def db_spec = lastItem[0].SPECIALIZATION_ID
def db_depId = lastItem[0].DEPARTMENT_ID
def db_depTitle = lastItem[0].DEPARTMENT_TITLE
def db_depNomId = lastItem[0].DEPARTMENT_NOM_ID
def db_funcKind = lastItem[0].FUNCTION_KIND
def db_funcId = lastItem[0].FUNCTION_ID
def db_funcTitle = lastItem[0].FUNCTION_TITLE
def db_funcVolume = lastItem[0].FUNCTION_VOLUME
def db_locId = lastItem[0].LOCATION_ID
def db_syncStatus = lastItem[0].SYNC_STATUS
def db_syncStatusChanged = lastItem[0].SYNC_STATUS_CHANGED.toString()
def db_parentTypeId = lastItem[0].PARENT_TYPE_ID

assert  db_id != null
assert  db_archived == false
assert  db_moId ==  req_moId
assert  db_mfId == req_mfId
assert  db_title == req_model
assert  db_syncStatus =='IN_PROGRESS'
assert  db_resTypeId == null
assert  db_spec ==null
assert  db_depId ==null
assert  db_depTitle ==null
assert  db_depNomId ==null
assert  db_funcKind ==null
assert  db_funcId ==null
assert  db_funcTitle ==null
assert  db_funcVolume ==null
assert  db_locId ==null
assert  db_parentTypeId ==null

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
currentDate=sdf.format(date)
//log.info(currentDate)
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date2=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(db_syncStatusChanged)
dbDate = sdf.format(date2)
//log.info(currentDate)
assert  currentDate == dbDate


	log.info("Запись в таблице "+table+" создана корректно.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="2ea52a04-4fed-4889-b3fa-612e6cf260b6"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id="+id)
	sql.execute("delete from "+tableET+" where EQUIPMENT_ID="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableEP, "existedEPId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeSAR")
}

treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i &lt;=treatmentCount;i++){
	deleteCreatedByTestInTestCase(tableT, "existedTId"+i)
}
deleteCreatedByTestInTestCase(tableTC, "tcId")
</script></con:config></con:testStep><con:properties><con:property><con:name>treatmentCount</con:name><con:value>2</con:value></con:property><con:property><con:name>n</con:name><con:value>2</con:value></con:property><con:property><con:name>count</con:name><con:value>2</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId2</con:name><con:value>254645</con:value></con:property><con:property><con:name>equipmentModel1</con:name><con:value>Название модели оборудования автотест рир</con:value></con:property><con:property><con:name>equipmentModel2</con:name><con:value>Название модели оборудования автотест рир2</con:value></con:property><con:property><con:name>personalizedServiceTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>personalizedServiceFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>capacity1</con:name><con:value>1</con:value></con:property><con:property><con:name>capacity2</con:name><con:value>2</con:value></con:property><con:property><con:name>depId1</con:name><con:value>123456</con:value></con:property><con:property><con:name>depId2</con:name><con:value>234567</con:value></con:property><con:property><con:name>depTitle1</con:name><con:value>Описание отделения автотет</con:value></con:property><con:property><con:name>depTitle2</con:name><con:value>Описание отделения автотет2</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentTypeId1</con:name><con:value>10</con:value></con:property><con:property><con:name>equipmentTypeId2</con:name><con:value>11</con:value></con:property><con:property><con:name>true</con:name><con:value>true</con:value></con:property><con:property><con:name>false</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="67b251d7-93e1-45f3-a567-44d58c90ec25" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Оборудования в локации с archived=true_ID76587" searchProperties="true"><con:settings><con:setting id="e47744c8-88a2-440f-b1bc-214a2c8d4234fileName">Создание-Оборудования-в-локации-с-archived%3Dtrue_ID76587</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="2aa0ea5e-a4c7-48b5-a044-3989d9147888"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
n=testRunner.testCase.getPropertyValue("n")
count=testRunner.testCase.getPropertyValue("count").toInteger()
sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def checkExistenceAndSetPropertiesToTC (String tableName, String columns, String values , String propertyName, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def row = sql(query)
	//log.info(row)
	def result =sql.rows(query)
	String resultId;
	String createdByTest="0"
	if (row == 0){
			log.info("Таблица "+tableName+ " пуста, создаю новую запись.")
			
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition
			//log.info(query2)
			def result2 =sql.rows(query2)
			 resultId= result2[0].ID
			 createdByTest="1"
		}
	else {
		 resultId= result[0].ID
		log.info("Таблица "+tableName+ " имеет подходящую запись.")
		}
	testRunner.testCase.setPropertyValue(propertyName, resultId)
	testRunner.testCase.setPropertyValue(propertyName+"createdByTest", createdByTest)
	log.info("Записан  параметр "+propertyName+ " = "+resultId)
}

table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")

existedMoId = testRunner.testCase.getPropertyValue("existedMoId")
checkExistenceAndSetPropertiesToTC("RESOURCE_TYPE","ID, TITLE, RESOURCE_KIND, ARCHIVED", "-10,'Тип ресурса для ДР автотест РиР2', 'SPECIAL_AVAILABLE_RESOURCE', 0","resourceTypeSAR", "where archived=0 and RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE'")
resourceTypeSAR = testRunner.testCase.getPropertyValue("resourceTypeSAR")

checkExistenceAndSetPropertiesToTC(tableTC,"ID, CODE, TITLE, ARCHIVED", "-10 ,'autotest','Категория ММ автотест','0'","tcId", "where archived='0'")
tcId = testRunner.testCase.getPropertyValue("tcId")

listMfIds="0"
listSpecIds="0"
listMoIds="0"
listAoIds="0"
listDepNomIds="0"
listEPIds="0"
listLocIds="0"
listTIds="0"

for(int i =1; i &lt;=count;i++){
	checkExistenceAndSetPropertiesToTC(tableMO,"ID,ARCHIVED,NAME,NAME_FULL,OGRN,CLOSED,CREATED","-"+i+"0,0,'МО для тестирования ЕСУ','МО для тестирования ЕСУ',NULL,TIMESTAMP '1970-01-01 00:00:00.000000'","existedMoId"+i, "where archived=0 and id not in ("+listMoIds+")")
	existedMoId = testRunner.testCase.getPropertyValue("existedMoId"+i)
	listMoIds=listMoIds+","+existedMoId
	
	checkExistenceAndSetPropertiesToTC(tableAO,"ID,ARCHIVE,GLOBAL_ID,ADDRESS_STRING", "-"+i+"0, 0,-10,'Тестовый АО для проверки ЕСУ'","existedAoId"+i, "where archive=0")
	existedAoId = testRunner.testCase.getPropertyValue("existedAoId"+i)
	listAoIds=listAoIds+","+existedAoId
	
	checkExistenceAndSetPropertiesToTC(tableMF,"ID,ARCHIVED,MEDICAL_ORGANIZATION_ID,NAME_SHORT,NAME,NAME_FULL,IS_HEAD,ADDRESS_OBJECT_ID,CREATED","-1"+i+","+existedMoId+",0,'Автотестовое МУ','МУ для тестирования ЕСУ','МУ для тестирования ЕСУ',0,"+existedAoId+",TIMESTAMP '1970-01-01 00:00:00.000000'","existedMfId"+i, "where archived=0 and id not in ("+listMfIds+")")
	existedMfId = testRunner.testCase.getPropertyValue("existedMfId"+i)
	listMfIds=listMfIds+","+existedMfId
	
	checkExistenceAndSetPropertiesToTC(tableSpec,"ID,ARCHIVED,TITLE", "-1"+i+", 0,'Тестовая специализация для проверки ЕСУ'","existedSpecId"+i, "where archived=0 and id not in ("+listSpecIds+")")
	existedSpecId = testRunner.testCase.getPropertyValue("existedSpecId"+i)
	listSpecIds=listSpecIds+","+existedSpecId

	checkExistenceAndSetPropertiesToTC(tableDepNom,"ID, TITLE, \"START\", \"END\"","--"+i+"0,'Отделение автотест РиР2', TIMESTAMP '2015-11-01 00:00:00.000000', NULL","existedDepNomId"+i, "where id not in ("+listDepNomIds+")")
	existedDepNomId = testRunner.testCase.getPropertyValue("existedDepNomId"+i)
	listDepNomIds=listDepNomIds+","+existedDepNomId

	checkExistenceAndSetPropertiesToTC(tableEP,"ID, ARCHIVED, RESOURCE_TYPE_ID", "--"+i+"0 ,0,"+resourceTypeSAR,"existedEPId"+i, "where archived =0 and id not in ("+listEPIds+")")
	existedEPId = testRunner.testCase.getPropertyValue("existedEPId"+i)
	listEPIds=listEPIds+","+existedEPId

	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", "-10 ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"existedLocId"+i, "where archived='0'  and id not in ("+listLocIds+")")
	existedLocId = testRunner.testCase.getPropertyValue("existedLocId"+i)
	listLocIds=listLocIds+","+existedLocId

	
	
	getNonExistedColumnFromDBTable(table, "ID","id"+i, i.toString())

	getNonExistedColumnFromDBTable(tableLoc, "ID","locId"+i)
	locId = testRunner.testCase.getPropertyValue("locId"+i)
	checkExistenceAndSetPropertiesToTC(tableLoc,"ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID", locId+" ,'0', 'Локация автотест РиР2', 1, "+existedMfId,"locId"+i, "where id ="+locId)
}
treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i &lt;=treatmentCount;i++){
	checkExistenceAndSetPropertiesToTC(tableT,"ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE", "-1"+i+" ,'0', 'ММ автотест РиР2', 1,"+tcId+",'test' ","existedTId"+i, "where archived='0'  and id not in ("+listTIds+")")
	existedTId = testRunner.testCase.getPropertyValue("existedTId"+i)
	listTIds=listTIds+","+existedTId
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправка сообщения о создании Оборудования" id="5f41a70b-004b-43b5-b080-8e196d0b0af3"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def equipmentModel=testRunner.testCase.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("existedEPId1")

def depId=testRunner.testCase.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")

def personalizedService=testRunner.testCase.getPropertyValue("true")
def capacity=testRunner.testCase.getPropertyValue("capacity1")
def tId1=testRunner.testCase.getPropertyValue("existedTId1")
def tId2=testRunner.testCase.getPropertyValue("existedTId2")
def topicLocationEquipment=testRunner.testCase.testSuite.getPropertyValue("topicLocationEquipment")

sendMessageToKafka(topicLocationEquipment,"""<ns4:locationEquipment archived="true" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT" id="f0eb9633-09f8-4a58-a452-fc5acd22f5f1"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
getLastItem = ("SELECT * FROM "+table+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)!= 0){
		testRunner.fail("Запись в таблице "+table+" найдена "+lastItem[0].ID)
}
else {
	log.info("Запись в таблице "+table+" не найдена")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в EQUIPMENT_TREATMENT" id="d6db1b94-cd61-4930-8358-c37af2cb3f9c"><con:settings/><con:config><script>import groovy.sql.Sql

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableET")
getEquipmentTreatments = ("SELECT * FROM "+table+"  WHERE EQUIPMENT_ID="+id)
equipmentTreatments= sql.rows(getEquipmentTreatments)
if ( equipmentTreatments.size()== 0){
		log.info("В таблице "+table+" найдено нужное количество записей")
}
else {
	testRunner.fail("Количество записей в таблице "+table+" не соответствует ожидаемому, найдено "+equipmentTreatments.size()+" записей.")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания записи в RESOURCE" id="a5bb38c4-90c0-40f5-9b62-5c711ac0fb03"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
id = testRunner.testCase.getPropertyValue("id1")
table = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
getLastItem = ("SELECT * FROM "+table+"  WHERE RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)> 0){
		testRunner.fail("Запись в таблице "+table+" найдена "+lastItem[0].ID)
}
else {
	log.info("Запись в таблице "+table+"не  найдена")
	//log.info(lastItem)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление созданных данных" id="9fe69409-0025-4245-bd82-ba726de669b7"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

count=testRunner.testCase.getPropertyValue("count").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableE")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tableEP = testRunner.testCase.testSuite.project.getPropertyValue("tableEP")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")
tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+tableName+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+tableName+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCase(String tableName,String propertyName ){
	def propertyName1  = testRunner.testCase.getPropertyValue(propertyName)
	//log.info(propertyName)
	def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"createdByTest")
	//log.info(createdByTest)
	if (createdByTest=="1"){
		sql.execute("DELETE FROM "+tableName+ " WHERE ID =" +propertyName1)
		log.info("Запись в таблице "+tableName+ " с ID ="+propertyName1+" была создана в рамках теста  и удалена ")
		}
	else {
		log.info("Тест использовал существующую запись в таблице "+tableName+" с ID ="+propertyName1+". Запись не будет удалена. ")
		}
	testRunner.testCase.removeProperty(propertyName)
	testRunner.testCase.removeProperty(propertyName+"createdByTest")

	}

for (int i =count; i >=1;i--){
	id=testRunner.testCase.getPropertyValue("id"+i.toString())
	getResource= ("select * from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id= "+id)
	if(sql(getResource)>0){
		res=sql.rows(getResource)
		//log.info(res.getClass())
		String resId=res[0].ID
		//log.info(resId)
		sql.execute("delete from RESOURCE_SCHEDULE where RESOURCE_ID="+resId)
	}
	sql.execute("delete from \"RESOURCE\" where RESOURCE_KIND='SPECIAL_AVAILABLE_RESOURCE' and parent_id="+id)
	sql.execute("delete from "+tableET+" where EQUIPMENT_ID="+id)
	deleteEntryFromTableById(table, "id"+i.toString())
	deleteCreatedByTestInTestCase(tableSpec, "existedSpecId"+i.toString())
	deleteCreatedByTestInTestCase(tableLoc, "locId"+i.toString())
	deleteCreatedByTestInTestCase(tableMF, "existedMfId"+i.toString())
	deleteCreatedByTestInTestCase(tableDepNom, "existedDepNomId"+i.toString())
	deleteCreatedByTestInTestCase(tableEP, "existedEPId"+i.toString())
	deleteCreatedByTestInTestCase(tableAO, "existedAoId"+i.toString())
	deleteCreatedByTestInTestCase(tableMO, "existedMoId"+i.toString())
	deleteCreatedByTestInTestCase(tableResType, "resourceTypeSAR")
}

treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
for(int i =1; i &lt;=treatmentCount;i++){
	deleteCreatedByTestInTestCase(tableT, "existedTId"+i)
}
deleteCreatedByTestInTestCase(tableTC, "tcId")
</script></con:config></con:testStep><con:properties><con:property><con:name>treatmentCount</con:name><con:value>2</con:value></con:property><con:property><con:name>n</con:name><con:value>2</con:value></con:property><con:property><con:name>count</con:name><con:value>2</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId2</con:name><con:value>254645</con:value></con:property><con:property><con:name>equipmentModel1</con:name><con:value>Название модели оборудования автотест рир</con:value></con:property><con:property><con:name>equipmentModel2</con:name><con:value>Название модели оборудования автотест рир2</con:value></con:property><con:property><con:name>personalizedServiceTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>personalizedServiceFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>capacity1</con:name><con:value>1</con:value></con:property><con:property><con:name>capacity2</con:name><con:value>2</con:value></con:property><con:property><con:name>depId1</con:name><con:value>123456</con:value></con:property><con:property><con:name>depId2</con:name><con:value>234567</con:value></con:property><con:property><con:name>depTitle1</con:name><con:value>Описание отделения автотет</con:value></con:property><con:property><con:name>depTitle2</con:name><con:value>Описание отделения автотет2</con:value></con:property><con:property><con:name>existedLocId1</con:name><con:value>7309</con:value></con:property><con:property><con:name>existedLocId1createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>existedLocId2</con:name><con:value>7310</con:value></con:property><con:property><con:name>existedLocId2createdByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentTypeId1</con:name><con:value>10</con:value></con:property><con:property><con:name>equipmentTypeId2</con:name><con:value>11</con:value></con:property><con:property><con:name>true</con:name><con:value>true</con:value></con:property><con:property><con:name>false</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>topicLocationEquipment</con:name><con:value>topicLocationEquipment.rir2</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="6c4033c6-3bdb-4a95-a906-ce7ec3b7df81" name="Черновики"><con:settings><con:setting id="690870af-6a91-4033-a30a-128050555605fileName">Черновики</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="4e3b31ea-4c3b-40c6-9220-bd71dac2142c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="работа с методами" searchProperties="true"><con:settings><con:setting id="922282fd-8298-4fd1-8aa0-2482d1011f3dfileName">работа-с-методами</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Copy of Подбор id" id="1c11c3e3-259f-4e04-8dd6-9b35b1337b5a"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def  getNonExistedColumnFromDBTable(String tableName, String column, String propertyName, String count="1") { 
	def query=sql.rows("SELECT max("+column+")+"+count+" AS ID FROM  "+tableName)
	String id=""
	if (query[0].ID !=null){
		 id=query[0].ID
	}
	else{
		id="0"	
	}
	log.info(tableName+" ID:"+id)
	testRunner.testCase.setPropertyValue(propertyName, id)
	log.info(" Записан параметр  "+propertyName+" со значением "+id)
} 

def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	String query = "SELECT * FROM "+tableName+ " "+condition
	//log.info("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+tableName+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"createdByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+tableName+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+tableName+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"createdByTest"+nextI, "1")
		}
	}
}

tableT = testRunner.testCase.testSuite.project.getPropertyValue("tableT")
tableTC = testRunner.testCase.testSuite.project.getPropertyValue("tableTC")


findEntitiesInDBwithConditionOrCreate(tableTC,"ID, CODE, TITLE, ARCHIVED", "(select min(id)-5 from "+tableTC+") ,'autotest','Категория ММ автотест','0'","tcId", 1,"where archived='0'")
tcId = testRunner.testCase.getPropertyValue("tcId")

treatmentCount=testRunner.testCase.getPropertyValue("treatmentCount").toInteger()
findEntitiesInDBwithConditionOrCreate(tableT,"ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE",  "(select min(id)-5 from "+tableT+") ,'0', 'ММ автотест РиР2', 1,"+tcId+",'test' ","existedTId",100, "where archived='0' ")

tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
 moId = testRunner.testCase.testSuite.getPropertyValue("moId")

	deleteResource=("""delete from \" """+tableRes+ """\ " where MEDICAL_ORGANIZATION_ID="""+moId)
	log.info(deleteResource)</script></con:config></con:testStep><con:testStep type="groovy" name="подбор Мо мУ локаций для интеграции с запись 3, недоделаны локации" id="fe89956f-5c10-4bce-adc7-8323b8b95155"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.testSuite.getPropertyValue("moId")
def count = testRunner.testCase.testSuite.getPropertyValue("count").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}
//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =300, int icount=10) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i < icount; i++) {
	    if (row != 1) {
	      log.info("Запись в таблице "+tableName+" с id = "+propertyName+" не найдена.")
	      sleep(sleepTime)
	      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+tableName+" с id = "+propertyName+" создана.")
	        break;
	    }
	   // assert i < 3
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String propertyName) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}

def getExistedWithCondition(String tableName, int count, String condition="" ) { 
	String query="SELECT *  FROM  "+tableName+ "  "+condition+" order by id"
	//log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	//log.info(row)
	return result
}

//log.info(existedMFcount)
existedMF=getExistedWithCondition("MEDICAL_FACILITY", 2, "WHERE MEDICAL_ORGANIZATION_ID="+moId+" and archived=0 and id!="+moId)
//log.info(existedMFcount)
def rows = existedMF.size()
sub=count-rows
//log.info("sub "+sub+" count "+count+" rows"+rows)
if (rows >0){
	int n=0
	if(sub>=0){
		n=rows
	}
	else{
		n=	count
	}
	for(int i=0; i<n;i++){
		nextI=i+1
		resultId= existedMF[i].ID
		log.info("Таблица MEDICAL_FACILITY имеет подходящую запись № "+nextI+" с id = "+resultId)
		testRunner.testCase.testSuite.setPropertyValue("mfId"+nextI, resultId.toString())
		testRunner.testCase.testSuite.setPropertyValue("mfIdcreatedByTest"+nextI, "0")
	}
}
if(sub>0){
	for( int i=rows; i<count ; i++){
		nextI=i+1
		mfMinId = sql.rows("SELECT MIN(ID) -1 AS ID FROM MEDICAL_FACILITY")
			log.info(mfMinId)
		mfId=mfMinId[0].ID.toString()
		log.info(mfId)
		sendMessageToKafka("topicMF","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МУ в сервисе Запись.3")
			sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МУ в сервисе Запись.3')
		}
		checkCreation("MEDICAL_FACILITY",mfId.toString(),10000)
		//log.info("В таблице  "+tableName+ " нет или недостаточно записей по условию, создаю новую запись.")
		log.info("В таблице MEDICAL_FACILITY нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+mfId.toString())
		testRunner.testCase.testSuite.setPropertyValue("mfId"+nextI, mfId.toString())
		testRunner.testCase.testSuite.setPropertyValue("mfIdcreatedByTest"+nextI, "1")
	}
}

for(int i=1; i<=count ; i++){
	mfId=testRunner.testCase.testSuite.getPropertyValue("mfId"+i)
	getLoc= sql.rows("SELECT  ID FROM LOCATION WHERE  MEDICAL_FACILITY_ID ="+mfId)
	if(getLoc.size() == 0){
		getMinLocId=	sql.rows("SELECT MIN(ID) -1 AS ID FROM LOCATION")
		locId=getMinLocId[0].ID
	}
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="подбор типа ресурса и должности" id="8cf50d9f-7d5f-4b23-85a0-282c70ad03d0"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def checkExistenceResourceType (String resourceType ){
	String createdByTest="0"
	String propertyName1
	String propertyName2
	String result1
	String result2
	String tableName1="RESOURCE_TYPE"
	String tableName2
		if(resourceType=="SPECIAL_AVAILABLE_RESOURCE") { 
			//log.info("СДР")
			propertyName1="resTypeForSarId"
			propertyName2="epId"
			tableName2="EQUIPMENT_PROFILE"
			String query = "SELECT rt.ID as RESOURCE_TYPE_ID, ep.id as EQUIPMENT_PROFILE_ID FROM RESOURCE_TYPE rt JOIN EQUIPMENT_PROFILE ep ON ep.RESOURCE_TYPE_ID =rt.ID WHERE rt.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND rt.ARCHIVED =0 AND ep.ARCHIVED =0"
			//log.info(query)
			def row = sql(query)
			//log.info(row)
			def result =sql.rows(query)
			//log.info(result)
			if (row == 0){
					log.info("В таблицах EQUIPMENT_PROFILE  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -3, 'Тип CДР для нагрузочного тестирования','SPECIAL_AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  EQUIPMENT_PROFILE  (ID, ARCHIVED,RESOURCE_TYPE_ID) values( -3, 0, -3)")
					result1="-3"
					result2="-3"
					createdByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].EQUIPMENT_PROFILE_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и EQUIPMENT_PROFILE имеют подходящие записи.")
				}
		} else if(resourceType=="AVAILABLE_RESOURCE") { 
		   	log.info("ДР")
		   	tableName2="POSITION_NOM"
		   	propertyName1="resTypeForArId"
			propertyName2="pnId"
			String query1 = "SELECT rt.ID as RESOURCE_TYPE_ID, pn.id as POSITION_NOM_ID  FROM RESOURCE_TYPE rt JOIN POSITION_NOM pn ON pn.RESOURCE_TYPE_ID =rt.id WHERE rt.ARCHIVED =0 AND rt.RESOURCE_KIND ='AVAILABLE_RESOURCE'"
			//log.info(query)
			def row1 = sql(query1)
			//log.info(row)
			def result =sql.rows(query1)
			//log.info(result)
			if (row1 == 0){
					log.info("В таблицах POSITION_NOM  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -4, 'Тип ДР для нагрузочного тестирования','AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  POSITION_NOM (ID,TITLE,RESOURCE_TYPE_ID) values( -2,'Должность для нагрузочного тестирования', -4)")
					result1="-4"
					result2="-4"
					createdByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].POSITION_NOM_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и POSITION_NOM имеют подходящие записи.")
				}
		} else { 
		  testRunner.fail("Передан некорректный тип ресурса")
		}

	testRunner.testCase.testSuite.setPropertyValue(propertyName1, result1)
	testRunner.testCase.testSuite.setPropertyValue(propertyName2, result2)
	testRunner.testCase.testSuite.setPropertyValue(propertyName1+"createdByTest", createdByTest)
	testRunner.testCase.testSuite.setPropertyValue(propertyName2+"createdByTest", createdByTest)
	log.info("Записан  параметр "+tableName1+ ".ID= "+result1)
	log.info("Записан  параметр "+tableName2+ ".ID= "+result2)


	}
checkExistenceResourceType("AVAILABLE_RESOURCE")

checkExistenceResourceType("SPECIAL_AVAILABLE_RESOURCE")

</script></con:config></con:testStep><con:testStep type="groovy" name="Создать должность и дождаться синхронизации ресурса" id="819519e3-592f-446c-9b0c-97159a325867"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("Id1")
def moId=testRunner.testCase.getPropertyValue("existedMoId1")
def mfId=testRunner.testCase.getPropertyValue("existedMfId1")
def locId=testRunner.testCase.getPropertyValue("existedLocId1")

def title=testRunner.testCase.getPropertyValue("title1")
def nomId=testRunner.testCase.getPropertyValue("existedPosNomId1")
def employeeId=testRunner.testCase.getPropertyValue("employeeId1")
def snils=testRunner.testCase.getPropertyValue("snils1")

def lastName=testRunner.testCase.getPropertyValue("lastName1")
def firstName=testRunner.testCase.getPropertyValue("firstName1")
def middleName=testRunner.testCase.getPropertyValue("middleName1")
def jobExecutionVolume=testRunner.testCase.getPropertyValue("jobExecutionVolume1")

def start=testRunner.testCase.getPropertyValue("start1")
def manageable=testRunner.testCase.getPropertyValue("manageableTrue")
def departmentId=testRunner.testCase.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.getPropertyValue("departmentId1")

def departmentNomId=testRunner.testCase.getPropertyValue("existedDepNomId1")
def maternityLeave=testRunner.testCase.getPropertyValue("maternityLeaveFalse")
def spec=testRunner.testCase.getPropertyValue("existedSpecId1")
def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

sendMessageToKafka(topicJobExecution,"""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><jobExecution id=\""""+id+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><title>"""+title+"""</title><nomId>"""+nomId+"""</nomId><employee id=\""""+employeeId+"""\"><ns2:snils>"""+snils+"""</ns2:snils><ns2:lastName>"""+lastName+"""</ns2:lastName><ns2:firstName>"""+firstName+"""</ns2:firstName><ns2:middleName>"""+middleName+"""</ns2:middleName></employee><jobExecutionVolume>"""+jobExecutionVolume+"""</jobExecutionVolume><jobExecutionPeriod><ns2:start>"""+start+"""</ns2:start></jobExecutionPeriod><ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId><department manageable=\""""+manageable+"""\" id=\""""+departmentId+"""\"><ns2:title>"""+departmentTitle+"""</ns2:title><ns2:nomId>"""+departmentNomId+"""</ns2:nomId></department><specializationId>"""+spec+"""</specializationId><defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId></jobExecution>""")

tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableJE =testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
def i=testRunner.testCase.getPropertyValue("i")
getLastItem = ("SELECT * FROM "+tableJE+"  WHERE ID="+id)
lastItem= sql.rows(getLastItem)
if ( sql(getLastItem)== 0){
		testRunner.fail("Запись в таблице "+tableE+" не найдена")
}

for (int j = 0; j < 21; j++) {
	String querySar="select * from \"RESOURCE\" where RESOURCE_KIND ='AVAILABLE_RESOURCE' AND PARENT_ID="+id
	//log.info(querySar)
	rowsSar = sql.rows(querySar)
	// log.info(rowsSar)
	if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
		log.info("Идет синхронизация ресруса. Подождём...")
		sleep(6000)
	}
	else {
		log.info("Синхрнизация ресурса завершена.")
		break;
	}
 }
if (rowsSar[0].SYNC_STATUS=='ERROR'){
	getResSyncError=(" SELECT DISTINCT rsem.code, rsemp.\"KEY\" as entity , rsemp.VALUE FROM RESOURCE_SYNC_ERROR rse JOIN "+tableRes+" res ON res.id=rse.RESOURCE_ID  JOIN RESOURCE_SYNC_ERROR_MSG rsem ON RSE.ID=RSEM.RESOURCE_SYNC_ERROR_ID JOIN RESOURCE_SYNC_ERROR_MSG_PR rsemp ON rsemp.RESOURCE_SYNC_ERROR_MSG_ID=rsem.id WHERE res.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND res.PARENT_ID ="+eId)
	errors=sql.rows(getResSyncError)
	testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+"завершена с ошибкой. Код ошибки "+errors[0].CODE+". Сущность, из-за которой произошла ошибка: "+errors[0].entity+", id="+errors[0].VALUE)
}

testRunner.testCase.setPropertyValue("arId"+i, rowsSar[0].ID.toString())
]]></script></con:config></con:testStep><con:testStep type="groovy" name="скрипт сравнение сколько досоздать" id="c7b5bfa7-0710-4542-acbd-3bc9110a3343"><con:settings/><con:config><script>existed = 2
need= 3
sub = need-existed
lastId= 0
if(existed>0){
	if(existed>need){
		lastId=need
	}
	else{
		lastId=existed
	}
	for(int i=0; i&lt;lastId; i++){
		nexti=i+1
		log.info("existed s"+nexti)
	}
}
log.info("lastId "+lastId)
for(int i=lastId; i&lt;need; i++){
	nexti=i+1
	log.info("new s"+nexti)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ЗАПИСЬ ПАРАМЕТРА В ПРОПЕРТИ КЕЙСА" id="ece461b9-20ff-4256-84b2-f0eb6095274b"><con:settings/><con:config><script>	eId=2
	testRunner.testCase.setPropertyValue("eId",eId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="функция из другого сьюта" id="7956b5d5-38dc-488f-b4f7-aef143d2a26f"><con:settings/><con:config><script>def  sayHi(String d){
	log.info("hi, "+d)	
}</script></con:config></con:testStep><con:testStep type="groovy" name="getTreatmentsWithMapping" id="6fc04d0e-179c-470c-b158-ffc6698f951b"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithMapping=sql.rows(getTreatmentsWithMapping)
	countTreatmentsWithMapping=treatmentsWithMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithMapping
	lastId=0
	listOfTreatmensWithMapping="0"
	if(countTreatmentsWithMapping>0){
		if(countTreatmentsWithMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatments = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 and t.id not in ("+listOfTreatmensWithMapping+") ORDER BY t.id DESC"
		//log.info(getNonarchivedTreatments)
		nonarchivedTreatments=sql.rows(getNonarchivedTreatments)
		countNonarchivedTreatments=nonarchivedTreatments.size()
		log.info("countNonarchivedTreatments= "+countNonarchivedTreatments)
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
			if(countNonarchivedTreatments>0){
					treatmentId = nonarchivedTreatments[index].TREATMENT_ID.toString()
					treatmentCode = nonarchivedTreatments[index].TREATMENT_CODE.toString()
					treatmentCategoryId = nonarchivedTreatments[index].TREATMENT_CATEGORY_ID.toString()
					treatmentCategoryCode = nonarchivedTreatments[index].TREATMENT_CATEGORY_CODE.toString()
					tCreatedByTest="0"
					tcCreatedByTest="0"
					countNonarchivedTreatments=countNonarchivedTreatments-1
					log.info("Для записи №"+i+" есть неархивная ММ без маппинга, ее id = "+treatmentId)
					index=index+1
			}
			else{
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
				}
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="clearTreatmentsWithMapping" id="ac4d8574-991b-4d33-a1c0-d48b3cc12acb"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def clearTreatmentsWithMapping(int count, int firsIndex=1 ){
	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRouteTreatmentMapping=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentId = testRunner.testCase.getPropertyValue("tId"+i)
		tCreatedByTest=testRunner.testCase.getPropertyValue("tCreatedByTest"+i)
		treatmentCode = testRunner.testCase.getPropertyValue("tCode"+i)
		tMappingCode = testRunner.testCase.getPropertyValue("tMappingCode"+i) 
		tMappingCodeCreatedByTest=testRunner.testCase.getPropertyValue("tMappingCodeCreatedByTest"+i)
		if(tMappingCodeCreatedByTest=='1'){
			log.info("Для записи №"+i+" маппинг был создан автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableRouteTreatmentMapping+" WHERE TREATMENT_CODE='"+treatmentCode+"'")
		}
		if(tCreatedByTest=='1'){
			log.info("Для записи №"+i+" ММ №"+treatmentId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableT+"  WHERE ID='"+treatmentId+"'")
		}
		log.info("Очищаю проперти маппинга и ММ для записи №"+i)
		testRunner.testCase.removeProperty("tMappingCode"+i) 
		testRunner.testCase.removeProperty("tMappingCodeCreatedByTest"+i)
		testRunner.testCase.removeProperty("tCode"+i)
		testRunner.testCase.removeProperty("tCreatedByTest"+i)
		testRunner.testCase.removeProperty("tId"+i)
	}
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentCategoryId = testRunner.testCase.getPropertyValue("tcId"+i)
		tcCreatedByTest=testRunner.testCase.getPropertyValue("tcCreatedByTest"+i)
		if(tcCreatedByTest=='1'){
			("Для записи №"+i+" Категория ММ №"+treatmentCategoryId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableTC+"  WHERE ID='"+treatmentCategoryId+"'")
		}
		log.info("Очищаю проперти Категории ММ для записи №"+i)
		testRunner.testCase.removeProperty("tcId"+i)
		testRunner.testCase.removeProperty("tcCreatedByTest"+i)
		testRunner.testCase.removeProperty("tcCode"+i)
	}
}

clearTreatmentsWithMapping(countTreatment)
</script></con:config></con:testStep><con:testStep type="groovy" name="deleteCreatedByTestInTestCaseWithCounter" id="9fcd0116-cc08-4917-87a3-3c765dedd497"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}
deleteCreatedByTestInTestCaseWithCounter("tableSpec", "specId")
deleteCreatedByTestInTestCaseWithCounter("tableEP", "epId")
</script></con:config></con:testStep><con:testStep type="groovy" name="ПРОСТО ЧЕРНОВИК" id="8de2cafa-5526-42a8-822e-8e5521946160"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
getTreatmentsWithoutMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
log.info(getTreatmentsWithoutMapping)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/нескольких МУ/Локаций через sql без отправки в запись 3" id="eaa41468-30aa-4486-9801-5967a2370513"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.getPropertyValue("moId")
def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()
def specId = testRunner.testCase.getPropertyValue("specId1")
tableMO=testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableMF=testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableAO=testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableLoc=testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")

//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =1000, int icount=15) { 
	table =testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	String query="SELECT *  FROM  "+table+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i &lt;= icount; i++) {
	    if (row != 1) {
		    	if (i==icount){
		    		testRunner.fail("Запись в таблице "+table+" с id = "+propertyName+" не найдена.")
		    		break;
		    	}
		      log.info("Запись в таблице "+table+" с id = "+propertyName+" пока не найдена. Подождем...")
		      sleep(sleepTime)
		      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+table+" с id = "+propertyName+" создана.")
	        break;
	    }
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String id ) { 
	table =testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	String query="SELECT *  FROM  "+table+ " WHERE ID = "+id
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}




if (!isExisted("tableMO",moId) ){
		//log.info("Отправляю сообщение")
		log.info("Создаю Медицинскую организацию с id = "+moId)
		sql.execute("INSERT INTO "+tableMO+ " (ID, ARCHIVED, NAME, NAME_FULL, OGRN, CLOSED, CREATED) VALUES("+moId+", 0 , 'МО автотест №"+moId+"', 'МО автотест №"+moId+"', '123456', NULL, TIMESTAMP '1991-12-25 00:00:00.000000')")
		checkCreation("tableMO",moId)
}
else {
	log.info("Медицинская организация с id = "+moId+" уже создана")
		testRunner.testCase.setPropertyValue("moId",moId)
}

int mfId = moId.toInteger()
isHead=0
for (int i = 1; i &lt;=counterMF; i++){
	if (!isExisted("tableMF",mfId.toString()) ){
		if(i==1){
			isHead=1
			headDescription="Головное "
		}
		else{
			isHead=0
			headDescription="Не головное "
		}
		//Содаю адресный объект
		log.info("Создаю Медицинское учреждение и Адрусный объект с id = "+mfId)
		sql.execute("INSERT INTO "+tableAO+ " (ID, ARCHIVE, GLOBAL_ID, ADDRESS_STRING, UPDATED) VALUES ("+mfId+", 0, "+mfId+"00, 'АО автотест №"+mfId+"', NULL)")
		checkCreation("tableAO",mfId.toString())
		sql.execute("INSERT INTO "+tableMF+ " (ID, ARCHIVED, MEDICAL_ORGANIZATION_ID, NAME_SHORT, NAME, NAME_FULL, IS_HEAD, ADDRESS_OBJECT_ID, CLOSED, CREATED) VALUES("+mfId+", '0', "+moId+", '"+headDescription+"МУ автотест №"+mfId+"', 'МУ автотест №"+mfId+"', 'МУ автотест №"+mfId+"', '"+isHead+"', "+mfId+", NULL, TIMESTAMP '1991-12-25 00:00:00.000000')")
		checkCreation("tableMF",mfId.toString())
	}
	else {
		log.info("Медицинское учреждение с id = "+mfId+" уже создано")
	}
	testRunner.testCase.setPropertyValue("mfId"+i, mfId.toString())
	if (!isExisted("tableLoc",mfId.toString()) ){
		log.info("Создаю Локацию с id = "+mfId)
		sql.execute("INSERT INTO "+tableLoc+ " (ID, ARCHIVED, ROOM_TITLE, STAGE, MEDICAL_FACILITY_ID, SPECIALIZATION_ID) VALUES("+mfId+", '0', 'Локация автотест №"+mfId+"', 1, "+mfId+", "+specId+")")
		checkCreation("tableLoc",mfId.toString())
	}
	else {
			log.info('Не требуется досоздать Локацию в сервисе Запись.3')
		}
	mfId = mfId +1
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление МО/МУ/Локаций" id="e3a5e1cc-2832-4ed3-ba98-deb1c275ff5b"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")


def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		log.info("Щас удалю проперти "+propertyName+i)
		testRunner.testCase.removeProperty(propertyName+i)
		log.info("Удалил. Щас удалю проперти "+propertyName+"CreatedByTest"+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
		log.info("Для №  "+i+" всё")
	}

}


def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()

def clearMoMfLocationByMoIDWithCount(String moPropertyName, int counter){
	tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
	tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
	tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
	tableMFWH = testRunner.testCase.testSuite.project.getPropertyValue("tableMFWH")
	tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
	moId=testRunner.testCase.getPropertyValue("moId")
	 id=moId.toLong()
	for (int i=1; i&lt;=counter; i++){
		deleteLoc=("delete from "+tableLoc+" where ID="+id)
		log.info(deleteLoc)
		sql.execute(deleteLoc)
		deleteMFWH=("delete from "+tableMFWH+" where MEDICAL_FACILITY_ID="+id)
		log.info(deleteMFWH)
		sql.execute(deleteMFWH)
		deleteMF=("delete from "+tableMF+" where ID="+id)
		log.info(deleteMF)
		sql.execute(deleteMF)
		deleteAO=("delete from "+tableAO+" where ID="+id)
		log.info(deleteAO)
		sql.execute(deleteAO)
		id=id+1
	}
	deleteMO=("delete from "+tableMO+" where ID="+moId)
	log.info(deleteMO)
	sql.execute(deleteMO)
	for (int i=1; i&lt;=counter; i++){
		testRunner.testCase.removeProperty("mfId"+i)
	}
}

clearMoMfLocationByMoIDWithCount("moId", counterMF)</script></con:config></con:testStep><con:testStep type="groovy" name="getTreatmentsWithoutMapping" id="9db1a419-a25a-4c66-a481-878db5bdab1e"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithoutMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithoutMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithoutMapping=sql.rows(getTreatmentsWithoutMapping)
	countTreatmentsWithoutMapping=treatmentsWithoutMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithoutMapping
	lastId=0
	listOfTreatmensWithoutMapping="0"
	if(countTreatmentsWithoutMapping>0){
		if(countTreatmentsWithoutMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithoutMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithoutMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithoutMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithoutMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithoutMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithoutMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="clearTreatmentsWithoutMapping" id="4a579651-2583-495f-a69a-69beb6f8112e"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def clearTreatmentsWithMapping(int count, int firsIndex=1 ){
	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRouteTreatmentMapping=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentId = testRunner.testCase.getPropertyValue("tId"+i)
		tCreatedByTest=testRunner.testCase.getPropertyValue("tCreatedByTest"+i)
		treatmentCode = testRunner.testCase.getPropertyValue("tCode"+i)
		tMappingCode = testRunner.testCase.getPropertyValue("tMappingCode"+i) 
		tMappingCodeCreatedByTest=testRunner.testCase.getPropertyValue("tMappingCodeCreatedByTest"+i)
		if(tMappingCodeCreatedByTest=='1'){
			log.info("Для записи №"+i+" маппинг был создан автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableRouteTreatmentMapping+" WHERE TREATMENT_CODE='"+treatmentCode+"'")
		}
		if(tCreatedByTest=='1'){
			log.info("Для записи №"+i+" ММ №"+treatmentId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableT+"  WHERE ID='"+treatmentId+"'")
		}
		log.info("Очищаю проперти маппинга и ММ для записи №"+i)
		testRunner.testCase.removeProperty("tMappingCode"+i) 
		testRunner.testCase.removeProperty("tMappingCodeCreatedByTest"+i)
		testRunner.testCase.removeProperty("tCode"+i)
		testRunner.testCase.removeProperty("tCreatedByTest"+i)
		testRunner.testCase.removeProperty("tId"+i)
	}
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentCategoryId = testRunner.testCase.getPropertyValue("tcId"+i)
		tcCreatedByTest=testRunner.testCase.getPropertyValue("tcCreatedByTest"+i)
		if(tcCreatedByTest=='1'){
			("Для записи №"+i+" Категория ММ №"+treatmentCategoryId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableTC+"  WHERE ID='"+treatmentCategoryId+"'")
		}
		log.info("Очищаю проперти Категории ММ для записи №"+i)
		testRunner.testCase.removeProperty("tcId"+i)
		testRunner.testCase.removeProperty("tcCreatedByTest"+i)
		testRunner.testCase.removeProperty("tcCode"+i)
	}
}

clearTreatmentsWithMapping(countTreatment)
</script></con:config></con:testStep><con:properties><con:property><con:name>countTreatment</con:name><con:value>10</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>100</con:value></con:property><con:property><con:name>moId</con:name><con:value>-100000</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="8fd98a4f-328b-4f74-9694-3455af5869d8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Работа с форматами времени" searchProperties="true"><con:settings><con:setting id="8ea0d316-e478-4622-9ba2-53e597760efffileName">Работа-с-форматами-времени</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Groovy Script2" id="6a9714dc-f697-422c-a86a-855735f4f894"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
log.info(currentDate_formatted)</script></con:config></con:testStep><con:testStep type="request" name="SOAP Request" id="f75aecd4-bda3-40f9-a320-5ebd369dc98f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getSchedule</con:operation><con:request name="SOAP Request" id="3686f91e-2314-42f5-9dfa-c527549f802f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://journal.rir2.test.emias.mos.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>KPI_APC_METHODIST/HAdiatullina</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>KPI_APC_METHODIST</user:systemName>
         <user:userName>HAdiatullina</user:userName>
         <user:userRoleId>7014</user:userRoleId>
         <user:userRights>
            <!--Zero or more repetitions:-->
            <user:userRightId>0</user:userRightId>
         </user:userRights>
         <user:jobExecutionId>112740</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:getScheduleRequest>
         <v1:scheduleId>?</v1:scheduleId>
      </typ:getScheduleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5df7dc3d-49e8-4a5d-b039-26a94ef87c30"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="получили тек дату и сравнили с датой из бд" id="7f35e419-a2d0-4045-b226-e0c626b6f563"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.util.Date
import groovy.sql.Sql
import java.time.LocalDate
import java.time.format.DateTimeFormatter

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);
def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm")
log.info(sdf.format(date))

getResource =("SELECT ID, ARCHIVED, TITLE, RESOURCE_KIND, PARENT_ID, MEDICAL_ORGANIZATION_ID, RESOURCE_TYPE_ID, SPECIALIZATION_ID, DEPARTMENT_ID, DEPARTMENT_TITLE, DEPARTMENT_NOM_ID, FUNCTION_KIND, FUNCTION_ID, FUNCTION_TITLE, FUNCTION_VOLUME, MEDICAL_FACILITY_ID, LOCATION_ID, SYNC_STATUS, SYNC_STATUS_CHANGED, PARENT_TYPE_ID FROM \"RESOURCE\" WHERE ID=30101991177")
resource = sql.rows(getResource)
syncStatusChanged=resource[0].SYNC_STATUS_CHANGED.toString()
log.info(syncStatusChanged)
//log.info(syncStatusChanged.getClass())
format2="yyyy-MM-dd HH:mm:ss.SSSSS"
Date date1=new SimpleDateFormat("yyyy-MM-dd' 'HH:mm").parse(syncStatusChanged)

//log.info(date1)
log.info(sdf.format(date1))
          /*
date2= LocalDate.parse(syncStatusChanged, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSSSSS")) 
log.info(date2)
date3=syncStatusChanged.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
 
        
def date2= new Date(syncStatusChanged)
def sdf2 = new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss")
log.info(sdf.format(date2))*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="896831e9-cb35-42c0-893e-ecbbd3effded"><con:settings/><con:config><script>import java.time.*

LocalDateTime t = LocalDateTime.now();
return t //as String</script></con:config></con:testStep><con:testStep type="request" name="SOAP Request1" id="8fc052a1-35f7-4448-918d-561d040796f6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>getProductionCalendarList</con:operation><con:request name="SOAP Request1" id="d30e5ef1-614c-46fa-9089-f71817d2c169"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://journal.rir2.test.emias.mos.ru/api/Schedule</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>KPI_APC_METHODIST/HAdiatullina</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>KPI_APC_METHODIST</user:systemName>
         <user:userName>HAdiatullina</user:userName>
         <user:userRoleId>7014</user:userRoleId>
         <user:userRights>
            <!--Zero or more repetitions:-->
            <user:userRightId>0</user:userRightId>
         </user:userRights>
         <user:jobExecutionId>112740</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getProductionCalendarListRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3c4014d3-6636-4297-9d13-aae402200058"/><con:assertion type="Simple Contains" id="1aeea6ea-6be7-4ab1-bbcf-3c9420fd153b" name="Contains"><con:configuration><token>//*:date[2]</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9f7ac414-c13e-42f1-9195-2d5fe12406d1" name="Script Assertion"><con:configuration/></con:assertion><con:assertion type="XPath Match" id="edc2f321-f0bd-4e41-aaa5-9362932b0e88" name="XPath Match"><con:configuration><path>/item[1]/archived</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>date</con:name><con:value>2021-09-22 00:00:00</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="6450feca-dc29-4531-a73f-4260fe2acee1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="работа с ресурсами" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getTreatmentsWithMapping" id="b8a30895-8973-45f1-bb4f-c757b67196f4"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithMapping=sql.rows(getTreatmentsWithMapping)
	countTreatmentsWithMapping=treatmentsWithMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithMapping
	lastId=0
	listOfTreatmensWithMapping="0"
	if(countTreatmentsWithMapping>0){
		if(countTreatmentsWithMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatments = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 and t.id not in ("+listOfTreatmensWithMapping+") ORDER BY t.id DESC"
		//log.info(getNonarchivedTreatments)
		nonarchivedTreatments=sql.rows(getNonarchivedTreatments)
		countNonarchivedTreatments=nonarchivedTreatments.size()
		log.info("countNonarchivedTreatments= "+countNonarchivedTreatments)
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
			if(countNonarchivedTreatments>0){
					treatmentId = nonarchivedTreatments[index].TREATMENT_ID.toString()
					treatmentCode = nonarchivedTreatments[index].TREATMENT_CODE.toString()
					treatmentCategoryId = nonarchivedTreatments[index].TREATMENT_CATEGORY_ID.toString()
					treatmentCategoryCode = nonarchivedTreatments[index].TREATMENT_CATEGORY_CODE.toString()
					tCreatedByTest="0"
					tcCreatedByTest="0"
					countNonarchivedTreatments=countNonarchivedTreatments-1
					log.info("Для записи №"+i+" есть неархивная ММ без маппинга, ее id = "+treatmentId)
					index=index+1
			}
			else{
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
				}
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание оборудования через sql" id="b9cba5fd-79b7-47ea-a53c-965a7793ebb7"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("eId1").toInteger()
def moId=testRunner.testCase.getPropertyValue("moId")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("mfId1")
def archived=testRunner.testCase.getPropertyValue("archived")
def equipmentModel=testRunner.testCase.getPropertyValue("em")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId")
def equipmentProfileId=testRunner.testCase.getPropertyValue("epId1")

def depId=testRunner.testCase.getPropertyValue("depId")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle")
def depNomId=testRunner.testCase.getPropertyValue("dnId1")
archived =testRunner.testCase.getPropertyValue("archived").toBoolean()
def personalizedService=testRunner.testCase.getPropertyValue("personalizedService")
def capacity=testRunner.testCase.getPropertyValue("capacity")
def tId1=testRunner.testCase.getPropertyValue("tId1")
def tId2=testRunner.testCase.getPropertyValue("tId2")
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableE =testRunner.testCase.testSuite.project.getPropertyValue("tableE")
log.info(tableE+id)

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i<=countResources; i++){
	sendMessageToKafka("topicLocationEquipment.rir2","""<ns4:locationEquipment archived=\""""+archived+"""\" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
	for (int q = 0; q<=10;q++) {
		def getLastItem = "SELECT * FROM "+tableE+"  WHERE ID="+id
		log.info(getLastItem)
		def lastItem= sql.rows(getLastItem)
	
		if ( lastItem.size()== 0){
				log.info("Оборудование пока не найдено. Подождем")
				sleep(5000)
		}
		else if (q==10){
			testRunner.fail("Запись в таблице "+tableE+" не найдена")
		}
		else {
			log.info("Оборудование найдено.")
			testRunner.testCase.setPropertyValue("eId"+i, id.toString())
			testRunner.testCase.setPropertyValue("eIdCreatedByTest"+i, "1")
			break;
		}
	}
	id=id+1
}]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>moId</con:name><con:value>141</con:value></con:property><con:property><con:name>createEntityInAppointment3</con:name><con:value>0</con:value></con:property><con:property><con:name>count</con:name><con:value>5</con:value></con:property><con:property><con:name>resTypeForArId</con:name><con:value>158297691</con:value></con:property><con:property><con:name>pnId</con:name><con:value>109</con:value></con:property><con:property><con:name>resTypeForArIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>pnIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>resTypeForSarId</con:name><con:value>156645371</con:value></con:property><con:property><con:name>epId</con:name><con:value>146017593</con:value></con:property><con:property><con:name>resTypeForSarIdcreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>epIdcreatedByTest</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="0276c663-731a-432e-9832-a914e3850b58" name="CreateSarScheduleRule"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a508b799-349f-4c38-8dfe-cf9e662d8dec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="createSarScheduleRule E372 для правила TR не указана ММ" searchProperties="true"><con:settings><con:setting id="abfe296c-55f7-41c7-b648-8089df85124cfileName">СДР.Основные-АС</con:setting></con:settings><con:testStep type="groovy" name="getTreatmentsWithMapping" id="4458325e-e557-45bb-9f1e-d80e124da705"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithMapping=sql.rows(getTreatmentsWithMapping)
	countTreatmentsWithMapping=treatmentsWithMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithMapping
	lastId=0
	listOfTreatmensWithMapping="0"
	if(countTreatmentsWithMapping>0){
		if(countTreatmentsWithMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatments = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 and t.id not in ("+listOfTreatmensWithMapping+") ORDER BY t.id DESC"
		//log.info(getNonarchivedTreatments)
		nonarchivedTreatments=sql.rows(getNonarchivedTreatments)
		countNonarchivedTreatments=nonarchivedTreatments.size()
		log.info("countNonarchivedTreatments= "+countNonarchivedTreatments)
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
			if(countNonarchivedTreatments>0){
					treatmentId = nonarchivedTreatments[index].TREATMENT_ID.toString()
					treatmentCode = nonarchivedTreatments[index].TREATMENT_CODE.toString()
					treatmentCategoryId = nonarchivedTreatments[index].TREATMENT_CATEGORY_ID.toString()
					treatmentCategoryCode = nonarchivedTreatments[index].TREATMENT_CATEGORY_CODE.toString()
					tCreatedByTest="0"
					tcCreatedByTest="0"
					countNonarchivedTreatments=countNonarchivedTreatments-1
					log.info("Для записи №"+i+" есть неархивная ММ без маппинга, ее id = "+treatmentId)
					index=index+1
			}
			else{
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
				}
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание или подбор вспомогательных сущностей" id="88a29da1-d5c8-4c5f-9877-1234cd2a0a00"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()
def moId = testRunner.testCase.getPropertyValue("moId")


def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	String query = "SELECT * FROM "+table+ " "+condition
	//log.info("insert into  "+table+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+table+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+table+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+table+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "1")
		}
	}
}

def getDoesntExisted (String tableName,String propertyName, int counter=1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		String query = "SELECT max(id)+"+i+" as ID FROM "+table
		def result =sql.rows(query)
		testRunner.testCase.setPropertyValue(propertyName+i, result[0].ID.toString())
		log.info("ID несуществубщей записи в таблице  "+table+ " = "+result[0].ID.toString())
	}
}

def checkExistenceResourceType (String resourceType ){
	String CreatedByTest="0"
	String propertyName1
	String propertyName2
	String result1
	String result2
	String tableName1="RESOURCE_TYPE"
	String tableName2
		if(resourceType=="SPECIAL_AVAILABLE_RESOURCE") { 
			//log.info("СДР")
			propertyName1="resTypeForSarId"
			propertyName2="epId"
			tableName2="EQUIPMENT_PROFILE"
			String query = "SELECT rt.ID as RESOURCE_TYPE_ID, ep.id as EQUIPMENT_PROFILE_ID FROM RESOURCE_TYPE rt JOIN EQUIPMENT_PROFILE ep ON ep.RESOURCE_TYPE_ID =rt.ID WHERE rt.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND rt.ARCHIVED =0 AND ep.ARCHIVED =0"
			//log.info(query)
			def row = sql(query)
			//log.info(row)
			def result =sql.rows(query)
			//log.info(result)
			if (row == 0){
					log.info("В таблицах EQUIPMENT_PROFILE  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -3, 'Тип CДР для нагрузочного тестирования','SPECIAL_AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  EQUIPMENT_PROFILE  (ID, ARCHIVED,RESOURCE_TYPE_ID) values( -3, 0, -3)")
					result1="-3"
					result2="-3"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].EQUIPMENT_PROFILE_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и EQUIPMENT_PROFILE имеют подходящие записи.")
				}
		} else if(resourceType=="AVAILABLE_RESOURCE") { 
		   	log.info("ДР")
		   	tableName2="POSITION_NOM"
		   	propertyName1="resTypeForArId"
			propertyName2="pnId"
			String query1 = "SELECT rt.ID as RESOURCE_TYPE_ID, pn.id as POSITION_NOM_ID  FROM RESOURCE_TYPE rt JOIN POSITION_NOM pn ON pn.RESOURCE_TYPE_ID =rt.id WHERE rt.ARCHIVED =0 AND rt.RESOURCE_KIND ='AVAILABLE_RESOURCE'"
			//log.info(query)
			def row1 = sql(query1)
			//log.info(row)
			def result =sql.rows(query1)
			//log.info(result)
			if (row1 == 0){
					log.info("В таблицах POSITION_NOM  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -4, 'Тип ДР для нагрузочного тестирования','AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  POSITION_NOM (ID,TITLE,RESOURCE_TYPE_ID) values( -2,'Должность для нагрузочного тестирования', -4)")
					result1="-4"
					result2="-4"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].POSITION_NOM_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и POSITION_NOM имеют подходящие записи.")
				}
		} else { 
		  testRunner.fail("Передан некорректный тип ресурса")
		}

	testRunner.testCase.setPropertyValue(propertyName1, result1)
	testRunner.testCase.setPropertyValue(propertyName2, result2)
	testRunner.testCase.setPropertyValue(propertyName1+"CreatedByTest", CreatedByTest)
	testRunner.testCase.setPropertyValue(propertyName2+"CreatedByTest", CreatedByTest)
	log.info("Записан  параметр"+tableName1+ ".ID= "+result1)
	log.info("Записан  параметр "+tableName2+ ".ID= "+result2)


	}
	
checkExistenceResourceType("SPECIAL_AVAILABLE_RESOURCE")

//checkExistenceResourceType("AVAILABLE_RESOURCE")

//шаблончик вызова метода
//checkExistence("", "", "", "","")//"where archived = 0" )

//Подобрать ММ с маппингом


findEntitiesInDBwithConditionOrCreate("tableSpec", "ID,ARCHIVED,TITLE", "-2,0,'Специализация для нагрузочного тестирования'","specId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableEP", "ID,ARCHIVED", "-2,0", "epId",1,"where archived = 0" )

//findEntitiesInDBwithConditionOrCreate("tableRPCM", "ID,NSI_POSITION_CODE_CODE,SUPP_POSITION_CODE_CODE", "-2,'2','2'", "rpcmId",1)

//findEntitiesInDBwithConditionOrCreate("tablePosNom","ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")

findEntitiesInDBwithConditionOrCreate("tableDepNom", "ID,TITLE,\"START\" ", "-2, 'Департамент для нагрузочного тестирования',  TIMESTAMP '2015-11-01 00:00:00.000000' ", "dnId",1)

//findEntitiesInDBwithConditionOrCreate("tablePCalendar", "ID,\"DATE\",PARTICULARITY,ARCHIVED", "-2,TIMESTAMP '2018-01-01 00:00:00.000000', 'HOLIDAY', 0", "prodCalId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "(select min(id)-1),'CODE','Возрастная группа для нагрузочного тестирования',0,0", "agId",1,"where archived = 0 ")

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени ДР для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "arSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило ДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','REJECTION',1", "arSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило ДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','TREATMENT_REDEFINITION',30", "arSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило ДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','AGE_GROUP_RESTRICTION',32", "arSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени CДР для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "sarSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило CДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','REJECTION',1", "sarSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило CДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','AGE_GROUP_RESTRICTION',8", "sarSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило CДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','TREATMENT_REDEFINITION',7", "sarSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-6, 0, 'Правило CДР типа ROUTE_REDEFINITIONCTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','ROUTE_REDEFINITION',9", "sarSchruleRRTypeId",1,"where archived = 0 and KIND='ROUTE_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "-5,'CODE','Архивная возрастная группа для автотестирования',1,0", "archivedAgId",1,"where archived = 1 ")

getDoesntExisted("tableAG", "nonexistentAgId")

getDoesntExisted("tableSarRuleType", "nonexistentSarRuleTypeId")

getDoesntExisted("tableE", "eId")

//getDoesntExisted("JOB_EXECUTION", "JeId")</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/нескольких МУ/Локаций" id="baa2ae57-1a26-4954-a5de-a04932b570f7"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.getPropertyValue("moId")
def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()
def specId = testRunner.testCase.getPropertyValue("specId1")

//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =1000, int icount=15) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i <= icount; i++) {
	    if (row != 1) {
		    	if (i==icount){
		    		testRunner.fail("Запись в таблице "+tableName+" с id = "+propertyName+" не найдена.")
		    		break;
		    	}
		      log.info("Запись в таблице "+tableName+" с id = "+propertyName+" пока не найдена. Подождем...")
		      sleep(sleepTime)
		      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+tableName+" с id = "+propertyName+" создана.")
	        break;
	    }
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String id ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+id
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}

def isExistedWithCondition(String tableName, String cond ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE "+cond
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}
//функция отправляет указанное сообщение в укаанный топик
def sendMessageToKafka(String topicName, String s){
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
		log.info( "messageSender: "+topic+"; "+message )
		def key =  UUID.randomUUID().toString()
		def Date date = new Date(); 
		def  long  timestamp= date.getTime()
		def int partition =0
		String compoundMessage = "$message"
		producer.send(
			new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
			{ RecordMetadata metadata, Exception e ->
			log.info( "The offset of the record we just sent is: ${metadata.offset()}")
			} as Callback
			)
			}
	
	def mfMsg =s
	String messageCreateMf =mfMsg.toString()
	def topic= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	String topic1= topic.toString()
	//log.info(topic1+" "+messageCreateMf)
	messageSender(topic1, messageCreateMf)
	
	producer.close() 
}


def existedMO=isExisted("MEDICAL_ORGANIZATION ",moId) 

if (!isExisted("MEDICAL_ORGANIZATION ",moId) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMO.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МО в сервисе Запись.3")
			sendMessageToKafka("topicMO.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МО в сервисе Запись.3')
		}
		checkCreation("MEDICAL_ORGANIZATION ",moId)
}
else {
	log.info("Медицинская организация с id = "+moId+" уже создана")
		testRunner.testCase.setPropertyValue("moId",moId)
}


//Проверить, создана ли запись для головного МУ, если нет - досоздать
if (!isExisted("MEDICAL_FACILITY",moId) ){
	//log.info("Отправляю сообщение")
	sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	if (createEntityInAppointment3 == true){
		log.info("Требуется досоздать МУ в сервисе Запись.3")
		sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	}
	else {
		log.info('Не требуется досоздать МУ в сервисе Запись.3')
	}
	checkCreation("MEDICAL_FACILITY",moId)

}
else {
	log.info("Медицинское учреждение с id = "+moId+" уже создано")
}


// Досоздать необходимое количество МУ, если требуется

int mfId = moId.toInteger()
for (int i = 1; i <counterMF; i++){
	mfId = mfId +1
	if (!isExisted("MEDICAL_FACILITY",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МУ в сервисе Запись.3")
			sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МУ в сервисе Запись.3')
		}
		checkCreation("MEDICAL_FACILITY",mfId.toString())
	
	}
	else {
		log.info("Медицинское учреждение с id = "+mfId+" уже создано")
	}
	testRunner.testCase.setPropertyValue("mfId"+i, mfId.toString())
	
}

mfId = moId.toInteger()
for (int i = 1; i <=counterMF; i++){
	if (!isExisted("LOCATION",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicLocation.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")
		if (createEntityInAppointment3 == true){
				log.info("Требуется досоздать Локацию в сервисе Запись.3")
				sendMessageToKafka("topicLocation.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+moId+"""</ns5:medicalFacilityId></ns4:location>""")
		}
		else {
			log.info('Не требуется досоздать Локацию в сервисе Запись.3')
		}
		checkCreation("LOCATION",mfId.toString())
	}
	else {
		log.info("Локация с id = "+mfId+" уже создана")
	}
	mfId = mfId+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании оборудований" id="ef481e8c-3a55-4114-bef7-eb4ac88b2597"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("eId1").toInteger()
def moId=testRunner.testCase.getPropertyValue("moId")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("mfId1")
def archived=testRunner.testCase.getPropertyValue("archived")
def equipmentModel=testRunner.testCase.getPropertyValue("em")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId")
def equipmentProfileId=testRunner.testCase.getPropertyValue("epId1")

def depId=testRunner.testCase.getPropertyValue("depId")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle")
def depNomId=testRunner.testCase.getPropertyValue("dnId1")
archived =testRunner.testCase.getPropertyValue("archived").toBoolean()
def personalizedService=testRunner.testCase.getPropertyValue("personalizedService")
def capacity=testRunner.testCase.getPropertyValue("capacity")
def tId1=testRunner.testCase.getPropertyValue("tId1")
def tId2=testRunner.testCase.getPropertyValue("tId2")
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableE =testRunner.testCase.testSuite.project.getPropertyValue("tableE")
log.info(tableE+id)

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i<=countResources; i++){
	sendMessageToKafka("topicLocationEquipment.rir2","""<ns4:locationEquipment archived=\""""+archived+"""\" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
	for (int q = 0; q<=10;q++) {
		def getLastItem = "SELECT * FROM "+tableE+"  WHERE ID="+id
		log.info(getLastItem)
		def lastItem= sql.rows(getLastItem)
	
		if ( lastItem.size()== 0){
				log.info("Оборудование пока не найдено. Подождем")
				sleep(5000)
		}
		else if (q==10){
			testRunner.fail("Запись в таблице "+tableE+" не найдена")
		}
		else {
			log.info("Оборудование найдено.")
			testRunner.testCase.setPropertyValue("eId"+i, id.toString())
			testRunner.testCase.setPropertyValue("eIdCreatedByTest"+i, "1")
			break;
		}
	}
	id=id+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка синхронизации ресурсов" id="b5b161af-ce4f-4f14-bd0b-3aae928c8a33"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i&lt;=countResources; i++){
	def id=testRunner.testCase.getPropertyValue("eId"+i)
	String querySar="select * from "+tableRes+" where RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id
	for (int j = 0; j &lt; 28; j++) {
		
		//log.info(querySar)
		rowsSar = sql.rows(querySar)
		// log.info(rowsSar)
		if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
			log.info("Идет синхронизация ресруса. Подождём...")
			sleep(6000)
		}
		else {
			log.info("Синхрнизация ресурса завершена.")
			break;
		}
	 }
	if (rowsSar[0].SYNC_STATUS=='ERROR'){
		getResSyncError=(" SELECT DISTINCT rsem.code, rsemp.\"KEY\" as entity , rsemp.VALUE FROM RESOURCE_SYNC_ERROR rse JOIN "+tableRes+" res ON res.id=rse.RESOURCE_ID  JOIN RESOURCE_SYNC_ERROR_MSG rsem ON RSE.ID=RSEM.RESOURCE_SYNC_ERROR_ID JOIN RESOURCE_SYNC_ERROR_MSG_PR rsemp ON rsemp.RESOURCE_SYNC_ERROR_MSG_ID=rsem.id WHERE res.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND res.PARENT_ID ="+id)
		errors=sql.rows(getResSyncError)
		testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+"завершена с ошибкой. Код ошибки "+errors[0].CODE+". Сущность, из-за которой произошла ошибка: "+errors[0].entity+", id="+errors[0].VALUE)
	}
	
	testRunner.testCase.setPropertyValue("sarId"+i, rowsSar[0].ID.toString())
}</script></con:config></con:testStep><con:testStep type="groovy" name="Подбор периода расписания" id="29199fa1-5dc6-4c8f-8338-d67d57d9edf4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def monthsNumberInSchedule = testRunner.testCase.getPropertyValue("countMonthsInSchedule").toInteger()

def schedulePeriodStart=LocalDate.now()
def schedulePeriodNextDay=schedulePeriodStart.plusDays(1)
def scheduleNewPeriodStart=schedulePeriodStart.plusMonths(monthsNumberInSchedule-1)
def schedulePeriodEnd=scheduleNewPeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def yesterday = schedulePeriodStart.minusDays(1)
def schedulePeriodNextDay2=schedulePeriodStart.plusMonths(1)
log.info("schedulePeriodNextDay "+schedulePeriodNextDay)
log.info("schedulePeriodNextDay2 "+schedulePeriodNextDay2)
log.info("Период расписания с "+schedulePeriodStart+" по "+schedulePeriodEnd)

testRunner.testCase.setPropertyValue("schedulePeriodNextDay",schedulePeriodNextDay.toString());
testRunner.testCase.setPropertyValue("schedulePeriodNextDay2",schedulePeriodNextDay2.toString());
testRunner.testCase.setPropertyValue("schedulePeriodStart1",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd1", schedulePeriodEnd.toString())
testRunner.testCase.setPropertyValue("schedulePeriodStart",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd", schedulePeriodEnd.toString())
log.info("Период расписания №1 с "+schedulePeriodStart+" по "+schedulePeriodEnd)
ospe=schedulePeriodEnd


	
for (int i=2; i &lt;5; i++ ){
	sps=ospe.plusDays(1)
	spe1=ospe.plusMonths(monthsNumberInSchedule)
	spe=spe1.with(TemporalAdjusters.lastDayOfMonth())
	testRunner.testCase.setPropertyValue("schedulePeriodStart"+i,sps.toString());
	testRunner.testCase.setPropertyValue("schedulePeriodEnd"+i, spe.toString())
	log.info("Период расписания №"+i+" с "+sps+" по "+spe)
	ospe=spe
}
def lastDayOfCurrentMounth=schedulePeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def schedulePeriodEndPlusYear=lastDayOfCurrentMounth.plusMonths(monthsNumberInSchedule+13)
testRunner.testCase.setPropertyValue("schedulePeriodEndPlusYear", schedulePeriodEndPlusYear.toString())
log.info("schedulePeriodEndPlusYear: "+schedulePeriodEndPlusYear)
testRunner.testCase.setPropertyValue("yesterday", yesterday.toString())
log.info("yesterday: "+yesterday)</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на текущий месяц" id="b46d5f96-60f5-4a0b-bb31-8bfe10549f27"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на текущий месяц" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="af870522-fea0-40ad-8900-f59b9430ba32"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch на текущий месяц</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания расписаний ресурсов" id="510488df-087e-4625-9ce4-68e09042b7e7"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def countResources= testRunner.testCase.getPropertyValue("countResources")

def checkResourceKind(int id){
	resourseKind=""
		
}
getResources = ("SELECT * FROM \"RESOURCE\" WHERE SYNC_STATUS= 'OK' AND ARCHIVED=0 AND MEDICAL_FACILITY_ID="+mfId)
//log.info(getResources)
resources= sql.rows(getResources)
countResources= sql(getResources)
if ( countResources== 0){
		testRunner.fail("Запись в таблице RESOURCE не найдена")
}

//log.info("countResources "+countResources)

for (int i=0; i&lt;countResources; i++){
	//log.info("i = "+i)
	getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE SCHEDULE_ID="+scheduleId+" AND RESOURCE_ID="+resources[i].ID)
	//log.info(getResourceSchedule)
	resourceSchedule=sql.rows(getResourceSchedule)
	//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
	if ( sql(getResourceSchedule)== 0){
		testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс SCHEDULE_ID="+scheduleId+" и RESOURCE_ID="+resources[i].ID+" не найдена")
	}
	else {
		//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 0
	assert resourceSchedule[0].STATUS == "NOT_DEFINED"
	}
	log.info("Расписание для ресурса "+resources[i].ID+" создано успешно и соответствует требованиям.")
	if (resources[i].RESOURCE_KIND =="SPECIAL_AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("sarScheduleId1",resourceSchedule[0].ID.toString())
	}
	else if (resources[i].RESOURCE_KIND =="AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("arScheduleId1",resourceSchedule[0].ID.toString())
	}
}

log.info("Для всех ресурсов успешно созданы расписания.")</script></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E372" id="5ff50775-5ed8-4f64-8d24-571ed47d319e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E372" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleTRTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestCase#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E372"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E372'

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="a84abb6c-feec-48c0-9c6c-506398cf9d99"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId1}</v1:scheduleId>\r
         <v1:entityVersion>0</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId" id="83fdeff8-502d-4b0d-999f-5af7adb9ae76"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteScheduleForBranch</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>deleteSchedule1OperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция" id="15b9660f-3db0-4bc4-a21e-f7fa48f8ced5"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
def operationId1= testRunner.testCase.getPropertyValue("deleteSchedule1OperationId")
log.info ("ID операции: " + operationId1)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId1
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка удаления расписания МУ" id="72e48d77-c214-48b6-9796-052dc5e3b739"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)> 0){
		testRunner.fail("Запись в таблице SCHEDULE не удалена."+schedule)
}
else {
	log.info("Запись в таблице SCHEDULE удалена.")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление ресурсов и род сущностей" id="0378ca75-8cdb-4468-af7c-466d1dc44d05"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

 moId = testRunner.testCase.getPropertyValue("moId")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteResource=("delete from "+tableRes+" where MEDICAL_ORGANIZATION_ID="+moId)
log.info(deleteResource)
sql.execute(deleteResource)
equipmentList="0"
countResources= testRunner.testCase.getPropertyValue("countResources").toInteger()

log.info("countResources="+countResources)

tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

for(int i=1; i&lt;=countResources; i++){
	log.info("countResources="+countResources)
	log.info("i="+ i)
	eId= testRunner.testCase.getPropertyValue("eId"+ i)
	log.info("eId="+eId)
	//created=testRunner.testCase.getPropertyValue("eIdCreatedByTest" + i).toBoolean()
	//log.info("created="+created)
	//if(created==true){
		deleteEquipmentTreatments=("delete from "+tableET+" where EQUIPMENT_ID=" + eId)
		log.info(deleteEquipmentTreatments)
		sql.execute(deleteEquipmentTreatments)
	//}
}

deleteCreatedByTestInTestCaseWithCounter("tableE","eId",countResources)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление МО/МУ/Локаций" id="51b53487-4d3b-42a7-960e-6b87f8772600"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")


tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		log.info("Щас удалю проперти "+propertyName+i)
		testRunner.testCase.removeProperty(propertyName+i)
		log.info("Удалил. Щас удалю проперти "+propertyName+"CreatedByTest"+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
		log.info("Для №  "+i+" всё")
	}

}


def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()

def clearMoMfLocationByMoIDWithCount(String moPropertyName, int counter){
	tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
	tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
	tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
	tableMFWH = testRunner.testCase.testSuite.project.getPropertyValue("tableMFWH")
	tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
	moId=testRunner.testCase.getPropertyValue("moId")
	 id=moId.toLong()
	for (int i=1; i&lt;=counter; i++){
		deleteLoc=("delete from "+tableLoc+" where ID="+id)
		log.info(deleteLoc)
		sql.execute(deleteLoc)
		deleteMFWH=("delete from "+tableMFWH+" where MEDICAL_FACILITY_ID="+id)
		log.info(deleteMFWH)
		sql.execute(deleteMFWH)
		deleteMF=("delete from "+tableMF+" where ID="+id)
		log.info(deleteMF)
		sql.execute(deleteMF)
		deleteAO=("delete from "+tableAO+" where ID="+id)
		log.info(deleteAO)
		sql.execute(deleteAO)
		id=id+1
	}
	deleteMO=("delete from "+tableMO+" where ID="+moId)
	log.info(deleteMO)
	sql.execute(deleteMO)
	for (int i=1; i&lt;=counter; i++){
		testRunner.testCase.removeProperty("mfId"+i)
	}
}

clearMoMfLocationByMoIDWithCount("moId", counterMF)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление вспомогательных сущностей" id="3ac4a9e5-5b6b-445e-8f22-2b7c5ce30456"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteCreatedByTestInTestCaseWithCounter("tableSpec", "specId")
deleteCreatedByTestInTestCaseWithCounter("tableEP", "epId")
deleteCreatedByTestInTestCaseWithCounter("tableDepNom", "dnId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleWTTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRejectionTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleAGTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleTRTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRRTypeId")
//deleteCreatedByTestInTestCaseWithCounter("tableResTyp", "resourceTypeSAR")
</script></con:config></con:testStep><con:testStep type="groovy" name="clearTreatmentsWithMapping" id="b76ba174-22bc-4d2b-8616-50e07fe62afb"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def clearTreatmentsWithMapping(int count, int firsIndex=1 ){
	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRouteTreatmentMapping=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentId = testRunner.testCase.getPropertyValue("tId"+i)
		tCreatedByTest=testRunner.testCase.getPropertyValue("tCreatedByTest"+i)
		treatmentCode = testRunner.testCase.getPropertyValue("tCode"+i)
		tMappingCode = testRunner.testCase.getPropertyValue("tMappingCode"+i) 
		tMappingCodeCreatedByTest=testRunner.testCase.getPropertyValue("tMappingCodeCreatedByTest"+i)
		if(tMappingCodeCreatedByTest=='1'){
			log.info("Для записи №"+i+" маппинг был создан автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableRouteTreatmentMapping+" WHERE TREATMENT_CODE='"+treatmentCode+"'")
		}
		if(tCreatedByTest=='1'){
			log.info("Для записи №"+i+" ММ №"+treatmentId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableT+"  WHERE ID='"+treatmentId+"'")
		}
		log.info("Очищаю проперти маппинга и ММ для записи №"+i)
		testRunner.testCase.removeProperty("tMappingCode"+i) 
		testRunner.testCase.removeProperty("tMappingCodeCreatedByTest"+i)
		testRunner.testCase.removeProperty("tCode"+i)
		testRunner.testCase.removeProperty("tCreatedByTest"+i)
		testRunner.testCase.removeProperty("tId"+i)
	}
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentCategoryId = testRunner.testCase.getPropertyValue("tcId"+i)
		tcCreatedByTest=testRunner.testCase.getPropertyValue("tcCreatedByTest"+i)
		if(tcCreatedByTest=='1'){
			("Для записи №"+i+" Категория ММ №"+treatmentCategoryId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableTC+"  WHERE ID='"+treatmentCategoryId+"'")
		}
		log.info("Очищаю проперти Категории ММ для записи №"+i)
		testRunner.testCase.removeProperty("tcId"+i)
		testRunner.testCase.removeProperty("tcCreatedByTest"+i)
		testRunner.testCase.removeProperty("tcCode"+i)
	}
}

clearTreatmentsWithMapping(countTreatment)
</script></con:config></con:testStep><con:properties><con:property><con:name>afterSchedulePeriodEnd</con:name><con:value>2021-02-01</con:value></con:property><con:property><con:name>agId1</con:name><con:value>127631257</con:value></con:property><con:property><con:name>agIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>archived</con:name><con:value>false</con:value></con:property><con:property><con:name>archivedAgId1</con:name><con:value>127631289</con:value></con:property><con:property><con:name>archivedAgIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arScheduleId1</con:name><con:value>4750441</con:value></con:property><con:property><con:name>beforeSchedulePeriodStart</con:name><con:value>2018-08-31</con:value></con:property><con:property><con:name>capacity</con:name><con:value>1</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countMonthsInSchedule</con:name><con:value>1</con:value></con:property><con:property><con:name>countResources</con:name><con:value>2</con:value></con:property><con:property><con:name>countSchedule</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatment</con:name><con:value>2</con:value></con:property><con:property><con:name>deleteSchedule1OperationId</con:name><con:value>4404326</con:value></con:property><con:property><con:name>depId</con:name><con:value>123456</con:value></con:property><con:property><con:name>depTitle</con:name><con:value>Описание отделения автотет рир2</con:value></con:property><con:property><con:name>em</con:name><con:value>Оборудование для СДР автотест рир2</con:value></con:property><con:property><con:name>endTime</con:name><con:value>20:00:00</con:value></con:property><con:property><con:name>endTimeTR</con:name><con:value>10:00:00</con:value></con:property><con:property><con:name>epId</con:name><con:value>146017593</con:value></con:property><con:property><con:name>epIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentId</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentTypeId</con:name><con:value>1236</con:value></con:property><con:property><con:name>moId</con:name><con:value>-10</con:value></con:property><con:property><con:name>nonexistentAgId1</con:name><con:value>127631291</con:value></con:property><con:property><con:name>nonexistentSarRuleTypeId1</con:name><con:value>9</con:value></con:property><con:property><con:name>personalizedService</con:name><con:value>true</con:value></con:property><con:property><con:name>resTypeForSarId</con:name><con:value>156645371</con:value></con:property><con:property><con:name>resTypeForSarIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>res_scheduleIsId</con:name><con:value>1207400</con:value></con:property><con:property><con:name>sarScheduleId1</con:name><con:value>4873319</con:value></con:property><con:property><con:name>scheduleId</con:name><con:value>13925480</con:value></con:property><con:property><con:name>scheduleId1</con:name><con:value>2681958</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd12</con:name><con:value>2022-03-07</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-10-28</con:value></con:property><con:property><con:name>scheduleVersion1</con:name><con:value>0</con:value></con:property><con:property><con:name>scheduleVersion2</con:name><con:value>0</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>0</con:value></con:property><con:property><con:name>startTime</con:name><con:value>08:00:00</con:value></con:property><con:property><con:name>startTimeTR</con:name><con:value>09:00:00</con:value></con:property><con:property><con:name>treatmentId</con:name><con:value>135468844</con:value></con:property><con:property><con:name>treatmentId2</con:name><con:value>135468854</con:value></con:property><con:property><con:name>sarId1</con:name><con:value>30101110498</con:value></con:property><con:property><con:name>sarId2</con:name><con:value>30101110499</con:value></con:property><con:property><con:name>schedulePeriodNextDay</con:name><con:value>2021-10-29</con:value></con:property><con:property><con:name>schedulePeriodNextDay2</con:name><con:value>2021-11-28</con:value></con:property><con:property><con:name>schedulePeriodStart1</con:name><con:value>2021-10-28</con:value></con:property><con:property><con:name>schedulePeriodEnd1</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodStart2</con:name><con:value>2021-11-01</con:value></con:property><con:property><con:name>schedulePeriodEnd2</con:name><con:value>2021-11-30</con:value></con:property><con:property><con:name>schedulePeriodStart3</con:name><con:value>2021-12-01</con:value></con:property><con:property><con:name>schedulePeriodEnd3</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>schedulePeriodStart4</con:name><con:value>2022-01-01</con:value></con:property><con:property><con:name>schedulePeriodEnd4</con:name><con:value>2022-01-31</con:value></con:property><con:property><con:name>schedulePeriodEndPlusYear</con:name><con:value>2022-12-31</con:value></con:property><con:property><con:name>yesterday</con:name><con:value>2021-10-27</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="f934ed17-0160-448e-8998-abd94f0ef52f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="createSarScheduleRule_E379" searchProperties="true"><con:settings><con:setting id="abfe296c-55f7-41c7-b648-8089df85124cfileName">СДР.Основные-АС</con:setting></con:settings><con:testStep type="groovy" name="getTreatmentsWithMapping" id="b1690437-8ca4-44ed-9916-63b053d37ce4"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithMapping=sql.rows(getTreatmentsWithMapping)
	countTreatmentsWithMapping=treatmentsWithMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithMapping
	lastId=0
	listOfTreatmensWithMapping="0"
	if(countTreatmentsWithMapping>0){
		if(countTreatmentsWithMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatments = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 and t.id not in ("+listOfTreatmensWithMapping+") ORDER BY t.id DESC"
		//log.info(getNonarchivedTreatments)
		nonarchivedTreatments=sql.rows(getNonarchivedTreatments)
		countNonarchivedTreatments=nonarchivedTreatments.size()
		log.info("countNonarchivedTreatments= "+countNonarchivedTreatments)
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
			if(countNonarchivedTreatments>0){
					treatmentId = nonarchivedTreatments[index].TREATMENT_ID.toString()
					treatmentCode = nonarchivedTreatments[index].TREATMENT_CODE.toString()
					treatmentCategoryId = nonarchivedTreatments[index].TREATMENT_CATEGORY_ID.toString()
					treatmentCategoryCode = nonarchivedTreatments[index].TREATMENT_CATEGORY_CODE.toString()
					tCreatedByTest="0"
					tcCreatedByTest="0"
					countNonarchivedTreatments=countNonarchivedTreatments-1
					log.info("Для записи №"+i+" есть неархивная ММ без маппинга, ее id = "+treatmentId)
					index=index+1
			}
			else{
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
				}
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание или подбор вспомогательных сущностей" id="c5f7a75d-9880-4e99-8e02-c0c976879659"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()
def moId = testRunner.testCase.getPropertyValue("moId")


def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	String query = "SELECT * FROM "+table+ " "+condition
	//log.info("insert into  "+table+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+table+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+table+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+table+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "1")
		}
	}
}

def getDoesntExisted (String tableName,String propertyName, int counter=1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		String query = "SELECT max(id)+"+i+" as ID FROM "+table
		def result =sql.rows(query)
		testRunner.testCase.setPropertyValue(propertyName+i, result[0].ID.toString())
		log.info("ID несуществубщей записи в таблице  "+table+ " = "+result[0].ID.toString())
	}
}

def checkExistenceResourceType (String resourceType ){
	String CreatedByTest="0"
	String propertyName1
	String propertyName2
	String result1
	String result2
	String tableName1="RESOURCE_TYPE"
	String tableName2
		if(resourceType=="SPECIAL_AVAILABLE_RESOURCE") { 
			//log.info("СДР")
			propertyName1="resTypeForSarId"
			propertyName2="epId"
			tableName2="EQUIPMENT_PROFILE"
			String query = "SELECT rt.ID as RESOURCE_TYPE_ID, ep.id as EQUIPMENT_PROFILE_ID FROM RESOURCE_TYPE rt JOIN EQUIPMENT_PROFILE ep ON ep.RESOURCE_TYPE_ID =rt.ID WHERE rt.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND rt.ARCHIVED =0 AND ep.ARCHIVED =0"
			//log.info(query)
			def row = sql(query)
			//log.info(row)
			def result =sql.rows(query)
			//log.info(result)
			if (row == 0){
					log.info("В таблицах EQUIPMENT_PROFILE  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -3, 'Тип CДР для нагрузочного тестирования','SPECIAL_AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  EQUIPMENT_PROFILE  (ID, ARCHIVED,RESOURCE_TYPE_ID) values( -3, 0, -3)")
					result1="-3"
					result2="-3"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].EQUIPMENT_PROFILE_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и EQUIPMENT_PROFILE имеют подходящие записи.")
				}
		} else if(resourceType=="AVAILABLE_RESOURCE") { 
		   	log.info("ДР")
		   	tableName2="POSITION_NOM"
		   	propertyName1="resTypeForArId"
			propertyName2="pnId"
			String query1 = "SELECT rt.ID as RESOURCE_TYPE_ID, pn.id as POSITION_NOM_ID  FROM RESOURCE_TYPE rt JOIN POSITION_NOM pn ON pn.RESOURCE_TYPE_ID =rt.id WHERE rt.ARCHIVED =0 AND rt.RESOURCE_KIND ='AVAILABLE_RESOURCE'"
			//log.info(query)
			def row1 = sql(query1)
			//log.info(row)
			def result =sql.rows(query1)
			//log.info(result)
			if (row1 == 0){
					log.info("В таблицах POSITION_NOM  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -4, 'Тип ДР для нагрузочного тестирования','AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  POSITION_NOM (ID,TITLE,RESOURCE_TYPE_ID) values( -2,'Должность для нагрузочного тестирования', -4)")
					result1="-4"
					result2="-4"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].POSITION_NOM_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и POSITION_NOM имеют подходящие записи.")
				}
		} else { 
		  testRunner.fail("Передан некорректный тип ресурса")
		}

	testRunner.testCase.setPropertyValue(propertyName1, result1)
	testRunner.testCase.setPropertyValue(propertyName2, result2)
	testRunner.testCase.setPropertyValue(propertyName1+"CreatedByTest", CreatedByTest)
	testRunner.testCase.setPropertyValue(propertyName2+"CreatedByTest", CreatedByTest)
	log.info("Записан  параметр"+tableName1+ ".ID= "+result1)
	log.info("Записан  параметр "+tableName2+ ".ID= "+result2)


	}
	
checkExistenceResourceType("SPECIAL_AVAILABLE_RESOURCE")

//checkExistenceResourceType("AVAILABLE_RESOURCE")

//шаблончик вызова метода
//checkExistence("", "", "", "","")//"where archived = 0" )

//Подобрать ММ с маппингом


findEntitiesInDBwithConditionOrCreate("tableSpec", "ID,ARCHIVED,TITLE", "-2,0,'Специализация для нагрузочного тестирования'","specId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableEP", "ID,ARCHIVED", "-2,0", "epId",1,"where archived = 0" )

//findEntitiesInDBwithConditionOrCreate("tableRPCM", "ID,NSI_POSITION_CODE_CODE,SUPP_POSITION_CODE_CODE", "-2,'2','2'", "rpcmId",1)

//findEntitiesInDBwithConditionOrCreate("tablePosNom","ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")

findEntitiesInDBwithConditionOrCreate("tableDepNom", "ID,TITLE,\"START\" ", "-2, 'Департамент для нагрузочного тестирования',  TIMESTAMP '2015-11-01 00:00:00.000000' ", "dnId",1)

//findEntitiesInDBwithConditionOrCreate("tablePCalendar", "ID,\"DATE\",PARTICULARITY,ARCHIVED", "-2,TIMESTAMP '2018-01-01 00:00:00.000000', 'HOLIDAY', 0", "prodCalId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "(select min(id)-1),'CODE','Возрастная группа для нагрузочного тестирования',0,0", "agId",1,"where archived = 0 ")

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени ДР для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "arSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило ДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','REJECTION',1", "arSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило ДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','TREATMENT_REDEFINITION',30", "arSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило ДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','AGE_GROUP_RESTRICTION',32", "arSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени CДР для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "sarSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило CДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','REJECTION',1", "sarSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило CДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','AGE_GROUP_RESTRICTION',8", "sarSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило CДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','TREATMENT_REDEFINITION',7", "sarSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-6, 0, 'Правило CДР типа ROUTE_REDEFINITIONCTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','ROUTE_REDEFINITION',9", "sarSchruleRRTypeId",1,"where archived = 0 and KIND='ROUTE_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "-5,'CODE','Архивная возрастная группа для автотестирования',1,0", "archivedAgId",1,"where archived = 1 ")

getDoesntExisted("tableAG", "nonexistentAgId")

getDoesntExisted("tableSarRuleType", "nonexistentSarRuleTypeId")

getDoesntExisted("tableE", "eId")

//getDoesntExisted("JOB_EXECUTION", "JeId")</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/нескольких МУ/Локаций" id="81dd215c-559d-4f0e-9677-ff0c9d8bd6b5"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.getPropertyValue("moId")
def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()
def specId = testRunner.testCase.getPropertyValue("specId1")

//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =1000, int icount=15) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i <= icount; i++) {
	    if (row != 1) {
		    	if (i==icount){
		    		testRunner.fail("Запись в таблице "+tableName+" с id = "+propertyName+" не найдена.")
		    		break;
		    	}
		      log.info("Запись в таблице "+tableName+" с id = "+propertyName+" пока не найдена. Подождем...")
		      sleep(sleepTime)
		      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+tableName+" с id = "+propertyName+" создана.")
	        break;
	    }
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String id ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+id
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}

def isExistedWithCondition(String tableName, String cond ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE "+cond
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}
//функция отправляет указанное сообщение в укаанный топик
def sendMessageToKafka(String topicName, String s){
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
		log.info( "messageSender: "+topic+"; "+message )
		def key =  UUID.randomUUID().toString()
		def Date date = new Date(); 
		def  long  timestamp= date.getTime()
		def int partition =0
		String compoundMessage = "$message"
		producer.send(
			new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
			{ RecordMetadata metadata, Exception e ->
			log.info( "The offset of the record we just sent is: ${metadata.offset()}")
			} as Callback
			)
			}
	
	def mfMsg =s
	String messageCreateMf =mfMsg.toString()
	def topic= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	String topic1= topic.toString()
	//log.info(topic1+" "+messageCreateMf)
	messageSender(topic1, messageCreateMf)
	
	producer.close() 
}


def existedMO=isExisted("MEDICAL_ORGANIZATION ",moId) 

if (!isExisted("MEDICAL_ORGANIZATION ",moId) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMO.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МО в сервисе Запись.3")
			sendMessageToKafka("topicMO.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МО в сервисе Запись.3')
		}
		checkCreation("MEDICAL_ORGANIZATION ",moId)
}
else {
	log.info("Медицинская организация с id = "+moId+" уже создана")
		testRunner.testCase.setPropertyValue("moId",moId)
}


//Проверить, создана ли запись для головного МУ, если нет - досоздать
if (!isExisted("MEDICAL_FACILITY",moId) ){
	//log.info("Отправляю сообщение")
	sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	if (createEntityInAppointment3 == true){
		log.info("Требуется досоздать МУ в сервисе Запись.3")
		sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	}
	else {
		log.info('Не требуется досоздать МУ в сервисе Запись.3')
	}
	checkCreation("MEDICAL_FACILITY",moId)

}
else {
	log.info("Медицинское учреждение с id = "+moId+" уже создано")
}


// Досоздать необходимое количество МУ, если требуется

int mfId = moId.toInteger()
for (int i = 1; i <counterMF; i++){
	mfId = mfId +1
	if (!isExisted("MEDICAL_FACILITY",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МУ в сервисе Запись.3")
			sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МУ в сервисе Запись.3')
		}
		checkCreation("MEDICAL_FACILITY",mfId.toString())
	
	}
	else {
		log.info("Медицинское учреждение с id = "+mfId+" уже создано")
	}
	testRunner.testCase.setPropertyValue("mfId"+i, mfId.toString())
	
}

mfId = moId.toInteger()
for (int i = 1; i <=counterMF; i++){
	if (!isExisted("LOCATION",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicLocation.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")
		if (createEntityInAppointment3 == true){
				log.info("Требуется досоздать Локацию в сервисе Запись.3")
				sendMessageToKafka("topicLocation.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+moId+"""</ns5:medicalFacilityId></ns4:location>""")
		}
		else {
			log.info('Не требуется досоздать Локацию в сервисе Запись.3')
		}
		checkCreation("LOCATION",mfId.toString())
	}
	else {
		log.info("Локация с id = "+mfId+" уже создана")
	}
	mfId = mfId+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании оборудований" id="5d920536-1b85-4357-b8c6-8e29cba09b00"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("eId1").toInteger()
def moId=testRunner.testCase.getPropertyValue("moId")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("mfId1")
def archived=testRunner.testCase.getPropertyValue("archived")
def equipmentModel=testRunner.testCase.getPropertyValue("em")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId")
def equipmentProfileId=testRunner.testCase.getPropertyValue("epId1")

def depId=testRunner.testCase.getPropertyValue("depId")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle")
def depNomId=testRunner.testCase.getPropertyValue("dnId1")
archived =testRunner.testCase.getPropertyValue("archived").toBoolean()
def personalizedService=testRunner.testCase.getPropertyValue("personalizedService")
def capacity=testRunner.testCase.getPropertyValue("capacity")
def tId1=testRunner.testCase.getPropertyValue("tId1")
def tId2=testRunner.testCase.getPropertyValue("tId2")
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableE =testRunner.testCase.testSuite.project.getPropertyValue("tableE")
log.info(tableE+id)

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i<=countResources; i++){
	sendMessageToKafka("topicLocationEquipment.rir2","""<ns4:locationEquipment archived=\""""+archived+"""\" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
	for (int q = 0; q<=10;q++) {
		def getLastItem = "SELECT * FROM "+tableE+"  WHERE ID="+id
		log.info(getLastItem)
		def lastItem= sql.rows(getLastItem)
	
		if ( lastItem.size()== 0){
				log.info("Оборудование пока не найдено. Подождем")
				sleep(5000)
		}
		else if (q==10){
			testRunner.fail("Запись в таблице "+tableE+" не найдена")
		}
		else {
			log.info("Оборудование найдено.")
			testRunner.testCase.setPropertyValue("eId"+i, id.toString())
			testRunner.testCase.setPropertyValue("eIdCreatedByTest"+i, "1")
			break;
		}
	}
	id=id+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка синхронизации ресурсов" id="7070a573-0b97-416e-bf2c-f05da775e03e"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i&lt;=countResources; i++){
	def id=testRunner.testCase.getPropertyValue("eId"+i)
	String querySar="select * from "+tableRes+" where RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id
	for (int j = 0; j &lt; 23; j++) {
		
		//log.info(querySar)
		rowsSar = sql.rows(querySar)
		// log.info(rowsSar)
		if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
			log.info("Идет синхронизация ресруса. Подождём...")
			sleep(6000)
		}
		else {
			log.info("Синхрнизация ресурса завершена.")
			break;
		}
	 }
	if (rowsSar[0].SYNC_STATUS=='ERROR'){
		getResSyncError=(" SELECT DISTINCT rsem.code, rsemp.\"KEY\" as entity , rsemp.VALUE FROM RESOURCE_SYNC_ERROR rse JOIN "+tableRes+" res ON res.id=rse.RESOURCE_ID  JOIN RESOURCE_SYNC_ERROR_MSG rsem ON RSE.ID=RSEM.RESOURCE_SYNC_ERROR_ID JOIN RESOURCE_SYNC_ERROR_MSG_PR rsemp ON rsemp.RESOURCE_SYNC_ERROR_MSG_ID=rsem.id WHERE res.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND res.PARENT_ID ="+id)
		errors=sql.rows(getResSyncError)
		testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+"завершена с ошибкой. Код ошибки "+errors[0].CODE+". Сущность, из-за которой произошла ошибка: "+errors[0].entity+", id="+errors[0].VALUE)
	}
	
	testRunner.testCase.setPropertyValue("sarId"+i, rowsSar[0].ID.toString())
}</script></con:config></con:testStep><con:testStep type="groovy" name="Подбор периода расписания" id="4116c155-f0cd-4e0f-bd1a-31a2fbe24f13"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def monthsNumberInSchedule = testRunner.testCase.getPropertyValue("countMonthsInSchedule").toInteger()

def schedulePeriodStart=LocalDate.now()
def schedulePeriodNextDay=schedulePeriodStart.plusDays(1)
def scheduleNewPeriodStart=schedulePeriodStart.plusMonths(monthsNumberInSchedule-1)
def schedulePeriodEnd=scheduleNewPeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def yesterday = schedulePeriodStart.minusDays(1)
def schedulePeriodNextDay2=schedulePeriodStart.plusMonths(1)
log.info("schedulePeriodNextDay "+schedulePeriodNextDay)
log.info("schedulePeriodNextDay2 "+schedulePeriodNextDay2)
log.info("Период расписания с "+schedulePeriodStart+" по "+schedulePeriodEnd)

testRunner.testCase.setPropertyValue("schedulePeriodNextDay",schedulePeriodNextDay.toString());
testRunner.testCase.setPropertyValue("schedulePeriodNextDay2",schedulePeriodNextDay2.toString());
testRunner.testCase.setPropertyValue("schedulePeriodStart1",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd1", schedulePeriodEnd.toString())
testRunner.testCase.setPropertyValue("schedulePeriodStart",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd", schedulePeriodEnd.toString())
log.info("Период расписания №1 с "+schedulePeriodStart+" по "+schedulePeriodEnd)
ospe=schedulePeriodEnd


	
for (int i=2; i &lt;5; i++ ){
	sps=ospe.plusDays(1)
	spe1=ospe.plusMonths(monthsNumberInSchedule)
	spe=spe1.with(TemporalAdjusters.lastDayOfMonth())
	testRunner.testCase.setPropertyValue("schedulePeriodStart"+i,sps.toString());
	testRunner.testCase.setPropertyValue("schedulePeriodEnd"+i, spe.toString())
	log.info("Период расписания №"+i+" с "+sps+" по "+spe)
	ospe=spe
}
def lastDayOfCurrentMounth=schedulePeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def schedulePeriodEndPlusYear=lastDayOfCurrentMounth.plusMonths(monthsNumberInSchedule+13)
testRunner.testCase.setPropertyValue("schedulePeriodEndPlusYear", schedulePeriodEndPlusYear.toString())
log.info("schedulePeriodEndPlusYear: "+schedulePeriodEndPlusYear)
testRunner.testCase.setPropertyValue("yesterday", yesterday.toString())
log.info("yesterday: "+yesterday)</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на текущий месяц" id="5c5d599a-b25c-453a-a682-ed57c1ab5118"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на текущий месяц" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="8a7b827b-0c82-4401-97fa-e808f19eb61d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch на текущий месяц</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на существующий период(E412,E413,E414)" id="b966fbd3-cb6b-415e-827f-6bf2a0906c4f" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на существующий период(E412,E413,E414)" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains E412"><con:configuration><token>E412</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a08420d1-e896-4a83-b915-b173771be93e" name="Contains E413"><con:configuration><token>E413</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="973439ef-43e4-4f3c-8b26-7ba07423810b" name="Contains E414"><con:configuration><token>E414</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch больше чем на год(E411)" id="933e5e8a-c53e-420b-8c2d-5b23db212b5f" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch больше чем на год(E411)" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart2}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEndPlusYear}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains E411"><con:configuration><token>E411</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания расписаний ресурсов" id="413b20f2-aad9-460c-b205-f8f650f9dee0"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def countResources= testRunner.testCase.getPropertyValue("countResources")

def checkResourceKind(int id){
	resourseKind=""
		
}
getResources = ("SELECT * FROM \"RESOURCE\" WHERE SYNC_STATUS= 'OK' AND ARCHIVED=0 AND MEDICAL_FACILITY_ID="+mfId)
//log.info(getResources)
resources= sql.rows(getResources)
countResources= sql(getResources)
if ( countResources== 0){
		testRunner.fail("Запись в таблице RESOURCE не найдена")
}

//log.info("countResources "+countResources)

for (int i=0; i&lt;countResources; i++){
	//log.info("i = "+i)
	getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE SCHEDULE_ID="+scheduleId+" AND RESOURCE_ID="+resources[i].ID)
	//log.info(getResourceSchedule)
	resourceSchedule=sql.rows(getResourceSchedule)
	//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
	if ( sql(getResourceSchedule)== 0){
		testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс SCHEDULE_ID="+scheduleId+" и RESOURCE_ID="+resources[i].ID+" не найдена")
	}
	else {
		//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 0
	assert resourceSchedule[0].STATUS == "NOT_DEFINED"
	}
	log.info("Расписание для ресурса "+resources[i].ID+" создано успешно и соответствует требованиям.")
	if (resources[i].RESOURCE_KIND =="SPECIAL_AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("sarScheduleId1",resourceSchedule[0].ID.toString())
	}
	else if (resources[i].RESOURCE_KIND =="AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("arScheduleId1",resourceSchedule[0].ID.toString())
	}
}

log.info("Для всех ресурсов успешно созданы расписания.")</script></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E372" id="d64a9e25-6409-4fd9-87f5-33c701dd872d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E372" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleTRTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestCase#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E372"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E372'

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E379" id="4856e935-80e4-4986-88d2-303bffc8f2e8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E379" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>\r
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>${#TestCase#startTime}</v1:start>\r
                     <v1:end>${#TestCase#endTime}</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestSuite#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestSuite#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E379"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E379'

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E385" id="638378f6-f7a6-4dcf-9df1-18693e2fe237" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E385" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestSuite#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="sarScheduleRuleID"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )

// получаю данные из запроса
def req_typeId = req.getNodeValue('//*:typeId')
def req_period_start = req.getNodeValue('//*:datePeriod/*:start')
def req_period_end = req.getNodeValue('//*:datePeriod/*:end')
def req_timeIn_start = req.getNodeValue('//*:timeIntervals/*:start')
def req_timeIn_end = req.getNodeValue('//*:timeIntervals/*:end')
def req_age_group = req.getNodeValue('//*:ageGroups/*:ageGroupId')
def req_comment = req.getNodeValue('//*:comment') 

// получаю данные из ответа
def result = resp.getNodeValue('//*:sarScheduleRule/@id')
def resp_typeId = resp.getNodeValue('//*:typeId')
def resp_period_start = resp.getNodeValue('//*:datePeriod/*:start')
def resp_period_end = resp.getNodeValue('//*:datePeriod/*:end')
def resp_timeIn_start = resp.getNodeValue('//*:timeIntervals/*:start')
def resp_timeIn_end = resp.getNodeValue('//*:timeIntervals/*:end')
def resp_age_group = resp.getNodeValue('//*:ageGroups/*:ageGroupId')
def resp_comment = resp.getNodeValue('//*:comment') 

// правило создано
assert result != null

// проверка typeId
assert req_typeId == resp_typeId

// проверка datePeriod
assert req_period_start == resp_period_start 
assert req_period_end == resp_period_end

// проверка timeIntervals
assert req_timeIn_start == resp_timeIn_start 
assert req_timeIn_end == resp_timeIn_end 

// проверка ageGroups
assert req_age_group == resp_age_group

// проверка comment
assert req_comment  == resp_comment

log.info(result)
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="90409546-6906-4051-8f5c-6fb515ff3855" name="treatmentId"><con:configuration><token>treatmentId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E378" id="95999369-dffb-4683-aa51-857fbb944f40"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E378" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:sarScheduleId>${#TestCase#res_scheduleIsId}</typ:sarScheduleId>\r
         <typ:info>\r
            <typ:typeId>${#TestCase#typeWorkTimeDId}</typ:typeId>\r
             <typ:comment>Тест_Н</typ:comment>

            <typ:datePeriod>\r
               <v1:start>${#TestCase#schedulePeriodStart}</v1:start>\r
               <v1:end>${#TestCase#schedulePeriodEnd}</v1:end>\r
            </typ:datePeriod>\r
            <typ:dateTemplate xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:type="v1:SpecialDayDatesTemplate" >
			   <v1:day>${#TestCase#schedulePeriodStart}</v1:day>
			</typ:dateTemplate>
            <!--Optional:-->
           
            <typ:timeIntervals>\r
               <!--1 or more repetitions:-->\r
               <typ:timeInterval>\r
                  <v1:start>08:01:00</v1:start>\r
                  <v1:end>08:02:00</v1:end>\r
               </typ:timeInterval>\r
            </typ:timeIntervals>\r
            <typ:ageGroups>
               <!--1 or more repetitions:-->
               <v1:ageGroupId>${#TestCase#ageGroupId}</v1:ageGroupId>
            </typ:ageGroups>
         </typ:info>\r
          <v1:options>
            <!--Zero or more repetitions:-->
            <v1:entry key="ignoreWarnings">true</v1:entry>
         </v1:options>
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E184" id="8a6d327b-31b0-4431-9626-324e91538209"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E184" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#noneExistedAgId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestSuite#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E184"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E184'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E185" id="edb37c4a-a20e-4278-910c-c9a2320dd658"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E185" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#archivedAgId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestSuite#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E185"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E185'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E351" id="cd8f886c-bafc-4aa4-bd67-f30ebaf8f5be"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E351" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#noneExistedSarRuleTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E351"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E351'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E365" id="b5baca75-069d-426a-8507-699f3e6903fa"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E365" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodEnd1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodStart1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E365"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E365'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E363" id="dd339f0a-4bfe-4375-97cd-3cd84b26effd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E363" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#yesterday}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E363"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E363'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E367" id="bc384f97-0b58-4343-8618-199fd5f99e4e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E367" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleTRTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodStart2}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E367"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E367'
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E386" id="098a3c82-9be1-4e5e-941e-452e70d86814"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E386" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleRejectionTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="Simple NotContains" id="2a6ca456-2cf6-452a-973d-0479c566e8d5" name="Not Contains_ageGroupId"><con:configuration><token>ageGroupId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="800eb124-916d-4076-80ec-21d25149a0a3" name="Contains"><con:configuration><token>E386</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule_E373" id="78b4ca00-c343-4084-b931-371fa3f5acee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule_E373" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestSuite#sarSchruleWTTypeId}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestSuite#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestSuite#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestSuite#agId}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestSuite#tId3}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestSuite#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="Simple Contains" id="7064eeaf-b84f-4f7c-9a26-036de293d86c" name="Contains E373"><con:configuration><token>E373</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Выбор дат2" id="99014063-b89b-4e5e-a2b2-38671887a832" disabled="true"><con:settings/><con:config><script>import java.time.*;
import java.time.format.*;
import java.time.temporal.*;
import groovy.sql.Sql

if (context.dbConnect != null) {      
	sql = context.dbConnect;
	
def medicalFacilityId = testRunner.testCase.getPropertyValue("medicalFacilityId")

maxEndResource = sql.firstRow("select max(END_DATE) as dt from schedule where medical_facility_id = "+medicalFacilityId);

	if (maxEndResource != null &amp;&amp; maxEndResource.dt != null) {
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.A");
		maxDayDate = LocalDate.parse(maxEndResource.dt.stringValue(), formatter);	

		if (maxDayDate.plusDays(1) &lt;  LocalDate.now() ) {
			maxDayDate = LocalDate.now()
			log.info("11")
			lastDayDate = maxDayDate.with(TemporalAdjusters.lastDayOfMonth());
			testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
			testRunner.testCase.setPropertyValue("schedulePeriodEnd12", lastDayDate.plusDays(400).oString());
	          testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.toString());
		     log.info("Даты расписания:" + maxDayDate.toString()+ "-" + lastDayDate.toString());
			} else {
			    lastDayDate = maxDayDate.plusDays(1).with(TemporalAdjusters.lastDayOfMonth());
		         testRunner.testCase.setPropertyValue("schedulePeriodEnd", lastDayDate.toString());
              	    testRunner.testCase.setPropertyValue("schedulePeriodStart", maxDayDate.plusDays(1).toString());
              	    testRunner.testCase.setPropertyValue("schedulePeriodEnd12", lastDayDate.plusDays(400).toString()); 
		         
                   testRunner.testCase.setPropertyValue("afterSchedulePeriodEnd",  lastDayDate.plusDays(1).toString())
                    testRunner.testCase.setPropertyValue("schedulePeriodStart2", maxDayDate.plusDays(3).toString());
		         log.info("Даты расписания:" + maxDayDate.plusDays(1).toString()+ "-" + lastDayDate.toString());
				}		
	} else {
		testRunner.testCase.setPropertyValue("schedulePeriodStart", LocalDate.now().toString());
		testRunner.testCase.setPropertyValue("schedulePeriodEnd",  LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());
          testRunner.testCase.setPropertyValue("afterSchedulePeriodEnd", LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).plusDays(1).toString())
          //testRunner.testCase.setPropertyValue("beforeSchedulePeriodStart",  LocalDate.now().toString())
		log.info("Даты расписания:" + LocalDate.now().toString()+ "-" + LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).toString());
	}

} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch_E416" id="2c5451e4-335c-4c2c-a86c-efbbc051b295"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch_E416" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createScheduleForBranchRequest>
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>
         <v1:schedulePeriod>
            <v1:start>${#TestCase#schedulePeriodNextDay2}</v1:start>
            <v1:end>${#TestCase#schedulePeriodEnd2}</v1:end>
         </v1:schedulePeriod>
      </typ:createScheduleForBranchRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="GroovyScriptAssertion" id="38b99e98-74da-4c03-b828-ce27e7be7404" name="E416"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E416'

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Получаю scheduleVersion" id="527c476d-5ca1-435c-909a-a3ea7a9a30c9" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
if (context.dbConnect != null) {    
	sql = context.dbConnect;
     
     def scheduleId= testRunner.testCase.getPropertyValue("scheduleId")
     log.info ("ID Расписания: " + scheduleId)
     
     //Получить версию расписания
     String sql_query_sC ="select  * from SCHEDULE WHERE ID ="+ scheduleId
     def schedule = sql.rows(sql_query_sC)
     String sheduleVersion =schedule[0].VERSION
     testRunner.testCase.setPropertyValue("sheduleVersion",sheduleVersion)
      log.info ("ID sheduleVersion: " + sheduleVersion)
} else {
	log.error("Соединение с бд не установлено!");
}	</script></con:config></con:testStep><con:testStep type="groovy" name="Получить версию расписания" id="111495e0-bb44-44d1-8dbd-bae58db52433"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)== 0){
		testRunner.fail("Запись в таблице SCHEDULE не найдена")
}
else {
	log.info("Запись в таблице SCHEDULE найдена")
	testRunner.testCase.setPropertyValue("scheduleVersion1", schedule[0].VERSION.toString());
}</script></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="fefe8f55-ef37-4782-a008-2b3e95b0c1bd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId1}</v1:scheduleId>\r
         <v1:entityVersion>${#TestCase#scheduleVersion1}</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId" id="6d2d5097-4180-41c1-8471-2694460321fa"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteScheduleForBranch</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>deleteSchedule1OperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция" id="cd781e77-8ce9-4ec9-9af5-15b684afb299"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
def operationId1= testRunner.testCase.getPropertyValue("deleteSchedule1OperationId")
log.info ("ID операции: " + operationId1)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId1
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка удаления расписания МУ" id="3512fc7c-48b4-42cd-bf91-72c30ab3270e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)> 0){
		testRunner.fail("Запись в таблице SCHEDULE не удалена."+schedule)
}
else {
	log.info("Запись в таблице SCHEDULE удалена.")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление ресурсов и род сущностей" id="33117558-d113-4cc3-88e1-87bf86ffde9f"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

 moId = testRunner.testCase.getPropertyValue("moId")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteResource=("delete from "+tableRes+" where MEDICAL_ORGANIZATION_ID="+moId)
log.info(deleteResource)
sql.execute(deleteResource)
equipmentList="0"
countResources= testRunner.testCase.getPropertyValue("countResources").toInteger()

log.info("countResources="+countResources)

tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

for(int i=1; i&lt;=countResources; i++){
	log.info("countResources="+countResources)
	log.info("i="+ i)
	eId= testRunner.testCase.getPropertyValue("eId"+ i)
	log.info("eId="+eId)
	//created=testRunner.testCase.getPropertyValue("eIdCreatedByTest" + i).toBoolean()
	//log.info("created="+created)
	//if(created==true){
		deleteEquipmentTreatments=("delete from "+tableET+" where EQUIPMENT_ID=" + eId)
		log.info(deleteEquipmentTreatments)
		sql.execute(deleteEquipmentTreatments)
	//}
}

deleteCreatedByTestInTestCaseWithCounter("tableE","eId",countResources)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление МО/МУ/Локаций" id="16490313-addc-47a7-bcb9-679b07c5413c"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")


tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		log.info("Щас удалю проперти "+propertyName+i)
		testRunner.testCase.removeProperty(propertyName+i)
		log.info("Удалил. Щас удалю проперти "+propertyName+"CreatedByTest"+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
		log.info("Для №  "+i+" всё")
	}

}


def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()

def clearMoMfLocationByMoIDWithCount(String moPropertyName, int counter){
	tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
	tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
	tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
	tableMFWH = testRunner.testCase.testSuite.project.getPropertyValue("tableMFWH")
	tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
	moId=testRunner.testCase.getPropertyValue("moId")
	 id=moId.toLong()
	for (int i=1; i&lt;=counter; i++){
		deleteLoc=("delete from "+tableLoc+" where ID="+id)
		log.info(deleteLoc)
		sql.execute(deleteLoc)
		deleteMFWH=("delete from "+tableMFWH+" where MEDICAL_FACILITY_ID="+id)
		log.info(deleteMFWH)
		sql.execute(deleteMFWH)
		deleteMF=("delete from "+tableMF+" where ID="+id)
		log.info(deleteMF)
		sql.execute(deleteMF)
		deleteAO=("delete from "+tableAO+" where ID="+id)
		log.info(deleteAO)
		sql.execute(deleteAO)
		id=id+1
	}
	deleteMO=("delete from "+tableMO+" where ID="+moId)
	log.info(deleteMO)
	sql.execute(deleteMO)
	for (int i=1; i&lt;=counter; i++){
		testRunner.testCase.removeProperty("mfId"+i)
	}
}

clearMoMfLocationByMoIDWithCount("moId", counterMF)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление вспомогательных сущностей" id="c7eeec69-2889-4de4-a4f3-3b67aa60829b"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteCreatedByTestInTestCaseWithCounter("tableSpec", "specId")
deleteCreatedByTestInTestCaseWithCounter("tableEP", "epId")
deleteCreatedByTestInTestCaseWithCounter("tableDepNom", "dnId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleWTTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRejectionTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleAGTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleTRTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRRTypeId")
//deleteCreatedByTestInTestCaseWithCounter("tableResTyp", "resourceTypeSAR")
</script></con:config></con:testStep><con:testStep type="groovy" name="clearTreatmentsWithMapping" id="a838d077-90a9-4fcd-a8fa-42672c39b195"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def clearTreatmentsWithMapping(int count, int firsIndex=1 ){
	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRouteTreatmentMapping=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentId = testRunner.testCase.getPropertyValue("tId"+i)
		tCreatedByTest=testRunner.testCase.getPropertyValue("tCreatedByTest"+i)
		treatmentCode = testRunner.testCase.getPropertyValue("tCode"+i)
		tMappingCode = testRunner.testCase.getPropertyValue("tMappingCode"+i) 
		tMappingCodeCreatedByTest=testRunner.testCase.getPropertyValue("tMappingCodeCreatedByTest"+i)
		if(tMappingCodeCreatedByTest=='1'){
			log.info("Для записи №"+i+" маппинг был создан автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableRouteTreatmentMapping+" WHERE TREATMENT_CODE='"+treatmentCode+"'")
		}
		if(tCreatedByTest=='1'){
			log.info("Для записи №"+i+" ММ №"+treatmentId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableT+"  WHERE ID='"+treatmentId+"'")
		}
		log.info("Очищаю проперти маппинга и ММ для записи №"+i)
		testRunner.testCase.removeProperty("tMappingCode"+i) 
		testRunner.testCase.removeProperty("tMappingCodeCreatedByTest"+i)
		testRunner.testCase.removeProperty("tCode"+i)
		testRunner.testCase.removeProperty("tCreatedByTest"+i)
		testRunner.testCase.removeProperty("tId"+i)
	}
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentCategoryId = testRunner.testCase.getPropertyValue("tcId"+i)
		tcCreatedByTest=testRunner.testCase.getPropertyValue("tcCreatedByTest"+i)
		if(tcCreatedByTest=='1'){
			("Для записи №"+i+" Категория ММ №"+treatmentCategoryId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableTC+"  WHERE ID='"+treatmentCategoryId+"'")
		}
		log.info("Очищаю проперти Категории ММ для записи №"+i)
		testRunner.testCase.removeProperty("tcId"+i)
		testRunner.testCase.removeProperty("tcCreatedByTest"+i)
		testRunner.testCase.removeProperty("tcCode"+i)
	}
}

clearTreatmentsWithMapping(countTreatment)
</script></con:config></con:testStep><con:properties><con:property><con:name>afterSchedulePeriodEnd</con:name><con:value>2021-02-01</con:value></con:property><con:property><con:name>agId1</con:name><con:value>127631257</con:value></con:property><con:property><con:name>agIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>archived</con:name><con:value>false</con:value></con:property><con:property><con:name>archivedAgId1</con:name><con:value>127631289</con:value></con:property><con:property><con:name>archivedAgIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arScheduleId1</con:name><con:value>4750441</con:value></con:property><con:property><con:name>beforeSchedulePeriodStart</con:name><con:value>2018-08-31</con:value></con:property><con:property><con:name>capacity</con:name><con:value>1</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countMonthsInSchedule</con:name><con:value>1</con:value></con:property><con:property><con:name>countResources</con:name><con:value>2</con:value></con:property><con:property><con:name>countSchedule</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatment</con:name><con:value>2</con:value></con:property><con:property><con:name>deleteSchedule1OperationId</con:name><con:value>4341934</con:value></con:property><con:property><con:name>depId</con:name><con:value>123456</con:value></con:property><con:property><con:name>depTitle</con:name><con:value>Описание отделения автотет рир2</con:value></con:property><con:property><con:name>em</con:name><con:value>Оборудование для СДР автотест рир2</con:value></con:property><con:property><con:name>endTime</con:name><con:value>20:00:00</con:value></con:property><con:property><con:name>endTimeTR</con:name><con:value>10:00:00</con:value></con:property><con:property><con:name>epId</con:name><con:value>146017593</con:value></con:property><con:property><con:name>epIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentId</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentTypeId</con:name><con:value>1236</con:value></con:property><con:property><con:name>moId</con:name><con:value>-10</con:value></con:property><con:property><con:name>nonexistentAgId1</con:name><con:value>127631291</con:value></con:property><con:property><con:name>nonexistentSarRuleTypeId1</con:name><con:value>9</con:value></con:property><con:property><con:name>personalizedService</con:name><con:value>true</con:value></con:property><con:property><con:name>resTypeForSarId</con:name><con:value>156645371</con:value></con:property><con:property><con:name>resTypeForSarIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>res_scheduleIsId</con:name><con:value>1207400</con:value></con:property><con:property><con:name>sarScheduleId1</con:name><con:value>4852857</con:value></con:property><con:property><con:name>scheduleId</con:name><con:value>13925480</con:value></con:property><con:property><con:name>scheduleId1</con:name><con:value>2661490</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd12</con:name><con:value>2022-03-07</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-10-27</con:value></con:property><con:property><con:name>scheduleVersion1</con:name><con:value>0</con:value></con:property><con:property><con:name>scheduleVersion2</con:name><con:value>0</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>0</con:value></con:property><con:property><con:name>startTime</con:name><con:value>08:00:00</con:value></con:property><con:property><con:name>startTimeTR</con:name><con:value>09:00:00</con:value></con:property><con:property><con:name>treatmentId</con:name><con:value>135468844</con:value></con:property><con:property><con:name>treatmentId2</con:name><con:value>135468854</con:value></con:property><con:property><con:name>sarId1</con:name><con:value>30101090035</con:value></con:property><con:property><con:name>sarId2</con:name><con:value>30101090036</con:value></con:property><con:property><con:name>schedulePeriodNextDay</con:name><con:value>2021-10-28</con:value></con:property><con:property><con:name>schedulePeriodNextDay2</con:name><con:value>2021-11-27</con:value></con:property><con:property><con:name>schedulePeriodStart1</con:name><con:value>2021-10-27</con:value></con:property><con:property><con:name>schedulePeriodEnd1</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodStart2</con:name><con:value>2021-11-01</con:value></con:property><con:property><con:name>schedulePeriodEnd2</con:name><con:value>2021-11-30</con:value></con:property><con:property><con:name>schedulePeriodStart3</con:name><con:value>2021-12-01</con:value></con:property><con:property><con:name>schedulePeriodEnd3</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>schedulePeriodStart4</con:name><con:value>2022-01-01</con:value></con:property><con:property><con:name>schedulePeriodEnd4</con:name><con:value>2022-01-31</con:value></con:property><con:property><con:name>schedulePeriodEndPlusYear</con:name><con:value>2022-12-31</con:value></con:property><con:property><con:name>yesterday</con:name><con:value>2021-10-26</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="3f081acd-4916-4011-8844-83ad0aa86724" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="createSarScheduleRule E328 несколько одинаковых sarScheduleId" searchProperties="true"><con:settings><con:setting id="abfe296c-55f7-41c7-b648-8089df85124cfileName">СДР.Основные-АС</con:setting></con:settings><con:testStep type="groovy" name="getTreatmentsWithMapping" id="3339eabf-0f57-43e6-9b74-d1784d06a6b0"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithMapping=sql.rows(getTreatmentsWithMapping)
	countTreatmentsWithMapping=treatmentsWithMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithMapping
	lastId=0
	listOfTreatmensWithMapping="0"
	if(countTreatmentsWithMapping>0){
		if(countTreatmentsWithMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatments = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 and t.id not in ("+listOfTreatmensWithMapping+") ORDER BY t.id DESC"
		//log.info(getNonarchivedTreatments)
		nonarchivedTreatments=sql.rows(getNonarchivedTreatments)
		countNonarchivedTreatments=nonarchivedTreatments.size()
		log.info("countNonarchivedTreatments= "+countNonarchivedTreatments)
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
			if(countNonarchivedTreatments>0){
					treatmentId = nonarchivedTreatments[index].TREATMENT_ID.toString()
					treatmentCode = nonarchivedTreatments[index].TREATMENT_CODE.toString()
					treatmentCategoryId = nonarchivedTreatments[index].TREATMENT_CATEGORY_ID.toString()
					treatmentCategoryCode = nonarchivedTreatments[index].TREATMENT_CATEGORY_CODE.toString()
					tCreatedByTest="0"
					tcCreatedByTest="0"
					countNonarchivedTreatments=countNonarchivedTreatments-1
					log.info("Для записи №"+i+" есть неархивная ММ без маппинга, ее id = "+treatmentId)
					index=index+1
			}
			else{
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
				}
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание или подбор вспомогательных сущностей" id="f081107a-420f-4d73-ba82-c043a5c3ebe9"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()
def moId = testRunner.testCase.getPropertyValue("moId")


def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	String query = "SELECT * FROM "+table+ " "+condition
	//log.info("insert into  "+table+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+table+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+table+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+table+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "1")
		}
	}
}

def getDoesntExisted (String tableName,String propertyName, int counter=1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		String query = "SELECT max(id)+"+i+" as ID FROM "+table
		def result =sql.rows(query)
		testRunner.testCase.setPropertyValue(propertyName+i, result[0].ID.toString())
		log.info("ID несуществубщей записи в таблице  "+table+ " = "+result[0].ID.toString())
	}
}

def checkExistenceResourceType (String resourceType ){
	String CreatedByTest="0"
	String propertyName1
	String propertyName2
	String result1
	String result2
	String tableName1="RESOURCE_TYPE"
	String tableName2
		if(resourceType=="SPECIAL_AVAILABLE_RESOURCE") { 
			//log.info("СДР")
			propertyName1="resTypeForSarId"
			propertyName2="epId"
			tableName2="EQUIPMENT_PROFILE"
			String query = "SELECT rt.ID as RESOURCE_TYPE_ID, ep.id as EQUIPMENT_PROFILE_ID FROM RESOURCE_TYPE rt JOIN EQUIPMENT_PROFILE ep ON ep.RESOURCE_TYPE_ID =rt.ID WHERE rt.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND rt.ARCHIVED =0 AND ep.ARCHIVED =0"
			//log.info(query)
			def row = sql(query)
			//log.info(row)
			def result =sql.rows(query)
			//log.info(result)
			if (row == 0){
					log.info("В таблицах EQUIPMENT_PROFILE  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -3, 'Тип CДР для нагрузочного тестирования','SPECIAL_AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  EQUIPMENT_PROFILE  (ID, ARCHIVED,RESOURCE_TYPE_ID) values( -3, 0, -3)")
					result1="-3"
					result2="-3"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].EQUIPMENT_PROFILE_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и EQUIPMENT_PROFILE имеют подходящие записи.")
				}
		} else if(resourceType=="AVAILABLE_RESOURCE") { 
		   	log.info("ДР")
		   	tableName2="POSITION_NOM"
		   	propertyName1="resTypeForArId"
			propertyName2="pnId"
			String query1 = "SELECT rt.ID as RESOURCE_TYPE_ID, pn.id as POSITION_NOM_ID  FROM RESOURCE_TYPE rt JOIN POSITION_NOM pn ON pn.RESOURCE_TYPE_ID =rt.id WHERE rt.ARCHIVED =0 AND rt.RESOURCE_KIND ='AVAILABLE_RESOURCE'"
			//log.info(query)
			def row1 = sql(query1)
			//log.info(row)
			def result =sql.rows(query1)
			//log.info(result)
			if (row1 == 0){
					log.info("В таблицах POSITION_NOM  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -4, 'Тип ДР для нагрузочного тестирования','AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  POSITION_NOM (ID,TITLE,RESOURCE_TYPE_ID) values( -2,'Должность для нагрузочного тестирования', -4)")
					result1="-4"
					result2="-4"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].POSITION_NOM_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и POSITION_NOM имеют подходящие записи.")
				}
		} else { 
		  testRunner.fail("Передан некорректный тип ресурса")
		}

	testRunner.testCase.setPropertyValue(propertyName1, result1)
	testRunner.testCase.setPropertyValue(propertyName2, result2)
	testRunner.testCase.setPropertyValue(propertyName1+"CreatedByTest", CreatedByTest)
	testRunner.testCase.setPropertyValue(propertyName2+"CreatedByTest", CreatedByTest)
	log.info("Записан  параметр"+tableName1+ ".ID= "+result1)
	log.info("Записан  параметр "+tableName2+ ".ID= "+result2)


	}
	
checkExistenceResourceType("SPECIAL_AVAILABLE_RESOURCE")

//checkExistenceResourceType("AVAILABLE_RESOURCE")

//шаблончик вызова метода
//checkExistence("", "", "", "","")//"where archived = 0" )

//Подобрать ММ с маппингом


findEntitiesInDBwithConditionOrCreate("tableSpec", "ID,ARCHIVED,TITLE", "-2,0,'Специализация для нагрузочного тестирования'","specId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableEP", "ID,ARCHIVED", "-2,0", "epId",1,"where archived = 0" )

//findEntitiesInDBwithConditionOrCreate("tableRPCM", "ID,NSI_POSITION_CODE_CODE,SUPP_POSITION_CODE_CODE", "-2,'2','2'", "rpcmId",1)

//findEntitiesInDBwithConditionOrCreate("tablePosNom","ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")

findEntitiesInDBwithConditionOrCreate("tableDepNom", "ID,TITLE,\"START\" ", "-2, 'Департамент для нагрузочного тестирования',  TIMESTAMP '2015-11-01 00:00:00.000000' ", "dnId",1)

//findEntitiesInDBwithConditionOrCreate("tablePCalendar", "ID,\"DATE\",PARTICULARITY,ARCHIVED", "-2,TIMESTAMP '2018-01-01 00:00:00.000000', 'HOLIDAY', 0", "prodCalId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "(select min(id)-1),'CODE','Возрастная группа для нагрузочного тестирования',0,0", "agId",1,"where archived = 0 ")

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени ДР для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "arSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило ДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','REJECTION',1", "arSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило ДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','TREATMENT_REDEFINITION',30", "arSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило ДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','AGE_GROUP_RESTRICTION',32", "arSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени CДР для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "sarSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило CДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','REJECTION',1", "sarSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило CДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','AGE_GROUP_RESTRICTION',8", "sarSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило CДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','TREATMENT_REDEFINITION',7", "sarSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-6, 0, 'Правило CДР типа ROUTE_REDEFINITIONCTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','ROUTE_REDEFINITION',9", "sarSchruleRRTypeId",1,"where archived = 0 and KIND='ROUTE_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "-5,'CODE','Архивная возрастная группа для автотестирования',1,0", "archivedAgId",1,"where archived = 1 ")

getDoesntExisted("tableAG", "nonexistentAgId")

getDoesntExisted("tableSarRuleType", "nonexistentSarRuleTypeId")

getDoesntExisted("tableE", "eId")

//getDoesntExisted("JOB_EXECUTION", "JeId")</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/нескольких МУ/Локаций" id="a41ab9be-eb13-4b21-a932-6b0ac403b9f9"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.getPropertyValue("moId")
def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()
def specId = testRunner.testCase.getPropertyValue("specId1")

//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =1000, int icount=15) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i <= icount; i++) {
	    if (row != 1) {
		    	if (i==icount){
		    		testRunner.fail("Запись в таблице "+tableName+" с id = "+propertyName+" не найдена.")
		    		break;
		    	}
		      log.info("Запись в таблице "+tableName+" с id = "+propertyName+" пока не найдена. Подождем...")
		      sleep(sleepTime)
		      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+tableName+" с id = "+propertyName+" создана.")
	        break;
	    }
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String id ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+id
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}

def isExistedWithCondition(String tableName, String cond ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE "+cond
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}
//функция отправляет указанное сообщение в укаанный топик
def sendMessageToKafka(String topicName, String s){
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
		log.info( "messageSender: "+topic+"; "+message )
		def key =  UUID.randomUUID().toString()
		def Date date = new Date(); 
		def  long  timestamp= date.getTime()
		def int partition =0
		String compoundMessage = "$message"
		producer.send(
			new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
			{ RecordMetadata metadata, Exception e ->
			log.info( "The offset of the record we just sent is: ${metadata.offset()}")
			} as Callback
			)
			}
	
	def mfMsg =s
	String messageCreateMf =mfMsg.toString()
	def topic= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	String topic1= topic.toString()
	//log.info(topic1+" "+messageCreateMf)
	messageSender(topic1, messageCreateMf)
	
	producer.close() 
}


def existedMO=isExisted("MEDICAL_ORGANIZATION ",moId) 

if (!isExisted("MEDICAL_ORGANIZATION ",moId) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMO.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МО в сервисе Запись.3")
			sendMessageToKafka("topicMO.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МО в сервисе Запись.3')
		}
		checkCreation("MEDICAL_ORGANIZATION ",moId)
}
else {
	log.info("Медицинская организация с id = "+moId+" уже создана")
		testRunner.testCase.setPropertyValue("moId",moId)
}


//Проверить, создана ли запись для головного МУ, если нет - досоздать
if (!isExisted("MEDICAL_FACILITY",moId) ){
	//log.info("Отправляю сообщение")
	sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	if (createEntityInAppointment3 == true){
		log.info("Требуется досоздать МУ в сервисе Запись.3")
		sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	}
	else {
		log.info('Не требуется досоздать МУ в сервисе Запись.3')
	}
	checkCreation("MEDICAL_FACILITY",moId)

}
else {
	log.info("Медицинское учреждение с id = "+moId+" уже создано")
}


// Досоздать необходимое количество МУ, если требуется

int mfId = moId.toInteger()
for (int i = 1; i <counterMF; i++){
	mfId = mfId +1
	if (!isExisted("MEDICAL_FACILITY",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МУ в сервисе Запись.3")
			sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МУ в сервисе Запись.3')
		}
		checkCreation("MEDICAL_FACILITY",mfId.toString())
	
	}
	else {
		log.info("Медицинское учреждение с id = "+mfId+" уже создано")
	}
	testRunner.testCase.setPropertyValue("mfId"+i, mfId.toString())
	
}

mfId = moId.toInteger()
for (int i = 1; i <=counterMF; i++){
	if (!isExisted("LOCATION",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicLocation.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")
		if (createEntityInAppointment3 == true){
				log.info("Требуется досоздать Локацию в сервисе Запись.3")
				sendMessageToKafka("topicLocation.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+moId+"""</ns5:medicalFacilityId></ns4:location>""")
		}
		else {
			log.info('Не требуется досоздать Локацию в сервисе Запись.3')
		}
		checkCreation("LOCATION",mfId.toString())
	}
	else {
		log.info("Локация с id = "+mfId+" уже создана")
	}
	mfId = mfId+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании оборудований" id="278ca11d-09ca-4315-afde-213443117a2f"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("eId1").toInteger()
def moId=testRunner.testCase.getPropertyValue("moId")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("mfId1")
def archived=testRunner.testCase.getPropertyValue("archived")
def equipmentModel=testRunner.testCase.getPropertyValue("em")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId")
def equipmentProfileId=testRunner.testCase.getPropertyValue("epId1")

def depId=testRunner.testCase.getPropertyValue("depId")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle")
def depNomId=testRunner.testCase.getPropertyValue("dnId1")
archived =testRunner.testCase.getPropertyValue("archived").toBoolean()
def personalizedService=testRunner.testCase.getPropertyValue("personalizedService")
def capacity=testRunner.testCase.getPropertyValue("capacity")
def tId1=testRunner.testCase.getPropertyValue("tId1")
def tId2=testRunner.testCase.getPropertyValue("tId2")
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableE =testRunner.testCase.testSuite.project.getPropertyValue("tableE")
log.info(tableE+id)

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i<=countResources; i++){
	sendMessageToKafka("topicLocationEquipment.rir2","""<ns4:locationEquipment archived=\""""+archived+"""\" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
	for (int q = 0; q<=10;q++) {
		def getLastItem = "SELECT * FROM "+tableE+"  WHERE ID="+id
		log.info(getLastItem)
		def lastItem= sql.rows(getLastItem)
	
		if ( lastItem.size()== 0){
				log.info("Оборудование пока не найдено. Подождем")
				sleep(5000)
		}
		else if (q==10){
			testRunner.fail("Запись в таблице "+tableE+" не найдена")
		}
		else {
			log.info("Оборудование найдено.")
			testRunner.testCase.setPropertyValue("eId"+i, id.toString())
			testRunner.testCase.setPropertyValue("eIdCreatedByTest"+i, "1")
			break;
		}
	}
	id=id+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка синхронизации ресурсов" id="3886bfc0-2b0e-4abd-9b7b-1824c88eeeaa"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i&lt;=countResources; i++){
	def id=testRunner.testCase.getPropertyValue("eId"+i)
	String querySar="select * from "+tableRes+" where RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id
	for (int j = 0; j &lt; 28; j++) {
		
		//log.info(querySar)
		rowsSar = sql.rows(querySar)
		// log.info(rowsSar)
		if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
			log.info("Идет синхронизация ресруса. Подождём...")
			sleep(6000)
		}
		else {
			log.info("Синхрнизация ресурса завершена.")
			break;
		}
	 }
	if (rowsSar[0].SYNC_STATUS=='ERROR'){
		getResSyncError=(" SELECT DISTINCT rsem.code, rsemp.\"KEY\" as entity , rsemp.VALUE FROM RESOURCE_SYNC_ERROR rse JOIN "+tableRes+" res ON res.id=rse.RESOURCE_ID  JOIN RESOURCE_SYNC_ERROR_MSG rsem ON RSE.ID=RSEM.RESOURCE_SYNC_ERROR_ID JOIN RESOURCE_SYNC_ERROR_MSG_PR rsemp ON rsemp.RESOURCE_SYNC_ERROR_MSG_ID=rsem.id WHERE res.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND res.PARENT_ID ="+id)
		errors=sql.rows(getResSyncError)
		testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+"завершена с ошибкой. Код ошибки "+errors[0].CODE+". Сущность, из-за которой произошла ошибка: "+errors[0].entity+", id="+errors[0].VALUE)
	}
	
	testRunner.testCase.setPropertyValue("sarId"+i, rowsSar[0].ID.toString())
}</script></con:config></con:testStep><con:testStep type="groovy" name="Подбор периода расписания" id="bb6939e0-89fd-466b-bcf1-def60743bde9"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def monthsNumberInSchedule = testRunner.testCase.getPropertyValue("countMonthsInSchedule").toInteger()

def schedulePeriodStart=LocalDate.now()
def schedulePeriodNextDay=schedulePeriodStart.plusDays(1)
def scheduleNewPeriodStart=schedulePeriodStart.plusMonths(monthsNumberInSchedule-1)
def schedulePeriodEnd=scheduleNewPeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def yesterday = schedulePeriodStart.minusDays(1)
def schedulePeriodNextDay2=schedulePeriodStart.plusMonths(1)
log.info("schedulePeriodNextDay "+schedulePeriodNextDay)
log.info("schedulePeriodNextDay2 "+schedulePeriodNextDay2)
log.info("Период расписания с "+schedulePeriodStart+" по "+schedulePeriodEnd)

testRunner.testCase.setPropertyValue("schedulePeriodNextDay",schedulePeriodNextDay.toString());
testRunner.testCase.setPropertyValue("schedulePeriodNextDay2",schedulePeriodNextDay2.toString());
testRunner.testCase.setPropertyValue("schedulePeriodStart1",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd1", schedulePeriodEnd.toString())
testRunner.testCase.setPropertyValue("schedulePeriodStart",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd", schedulePeriodEnd.toString())
log.info("Период расписания №1 с "+schedulePeriodStart+" по "+schedulePeriodEnd)
ospe=schedulePeriodEnd


	
for (int i=2; i &lt;5; i++ ){
	sps=ospe.plusDays(1)
	spe1=ospe.plusMonths(monthsNumberInSchedule)
	spe=spe1.with(TemporalAdjusters.lastDayOfMonth())
	testRunner.testCase.setPropertyValue("schedulePeriodStart"+i,sps.toString());
	testRunner.testCase.setPropertyValue("schedulePeriodEnd"+i, spe.toString())
	log.info("Период расписания №"+i+" с "+sps+" по "+spe)
	ospe=spe
}
def lastDayOfCurrentMounth=schedulePeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def schedulePeriodEndPlusYear=lastDayOfCurrentMounth.plusMonths(monthsNumberInSchedule+13)
testRunner.testCase.setPropertyValue("schedulePeriodEndPlusYear", schedulePeriodEndPlusYear.toString())
log.info("schedulePeriodEndPlusYear: "+schedulePeriodEndPlusYear)
testRunner.testCase.setPropertyValue("yesterday", yesterday.toString())
log.info("yesterday: "+yesterday)</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на текущий месяц" id="2d3a53da-4d60-4805-95af-a7989df402ff"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на текущий месяц" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="d1137a5d-2c27-4de0-a0b1-4d9eb7a9e961"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch на текущий месяц</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания расписаний ресурсов" id="86b33566-1a77-4ada-ba46-abe7147c1df0"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def countResources= testRunner.testCase.getPropertyValue("countResources")

def checkResourceKind(int id){
	resourseKind=""
		
}
getResources = ("SELECT * FROM \"RESOURCE\" WHERE SYNC_STATUS= 'OK' AND ARCHIVED=0 AND MEDICAL_FACILITY_ID="+mfId)
//log.info(getResources)
resources= sql.rows(getResources)
countResources= sql(getResources)
if ( countResources== 0){
		testRunner.fail("Запись в таблице RESOURCE не найдена")
}

//log.info("countResources "+countResources)

for (int i=0; i&lt;countResources; i++){
	nextI=i+1
	//log.info("i = "+i)
	getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE SCHEDULE_ID="+scheduleId+" AND RESOURCE_ID="+resources[i].ID)
	//log.info(getResourceSchedule)
	resourceSchedule=sql.rows(getResourceSchedule)
	//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
	if ( sql(getResourceSchedule)== 0){
		testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс SCHEDULE_ID="+scheduleId+" и RESOURCE_ID="+resources[i].ID+" не найдена")
	}
	else {
		//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 0
	assert resourceSchedule[0].STATUS == "NOT_DEFINED"
	}
	log.info("Расписание для ресурса "+resources[i].ID+" создано успешно и соответствует требованиям.")
	if (resources[i].RESOURCE_KIND =="SPECIAL_AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("sarScheduleId"+nextI,resourceSchedule[0].ID.toString())
	}
	else if (resources[i].RESOURCE_KIND =="AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("arScheduleId"+nextI,resourceSchedule[0].ID.toString())
	}
}

log.info("Для всех ресурсов успешно созданы расписания.")</script></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule" id="675e7d6c-e0be-49c6-891c-99bd1ca1df50"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTime}</v1:start>
                     <v1:end>${#TestCase#endTime}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestCase#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
        <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleTRTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>TR</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriodStart1}</v1:start>
                  <v1:end>${#TestCase#schedulePeriodEnd1}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>${#TestCase#startTimeTR}</v1:start>
                     <v1:end>${#TestCase#endTimeTR}</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:treatments>
                  <v1:treatmentId>${#TestCase#tId2}</v1:treatmentId>
               </typ:treatments>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E372"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E328'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="2ced3493-8a85-4176-8b86-c9cd7a686d6d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId1}</v1:scheduleId>\r
         <v1:entityVersion>0</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId" id="c09a8f0a-abb7-4d05-abe3-e8fdca6c222a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteScheduleForBranch</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>deleteSchedule1OperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция" id="6e4a985f-a677-4f12-b9df-0005e8d2610a"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
def operationId1= testRunner.testCase.getPropertyValue("deleteSchedule1OperationId")
log.info ("ID операции: " + operationId1)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId1
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка удаления расписания МУ" id="048036eb-6d80-416b-85b2-114aeaa994de"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)> 0){
		testRunner.fail("Запись в таблице SCHEDULE не удалена."+schedule)
}
else {
	log.info("Запись в таблице SCHEDULE удалена.")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление ресурсов и род сущностей" id="5bd4470e-2e21-4538-b03c-8b349c3e0bed"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

 moId = testRunner.testCase.getPropertyValue("moId")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteResource=("delete from "+tableRes+" where MEDICAL_ORGANIZATION_ID="+moId)
log.info(deleteResource)
sql.execute(deleteResource)
equipmentList="0"
countResources= testRunner.testCase.getPropertyValue("countResources").toInteger()

log.info("countResources="+countResources)

tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

for(int i=1; i&lt;=countResources; i++){
	log.info("countResources="+countResources)
	log.info("i="+ i)
	eId= testRunner.testCase.getPropertyValue("eId"+ i)
	log.info("eId="+eId)
	//created=testRunner.testCase.getPropertyValue("eIdCreatedByTest" + i).toBoolean()
	//log.info("created="+created)
	//if(created==true){
		deleteEquipmentTreatments=("delete from "+tableET+" where EQUIPMENT_ID=" + eId)
		log.info(deleteEquipmentTreatments)
		sql.execute(deleteEquipmentTreatments)
	//}
}

deleteCreatedByTestInTestCaseWithCounter("tableE","eId",countResources)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление МО/МУ/Локаций" id="2216b976-79be-49c8-9492-dde10b74800c"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")


tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		log.info("Щас удалю проперти "+propertyName+i)
		testRunner.testCase.removeProperty(propertyName+i)
		log.info("Удалил. Щас удалю проперти "+propertyName+"CreatedByTest"+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
		log.info("Для №  "+i+" всё")
	}

}


def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()

def clearMoMfLocationByMoIDWithCount(String moPropertyName, int counter){
	tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
	tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
	tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
	tableMFWH = testRunner.testCase.testSuite.project.getPropertyValue("tableMFWH")
	tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
	moId=testRunner.testCase.getPropertyValue("moId")
	 id=moId.toLong()
	for (int i=1; i&lt;=counter; i++){
		deleteLoc=("delete from "+tableLoc+" where ID="+id)
		log.info(deleteLoc)
		sql.execute(deleteLoc)
		deleteMFWH=("delete from "+tableMFWH+" where MEDICAL_FACILITY_ID="+id)
		log.info(deleteMFWH)
		sql.execute(deleteMFWH)
		deleteMF=("delete from "+tableMF+" where ID="+id)
		log.info(deleteMF)
		sql.execute(deleteMF)
		deleteAO=("delete from "+tableAO+" where ID="+id)
		log.info(deleteAO)
		sql.execute(deleteAO)
		id=id+1
	}
	deleteMO=("delete from "+tableMO+" where ID="+moId)
	log.info(deleteMO)
	sql.execute(deleteMO)
	for (int i=1; i&lt;=counter; i++){
		testRunner.testCase.removeProperty("mfId"+i)
	}
}

clearMoMfLocationByMoIDWithCount("moId", counterMF)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление вспомогательных сущностей" id="cdcfa9bd-7330-4cde-b15a-619776b7e8f4"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteCreatedByTestInTestCaseWithCounter("tableSpec", "specId")
deleteCreatedByTestInTestCaseWithCounter("tableEP", "epId")
deleteCreatedByTestInTestCaseWithCounter("tableDepNom", "dnId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleWTTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRejectionTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleAGTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleTRTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRRTypeId")
//deleteCreatedByTestInTestCaseWithCounter("tableResTyp", "resourceTypeSAR")
</script></con:config></con:testStep><con:testStep type="groovy" name="clearTreatmentsWithMapping" id="ceefee79-9478-4067-9ee1-9eee208f72e8"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def clearTreatmentsWithMapping(int count, int firsIndex=1 ){
	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRouteTreatmentMapping=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentId = testRunner.testCase.getPropertyValue("tId"+i)
		tCreatedByTest=testRunner.testCase.getPropertyValue("tCreatedByTest"+i)
		treatmentCode = testRunner.testCase.getPropertyValue("tCode"+i)
		tMappingCode = testRunner.testCase.getPropertyValue("tMappingCode"+i) 
		tMappingCodeCreatedByTest=testRunner.testCase.getPropertyValue("tMappingCodeCreatedByTest"+i)
		if(tMappingCodeCreatedByTest=='1'){
			log.info("Для записи №"+i+" маппинг был создан автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableRouteTreatmentMapping+" WHERE TREATMENT_CODE='"+treatmentCode+"'")
		}
		if(tCreatedByTest=='1'){
			log.info("Для записи №"+i+" ММ №"+treatmentId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableT+"  WHERE ID='"+treatmentId+"'")
		}
		log.info("Очищаю проперти маппинга и ММ для записи №"+i)
		testRunner.testCase.removeProperty("tMappingCode"+i) 
		testRunner.testCase.removeProperty("tMappingCodeCreatedByTest"+i)
		testRunner.testCase.removeProperty("tCode"+i)
		testRunner.testCase.removeProperty("tCreatedByTest"+i)
		testRunner.testCase.removeProperty("tId"+i)
	}
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentCategoryId = testRunner.testCase.getPropertyValue("tcId"+i)
		tcCreatedByTest=testRunner.testCase.getPropertyValue("tcCreatedByTest"+i)
		if(tcCreatedByTest=='1'){
			("Для записи №"+i+" Категория ММ №"+treatmentCategoryId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableTC+"  WHERE ID='"+treatmentCategoryId+"'")
		}
		log.info("Очищаю проперти Категории ММ для записи №"+i)
		testRunner.testCase.removeProperty("tcId"+i)
		testRunner.testCase.removeProperty("tcCreatedByTest"+i)
		testRunner.testCase.removeProperty("tcCode"+i)
	}
}

clearTreatmentsWithMapping(countTreatment)
</script></con:config></con:testStep><con:properties><con:property><con:name>afterSchedulePeriodEnd</con:name><con:value>2021-02-01</con:value></con:property><con:property><con:name>agId1</con:name><con:value>127631257</con:value></con:property><con:property><con:name>agIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>archived</con:name><con:value>false</con:value></con:property><con:property><con:name>archivedAgId1</con:name><con:value>127631289</con:value></con:property><con:property><con:name>archivedAgIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arScheduleId1</con:name><con:value>4750441</con:value></con:property><con:property><con:name>beforeSchedulePeriodStart</con:name><con:value>2018-08-31</con:value></con:property><con:property><con:name>capacity</con:name><con:value>1</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countMonthsInSchedule</con:name><con:value>1</con:value></con:property><con:property><con:name>countResources</con:name><con:value>2</con:value></con:property><con:property><con:name>countSchedule</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatment</con:name><con:value>2</con:value></con:property><con:property><con:name>deleteSchedule1OperationId</con:name><con:value>4404327</con:value></con:property><con:property><con:name>depId</con:name><con:value>123456</con:value></con:property><con:property><con:name>depTitle</con:name><con:value>Описание отделения автотет рир2</con:value></con:property><con:property><con:name>em</con:name><con:value>Оборудование для СДР автотест рир2</con:value></con:property><con:property><con:name>endTime</con:name><con:value>20:00:00</con:value></con:property><con:property><con:name>endTimeTR</con:name><con:value>10:00:00</con:value></con:property><con:property><con:name>epId</con:name><con:value>146017593</con:value></con:property><con:property><con:name>epIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentId</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentTypeId</con:name><con:value>1236</con:value></con:property><con:property><con:name>moId</con:name><con:value>-10</con:value></con:property><con:property><con:name>nonexistentAgId1</con:name><con:value>127631291</con:value></con:property><con:property><con:name>nonexistentSarRuleTypeId1</con:name><con:value>9</con:value></con:property><con:property><con:name>personalizedService</con:name><con:value>true</con:value></con:property><con:property><con:name>resTypeForSarId</con:name><con:value>156645371</con:value></con:property><con:property><con:name>resTypeForSarIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>res_scheduleIsId</con:name><con:value>1207400</con:value></con:property><con:property><con:name>sarId1</con:name><con:value>30101110500</con:value></con:property><con:property><con:name>sarId2</con:name><con:value>30101110501</con:value></con:property><con:property><con:name>sarScheduleId1</con:name><con:value>4873320</con:value></con:property><con:property><con:name>sarScheduleId2</con:name><con:value>4873321</con:value></con:property><con:property><con:name>scheduleId</con:name><con:value>13925480</con:value></con:property><con:property><con:name>scheduleId1</con:name><con:value>2681959</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd1</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd12</con:name><con:value>2022-03-07</con:value></con:property><con:property><con:name>schedulePeriodEnd2</con:name><con:value>2021-11-30</con:value></con:property><con:property><con:name>schedulePeriodEnd3</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>schedulePeriodEnd4</con:name><con:value>2022-01-31</con:value></con:property><con:property><con:name>schedulePeriodEndPlusYear</con:name><con:value>2022-12-31</con:value></con:property><con:property><con:name>schedulePeriodNextDay</con:name><con:value>2021-10-29</con:value></con:property><con:property><con:name>schedulePeriodNextDay2</con:name><con:value>2021-11-28</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-10-28</con:value></con:property><con:property><con:name>schedulePeriodStart1</con:name><con:value>2021-10-28</con:value></con:property><con:property><con:name>schedulePeriodStart2</con:name><con:value>2021-11-01</con:value></con:property><con:property><con:name>schedulePeriodStart3</con:name><con:value>2021-12-01</con:value></con:property><con:property><con:name>schedulePeriodStart4</con:name><con:value>2022-01-01</con:value></con:property><con:property><con:name>scheduleVersion1</con:name><con:value>0</con:value></con:property><con:property><con:name>scheduleVersion2</con:name><con:value>0</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>0</con:value></con:property><con:property><con:name>startTime</con:name><con:value>08:00:00</con:value></con:property><con:property><con:name>startTimeTR</con:name><con:value>09:00:00</con:value></con:property><con:property><con:name>treatmentId</con:name><con:value>135468844</con:value></con:property><con:property><con:name>treatmentId2</con:name><con:value>135468854</con:value></con:property><con:property><con:name>yesterday</con:name><con:value>2021-10-27</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="2f329556-ee3d-4faa-91cb-eacb70caba3e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="createSarScheduleRule E378 Пересечение временных интервалов_ID8304" searchProperties="true"><con:settings><con:setting id="abfe296c-55f7-41c7-b648-8089df85124cfileName">СДР.Основные-АС</con:setting></con:settings><con:testStep type="groovy" name="getTreatmentsWithMapping" id="b7d43bf6-687a-4436-b047-b6311a54f65a"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def getTreatmentsWithMapping(int requiredNumber ){

	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRTLM=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	getTreatmentsWithMapping = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableRTLM+"  rtlm ON t.CODE=rtlm.TREATMENT_CODE JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 ORDER BY t.id DESC"
	//log.info(getTreatmentsWithMapping)
	treatmentsWithMapping=sql.rows(getTreatmentsWithMapping)
	countTreatmentsWithMapping=treatmentsWithMapping.size()
	//log.info("countTreatmentsWithMapping="+countTreatmentsWithMapping)
	sub= requiredNumber-countTreatmentsWithMapping
	lastId=0
	listOfTreatmensWithMapping="0"
	if(countTreatmentsWithMapping>0){
		if(countTreatmentsWithMapping>requiredNumber){
			lastId=requiredNumber
		}
		else{
			lastId=countTreatmentsWithMapping
		}
		//log.info("lastId1= "+lastId)
		for(int i=0; i&lt;lastId; i++){
			nexti=i+1
			treatmentId = treatmentsWithMapping[i].TREATMENT_ID.toString()
			treatmentCode = treatmentsWithMapping[i].TREATMENT_CODE.toString()
			treatmentCategoryId = treatmentsWithMapping[i].TREATMENT_CATEGORY_ID.toString()
			treatmentCategoryCode = treatmentsWithMapping[i].TREATMENT_CATEGORY_CODE.toString()
			getMppingCode="SELECT * FROM "+tableRTLM+" WHERE TREATMENT_CODE='"+treatmentCode+"' order by LDP_CODE"
			//log.info(getMppingCode)
			mappingCode=sql.rows(getMppingCode)
			//log.info(mappingCode)
			mCode=mappingCode[0].LDP_CODE.toString()
			testRunner.testCase.setPropertyValue("tId"+nexti, treatmentId)
			testRunner.testCase.setPropertyValue("tCreatedByTest"+nexti, "0")
			testRunner.testCase.setPropertyValue("tCode"+nexti, treatmentCode)
			testRunner.testCase.setPropertyValue("tcId"+nexti, treatmentCategoryId)
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+nexti, "0")			
			testRunner.testCase.setPropertyValue("tcCode"+nexti, treatmentCategoryCode)
			testRunner.testCase.setPropertyValue("tMappingCode"+nexti, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+nexti, "0")
			log.info("Для записи №"+nexti+" есть ММ с маппингом, ее id = "+treatmentId)
			listOfTreatmensWithMapping=listOfTreatmensWithMapping+","+treatmentId.toString()
		}
	}
	if(sub>0){
		getNonarchivedTreatments = "SELECT DISTINCT t.id AS TREATMENT_ID, t.CODE  AS TREATMENT_CODE,tc.CODE  AS TREATMENT_CATEGORY_CODE, t.TREATMENT_CATEGORY_ID FROM "+tableT+" t JOIN "+tableTC+"  tc ON tc.id=t.TREATMENT_CATEGORY_ID WHERE t.ARCHIVED=0 AND tc.ARCHIVED =0 and t.id not in ("+listOfTreatmensWithMapping+") ORDER BY t.id DESC"
		//log.info(getNonarchivedTreatments)
		nonarchivedTreatments=sql.rows(getNonarchivedTreatments)
		countNonarchivedTreatments=nonarchivedTreatments.size()
		log.info("countNonarchivedTreatments= "+countNonarchivedTreatments)
		getNonarchivedTreatmentCategories = "SELECT DISTINCT tc.CODE  AS TREATMENT_CATEGORY_CODE, tc.ID TREATMENT_CATEGORY_ID FROM "+tableTC+" tc WHERE tc.ARCHIVED =0 ORDER BY tc.id DESC"
		//log.info(getNonarchivedTreatmentCategories)
		nonarchivedTreatmentCategories=sql.rows(getNonarchivedTreatmentCategories)
		countNonarchivedTreatmentCategories=nonarchivedTreatmentCategories.size()
		log.info("countNonarchivedTreatmentCategories= "+countNonarchivedTreatmentCategories)
		needToCreateTreatmentCategory=true
		//sub2=sub-countNonarchivedTreatments
		index=0
		newLastId=lastId+1
		for(int i=newLastId; i&lt;=requiredNumber; i++){
			if(countNonarchivedTreatments>0){
					treatmentId = nonarchivedTreatments[index].TREATMENT_ID.toString()
					treatmentCode = nonarchivedTreatments[index].TREATMENT_CODE.toString()
					treatmentCategoryId = nonarchivedTreatments[index].TREATMENT_CATEGORY_ID.toString()
					treatmentCategoryCode = nonarchivedTreatments[index].TREATMENT_CATEGORY_CODE.toString()
					tCreatedByTest="0"
					tcCreatedByTest="0"
					countNonarchivedTreatments=countNonarchivedTreatments-1
					log.info("Для записи №"+i+" есть неархивная ММ без маппинга, ее id = "+treatmentId)
					index=index+1
			}
			else{
					if(countNonarchivedTreatmentCategories>0){
						treatmentCategoryId = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_ID.toString()
						treatmentCategoryCode = nonarchivedTreatmentCategories[0].TREATMENT_CATEGORY_CODE.toString()
						tcCreatedByTest="0"
					}
					else{
						if(needToCreateTreatmentCategory==true){
							treatmentCategoryId=sql.rows("select max(id)+10 AS ID from "+tableTC)[0].ID
							treatmentCategoryCode="autotest_treatment_category_code"
							sql.execute("INSERT INTO "+tableTC+" (ID, CODE, TITLE, ARCHIVED) VALUES ("+treatmentCategoryId+", '"+treatmentCategoryCode+"', 'Категория ММ автотест', '0')")
							tcCreatedByTest="1"
							needToCreateTreatmentCategory=false
							log.info("Требуется создать неархивную Категорию ММ. Создаю Категорию ММ, ее id = "+treatmentCategoryId)
						}
					}
					treatmentId=sql.rows("select max(id)+1 AS ID from "+tableT)[0].ID
					treatmentCode="autotest_treatment_code"+i.toString()
					log.info(" Для записи №"+i+" требуется создать неархивную ММ. Создаю ММ, ее id = "+treatmentId)
					sql.execute("INSERT INTO  "+tableT+"  (ID, ARCHIVED, TITLE, DEFAULT_DURATION, TREATMENT_CATEGORY_ID, CODE) VALUES("+treatmentId+", '0', 'Мед манипуляция №"+i+" автотест ', 60, "+treatmentCategoryId+", '"+treatmentCode+"')")
					tCreatedByTest="1"
				}
			testRunner.testCase.setPropertyValue("tId"+i, treatmentId.toString())
			testRunner.testCase.setPropertyValue("tCreatedByTest"+i, tCreatedByTest)
			testRunner.testCase.setPropertyValue("tCode"+i, treatmentCode.toString())
			testRunner.testCase.setPropertyValue("tcId"+i, treatmentCategoryId.toString())
			testRunner.testCase.setPropertyValue("tcCreatedByTest"+i, tcCreatedByTest)			
			testRunner.testCase.setPropertyValue("tcCode"+i, treatmentCategoryCode.toString())
			mappingId=sql.rows("select max(id)+1 AS ID from "+tableRTLM)[0].ID
			mCode="autotest_ldp_code"+i
			log.info("Создаю маппинг для записи №"+i+",  id ММ= "+treatmentId)
			sql.execute("INSERT INTO "+tableRTLM+" (ID, TREATMENT_CODE, LDP_CODE) VALUES("+mappingId+", '"+treatmentCode+"', '"+mCode+"')")
			testRunner.testCase.setPropertyValue("tMappingCode"+i, mCode)
			testRunner.testCase.setPropertyValue("tMappingCodeCreatedByTest"+i, "1")
		}
	}
}



getTreatmentsWithMapping(countTreatment)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание или подбор вспомогательных сущностей" id="76795b41-ac9c-4790-a3cd-a03e3dcaf658"><con:settings/><con:config><script>import java.time.*
import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()
def moId = testRunner.testCase.getPropertyValue("moId")


def findEntitiesInDBwithConditionOrCreate (String tableName, String columns, String values , String propertyName, int count, String condition=""  ){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	String query = "SELECT * FROM "+table+ " "+condition
	//log.info("insert into  "+table+ " ("+columns+") values( "+values+") ")
	log.info(query)
	def result =sql.rows(query)
	def rows = result.size()
	sub=count-rows
	//log.info("sub "+sub+" count "+count+" rows"+rows)
	if (rows >0){
		int n=0
		if(sub>=0){
			n=rows
		}
		else{
			n=	count
		}
		for(int i=0; i&lt;n;i++){
			nextI=i+1
			resultId= result[i].ID
			log.info("Таблица "+table+ " имеет подходящую запись № "+nextI+" с id = "+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "0")
		}
	}
	if(sub>0){
		for( int i=rows; i&lt;count ; i++){
			nextI=i+1
			//log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись.")
			sql.execute("insert into  "+table+ " ("+columns+") values( "+values+") ")
			String query2 = "SELECT * FROM "+table+ " "+condition+"order by id"
			//log.info(query2)
			def result2 =sql.rows(query2)
			resultId= result2[i].ID
			log.info("В таблице  "+table+ " нет или недостаточно записей по условию, создаю новую запись № "+nextI+"  с id ="+resultId)
			testRunner.testCase.setPropertyValue(propertyName+nextI, resultId.toString())
			testRunner.testCase.setPropertyValue(propertyName+"CreatedByTest"+nextI, "1")
		}
	}
}

def getDoesntExisted (String tableName,String propertyName, int counter=1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		String query = "SELECT max(id)+"+i+" as ID FROM "+table
		def result =sql.rows(query)
		testRunner.testCase.setPropertyValue(propertyName+i, result[0].ID.toString())
		log.info("ID несуществубщей записи в таблице  "+table+ " = "+result[0].ID.toString())
	}
}

def checkExistenceResourceType (String resourceType ){
	String CreatedByTest="0"
	String propertyName1
	String propertyName2
	String result1
	String result2
	String tableName1="RESOURCE_TYPE"
	String tableName2
		if(resourceType=="SPECIAL_AVAILABLE_RESOURCE") { 
			//log.info("СДР")
			propertyName1="resTypeForSarId"
			propertyName2="epId"
			tableName2="EQUIPMENT_PROFILE"
			String query = "SELECT rt.ID as RESOURCE_TYPE_ID, ep.id as EQUIPMENT_PROFILE_ID FROM RESOURCE_TYPE rt JOIN EQUIPMENT_PROFILE ep ON ep.RESOURCE_TYPE_ID =rt.ID WHERE rt.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND rt.ARCHIVED =0 AND ep.ARCHIVED =0"
			//log.info(query)
			def row = sql(query)
			//log.info(row)
			def result =sql.rows(query)
			//log.info(result)
			if (row == 0){
					log.info("В таблицах EQUIPMENT_PROFILE  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -3, 'Тип CДР для нагрузочного тестирования','SPECIAL_AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  EQUIPMENT_PROFILE  (ID, ARCHIVED,RESOURCE_TYPE_ID) values( -3, 0, -3)")
					result1="-3"
					result2="-3"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].EQUIPMENT_PROFILE_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и EQUIPMENT_PROFILE имеют подходящие записи.")
				}
		} else if(resourceType=="AVAILABLE_RESOURCE") { 
		   	log.info("ДР")
		   	tableName2="POSITION_NOM"
		   	propertyName1="resTypeForArId"
			propertyName2="pnId"
			String query1 = "SELECT rt.ID as RESOURCE_TYPE_ID, pn.id as POSITION_NOM_ID  FROM RESOURCE_TYPE rt JOIN POSITION_NOM pn ON pn.RESOURCE_TYPE_ID =rt.id WHERE rt.ARCHIVED =0 AND rt.RESOURCE_KIND ='AVAILABLE_RESOURCE'"
			//log.info(query)
			def row1 = sql(query1)
			//log.info(row)
			def result =sql.rows(query1)
			//log.info(result)
			if (row1 == 0){
					log.info("В таблицах POSITION_NOM  и RESOURCE_TYPE  нет подходящих записей для корректного подбора типа ресурса, создаю новую запись.")
					sql.execute("insert into  RESOURCE_TYPE (ID,TITLE,RESOURCE_KIND,ARCHIVED) values( -4, 'Тип ДР для нагрузочного тестирования','AVAILABLE_RESOURCE',0)")
					sql.execute("insert into  POSITION_NOM (ID,TITLE,RESOURCE_TYPE_ID) values( -2,'Должность для нагрузочного тестирования', -4)")
					result1="-4"
					result2="-4"
					CreatedByTest="1"
				}
			else {
				 result1= result[0].RESOURCE_TYPE_ID.toString()
				 result2= result[0].POSITION_NOM_ID.toString()
				log.info("Таблицы RESOURCE_TYPE и POSITION_NOM имеют подходящие записи.")
				}
		} else { 
		  testRunner.fail("Передан некорректный тип ресурса")
		}

	testRunner.testCase.setPropertyValue(propertyName1, result1)
	testRunner.testCase.setPropertyValue(propertyName2, result2)
	testRunner.testCase.setPropertyValue(propertyName1+"CreatedByTest", CreatedByTest)
	testRunner.testCase.setPropertyValue(propertyName2+"CreatedByTest", CreatedByTest)
	log.info("Записан  параметр"+tableName1+ ".ID= "+result1)
	log.info("Записан  параметр "+tableName2+ ".ID= "+result2)


	}
	
checkExistenceResourceType("SPECIAL_AVAILABLE_RESOURCE")

//checkExistenceResourceType("AVAILABLE_RESOURCE")

//шаблончик вызова метода
//checkExistence("", "", "", "","")//"where archived = 0" )

//Подобрать ММ с маппингом


findEntitiesInDBwithConditionOrCreate("tableSpec", "ID,ARCHIVED,TITLE", "-2,0,'Специализация для нагрузочного тестирования'","specId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableEP", "ID,ARCHIVED", "-2,0", "epId",1,"where archived = 0" )

//findEntitiesInDBwithConditionOrCreate("tableRPCM", "ID,NSI_POSITION_CODE_CODE,SUPP_POSITION_CODE_CODE", "-2,'2','2'", "rpcmId",1)

//findEntitiesInDBwithConditionOrCreate("tablePosNom","ID, TITLE, RESOURCE_TYPE_ID", "--"+i+"0 ,'Должность автотест РиР2'","existedPosNomId"+i, "where id not in ("+listPosNomIds+")")

findEntitiesInDBwithConditionOrCreate("tableDepNom", "ID,TITLE,\"START\" ", "-2, 'Департамент для нагрузочного тестирования',  TIMESTAMP '2015-11-01 00:00:00.000000' ", "dnId",1)

//findEntitiesInDBwithConditionOrCreate("tablePCalendar", "ID,\"DATE\",PARTICULARITY,ARCHIVED", "-2,TIMESTAMP '2018-01-01 00:00:00.000000', 'HOLIDAY', 0", "prodCalId",1,"where archived = 0" )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "(select min(id)-1),'CODE','Возрастная группа для нагрузочного тестирования',0,0", "agId",1,"where archived = 0 ")

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени ДР для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "arSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило ДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','REJECTION',1", "arSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило ДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','TREATMENT_REDEFINITION',30", "arSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION'" )

//findEntitiesInDBwithConditionOrCreate("tableArRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило ДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Доступный ресурс','AGE_GROUP_RESTRICTION',32", "arSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-2, 0, 'Правило рабочего времени CДР для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс пациентов всех возрастных групп на указанные в правиле Медицинские манипуляции, в указанную Локацию','WORK_TIME_DEFINITION',50", "sarSchruleWTTypeId",1,"where archived = 0 and KIND='WORK_TIME_DEFINITION'" )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-3, 0, 'Правило CДР типа REJECTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','REJECTION',1", "sarSchruleRejectionTypeId",1,"where archived = 0 and KIND='REJECTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-4, 0, 'Правило CДР типа AGE_GROUP_RESTRICTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','AGE_GROUP_RESTRICTION',8", "sarSchruleAGTypeId",1,"where archived = 0 and KIND='AGE_GROUP_RESTRICTION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-5, 0, 'Правило CДР типа TREATMENT_REDEFINITION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','TREATMENT_REDEFINITION',7", "sarSchruleTRTypeId",1,"where archived = 0 and KIND='TREATMENT_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableSarRuleType", "ID,ARCHIVED,TITLE,DESCRIPTION,KIND,PRIORITY", "-6, 0, 'Правило CДР типа ROUTE_REDEFINITIONCTION для нагрузочного тестирования','Устанавливает возможность записи на Специальный Доступный ресурс','ROUTE_REDEFINITION',9", "sarSchruleRRTypeId",1,"where archived = 0 and KIND='ROUTE_REDEFINITION' " )

findEntitiesInDBwithConditionOrCreate("tableAG", "ID,CODE,TITLE,ARCHIVED,\"FROM\"", "-5,'CODE','Архивная возрастная группа для автотестирования',1,0", "archivedAgId",1,"where archived = 1 ")

getDoesntExisted("tableAG", "nonexistentAgId")

getDoesntExisted("tableSarRuleType", "nonexistentSarRuleTypeId")

getDoesntExisted("tableE", "eId")

//getDoesntExisted("JOB_EXECUTION", "JeId")</script></con:config></con:testStep><con:testStep type="groovy" name="Создание МО/нескольких МУ/Локаций" id="d4fc5673-e525-4a75-aa19-080afbd22530"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId = testRunner.testCase.getPropertyValue("moId")
def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()
def createEntityInAppointment3 = testRunner.testCase.testSuite.getPropertyValue("createEntityInAppointment3").toBoolean()
def specId = testRunner.testCase.getPropertyValue("specId1")

//функция проверяет, была ли создана сущность, если нет - ждет и проверяет снова
def checkCreation(String tableName, String propertyName, int sleepTime =1000, int icount=15) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+propertyName
	//log.info(query)
	row = sql(query)
	//log.info(row)
	for (int i = 0; i <= icount; i++) {
	    if (row != 1) {
		    	if (i==icount){
		    		testRunner.fail("Запись в таблице "+tableName+" с id = "+propertyName+" не найдена.")
		    		break;
		    	}
		      log.info("Запись в таблице "+tableName+" с id = "+propertyName+" пока не найдена. Подождем...")
		      sleep(sleepTime)
		      row = sql(query)
	    } else {
	    	    log.info("Запись в таблице "+tableName+" с id = "+propertyName+" создана.")
	        break;
	    }
	}
} 

//функция проверяет, была ли изначально создана запись в таблице
def isExisted(String tableName, String id ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE ID = "+id
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}

def isExistedWithCondition(String tableName, String cond ) { 
	String query="SELECT *  FROM  "+tableName+ " WHERE "+cond
	//log.info(query)
	row = sql(query)
	//log.info(row)
	return row == 1
}
//функция отправляет указанное сообщение в укаанный топик
def sendMessageToKafka(String topicName, String s){
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
		log.info( "messageSender: "+topic+"; "+message )
		def key =  UUID.randomUUID().toString()
		def Date date = new Date(); 
		def  long  timestamp= date.getTime()
		def int partition =0
		String compoundMessage = "$message"
		producer.send(
			new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
			{ RecordMetadata metadata, Exception e ->
			log.info( "The offset of the record we just sent is: ${metadata.offset()}")
			} as Callback
			)
			}
	
	def mfMsg =s
	String messageCreateMf =mfMsg.toString()
	def topic= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	String topic1= topic.toString()
	//log.info(topic1+" "+messageCreateMf)
	messageSender(topic1, messageCreateMf)
	
	producer.close() 
}


def existedMO=isExisted("MEDICAL_ORGANIZATION ",moId) 

if (!isExisted("MEDICAL_ORGANIZATION ",moId) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMO.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МО в сервисе Запись.3")
			sendMessageToKafka("topicMO.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>МО для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Автотестовое МО</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МО в сервисе Запись.3')
		}
		checkCreation("MEDICAL_ORGANIZATION ",moId)
}
else {
	log.info("Медицинская организация с id = "+moId+" уже создана")
		testRunner.testCase.setPropertyValue("moId",moId)
}


//Проверить, создана ли запись для головного МУ, если нет - досоздать
if (!isExisted("MEDICAL_FACILITY",moId) ){
	//log.info("Отправляю сообщение")
	sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	if (createEntityInAppointment3 == true){
		log.info("Требуется досоздать МУ в сервисе Запись.3")
		sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="true"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MO</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+moId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+moId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
	}
	else {
		log.info('Не требуется досоздать МУ в сервисе Запись.3')
	}
	checkCreation("MEDICAL_FACILITY",moId)

}
else {
	log.info("Медицинское учреждение с id = "+moId+" уже создано")
}


// Досоздать необходимое количество МУ, если требуется

int mfId = moId.toInteger()
for (int i = 1; i <counterMF; i++){
	mfId = mfId +1
	if (!isExisted("MEDICAL_FACILITY",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicMF.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		if (createEntityInAppointment3 == true){
			log.info("Требуется досоздать МУ в сервисе Запись.3")
			sendMessageToKafka("topicMF.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalFacilityInfoMsg id=\""""+mfId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns2:create isHead="false"><ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\"><ns1:shortName>Тестовая MУ</ns1:shortName></ns1:medicalOrganization><ns1:name>МУ для интеграционного тестирования №"""+mfId+"""</ns1:name><ns1:shortName>Нагрзочное МУ</ns1:shortName><ns1:independence id="1"><ns1:code>1</ns1:code><ns1:title>Филиал</ns1:title></ns1:independence><ns1:parentMedicalFacility id="125694305"/><ns1:medicalFacilityType id="125694305"><ns1:code>39</ns1:code><ns1:title>Городская поликлиника</ns1:title></ns1:medicalFacilityType><ns1:periodStart>1991-12-25</ns1:periodStart><ns1:periodEnd>1992-12-25</ns1:periodEnd><ns1:clo>568</ns1:clo><ns1:mgfoms>3434</ns1:mgfoms><ns2:addressObject archived="false" id=\""""+mfId+"""\"><ns1:addressShort id="6203000"><ns1:addressString>город Москва, улица Псковская, дом 10, корпус 1</ns1:addressString></ns1:addressShort></ns2:addressObject></ns2:create></ns2:medicalFacilityInfoMsg>""")
		}
		else {
			log.info('Не требуется досоздать МУ в сервисе Запись.3')
		}
		checkCreation("MEDICAL_FACILITY",mfId.toString())
	
	}
	else {
		log.info("Медицинское учреждение с id = "+mfId+" уже создано")
	}
	testRunner.testCase.setPropertyValue("mfId"+i, mfId.toString())
	
}

mfId = moId.toInteger()
for (int i = 1; i <=counterMF; i++){
	if (!isExisted("LOCATION",mfId.toString()) ){
		//log.info("Отправляю сообщение")
		sendMessageToKafka("topicLocation.rir2","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId></ns4:location>""")
		if (createEntityInAppointment3 == true){
				log.info("Требуется досоздать Локацию в сервисе Запись.3")
				sendMessageToKafka("topicLocation.APPOINTMENT3","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns4:location archived="false" id=\""""+mfId+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:roomTitle>Локация для интеграционного тестирования №"""+moId+"""</ns4:roomTitle><ns4:stage>1</ns4:stage><ns4:building id="13"><ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress></ns4:building><ns4:specializationId>"""+specId+"""</ns4:specializationId><ns5:medicalFacilityId>"""+moId+"""</ns5:medicalFacilityId></ns4:location>""")
		}
		else {
			log.info('Не требуется досоздать Локацию в сервисе Запись.3')
		}
		checkCreation("LOCATION",mfId.toString())
	}
	else {
		log.info("Локация с id = "+mfId+" уже создана")
	}
	mfId = mfId+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании оборудований" id="7ddda71f-436a-43f7-8f28-db753cf027cd"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendMessageToKafka(String topicName, String textMessage){

	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 	
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}

	String msg =textMessage.toString()
	 def topic1= testRunner.testCase.testSuite.project.getPropertyValue(topicName)
	//log.info(topic1+" "+messageCreateMf)
	 messageSender(topic1, msg)
	 
	 producer.close() 
}

def id=testRunner.testCase.getPropertyValue("eId1").toInteger()
def moId=testRunner.testCase.getPropertyValue("moId")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("mfId1")
def archived=testRunner.testCase.getPropertyValue("archived")
def equipmentModel=testRunner.testCase.getPropertyValue("em")
def equipmentId=testRunner.testCase.getPropertyValue("equipmentId")
def equipmentTypeId=testRunner.testCase.getPropertyValue("equipmentTypeId")
def equipmentProfileId=testRunner.testCase.getPropertyValue("epId1")

def depId=testRunner.testCase.getPropertyValue("depId")
def depNomTitle=testRunner.testCase.getPropertyValue("depTitle")
def depNomId=testRunner.testCase.getPropertyValue("dnId1")
archived =testRunner.testCase.getPropertyValue("archived").toBoolean()
def personalizedService=testRunner.testCase.getPropertyValue("personalizedService")
def capacity=testRunner.testCase.getPropertyValue("capacity")
def tId1=testRunner.testCase.getPropertyValue("tId1")
def tId2=testRunner.testCase.getPropertyValue("tId2")
tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableE =testRunner.testCase.testSuite.project.getPropertyValue("tableE")
log.info(tableE+id)

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i<=countResources; i++){
	sendMessageToKafka("topicLocationEquipment.rir2","""<ns4:locationEquipment archived=\""""+archived+"""\" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId><ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId><ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id=\""""+depId+"""\"><ns5:title>"""+depNomTitle+"""</ns5:title><ns5:nomId>"""+depNomId+"""</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>"""+personalizedService+"""</ns4:personalizedService><ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>"""+tId1+"""</ns4:id><ns4:useByDefault>true</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>"""+tId2+"""</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>""")
	for (int q = 0; q<=10;q++) {
		def getLastItem = "SELECT * FROM "+tableE+"  WHERE ID="+id
		log.info(getLastItem)
		def lastItem= sql.rows(getLastItem)
	
		if ( lastItem.size()== 0){
				log.info("Оборудование пока не найдено. Подождем")
				sleep(5000)
		}
		else if (q==10){
			testRunner.fail("Запись в таблице "+tableE+" не найдена")
		}
		else {
			log.info("Оборудование найдено.")
			testRunner.testCase.setPropertyValue("eId"+i, id.toString())
			testRunner.testCase.setPropertyValue("eIdCreatedByTest"+i, "1")
			break;
		}
	}
	id=id+1
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка синхронизации ресурсов" id="6eef7705-68f8-4e2d-9278-07291ed1d1dc"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

tableRes =testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def countResources = testRunner.testCase.getPropertyValue("countResources").toInteger()

for(int i=1; i&lt;=countResources; i++){
	def id=testRunner.testCase.getPropertyValue("eId"+i)
	String querySar="select * from "+tableRes+" where RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND PARENT_ID="+id
	for (int j = 0; j &lt; 28; j++) {
		
		//log.info(querySar)
		rowsSar = sql.rows(querySar)
		// log.info(rowsSar)
		if (rowsSar[0].SYNC_STATUS=='IN_PROGRESS') {
			log.info("Идет синхронизация ресруса. Подождём...")
			sleep(6000)
		}
		else {
			log.info("Синхрнизация ресурса завершена.")
			break;
		}
	 }
	if (rowsSar[0].SYNC_STATUS=='ERROR'){
		getResSyncError=(" SELECT DISTINCT rsem.code, rsemp.\"KEY\" as entity , rsemp.VALUE FROM RESOURCE_SYNC_ERROR rse JOIN "+tableRes+" res ON res.id=rse.RESOURCE_ID  JOIN RESOURCE_SYNC_ERROR_MSG rsem ON RSE.ID=RSEM.RESOURCE_SYNC_ERROR_ID JOIN RESOURCE_SYNC_ERROR_MSG_PR rsemp ON rsemp.RESOURCE_SYNC_ERROR_MSG_ID=rsem.id WHERE res.RESOURCE_KIND ='SPECIAL_AVAILABLE_RESOURCE' AND res.PARENT_ID ="+id)
		errors=sql.rows(getResSyncError)
		testRunner.fail("Синхронизация ресурса "+rowsSar[0].ID+"завершена с ошибкой. Код ошибки "+errors[0].CODE+". Сущность, из-за которой произошла ошибка: "+errors[0].entity+", id="+errors[0].VALUE)
	}
	
	testRunner.testCase.setPropertyValue("sarId"+i, rowsSar[0].ID.toString())
}</script></con:config></con:testStep><con:testStep type="groovy" name="Подбор периода расписания" id="4d45e567-0055-4327-97cb-ced917220439"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def monthsNumberInSchedule = testRunner.testCase.getPropertyValue("countMonthsInSchedule").toInteger()
def countSchedule = testRunner.testCase.getPropertyValue("countSchedule").toInteger()

def schedulePeriodStart=LocalDate.now()
def schedulePeriodNextDay=schedulePeriodStart.plusDays(1)
def scheduleNewPeriodStart=schedulePeriodStart.plusMonths(monthsNumberInSchedule-1)
def schedulePeriodEnd=scheduleNewPeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def yesterday = schedulePeriodStart.minusDays(1)
def schedulePeriodNextDay2=schedulePeriodStart.plusMonths(1)
log.info("schedulePeriodNextDay "+schedulePeriodNextDay)
log.info("schedulePeriodNextDay2 "+schedulePeriodNextDay2)
log.info("Период расписания с "+schedulePeriodStart+" по "+schedulePeriodEnd)

testRunner.testCase.setPropertyValue("schedulePeriodNextDay",schedulePeriodNextDay.toString());
testRunner.testCase.setPropertyValue("schedulePeriodNextDay2",schedulePeriodNextDay2.toString());
testRunner.testCase.setPropertyValue("schedulePeriodStart1",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd1", schedulePeriodEnd.toString())
testRunner.testCase.setPropertyValue("schedulePeriodStart",schedulePeriodStart.toString());
testRunner.testCase.setPropertyValue("schedulePeriodEnd", schedulePeriodEnd.toString())
log.info("Период расписания №1 с "+schedulePeriodStart+" по "+schedulePeriodEnd)
ospe=schedulePeriodEnd


	
for (int i=2; i &lt;=countSchedule; i++ ){
	sps=ospe.plusDays(1)
	spe1=ospe.plusMonths(monthsNumberInSchedule)
	spe=spe1.with(TemporalAdjusters.lastDayOfMonth())
	testRunner.testCase.setPropertyValue("schedulePeriodStart"+i,sps.toString());
	testRunner.testCase.setPropertyValue("schedulePeriodEnd"+i, spe.toString())
	log.info("Период расписания №"+i+" с "+sps+" по "+spe)
	ospe=spe
}
def lastDayOfCurrentMounth=schedulePeriodStart.with(TemporalAdjusters.lastDayOfMonth())
def schedulePeriodEndPlusYear=lastDayOfCurrentMounth.plusMonths(monthsNumberInSchedule+13)
testRunner.testCase.setPropertyValue("schedulePeriodEndPlusYear", schedulePeriodEndPlusYear.toString())
log.info("schedulePeriodEndPlusYear: "+schedulePeriodEndPlusYear)
testRunner.testCase.setPropertyValue("yesterday", yesterday.toString())
log.info("yesterday: "+yesterday)

schedulePeriod2SecondDay=schedulePeriodEnd.plusDays(2)
schedulePeriod2ThirdDay=schedulePeriodEnd.plusDays(3)
schedulePeriod2FourthDay=schedulePeriodEnd.plusDays(4)
schedulePeriodEnd2=schedulePeriod2FourthDay.with(TemporalAdjusters.lastDayOfMonth())
schedulePeriod2SecondToLastDay=schedulePeriodEnd2.minusDays(1)
testRunner.testCase.setPropertyValue("schedulePeriod2SecondDay", schedulePeriod2SecondDay.toString())
log.info("schedulePeriod2SecondDay: "+schedulePeriod2SecondDay)
testRunner.testCase.setPropertyValue("schedulePeriod2ThirdDay", schedulePeriod2ThirdDay.toString())
log.info("schedulePeriod2ThirdDay: "+schedulePeriod2ThirdDay)
testRunner.testCase.setPropertyValue("schedulePeriod2FourthDay", schedulePeriod2FourthDay.toString())
log.info("schedulePeriod2FourthDay: "+schedulePeriod2FourthDay)
testRunner.testCase.setPropertyValue("schedulePeriod2SecondToLastDay", schedulePeriod2SecondToLastDay.toString())
log.info("schedulePeriod2SecondToLastDay: "+schedulePeriod2SecondToLastDay)</script></con:config></con:testStep><con:testStep type="request" name="createScheduleForBranch на следующий месяц" id="73fd07dc-b648-4adb-8fd2-a07af22621f1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>createScheduleForBranch</con:operation><con:request name="createScheduleForBranch на следующий месяц" id="c5de23de-5885-4cf1-b3f9-b6f07782fdce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createScheduleForBranchRequest>\r
         <v1:medicalFacilityId>${#TestCase#mfId1}</v1:medicalFacilityId>\r
         <v1:schedulePeriod>\r
            <v1:start>${#TestCase#schedulePeriodStart2}</v1:start>\r
            <v1:end>${#TestCase#schedulePeriodEnd2}</v1:end>\r
         </v1:schedulePeriod>\r
      </typ:createScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9a551c69-3e64-47ec-8e84-61f148a16cc5"/><con:assertion type="Simple Contains" id="dab5c4f6-3042-4fc4-aee3-41e9a981d31c" name="Contains"><con:configuration><token>scheduleId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить sheduleId" id="bf9273ab-74d4-45b0-8dcc-5a16f6e352bc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sheduleId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createScheduleForBranch на следующий месяц</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns1='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/scheduleService/v1/';
declare namespace ns3='http://emias.mos.ru/supp/rir2/scheduleService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';

//*:scheduleId
</con:sourcePath><con:targetType>scheduleId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания расписаний ресурсов" id="a9f3ab5c-6e42-4db8-bee9-f704891fc2ff"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
log.info ("ID Расписания: " + scheduleId)
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def countResources= testRunner.testCase.getPropertyValue("countResources")

def checkResourceKind(int id){
	resourseKind=""
		
}
getResources = ("SELECT * FROM \"RESOURCE\" WHERE SYNC_STATUS= 'OK' AND ARCHIVED=0 AND MEDICAL_FACILITY_ID="+mfId)
//log.info(getResources)
resources= sql.rows(getResources)
countResources= sql(getResources)
if ( countResources== 0){
		testRunner.fail("Запись в таблице RESOURCE не найдена")
}

//log.info("countResources "+countResources)

for (int i=0; i&lt;countResources; i++){
	nextI=i+1
	//log.info("i = "+i)
	getResourceSchedule = ("SELECT * FROM RESOURCE_SCHEDULE WHERE SCHEDULE_ID="+scheduleId+" AND RESOURCE_ID="+resources[i].ID)
	//log.info(getResourceSchedule)
	resourceSchedule=sql.rows(getResourceSchedule)
	//log.info("resourceSchedule"+i+" = "+resourceSchedule[0])
	if ( sql(getResourceSchedule)== 0){
		testRunner.fail("Запись в таблице RESOURCE_SCHEDULEс SCHEDULE_ID="+scheduleId+" и RESOURCE_ID="+resources[i].ID+" не найдена")
	}
	else {
		//log.info("VERSION = "+resourceSchedule[0].VERSION)
	assert resourceSchedule[0].VERSION == 0
	assert resourceSchedule[0].STATUS == "NOT_DEFINED"
	}
	log.info("Расписание для ресурса "+resources[i].ID+" создано успешно и соответствует требованиям.")
	if (resources[i].RESOURCE_KIND =="SPECIAL_AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("sarScheduleId"+nextI,resourceSchedule[0].ID.toString())
	}
	else if (resources[i].RESOURCE_KIND =="AVAILABLE_RESOURCE"){
		testRunner.testCase.setPropertyValue("arScheduleId"+nextI,resourceSchedule[0].ID.toString())
	}
}

log.info("Для всех ресурсов успешно созданы расписания.")</script></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule" id="a1152193-28fa-4bbd-93ef-dc878d5a44e3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriod2SecondDay}</v1:start>
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>08:00:00</v1:start>
                     <v1:end>20:00:00</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestCase#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="operationId" id="8cd0edf7-0587-4aee-96b1-3bfdd8ff758c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createSarScheduleRule</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>operationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция 1" id="d87a85a3-d8aa-4eca-8e64-200e9291d5aa"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def checkSysopOperationStatus(String propertyName, int tryCount=30){
	def operationId = testRunner.testCase.getPropertyValue(propertyName)
	//Дожидаться успешности завершения операции
	for (int i =0; i&lt;=30; i++){
		String getSchedule=("SELECT * FROM SYSOP WHERE ID="+operationId)
		operation=sql.rows(getSchedule)
		if (operation[0].COMPLETENESS_PROGRESS==100 &amp; operation[0].IS_COMPLETED=='1' &amp; operation[0].HAS_SUCCEDED=='1'){
			log.info("Операция № "+operationId+" завершена успешно.")
			break
		}
		else if( i ==30){
			testRunner.fail("Операция № "+operationId+" не завершена или завершена неуспешно. Мы устали ждать. Процент завершения = "+operation[0].COMPLETENESS_PROGRESS+", успешность = "+operation[0].IS_COMPLETED+", завершенность = "+operation[0].HAS_SUCCEDED)
		}
		else {
			log.info("Операция № "+operationId+" еще не завершена. Подождем...")
		}
		sleep(5000)
	}
}

checkSysopOperationStatus("operationId")</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка создания правила WT расписания СДР" id="d00a2948-e534-4622-931c-8c83af382d05"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sarScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")
log.info ("ID Расписания СДР : " + sarScheduleId)
def sarSchruleWTTypeId= testRunner.testCase.getPropertyValue("sarSchruleWTTypeId1").toInteger()
def mfId= testRunner.testCase.getPropertyValue("mfId1").toInteger()
def schedulePeriodStart= testRunner.testCase.getPropertyValue("schedulePeriod2ThirdDay")
def schedulePeriodEnd= testRunner.testCase.getPropertyValue("schedulePeriod2SecondToLastDay")
def agId= testRunner.testCase.getPropertyValue("agId1").toInteger()
def tId= testRunner.testCase.getPropertyValue("tId1").toInteger()
def startTime= testRunner.testCase.getPropertyValue("startTime")
def endTime= testRunner.testCase.getPropertyValue("endTime")
//Проверка наличия правила
getWTsarRules = ("SELECT * FROM SAR_SCHRULE WHERE RESOURCE_SCHEDULE_ID="+sarScheduleId+" AND SAR_SCHRULE_TYPE_ID="+sarSchruleWTTypeId)
//log.info(getResources)
WTsarRules= sql.rows(getWTsarRules)
countWTsarRules= sql(getWTsarRules)
if ( countWTsarRules== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE не найдена")
}
sarRuleId=WTsarRules[0].ID.toString()
//log.info("sarRuleId "+sarRuleId)
//Проверка наличия возрастной группы правила
getSarRulesAgeGroupe = ("SELECT * FROM SAR_SCHRULE_AGE_GROUP WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesAgeGroupe= sql.rows(getSarRulesAgeGroupe)
countSarRulesAgeGroupe= sql(getSarRulesAgeGroupe)
if ( countSarRulesAgeGroupe== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_AGE_GROUP не найдена")
}

//Проверка наличия шаблона дат правила
getSarRulesDates = ("SELECT * FROM SAR_SCHRULE_DATES WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesDates= sql.rows(getSarRulesDates)
countSarRulesDates= sql(getSarRulesDates)
if ( countSarRulesDates== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_DATES не найдена")
}
//log.info(sarRulesDates)
//Проверка наличия временного интервала правила
getSarRulesTime = ("SELECT * FROM SAR_SCHRULE_TIME_INTERVALS WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesTime= sql.rows(getSarRulesTime)
countSarRulesTime= sql(getSarRulesTime)
if ( countSarRulesTime== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_TIME_INTERVALS не найдена")
}

//Проверка наличия временного интервала правила
getSarRulesTreatment = ("SELECT * FROM SAR_SCHRULE_TREATMENT WHERE SAR_SCHRULE_ID="+sarRuleId)
sarRulesTreatment= sql.rows(getSarRulesTreatment)
countSarRulesTreatment= sql(getSarRulesTreatment)
if ( countSarRulesTreatment== 0){
		testRunner.fail("Запись в таблице SAR_SCHRULE_TREATMENT не найдена")
}
def ruleStart =  WTsarRules[0].START_DATE.toString()
def ruleEnd = WTsarRules[0].END_DATE.toString()
def timeStart =  sarRulesTime[0].START_TIME.toString()
def timeEnd = sarRulesTime[0].END_TIME.toString()
//log.info(ruleStart)
//log.info(ruleEnd)
//log.info(timeStart.replace(".0","").replace("1970-01-01 ",""))
//log.info(timeEnd.replace(".0","").replace("1970-01-01 ",""))


assert ruleStart.replace(" 00:00:00.0","") == schedulePeriodStart
assert ruleEnd.replace(" 00:00:00.0","") == schedulePeriodEnd
assert timeStart.replace(".0","").replace("1970-01-01 ","") == startTime
assert timeEnd.replace(".0","").replace("1970-01-01 ","") == endTime
assert WTsarRules[0].VERSION == 0
assert WTsarRules[0].LOCATION_ID == mfId
assert sarRulesAgeGroupe[0].AGE_GROUP_ID == agId
//log.info(sarRulesDates[0].TEMPLATE_TYPE_ID.getClass())
assert sarRulesDates[0].TEMPLATE_TYPE_ID == 1
assert sarRulesDates[0].EVEN_DAYS == null
assert sarRulesDates[0].MONDAY == "1"
assert sarRulesDates[0].TUESDAY == "1"
assert sarRulesDates[0].WEDNESDAY == "1"
assert sarRulesDates[0].THURSDAY == "1"
assert sarRulesDates[0].FRIDAY == "1"
assert sarRulesDates[0].SATURDAY == "0"
assert sarRulesDates[0].SUNDAY == "0"
assert sarRulesDates[0].FIRST_WEEK == null
assert sarRulesDates[0].SECOND_WEEK == null
assert sarRulesDates[0].THIRD_WEEK == null
assert sarRulesDates[0].FORTH_WEEK == null
assert sarRulesDates[0].FIFTH_WEEK == null
assert sarRulesDates[0].DAYS_OF_MONTH == null
assert sarRulesDates[0].IS_EXCLUDED_DATES_DEFINED == "0"
assert sarRulesDates[0].EXCEPT_HOLIDAYS == null
assert sarRulesDates[0].EXCEPT_MONDAY == null
assert sarRulesDates[0].EXCEPT_TUESDAY == null
assert sarRulesDates[0].EXCEPT_WEDNESDAY == null
assert sarRulesDates[0].EXCEPT_THURSDAY == null
assert sarRulesDates[0].EXCEPT_FRIDAY == null
assert sarRulesDates[0].EXCEPT_SATURDAY == null
assert sarRulesDates[0].EXCEPT_SUNDAY == null 
assert sarRulesTreatment[0].TREATMENT_ID == tId

testRunner.testCase.setPropertyValue("sarWTruleId", sarRuleId)</script></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule тот же интервал" id="8f6e470b-c0a4-4031-b0f1-b8f97f3c8ac2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule тот же интервал" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestCase#schedulePeriod2SecondDay}</v1:start>\r
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>08:00:00</v1:start>\r
                     <v1:end>20:00:00</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestCase#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule время начала больше, время конца=время начала ceo правила" id="18ac7b93-6b2c-40ec-9513-87cc4a7cde33"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule время начала больше, время конца=время начала ceo правила" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestCase#schedulePeriod2SecondDay}</v1:start>\r
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>07:00:00</v1:start>\r
                     <v1:end>08:00:01</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestCase#tId2}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestCase#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule дата начала = существующей и дата окончания в промежутке" id="387f5a6d-4b0a-4be6-b436-6042f007741f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule дата начала = существующей и дата окончания в промежутке" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestCase#schedulePeriod2SecondDay}</v1:start>\r
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>08:00:00</v1:start>\r
                     <v1:end>19:00:00</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestCase#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule внутри сущ интервала" id="3a8c3417-edcf-49cb-a6ab-d9380359c6f3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule внутри сущ интервала" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>
      <typ:createSarScheduleRuleRequest>
         <typ:ruleInfoWithSarScheduleId>
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>
            <typ:info>
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>
               <!--Optional:-->
               <typ:comment>WT</typ:comment>
               <typ:datePeriod>
                  <v1:start>${#TestCase#schedulePeriod2SecondDay}</v1:start>
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>
               </typ:datePeriod>
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <v1:dayOfWeek>1</v1:dayOfWeek>
                  <v1:dayOfWeek>2</v1:dayOfWeek>
                  <v1:dayOfWeek>3</v1:dayOfWeek>
                  <v1:dayOfWeek>4</v1:dayOfWeek>
                  <v1:dayOfWeek>5</v1:dayOfWeek>
               </typ:dateTemplate>
               <typ:timeIntervals>
                  <typ:timeInterval>
                     <v1:start>08:00:01</v1:start>
                     <v1:end>19:59:59</v1:end>
                  </typ:timeInterval>
               </typ:timeIntervals>
               <typ:ageGroups>
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>
               </typ:ageGroups>
               <typ:treatments>
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>
               </typ:treatments>
               <typ:location>${#TestCase#mfId1}</typ:location>
            </typ:info>
         </typ:ruleInfoWithSarScheduleId>
      </typ:createSarScheduleRuleRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule за границами существующего интервала" id="1d4d1b6e-bf2d-49d6-9952-9945c8c34ecd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule за границами существующего интервала" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestCase#schedulePeriod2SecondDay}</v1:start>\r
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>07:59:59</v1:start>\r
                     <v1:end>20:00:01</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestCase#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule время окончания выходит за границу" id="9a2c2390-cdda-46cf-88ee-f92e5d181670"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule время окончания выходит за границу" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestCase#schedulePeriod2SecondDay}</v1:start>\r
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>10:59:59</v1:start>\r
                     <v1:end>20:00:01</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestCase#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule дата начала выходит за границы" id="bfda60b5-0b1a-4b43-9596-aec100cc9533"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule дата начала выходит за границы" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestCase#schedulePeriodStart2}</v1:start>\r
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>10:59:59</v1:start>\r
                     <v1:end>20:00:01</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestCase#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule период внутри существующего" id="655029f4-72c7-48af-8e72-d7a83efbc3cb"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule период внутри существующего" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestCase#schedulePeriodStart2}</v1:start>\r
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>10:59:59</v1:start>\r
                     <v1:end>20:00:01</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestCase#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createSarScheduleRule окончание периода за границе существующего" id="f4f095c4-584f-4c73-bc51-1f1f23000d5d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>sarScheduleServiceBinding</con:interface><con:operation>createSarScheduleRule</con:operation><con:request name="createSarScheduleRule окончание периода за границе существующего" id="f27d088a-ca67-4cc4-ab1d-e770be02f79e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#SarScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/sarScheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createSarScheduleRuleRequest>\r
         <typ:ruleInfoWithSarScheduleId>\r
            <typ:sarScheduleId>${#TestCase#sarScheduleId1}</typ:sarScheduleId>\r
            <typ:info>\r
               <typ:typeId>${#TestCase#sarSchruleWTTypeId1}</typ:typeId>\r
               <!--Optional:-->\r
               <typ:comment>WT</typ:comment>\r
               <typ:datePeriod>\r
                  <v1:start>${#TestCase#schedulePeriodStart2}</v1:start>\r
                  <v1:end>${#TestCase#schedulePeriod2SecondToLastDay}</v1:end>\r
               </typ:datePeriod>\r
               <typ:dateTemplate xsi:type="v1:DayOfWeekDatesTemplate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
                  <v1:dayOfWeek>1</v1:dayOfWeek>\r
                  <v1:dayOfWeek>2</v1:dayOfWeek>\r
                  <v1:dayOfWeek>3</v1:dayOfWeek>\r
                  <v1:dayOfWeek>4</v1:dayOfWeek>\r
                  <v1:dayOfWeek>5</v1:dayOfWeek>\r
               </typ:dateTemplate>\r
               <typ:timeIntervals>\r
                  <typ:timeInterval>\r
                     <v1:start>10:59:59</v1:start>\r
                     <v1:end>20:00:01</v1:end>\r
                  </typ:timeInterval>\r
               </typ:timeIntervals>\r
               <typ:ageGroups>\r
                  <v1:ageGroupId>${#TestCase#agId1}</v1:ageGroupId>\r
               </typ:ageGroups>\r
               <typ:treatments>\r
                  <v1:treatmentId>${#TestCase#tId1}</v1:treatmentId>\r
               </typ:treatments>\r
               <typ:location>${#TestCase#mfId1}</typ:location>\r
            </typ:info>\r
         </typ:ruleInfoWithSarScheduleId>\r
      </typ:createSarScheduleRuleRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="348421ae-3e2f-44bb-9d19-e33353c1b2f9"/><con:assertion type="GroovyScriptAssertion" id="5952fc47-8b1c-4926-a7c3-2760b5a38218" name="E378"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def resp = new XmlHolder( messageExchange.responseContentAsXml )
def req = new XmlHolder( messageExchange.requestContentAsXml )


// получаю данные из ответа
def messageType = resp.getNodeValue('//*:messages/*:message/@type')
def  messageCode = resp.getNodeValue('//*:messages/*:message/*:code')


// проверка messageType
assert messageType == 'ERROR'

// проверка messageCode
assert messageCode ==  'E378'

</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ca8707b6-2e0a-4d5b-aa6e-27035190d2d2" name="Contains sarScheduleId"><con:configuration><token>${#TestCase#sarScheduleId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8699b39a-ada4-447c-94c7-7503856be578" name="Contains Rule"><con:configuration><token>${#TestCase#sarWTruleId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteScheduleForBranch" id="04c7fbdb-039e-482a-890c-dfc5198dc3ad"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>scheduleServiceBinding</con:interface><con:operation>deleteScheduleForBranch</con:operation><con:request name="deleteScheduleForBranch" id="d66dd1b3-03e3-450a-a89b-fdc1f7118b3b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ScheduleWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/scheduleService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
    <wsse:Username>${#Project#securityUsername}</wsse:Username>
   </wsse:UsernameToken>
  </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:deleteScheduleForBranchRequest>\r
         <v1:scheduleId>${#TestCase#scheduleId1}</v1:scheduleId>\r
         <v1:entityVersion>0</v1:entityVersion>\r
      </typ:deleteScheduleForBranchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63285d8b-3774-453f-a4a0-352dacb07a53"/><con:assertion type="Simple Contains" id="582c4a93-6324-4315-ae91-6528c1a3368a" name="operationId"><con:configuration><token>operationId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="30b4ed9a-411a-484d-b7ef-ac79fc3cd55d" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получаю operationId" id="dad2bf6d-312f-4f30-af18-8cd9539b8661"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>operationId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteScheduleForBranch</con:sourceStep><con:sourcePath>//*:operationId</con:sourcePath><con:targetType>deleteSchedule1OperationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Жду когда выполнится операция" id="0444d68f-86ed-4bbc-94e7-289113f46ac9"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.test.GroovyAssert

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

        
def operationId1= testRunner.testCase.getPropertyValue("deleteSchedule1OperationId")
log.info ("ID операции: " + operationId1)
      
 //Проверка, что статус операции изменился
 
Boolean rowCount = false
String sql_query = "select  * from  SYSOP WHERE id="+operationId1
int counter = 0

while (rowCount == false &amp;&amp;  counter &lt; 30) {
   row = sql.rows(sql_query)
   
   def hasSucceded =row[0].HAS_SUCCEDED
   //def completenessProgress = row[0].COMPLETENESS_PROGRESS  &amp; (completenessProgress =='100' ) 
   if ( hasSucceded =='1' ) {
       rowCount = true
       log.info("статус операции успешен")
     }
    else {
      sleep(10000)
      log.info("статус операции пока не успешен")
      counter++
   }
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка удаления расписания МУ" id="ecd28681-41af-4c70-b741-720cfb69291c"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;
import  java.util.date.*
import groovy.sql.Sql
import java.sql.Timestamp
import java.time.LocalDate
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")

getSchedule = ("SELECT * FROM SCHEDULE WHERE ID="+scheduleId)
schedule= sql.rows(getSchedule)
if ( sql(getSchedule)> 0){
		testRunner.fail("Запись в таблице SCHEDULE не удалена."+schedule)
}
else {
	log.info("Запись в таблице SCHEDULE удалена.")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление ресурсов и род сущностей" id="673348c2-8bf0-44df-83b4-1eccb527af8c"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

 moId = testRunner.testCase.getPropertyValue("moId")
tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteResource=("delete from "+tableRes+" where MEDICAL_ORGANIZATION_ID="+moId)
log.info(deleteResource)
sql.execute(deleteResource)
equipmentList="0"
countResources= testRunner.testCase.getPropertyValue("countResources").toInteger()

log.info("countResources="+countResources)

tableET = testRunner.testCase.testSuite.project.getPropertyValue("tableET")

for(int i=1; i&lt;=countResources; i++){
	log.info("countResources="+countResources)
	log.info("i="+ i)
	eId= testRunner.testCase.getPropertyValue("eId"+ i)
	log.info("eId="+eId)
	//created=testRunner.testCase.getPropertyValue("eIdCreatedByTest" + i).toBoolean()
	//log.info("created="+created)
	//if(created==true){
		deleteEquipmentTreatments=("delete from "+tableET+" where EQUIPMENT_ID=" + eId)
		log.info(deleteEquipmentTreatments)
		sql.execute(deleteEquipmentTreatments)
	//}
}

deleteCreatedByTestInTestCaseWithCounter("tableE","eId",countResources)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление МО/МУ/Локаций" id="91c2b6e2-d2a3-44ef-8959-722e14e6d728"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")


tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
tableRes = testRunner.testCase.testSuite.project.getPropertyValue("tableRes")
tableSpec = testRunner.testCase.testSuite.project.getPropertyValue("tableSpec")
tableDepNom = testRunner.testCase.testSuite.project.getPropertyValue("tableDepNom")
tablePosNom = testRunner.testCase.testSuite.project.getPropertyValue("tablePosNom")
tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
tableResType = testRunner.testCase.testSuite.project.getPropertyValue("tableResType")

def  deleteEntryFromTableById(String tableName, String propertyName) { 
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	 id = testRunner.testCase.getPropertyValue(propertyName)
	// log.info("DELETE FROM "+table+"  WHERE ID ="+id)
	 sql.execute("DELETE FROM "+table+"  WHERE ID ="+id) 
	 testRunner.testCase.removeProperty(propertyName)
} 
def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		log.info("Щас удалю проперти "+propertyName+i)
		testRunner.testCase.removeProperty(propertyName+i)
		log.info("Удалил. Щас удалю проперти "+propertyName+"CreatedByTest"+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
		log.info("Для №  "+i+" всё")
	}

}


def counterMF = testRunner.testCase.getPropertyValue("counterMF").toInteger()

def clearMoMfLocationByMoIDWithCount(String moPropertyName, int counter){
	tableMO = testRunner.testCase.testSuite.project.getPropertyValue("tableMO")
	tableAO = testRunner.testCase.testSuite.project.getPropertyValue("tableAO")
	tableMF = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
	tableMFWH = testRunner.testCase.testSuite.project.getPropertyValue("tableMFWH")
	tableLoc = testRunner.testCase.testSuite.project.getPropertyValue("tableLoc")
	moId=testRunner.testCase.getPropertyValue("moId")
	 id=moId.toLong()
	for (int i=1; i&lt;=counter; i++){
		deleteLoc=("delete from "+tableLoc+" where ID="+id)
		log.info(deleteLoc)
		sql.execute(deleteLoc)
		deleteMFWH=("delete from "+tableMFWH+" where MEDICAL_FACILITY_ID="+id)
		log.info(deleteMFWH)
		sql.execute(deleteMFWH)
		deleteMF=("delete from "+tableMF+" where ID="+id)
		log.info(deleteMF)
		sql.execute(deleteMF)
		deleteAO=("delete from "+tableAO+" where ID="+id)
		log.info(deleteAO)
		sql.execute(deleteAO)
		id=id+1
	}
	deleteMO=("delete from "+tableMO+" where ID="+moId)
	log.info(deleteMO)
	sql.execute(deleteMO)
	for (int i=1; i&lt;=counter; i++){
		testRunner.testCase.removeProperty("mfId"+i)
	}
}

clearMoMfLocationByMoIDWithCount("moId", counterMF)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление вспомогательных сущностей" id="1b6a58c3-cfaa-4727-931d-331be6eb3212"><con:settings/><con:config><script>import groovy.sql.Sql

/*if (context.dbConnect != null) {      
sql = context.dbConnect;*/

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")

def deleteCreatedByTestInTestCaseWithCounter(String tableName,String propertyName, int counter =1){
	table = testRunner.testCase.testSuite.project.getPropertyValue(tableName)
	for(int i=1; i&lt;=counter; i++){
		log.info("propertyName  "+propertyName+i)
		def propertValue  = testRunner.testCase.getPropertyValue(propertyName+i)
		log.info("propertValue  "+propertValue)
		def createdByTest  = testRunner.testCase.getPropertyValue(propertyName+"CreatedByTest"+i).toBoolean()
		log.info("createdByTest "+createdByTest)
		if (createdByTest==true){
			sql.execute("DELETE FROM "+table+ " WHERE ID =" +propertValue)
			log.info("Запись в таблице "+table+ " с ID ="+propertyName+i+" была создана в рамках теста  и удалена ")
			}
		else {
			log.info("Тест использовал существующую запись в таблице "+table+" с ID ="+propertValue+". Запись не будет удалена. ")
			}
		testRunner.testCase.removeProperty(propertyName+i)
		testRunner.testCase.removeProperty(propertyName+"CreatedByTest"+i)
	}

}

deleteCreatedByTestInTestCaseWithCounter("tableSpec", "specId")
deleteCreatedByTestInTestCaseWithCounter("tableEP", "epId")
deleteCreatedByTestInTestCaseWithCounter("tableDepNom", "dnId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleWTTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRejectionTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleAGTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleTRTypeId")
deleteCreatedByTestInTestCaseWithCounter("tableSarRuleType", "sarSchruleRRTypeId")
//deleteCreatedByTestInTestCaseWithCounter("tableResTyp", "resourceTypeSAR")
</script></con:config></con:testStep><con:testStep type="groovy" name="clearTreatmentsWithMapping" id="7eb2ea50-5fb1-4c5a-b44b-04d2c65943b4"><con:settings/><con:config><script>import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def countTreatment  = testRunner.testCase.getPropertyValue("countTreatment").toInteger()

def clearTreatmentsWithMapping(int count, int firsIndex=1 ){
	tableT=testRunner.testCase.testSuite.project.getPropertyValue("tableT")
	tableTC=testRunner.testCase.testSuite.project.getPropertyValue("tableTC")
	tableRouteTreatmentMapping=testRunner.testCase.testSuite.project.getPropertyValue("tableRTLM")
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentId = testRunner.testCase.getPropertyValue("tId"+i)
		tCreatedByTest=testRunner.testCase.getPropertyValue("tCreatedByTest"+i)
		treatmentCode = testRunner.testCase.getPropertyValue("tCode"+i)
		tMappingCode = testRunner.testCase.getPropertyValue("tMappingCode"+i) 
		tMappingCodeCreatedByTest=testRunner.testCase.getPropertyValue("tMappingCodeCreatedByTest"+i)
		if(tMappingCodeCreatedByTest=='1'){
			log.info("Для записи №"+i+" маппинг был создан автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableRouteTreatmentMapping+" WHERE TREATMENT_CODE='"+treatmentCode+"'")
		}
		if(tCreatedByTest=='1'){
			log.info("Для записи №"+i+" ММ №"+treatmentId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableT+"  WHERE ID='"+treatmentId+"'")
		}
		log.info("Очищаю проперти маппинга и ММ для записи №"+i)
		testRunner.testCase.removeProperty("tMappingCode"+i) 
		testRunner.testCase.removeProperty("tMappingCodeCreatedByTest"+i)
		testRunner.testCase.removeProperty("tCode"+i)
		testRunner.testCase.removeProperty("tCreatedByTest"+i)
		testRunner.testCase.removeProperty("tId"+i)
	}
	for( int i=firsIndex; i&lt;=count; i++){
		treatmentCategoryId = testRunner.testCase.getPropertyValue("tcId"+i)
		tcCreatedByTest=testRunner.testCase.getPropertyValue("tcCreatedByTest"+i)
		if(tcCreatedByTest=='1'){
			("Для записи №"+i+" Категория ММ №"+treatmentCategoryId+" была создана автотестом. Удаляю")
			sql.execute("DELETE FROM "+tableTC+"  WHERE ID='"+treatmentCategoryId+"'")
		}
		log.info("Очищаю проперти Категории ММ для записи №"+i)
		testRunner.testCase.removeProperty("tcId"+i)
		testRunner.testCase.removeProperty("tcCreatedByTest"+i)
		testRunner.testCase.removeProperty("tcCode"+i)
	}
}

clearTreatmentsWithMapping(countTreatment)
</script></con:config></con:testStep><con:properties><con:property><con:name>afterSchedulePeriodEnd</con:name><con:value>2021-02-01</con:value></con:property><con:property><con:name>agId1</con:name><con:value>127631257</con:value></con:property><con:property><con:name>agIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>archived</con:name><con:value>false</con:value></con:property><con:property><con:name>archivedAgId1</con:name><con:value>127631289</con:value></con:property><con:property><con:name>archivedAgIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arScheduleId1</con:name><con:value>4750441</con:value></con:property><con:property><con:name>beforeSchedulePeriodStart</con:name><con:value>2018-08-31</con:value></con:property><con:property><con:name>capacity</con:name><con:value>1</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countMonthsInSchedule</con:name><con:value>1</con:value></con:property><con:property><con:name>countResources</con:name><con:value>2</con:value></con:property><con:property><con:name>countSchedule</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatment</con:name><con:value>2</con:value></con:property><con:property><con:name>deleteSchedule1OperationId</con:name><con:value>4404335</con:value></con:property><con:property><con:name>depId</con:name><con:value>123456</con:value></con:property><con:property><con:name>depTitle</con:name><con:value>Описание отделения автотет рир2</con:value></con:property><con:property><con:name>em</con:name><con:value>Оборудование для СДР автотест рир2</con:value></con:property><con:property><con:name>endTime</con:name><con:value>20:00:00</con:value></con:property><con:property><con:name>endTimeTR</con:name><con:value>10:00:00</con:value></con:property><con:property><con:name>epId</con:name><con:value>146017593</con:value></con:property><con:property><con:name>epIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>equipmentId</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentTypeId</con:name><con:value>1236</con:value></con:property><con:property><con:name>moId</con:name><con:value>-10</con:value></con:property><con:property><con:name>nonexistentAgId1</con:name><con:value>127631291</con:value></con:property><con:property><con:name>nonexistentSarRuleTypeId1</con:name><con:value>9</con:value></con:property><con:property><con:name>operationId</con:name><con:value>0</con:value></con:property><con:property><con:name>personalizedService</con:name><con:value>true</con:value></con:property><con:property><con:name>resTypeForSarId</con:name><con:value>156645371</con:value></con:property><con:property><con:name>resTypeForSarIdCreatedByTest</con:name><con:value>0</con:value></con:property><con:property><con:name>res_scheduleIsId</con:name><con:value>1207400</con:value></con:property><con:property><con:name>sarId1</con:name><con:value>30101110506</con:value></con:property><con:property><con:name>sarId2</con:name><con:value>30101110507</con:value></con:property><con:property><con:name>sarScheduleId1</con:name><con:value>4873326</con:value></con:property><con:property><con:name>sarScheduleId2</con:name><con:value>4873327</con:value></con:property><con:property><con:name>sarWTruleId</con:name><con:value>5487721</con:value></con:property><con:property><con:name>scheduleId</con:name><con:value>13925480</con:value></con:property><con:property><con:name>scheduleId1</con:name><con:value>2681962</con:value></con:property><con:property><con:name>schedulePeriod2FourthDay</con:name><con:value>2021-11-04</con:value></con:property><con:property><con:name>schedulePeriod2SecondDay</con:name><con:value>2021-11-02</con:value></con:property><con:property><con:name>schedulePeriod2SecondToLastDay</con:name><con:value>2021-11-29</con:value></con:property><con:property><con:name>schedulePeriod2ThirdDay</con:name><con:value>2021-11-03</con:value></con:property><con:property><con:name>schedulePeriodEnd</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd1</con:name><con:value>2021-10-31</con:value></con:property><con:property><con:name>schedulePeriodEnd12</con:name><con:value>2022-03-07</con:value></con:property><con:property><con:name>schedulePeriodEnd2</con:name><con:value>2021-11-30</con:value></con:property><con:property><con:name>schedulePeriodEnd3</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>schedulePeriodEnd4</con:name><con:value>2022-01-31</con:value></con:property><con:property><con:name>schedulePeriodEndPlusYear</con:name><con:value>2022-12-31</con:value></con:property><con:property><con:name>schedulePeriodNextDay</con:name><con:value>2021-10-29</con:value></con:property><con:property><con:name>schedulePeriodNextDay2</con:name><con:value>2021-11-28</con:value></con:property><con:property><con:name>schedulePeriodStart</con:name><con:value>2021-10-28</con:value></con:property><con:property><con:name>schedulePeriodStart1</con:name><con:value>2021-10-28</con:value></con:property><con:property><con:name>schedulePeriodStart2</con:name><con:value>2021-11-01</con:value></con:property><con:property><con:name>schedulePeriodStart3</con:name><con:value>2021-12-01</con:value></con:property><con:property><con:name>schedulePeriodStart4</con:name><con:value>2022-01-01</con:value></con:property><con:property><con:name>scheduleVersion1</con:name><con:value>0</con:value></con:property><con:property><con:name>scheduleVersion2</con:name><con:value>0</con:value></con:property><con:property><con:name>sheduleVersion</con:name><con:value>0</con:value></con:property><con:property><con:name>startTime</con:name><con:value>08:00:00</con:value></con:property><con:property><con:name>startTimeTR</con:name><con:value>09:00:00</con:value></con:property><con:property><con:name>treatmentId</con:name><con:value>135468844</con:value></con:property><con:property><con:name>treatmentId2</con:name><con:value>135468854</con:value></con:property><con:property><con:name>yesterday</con:name><con:value>2021-10-27</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469305</con:value></con:property><con:property><con:name>tCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tCode1</con:name><con:value>876</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tMappingCode1</con:name><con:value>600016</con:value></con:property><con:property><con:name>tMappingCodeCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469300</con:value></con:property><con:property><con:name>tCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tCode2</con:name><con:value>873</con:value></con:property><con:property><con:name>tcId2</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode2</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tMappingCode2</con:name><con:value>599907</con:value></con:property><con:property><con:name>tMappingCodeCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>epId1</con:name><con:value>146017593</con:value></con:property><con:property><con:name>epIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>dnId1</con:name><con:value>125692830</con:value></con:property><con:property><con:name>dnIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleWTTypeId1</con:name><con:value>1</con:value></con:property><con:property><con:name>sarSchruleWTTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleRejectionTypeId1</con:name><con:value>2</con:value></con:property><con:property><con:name>sarSchruleRejectionTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleAGTypeId1</con:name><con:value>5</con:value></con:property><con:property><con:name>sarSchruleAGTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleTRTypeId1</con:name><con:value>4</con:value></con:property><con:property><con:name>sarSchruleTRTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>sarSchruleRRTypeId1</con:name><con:value>7</con:value></con:property><con:property><con:name>sarSchruleRRTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>eId1</con:name><con:value>8001</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>createEntityInAppointment3</con:name><con:value>0</con:value></con:property></con:properties></con:testSuite><con:testSuite id="c2d8dadd-3a64-4158-99e5-0a3da8af523c" name="Синхронизация СДР"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4339cf09-85d7-4540-a9ea-3e1f12cf494e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Успешная первичная синхронизация" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>ScheduleWSDL</con:name><con:value>http://rir2-rir2-system.emias.solit-clouds.ru/api/Schedule?wsdl</con:value></con:property><con:property><con:name>SystemWSDL</con:name><con:value>http://rir2-rir2-system.emias.solit-clouds.ru/api/System?wsdl</con:value></con:property><con:property><con:name>SarScheduleWSDL</con:name><con:value>http://rir2-rir2-system.emias.solit-clouds.ru/api/SarSchedule?wsdl</con:value></con:property><con:property><con:name>ArScheduleWSDL</con:name><con:value>http://rir2-rir2-system.emias.solit-clouds.ru/api/ArSchedule?wsdl </con:value></con:property><con:property><con:name>RouteWSDL</con:name><con:value>http://rir2-rir2-system.emias.solit-clouds.ru/api/Route?wsdl</con:value></con:property><con:property><con:name>PushWSDL</con:name><con:value>http://rir2-rir2-system.emias.solit-clouds.ru/api/push</con:value></con:property><con:property><con:name>journalWSDL</con:name><con:value>http://rir2-rir2-system.emias.solit-clouds.ru/api/Journal</con:value></con:property><con:property><con:name>ResourcesWSDL</con:name><con:value>http://rir2-rir2-system.emias.solit-clouds.ru/api/Resources</con:value></con:property><con:property><con:name>userName</con:name><con:value>HAdiatullina</con:value></con:property><con:property><con:name>securityUsername</con:name><con:value>KPI_APC_METHODIST/HAdiatullina</con:value></con:property><con:property><con:name>systemName</con:name><con:value>KPI_APC_METHODIST</con:value></con:property><con:property><con:name>userRoleId</con:name><con:value>7014</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>112740</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>172.17.5.12:19092</con:value></con:property><con:property><con:name>db_rir2_con</con:name><con:value>@//10.2.172.21:1521/emiasdb</con:value></con:property><con:property><con:name>db_rir2_password</con:name><con:value>EMIAS_RESOURCES2</con:value></con:property><con:property><con:name>db_rir2_user</con:name><con:value>EMIAS_RESOURCES2_NEW_DEV</con:value></con:property><con:property><con:name>tableJE</con:name><con:value>JOB_EXECUTION</con:value></con:property><con:property><con:name>tableMO</con:name><con:value>MEDICAL_ORGANIZATION</con:value></con:property><con:property><con:name>tableAO</con:name><con:value>ADDRESS_OBJECT</con:value></con:property><con:property><con:name>tableMF</con:name><con:value>MEDICAL_FACILITY</con:value></con:property><con:property><con:name>tableSpec</con:name><con:value>SPECIALIZATION</con:value></con:property><con:property><con:name>tableDepNom</con:name><con:value>DEPARTMENT_NOM</con:value></con:property><con:property><con:name>tablePosNom</con:name><con:value>POSITION_NOM</con:value></con:property><con:property><con:name>tableLoc</con:name><con:value>LOCATION</con:value></con:property><con:property><con:name>tableResType</con:name><con:value>RESOURCE_TYPE</con:value></con:property><con:property><con:name>tableRes</con:name><con:value>"RESOURCE"</con:value></con:property><con:property><con:name>tableE</con:name><con:value>EQUIPMENT</con:value></con:property><con:property><con:name>tableEP</con:name><con:value>EQUIPMENT_PROFILE</con:value></con:property><con:property><con:name>tableET</con:name><con:value>EQUIPMENT_TREATMENT</con:value></con:property><con:property><con:name>tableT</con:name><con:value>TREATMENT</con:value></con:property><con:property><con:name>tableTC</con:name><con:value>TREATMENT_CATEGORY</con:value></con:property><con:property><con:name>tableRTLM</con:name><con:value>ROUTE_TREATMENT_LDP_MAPPING</con:value></con:property><con:property><con:name>tableSYSOP</con:name><con:value>SYSOP</con:value></con:property><con:property><con:name>tableMFWH</con:name><con:value>MEDICAL_FACILITY_WORKHOURS</con:value></con:property><con:property><con:name>tableSarRuleType</con:name><con:value>SAR_SCHRULE_TYPE</con:value></con:property><con:property><con:name>tableArRuleType</con:name><con:value>AR_SCHRULE_TYPE</con:value></con:property><con:property><con:name>tableAG</con:name><con:value>AGE_GROUP</con:value></con:property><con:property><con:name>tablePCalendar</con:name><con:value>PRODUCTION_CALENDAR</con:value></con:property><con:property><con:name>tableSchedule</con:name><con:value>SCHEDULE</con:value></con:property><con:property><con:name>tableResSchedule</con:name><con:value>RESOURCE_SCHEDULE</con:value></con:property><con:property><con:name>topic</con:name><con:value>ScheduleChangeProcessingStatusTest</con:value></con:property><con:property><con:name>topicJobExecution</con:name><con:value>SVMRInformerJobExecution</con:value></con:property><con:property><con:name>topicJobExecution.rir2</con:name><con:value>SVMRInformerJobExecution.rir2</con:value></con:property><con:property><con:name>topicLocation</con:name><con:value>SVMRInformerLocation</con:value></con:property><con:property><con:name>topicLocation.rir2</con:name><con:value>SVMRInformerLocation.rir2</con:value></con:property><con:property><con:name>topicLocationEquipment</con:name><con:value>SVMRInformerLocationEquipment</con:value></con:property><con:property><con:name>topicLocationEquipment.rir2</con:name><con:value>SVMRInformerLocationEquipment.rir2</con:value></con:property><con:property><con:name>topicResource</con:name><con:value>ResourceChange</con:value></con:property><con:property><con:name>topicScheduleChange</con:name><con:value>ScheduleChange</con:value></con:property><con:property><con:name>topicRoute</con:name><con:value>Rir2Routes</con:value></con:property><con:property><con:name>topicScheduleProcessing</con:name><con:value>ScheduleChangeProcessingStatus</con:value></con:property><con:property><con:name>topicScheduleProcessingTest</con:name><con:value>ScheduleChangeProcessingStatusTest</con:value></con:property><con:property><con:name>topicMF</con:name><con:value>MUMsg</con:value></con:property><con:property><con:name>topicMF.rir2</con:name><con:value>MUMsg.rir2</con:value></con:property><con:property><con:name>topicMO</con:name><con:value>MOMsg</con:value></con:property><con:property><con:name>topicMO.rir2</con:name><con:value>MOMsg.rir2</con:value></con:property><con:property><con:name>topicMF.APPOINTMENT3</con:name><con:value>MUMsg.APPOINTMENT3</con:value></con:property><con:property><con:name>topicMO.APPOINTMENT3</con:name><con:value>MOMsg.APPOINTMENT3</con:value></con:property><con:property><con:name>topicLocation.APPOINTMENT3</con:name><con:value>SVMRInformerLocation.APPOINTMENT3</con:value></con:property><con:property><con:name>topicScheduleChangeProcessingStatus</con:name><con:value>ScheduleChangeProcessingStatus</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>