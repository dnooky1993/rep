<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ec936e3e-4ff7-4b25-af8a-a3fcf2d87df4" activeEnvironment="Default" name="ЕМИАС.РиР2 ЕСУ+ синхронизаци ресурсов" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testSuite id="f632b400-614d-4ec5-9595-ac2aca6693ba" name="Обработка сообщений о создании/изменении МО"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="739045f4-bb8e-4d72-9709-19b634ff01d0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание МО_ID48651" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="85ea9bbc-d4bf-47ff-a5dc-be72f0de1045"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.getMedOrganizationIdForPush()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="c98bdb2a-e6ce-47ee-b9a6-0ebd276bf5ce"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("moId1")
def name=testRunner.testCase.testSuite.getPropertyValue("name1")
def fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
def ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn1")
def regDate=testRunner.testCase.testSuite.getPropertyValue("regDate1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalOrganizationInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:create type="MEDICAL_ORGANIZATION">"""+
		"""<ns1:attributes>"""+
			"""<ns1:name>"""+fullName+"""</ns1:name>"""+
			"""<ns1:shortName>"""+name+"""</ns1:shortName>"""+
			"""<ns1:ogrn>"""+ogrn+"""</ns1:ogrn>"""+
			"""<ns1:okopf>75203</ns1:okopf>"""+
			"""<ns1:inn>7724015205</ns1:inn>"""+
			"""<ns1:kpp>772401001</ns1:kpp>"""+
			"""<ns1:regDate>"""+regDate+"""</ns1:regDate>"""+
			"""<ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123">"""+
				"""<ns1:code>120</ns1:code>"""+
				"""<ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title>"""+
			"""</ns1:departmentAffilation>"""+
		"""</ns1:attributes>"""+
		"""<ns1:medicalOrganizationAttributes>"""+
			"""<ns1:medicalActivity ns1:fnsiId="106" id="126094986">"""+
				"""<ns1:code>106</ns1:code>"""+
				"""<ns1:title>Лаборатория</ns1:title>"""+
			"""</ns1:medicalActivity>"""+
		"""</ns1:medicalOrganizationAttributes>"""+
	"""</ns2:create>"""+
"""</ns2:medicalOrganizationInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в БД" id="c89539eb-649e-402e-9705-8dc8e839e3ac"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
format= testRunner.testCase.testSuite.getPropertyValue("format")
id=testRunner.testCase.getPropertyValue("moId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn1")
regDate=testRunner.testCase.testSuite.getPropertyValue("regDate1")
formattedRegDate=mainScripts.dates().convertStringToDate(regDate,format,format)
def mapReq=[
					id : id,
	                    archived: false ,
	                    name: name ,
	                    fullName: fullName ,
	                    ogrn: ogrn,
	                    closed: null,
	                    created: formattedRegDate
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mo.getMedOrganizationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="33bd332c-66bd-4932-9ffa-b764e9d5f53a"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d28d23da-d67d-44f8-b73a-cd8cf7ffa502" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение МО_ID48767" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать МО в БД" id="486541f4-764e-43d7-b8e7-51fd67f4ebb2"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.createMedOrganizationForPush()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="1727950f-036e-4103-b761-f4e70a3218cc"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("moId1")
def name=testRunner.testCase.testSuite.getPropertyValue("name2")
def fullName=testRunner.testCase.testSuite.getPropertyValue("fullName2")
def ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn2")
def regDate=testRunner.testCase.testSuite.getPropertyValue("regDate2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalOrganizationInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change>"""+
		"""<ns2:organizationAttributes>"""+
			"""<ns1:name>"""+fullName+"""</ns1:name>"""+
			"""<ns1:shortName>"""+name+"""</ns1:shortName>"""+
			"""<ns1:ogrn>"""+ogrn+"""</ns1:ogrn>"""+
			"""<ns1:regDate>"""+regDate+"""</ns1:regDate>"""+
		"""</ns2:organizationAttributes>"""+
	"""</ns2:change>"""+
"""</ns2:medicalOrganizationInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="751215ac-e831-4ce5-a1b0-fa7db86a3c18"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
format= testRunner.testCase.testSuite.getPropertyValue("format")
id=testRunner.testCase.getPropertyValue("moId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name2")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName2")
ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn2")
regDate=testRunner.testCase.testSuite.getPropertyValue("regDate2")
formattedRegDate=mainScripts.dates().convertStringToDate(regDate,format,format)
def mapReq=[
					id : id,
	                    archived: false ,
	                    name: name ,
	                    fullName: fullName ,
	                    ogrn: ogrn,
	                    closed: null,
	                    created: formattedRegDate
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mo.getMedOrganizationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="b3b75e32-406e-4718-9686-97718706fb0c"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="028f7978-34f2-46e4-abc9-3db089c84b44" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение МО, только параметр name" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать МО в БД" id="dcc0a568-08a5-43fa-8a8b-36dbe73c7ceb"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.createMedOrganizationForPush()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="f3c428b4-1398-4c49-8052-180d1ae9f290"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("moId1")
def name=testRunner.testCase.testSuite.getPropertyValue("name2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalOrganizationInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change>"""+
		"""<ns2:organizationAttributes>"""+
			"""<ns1:shortName>"""+name+"""</ns1:shortName>"""+
		"""</ns2:organizationAttributes>"""+
	"""</ns2:change>"""+
"""</ns2:medicalOrganizationInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="e204e8e4-49c1-4259-ae6b-672866578af1"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
format= testRunner.testCase.testSuite.getPropertyValue("format")
id=testRunner.testCase.getPropertyValue("moId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name2")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn1")
regDate=testRunner.testCase.testSuite.getPropertyValue("regDate1")
formattedRegDate=mainScripts.dates().convertStringToDate(regDate,format,format)
def mapReq=[
					id : id,
	                    archived: false ,
	                    name: name ,
	                    fullName: fullName ,
	                    ogrn: ogrn,
	                    closed: null,
	                    created: formattedRegDate
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mo.getMedOrganizationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="8a603026-9d86-4681-8b23-7ed95cc484ef"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ddce7e92-3363-4102-8f6e-91a25615902a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение МО, только параметр fullName" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать МО в БД" id="ebc786da-99c2-4c38-955e-4e6c795e1b45"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.createMedOrganizationForPush()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="bd59d110-4770-498b-b31e-43db2c78a870"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("moId1")
def name=testRunner.testCase.testSuite.getPropertyValue("name2")
def fullName=testRunner.testCase.testSuite.getPropertyValue("fullName2")
def ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn2")
def regDate=testRunner.testCase.testSuite.getPropertyValue("regDate2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalOrganizationInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change>"""+
		"""<ns2:organizationAttributes>"""+
			"""<ns1:name>"""+fullName+"""</ns1:name>"""+
		"""</ns2:organizationAttributes>"""+
	"""</ns2:change>"""+
"""</ns2:medicalOrganizationInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="f7ce441c-c8f1-4761-9a90-57466d7c802f"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
format= testRunner.testCase.testSuite.getPropertyValue("format")
id=testRunner.testCase.getPropertyValue("moId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName2")
ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn1")
regDate=testRunner.testCase.testSuite.getPropertyValue("regDate1")
formattedRegDate=mainScripts.dates().convertStringToDate(regDate,format,format)
def mapReq=[
					id : id,
	                    archived: false ,
	                    name: name ,
	                    fullName: fullName ,
	                    ogrn: ogrn,
	                    closed: null,
	                    created: formattedRegDate
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mo.getMedOrganizationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="5bb90593-6e4d-40ac-9f5a-285d786d292e"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="957ed843-682a-4b1f-98e0-37a73d07ffb6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение МО, только параметр ogrn" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать МО в БД" id="38aa255a-4e93-4937-8ab3-83a9e2c41920"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.createMedOrganizationForPush()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="1ccd9fa0-b037-4f4b-93c3-5cf210bca1e5"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("moId1")
def ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn2")


def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalOrganizationInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change>"""+
		"""<ns2:organizationAttributes>"""+
			"""<ns1:ogrn>"""+ogrn+"""</ns1:ogrn>"""+
		"""</ns2:organizationAttributes>"""+
	"""</ns2:change>"""+
"""</ns2:medicalOrganizationInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="2cdd7374-a6f3-4a0e-988a-f34b94f71eed"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
format= testRunner.testCase.testSuite.getPropertyValue("format")
id=testRunner.testCase.getPropertyValue("moId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn2")
regDate=testRunner.testCase.testSuite.getPropertyValue("regDate1")
formattedRegDate=mainScripts.dates().convertStringToDate(regDate,format,format)
def mapReq=[
					id : id,
	                    archived: false ,
	                    name: name ,
	                    fullName: fullName ,
	                    ogrn: ogrn,
	                    closed: null,
	                    created: formattedRegDate
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mo.getMedOrganizationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="86351e41-a2d4-44fb-af3e-988a05a5f527"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3fd5b5c1-c547-4037-a44b-3e74eeff7553" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение МО, изменение только created" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать МО в БД" id="8142aff5-46cc-4d3f-903f-5036ea3c468c"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.createMedOrganizationForPush()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="f2f78cbc-04c2-4075-a516-14d38c10063b"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("moId1")
def regDate=testRunner.testCase.testSuite.getPropertyValue("regDate2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalOrganizationInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change>"""+
		"""<ns2:organizationAttributes>"""+
			"""<ns1:regDate>"""+regDate+"""</ns1:regDate>"""+
		"""</ns2:organizationAttributes>"""+
	"""</ns2:change>"""+
"""</ns2:medicalOrganizationInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="be9800c6-aaa6-433c-8ae7-19810d4b7be9"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
format= testRunner.testCase.testSuite.getPropertyValue("format")
id=testRunner.testCase.getPropertyValue("moId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn1")
regDate=testRunner.testCase.testSuite.getPropertyValue("regDate2")
formattedRegDate=mainScripts.dates().convertStringToDate(regDate,format,format)
def mapReq=[
					id : id,
	                    archived: false ,
	                    name: name ,
	                    fullName: fullName ,
	                    ogrn: ogrn,
	                    closed: null,
	                    created: formattedRegDate
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mo.getMedOrganizationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="a80f79ed-a028-4c69-b0f8-a872ab743946"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0a4ffaf5-9e00-4d27-b57b-4889661ddc2a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Архивирование МО_ID48693" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать МО в БД" id="d2f8e55c-06a9-415e-aa05-7858c9b207ec"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.createMedOrganizationForPush()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="1bbb63a8-c0b1-4eea-ab32-33c824bc4ddc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("moId1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""&lt;ns2:medicalOrganizationInfoMsg id=\""""+id+"""\" """+
   """ xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" """+
   """ xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" """+
   """ xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" """+
 """   xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/""""+
   """ xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
    """&lt;ns2:archive archived="true"/>"""+
"""&lt;/ns2:medicalOrganizationInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="1f7da9c1-289f-43a7-befd-f41b4feca53e"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
format= testRunner.testCase.testSuite.getPropertyValue("format")
id=testRunner.testCase.getPropertyValue("moId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn1")
regDate=testRunner.testCase.testSuite.getPropertyValue("regDate1")
formattedRegDate=mainScripts.dates().convertStringToDate(regDate,format,format)
def mapReq=[
					id : id,
	                    archived: true ,
	                    name: name ,
	                    fullName: fullName ,
	                    ogrn: ogrn,
	                    closed: null,
	                    created: formattedRegDate
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mo.getMedOrganizationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="930927d3-1f2f-4b5d-bc35-c37291b053f8"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8fc03ebd-2ee7-4e55-ac0f-d6dff7541c87" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Вывод из архива МО_ID48782" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать МО в БД" id="f356ac43-6a21-4d43-927a-ec6255473af0"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.createMedOrganizationForPush(true)
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="62a9d4a4-a7f1-4ac9-b3f6-0f872d1f95b0"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("archivedMoId1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""&lt;ns2:medicalOrganizationInfoMsg id=\""""+id+"""\" """+
   """ xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" """+
   """ xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" """+
   """ xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" """+
 """   xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/""""+
   """ xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
    """&lt;ns2:archive archived="false"/>"""+
"""&lt;/ns2:medicalOrganizationInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="01fe9d71-e1d1-4042-a350-28de0777e4c6"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
format= testRunner.testCase.testSuite.getPropertyValue("format")
id=testRunner.testCase.getPropertyValue("moId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
ogrn=testRunner.testCase.testSuite.getPropertyValue("ogrn1")
regDate=testRunner.testCase.testSuite.getPropertyValue("regDate1")
formattedRegDate=mainScripts.dates().convertStringToDate(regDate,format,format)
def mapReq=[
					id : id,
	                    archived: true ,
	                    name: name ,
	                    fullName: fullName ,
	                    ogrn: ogrn,
	                    closed: null,
	                    created: formattedRegDate
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mo.getMedOrganizationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="7be8ddaa-53cd-46b8-b440-5d273d09b928"><con:settings/><con:config><script>def mo = new MedOrganizations(context, testRunner, log)
mo.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>topicName</con:name><con:value>topicMO.rir2</con:value></con:property><con:property><con:name>name1</con:name><con:value>МО для пуша автотест</con:value></con:property><con:property><con:name>name2</con:name><con:value>Короткое имя МО автотест2</con:value></con:property><con:property><con:name>fullName1</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "МО для пуша автотест"</con:value></con:property><con:property><con:name>fullName2</con:name><con:value>Полное имя МО автотест2</con:value></con:property><con:property><con:name>ogrn1</con:name><con:value>1037739121056</con:value></con:property><con:property><con:name>ogrn2</con:name><con:value>21353757658668</con:value></con:property><con:property><con:name>regDate1</con:name><con:value>1991-12-25</con:value></con:property><con:property><con:name>regDate2</con:name><con:value>2000-01-02</con:value></con:property><con:property><con:name>n</con:name><con:value>58</con:value></con:property><con:property><con:name>format</con:name><con:value>yyyy-MM-dd</con:value></con:property></con:properties></con:testSuite><con:testSuite id="bd0d3a65-4bb0-46de-9d20-2ccea659e2d3" name="Обработка сообщений о создании/изменении МУ"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5b4cd4a3-de6d-4199-984e-52d5da618511" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание МУ и АО" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="405a7fb9-f347-4747-b06d-b3e1e5487034"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.getMedicalFacilityIdForPush()
mf.mainScripts.dates().saveCurrentDateToProperty()

sleep(1000)</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="506fdad4-6973-41ce-ace2-d067bdf22f6d"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def aoId=testRunner.testCase.getPropertyValue("aoId1")

def name=testRunner.testCase.testSuite.getPropertyValue("name1")
def fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
def shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
def address=testRunner.testCase.testSuite.getPropertyValue("address1")
def addressShortId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1")
def created=testRunner.testCase.testSuite.getPropertyValue("created1")
def closed=testRunner.testCase.testSuite.getPropertyValue("closed1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:create isHead="true">"""+
		"""<ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\">"""+
			"""<ns1:shortName>Тестовая MO</ns1:shortName>"""+
		"""</ns1:medicalOrganization>"""+
		"""<ns1:name>"""+name+"""</ns1:name>"""+
		"""<ns1:shortName>"""+shortName+"""</ns1:shortName>"""+
		"""<ns1:independence id="1">"""+
			"""<ns1:code>1</ns1:code>"""+
			"""<ns1:title>Филиал</ns1:title>"""+
		"""</ns1:independence>"""+
		"""<ns1:parentMedicalFacility id="125694305"/>"""+
		"""<ns1:medicalFacilityType id="125694305">"""+
			"""<ns1:code>39</ns1:code>"""+
			"""<ns1:title>Городская поликлиника</ns1:title>"""+
		"""</ns1:medicalFacilityType>"""+
		"""<ns1:periodStart>"""+created+"""</ns1:periodStart>"""+
		"""<ns1:periodEnd>"""+closed+"""</ns1:periodEnd>"""+
		"""<ns1:clo>568</ns1:clo>"""+
		"""<ns1:mgfoms>3434</ns1:mgfoms>"""+
		"""<ns2:addressObject archived="false" id=\""""+aoId+"""\">"""+
			"""<ns1:addressShort id=\""""+addressShortId+"""\">"""+
				"""<ns1:addressString>"""+address+"""</ns1:addressString>"""+
			"""</ns1:addressShort>"""+
		"""</ns2:addressObject>"""+
	"""</ns2:create>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание МУ и АО" id="6b4fd75d-14d3-47e9-a1d7-58f69ca1d71e"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)
log.info formatedCurrentDate
Map aoReqMap=[
                    id : aoId,
                    archived: false ,
                    globalId: globalId ,
                    address: address ,
                    updated: formatedCurrentDate
]
//найти созданную в бд запись и собрать ее в мапу
Map aoDbMap=mf.getAOMap(aoId)
// сравнить две мапы если запись создана
if(aoDbMap) mf.compareAOMaps(aoReqMap,aoDbMap, true )

def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: name ,
                    isHead: true,
                    aoId: aoId,
                    closed: formatedClosed,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="4613fa8c-d88e-4ec5-b170-f85b1d521bf1"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:22:47</con:value></con:property></con:properties></con:testCase><con:testCase id="fab4f1d5-9058-4ab0-b33d-4e3237aff79b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание МУ, запись только обязательных параметров" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="36a737c3-8254-4852-84d7-8de7e98b2fff"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.getMedicalFacilityIdForPush()
mf.mainScripts.dates().saveCurrentDateToProperty()

sleep(1000)</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="c31a6bbe-2573-45cd-a1c5-9a12f8b6aed3"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def aoId=testRunner.testCase.getPropertyValue("aoId1")

def name=testRunner.testCase.testSuite.getPropertyValue("name1")
def fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
def shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
def address=testRunner.testCase.testSuite.getPropertyValue("address1")
def addressShortId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1")
def created=testRunner.testCase.testSuite.getPropertyValue("created1")
def closed=testRunner.testCase.testSuite.getPropertyValue("closed1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:create isHead="true">"""+
		"""<ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\">"""+
			"""<ns1:shortName>Тестовая MO</ns1:shortName>"""+
		"""</ns1:medicalOrganization>"""+
		"""<ns1:name>"""+name+"""</ns1:name>"""+
		"""<ns1:shortName>"""+shortName+"""</ns1:shortName>"""+
		"""<ns1:independence id="1">"""+
			"""<ns1:code>1</ns1:code>"""+
			"""<ns1:title>Филиал</ns1:title>"""+
		"""</ns1:independence>"""+
		"""<ns1:medicalFacilityType id="125694305">"""+
			"""<ns1:code>39</ns1:code>"""+
			"""<ns1:title>Городская поликлиника</ns1:title>"""+
		"""</ns1:medicalFacilityType>"""+
		"""<ns1:periodStart>"""+created+"""</ns1:periodStart>"""+
		"""<ns2:addressObject archived="false" id=\""""+aoId+"""\">"""+
			"""<ns1:addressShort id=\""""+addressShortId+"""\">"""+
				"""<ns1:addressString>"""+address+"""</ns1:addressString>"""+
			"""</ns1:addressShort>"""+
		"""</ns2:addressObject>"""+
	"""</ns2:create>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание МУ и АО" id="64b71e2b-a839-4a63-9342-7c07ec839a3b"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)
log.info formatedCurrentDate
Map aoReqMap=[
                    id : aoId,
                    archived: false ,
                    globalId: globalId ,
                    address: address ,
                    updated: formatedCurrentDate
]
//найти созданную в бд запись и собрать ее в мапу
Map aoDbMap=mf.getAOMap(aoId)
// сравнить две мапы если запись создана
if(aoDbMap) mf.compareAOMaps(aoReqMap,aoDbMap, true )

def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: name ,
                    isHead: true,
                    aoId: aoId,
                    closed: null,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="b1629feb-afd1-47c6-b16e-e9ca48363f56"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:22:49</con:value></con:property><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="c7e19ee5-613a-4c5b-8f0d-74bd1cc581d8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание МУ с существующим АО" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="d8cf6faf-3936-486f-b08d-ae6567137cf8"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.getMedicalFacilityIdForPush(true)
mf.mainScripts.dates().saveCurrentDateToProperty()

sleep(1000)</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="b324cb0b-fc68-4dca-b2bc-340ae14ec99c"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def aoId=testRunner.testCase.getPropertyValue("aoId1")

def name=testRunner.testCase.testSuite.getPropertyValue("name1")
def fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
def shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
def address=testRunner.testCase.testSuite.getPropertyValue("address1")
def addressShortId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1")
def created=testRunner.testCase.testSuite.getPropertyValue("created1")
def closed=testRunner.testCase.testSuite.getPropertyValue("closed1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:create isHead="true">"""+
		"""<ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\">"""+
			"""<ns1:shortName>Тестовая MO</ns1:shortName>"""+
		"""</ns1:medicalOrganization>"""+
		"""<ns1:name>"""+name+"""</ns1:name>"""+
		"""<ns1:shortName>"""+shortName+"""</ns1:shortName>"""+
		"""<ns1:independence id="1">"""+
			"""<ns1:code>1</ns1:code>"""+
			"""<ns1:title>Филиал</ns1:title>"""+
		"""</ns1:independence>"""+
		"""<ns1:parentMedicalFacility id="125694305"/>"""+
		"""<ns1:medicalFacilityType id="125694305">"""+
			"""<ns1:code>39</ns1:code>"""+
			"""<ns1:title>Городская поликлиника</ns1:title>"""+
		"""</ns1:medicalFacilityType>"""+
		"""<ns1:periodStart>"""+created+"""</ns1:periodStart>"""+
		"""<ns1:periodEnd>"""+closed+"""</ns1:periodEnd>"""+
		"""<ns1:clo>568</ns1:clo>"""+
		"""<ns1:mgfoms>3434</ns1:mgfoms>"""+
		"""<ns2:addressObject archived="false" id=\""""+aoId+"""\">"""+
			"""<ns1:addressShort id=\""""+addressShortId+"""\">"""+
				"""<ns1:addressString>"""+address+"""</ns1:addressString>"""+
			"""</ns1:addressShort>"""+
		"""</ns2:addressObject>"""+
	"""</ns2:create>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице medical_facility" id="cd86d176-a540-4ecd-bbd7-06ca4195c681"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)
log.info formatedCurrentDate
Map aoReqMap=[
                    id : aoId,
                    archived: false ,
                    globalId: globalId ,
                    address: address ,
                    updated: null
]
//найти созданную в бд запись и собрать ее в мапу
Map aoDbMap=mf.getAOMap(aoId)
// сравнить две мапы если запись создана
if(aoDbMap) mf.compareAOMaps(aoReqMap,aoDbMap, false )

def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: name ,
                    isHead: true,
                    aoId: aoId,
                    closed: formatedClosed,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="3b80afeb-2543-49a0-b869-122b6dc9aae1"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:22:51</con:value></con:property><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="f32453b6-6174-40b0-b851-107df205e7c2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение всех параметров МУ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="997f9bf1-eeae-4b09-9e36-2c80fe4f4c22"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.createMedicalFacilityForEsu(false,true,true )
mf.mainScripts.dates().saveCurrentDateToProperty()

sleep(1000)</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="9a516821-ef23-4664-b9eb-8cebd7fcd97b"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def aoId=testRunner.testCase.getPropertyValue("aoId2")

def name=testRunner.testCase.testSuite.getPropertyValue("name2")
def fullName=testRunner.testCase.testSuite.getPropertyValue("fullName2")
def shortName=testRunner.testCase.testSuite.getPropertyValue("shortName2")
def address=testRunner.testCase.testSuite.getPropertyValue("address1")
def addressShortId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1")
def created=testRunner.testCase.testSuite.getPropertyValue("created2")
def closed=testRunner.testCase.testSuite.getPropertyValue("closed2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change isHead="false">"""+
		"""<ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\">"""+
			"""<ns1:shortName>Тестовая MO</ns1:shortName>"""+
		"""</ns1:medicalOrganization>"""+
		"""<ns1:name>"""+name+"""</ns1:name>"""+
		"""<ns1:shortName>"""+shortName+"""</ns1:shortName>"""+
		"""<ns1:independence id="1">"""+
			"""<ns1:code>1</ns1:code>"""+
			"""<ns1:title>Филиал</ns1:title>"""+
		"""</ns1:independence>"""+
		"""<ns1:parentMedicalFacility id="125694305"/>"""+
		"""<ns1:medicalFacilityType id="125694305">"""+
			"""<ns1:code>39</ns1:code>"""+
			"""<ns1:title>Городская поликлиника</ns1:title>"""+
		"""</ns1:medicalFacilityType>"""+
		"""<ns1:periodStart>"""+created+"""</ns1:periodStart>"""+
		"""<ns1:periodEnd>"""+closed+"""</ns1:periodEnd>"""+
		"""<ns1:clo>568</ns1:clo>"""+
		"""<ns1:mgfoms>3434</ns1:mgfoms>"""+
		"""<ns2:addressObject archived="false" id=\""""+aoId+"""\">"""+
			"""<ns1:addressShort id=\""""+addressShortId+"""\">"""+
				"""<ns1:addressString>"""+address+"""</ns1:addressString>"""+
			"""</ns1:addressShort>"""+
		"""</ns2:addressObject>"""+
	"""</ns2:change>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="86c27d6e-bc59-4464-8639-a0090b5d993d"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name2")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName2")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName2")
address=testRunner.testCase.testSuite.getPropertyValue("address2")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId2").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created2")
closed=testRunner.testCase.testSuite.getPropertyValue("closed2")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)


def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: name ,
                    isHead: false,
                    aoId: aoId,
                    closed: formatedClosed,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="2a55daaa-a035-4570-a385-6ca0580de1e7"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMO</con:name><con:value>2</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:22:53</con:value></con:property></con:properties></con:testCase><con:testCase id="48e9a55b-02e9-4dec-880c-19430ee30192" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Архивация МУ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="d7562125-1f05-4b5e-86aa-4508b106033c"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.createMedicalFacilityForEsu( )
mf.mainScripts.dates().saveCurrentDateToProperty()

sleep(1000)</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="1b8533ae-62ab-4598-a595-34d3d1ca0f81"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""&lt;ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""&lt;ns2:archive archived="true"/>"""+
"""&lt;/ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="0ccc1b0f-3eb9-4862-ba6f-fe4c778b52fd"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)
log.info formatedCurrentDate
Map aoReqMap=[
                    id : aoId,
                    archived: false ,
                    globalId: globalId ,
                    address: address ,
                    updated: null
]
//найти созданную в бд запись и собрать ее в мапу
Map aoDbMap=mf.getAOMap(aoId)
// сравнить две мапы если запись создана
if(aoDbMap) mf.compareAOMaps(aoReqMap,aoDbMap, false )

def mapReq=[
				id : id,
                    archived: true  ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: fullName ,
                    isHead: false,
                    aoId: null,
                    closed: null,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="2e8219a6-dc6a-4b00-baa0-894771bc7bcb"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()</script></con:config></con:testStep><con:properties><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:22:55</con:value></con:property></con:properties></con:testCase><con:testCase id="b651d51f-426a-4b41-a4e7-a9b49f9127b1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Вывод из архива МУ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="39f62481-beb4-410b-85af-f28bc2ad1d7b"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.createMedicalFacilityForEsu(true )
mf.mainScripts.dates().saveCurrentDateToProperty()

sleep(1000)</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="69bbcdda-31d1-4bb9-a7b8-40e53f73a176"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""&lt;ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""&lt;ns2:archive archived="false"/>"""+
"""&lt;/ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="55aae975-783c-490e-bab5-91e385f19c44"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)
log.info formatedCurrentDate
Map aoReqMap=[
                    id : aoId,
                    archived: false ,
                    globalId: globalId ,
                    address: address ,
                    updated: null
]
//найти созданную в бд запись и собрать ее в мапу
Map aoDbMap=mf.getAOMap(aoId)
// сравнить две мапы если запись создана
if(aoDbMap) mf.compareAOMaps(aoReqMap,aoDbMap, false )

def mapReq=[
				id : id,
                    archived: false  ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: fullName ,
                    isHead: false,
                    aoId: null,
                    closed: null,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="467a3030-8f0c-4f29-9355-98efd55489ce"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()</script></con:config></con:testStep><con:properties><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:22:57</con:value></con:property></con:properties></con:testCase><con:testCase id="97d67c36-91fb-43d6-b974-b967d4370e00" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение только параметра isHead у МУ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="b1fc7323-1067-41e1-bc24-56288a95a7f3"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.createMedicalFacilityForEsu(false,true )
mf.mainScripts.dates().saveCurrentDateToProperty()

sleep(1000)</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение с isHead=false" id="49f66f6c-5afc-4729-97a1-a4f59409a5fe"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""&lt;ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""&lt;ns2:change isHead="false">"""+
	"""&lt;/ns2:change>"""+
"""&lt;/ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="db6ba13b-3436-4561-b021-b83a001f922b"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)


def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: fullName ,
                    isHead: false,
                    aoId: null,
                    closed: null,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение с isHead=true" id="db5c01c3-1a03-4204-92ed-bf72c9290b41"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""&lt;ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""&lt;ns2:change isHead="true">"""+
	"""&lt;/ns2:change>"""+
"""&lt;/ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility 2" id="998e9f55-c96b-42b3-9c8e-9393808888cf"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)


def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: fullName ,
                    isHead: true,
                    aoId: null,
                    closed: null,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="5a833245-40cf-4557-b71f-1b5ace4bec34"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:22:58</con:value></con:property></con:properties></con:testCase><con:testCase id="0376ff6b-8dd8-4d1e-88d8-c585c52c2719" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение только параметра МО у МУ" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="7dc57ea2-1934-4eeb-a087-8819e2a39eab"><con:settings/><con:config><script>def MedOrganizations = new MedOrganizations(context, testRunner, log)

MedOrganizations.createStructureOfMO(1)
MedOrganizations.createMo(1, "otherMoId")

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="7de07253-f8b9-433a-94d5-96fe887b711b"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")
def moId=testRunner.testCase.getPropertyValue("otherMoId")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change >"""+
		"""<ns1:medicalOrganization type="MEDICAL_ORGANIZATION" archived="false" id=\""""+moId+"""\">"""+
			"""<ns1:shortName>Тестовая MO</ns1:shortName>"""+
		"""</ns1:medicalOrganization>"""+
	"""</ns2:change>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="68783826-e4a0-4345-ab4f-3396c86c11e8"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableMF")
id = testRunner.testCase.getPropertyValue("mfId1")
getLastItem = "SELECT * FROM "+table+"  WHERE ID="+id
lastItem= sql.rows(getLastItem)
if ( lastItem.size()== 0){
		testRunner.fail("Запись в таблице "+table+" с id ="+id+"  не найдена")
}
else {
	log.info("Запись в таблице  "+table+" с id ="+id+"  найдена")
	//log.info(lastItem)

	def req_moId = testRunner.testCase.getPropertyValue("otherMoId1")
	
	def db_moId = lastItem[0].medical_organization_id.toString()

	assert db_moId ==req_moId

	log.info("Запись в таблице изменена корректно.")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="9ad9e8a6-65ab-4e1f-9658-e42afeeb849d"><con:settings/><con:config><script>def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(1)
MedOrganizations.clearMO(1, "otherMoId")</script></con:config></con:testStep><con:properties><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="123b1ee9-ab2e-4c34-9b76-885b7fe79ab7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение только параметра name у МУ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="d0efba7d-13a0-4847-9529-478b3484a0b9"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.createMedicalFacilityForEsu()
mf.mainScripts.dates().saveCurrentDateToProperty()</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="4547be80-b116-460d-a2b8-5779d7ea875f"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")

def name=testRunner.testCase.testSuite.getPropertyValue("name2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change>"""+
		"""<ns1:name>"""+name+"""</ns1:name>"""+
	"""</ns2:change>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="991f3ad9-6fd2-4257-a04e-c6cdb27afc75"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name2")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)


def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: name ,
                    isHead: false,
                    aoId: null,
                    closed: null,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="efaaafc6-b172-4dc7-9ce3-fe86b52dd21e"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:23:01</con:value></con:property></con:properties></con:testCase><con:testCase id="25174222-d902-4caa-afb4-58cf06664979" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение только параметра shortName у МУ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="b5074e64-c658-4aab-a521-e23d443b3ec6"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.createMedicalFacilityForEsu()
mf.mainScripts.dates().saveCurrentDateToProperty()</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="a77eee56-6524-472e-88dc-3031d70099c2"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")

def shortName=testRunner.testCase.testSuite.getPropertyValue("shortName2")


def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change >"""+
		"""<ns1:shortName>"""+shortName+"""</ns1:shortName>"""+
	"""</ns2:change>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="02a11799-5eb3-4b29-8ff6-99cac1f25d6a"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName2")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)


def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: fullName ,
                    isHead: false,
                    aoId: null,
                    closed: null,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="a5b54bbc-7936-4558-8717-c052ac9c3cd3"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:23:02</con:value></con:property></con:properties></con:testCase><con:testCase id="c80142d2-9c3b-4f30-833b-b01117dbe572" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение только параметра created у МУ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="f4455627-a497-4054-8d48-bd5eb56b0164"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.createMedicalFacilityForEsu()
mf.mainScripts.dates().saveCurrentDateToProperty()</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="fff19c3e-92d2-4583-b104-a529ea32adc9"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")

def created=testRunner.testCase.testSuite.getPropertyValue("created2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change >"""+
		"""<ns1:periodStart>"""+created+"""</ns1:periodStart>"""+
	"""</ns2:change>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="8751a2f3-1e10-40e8-a8d0-be7fa13208d4"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created2")
closed=testRunner.testCase.testSuite.getPropertyValue("closed1")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)


def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: fullName ,
                    isHead: false,
                    aoId: null,
                    closed: null,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="e574d9b2-260a-4fe8-a899-b919cc8ed767"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:23:02</con:value></con:property></con:properties></con:testCase><con:testCase id="2216577d-c394-4ffd-b9c4-f7fa64b83542" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение только параметра closed у МУ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="1c53b7ac-c6af-4234-8bb4-bc9d5a60bfed"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.createMedicalFacilityForEsu()
mf.mainScripts.dates().saveCurrentDateToProperty()</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="0f74da73-52be-495e-9e07-c76063e0a1a9"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("mfId1")

def closed=testRunner.testCase.testSuite.getPropertyValue("closed2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns2:medicalFacilityInfoMsg id=\""""+id+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns2:change >"""+
		"""<ns1:periodEnd>"""+closed+"""</ns1:periodEnd>"""+
	"""</ns2:change>"""+
"""</ns2:medicalFacilityInfoMsg>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в таблице medical_facility" id="f22bed5f-0c52-4e6a-892b-7e57821789b8"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def mf = new MedicalFacility(context, testRunner, log)

dateTimeFormat=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
dateTimeFormat2=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat2")
dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")

id=testRunner.testCase.getPropertyValue("mfId1").toLong()
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
aoId=testRunner.testCase.getPropertyValue("aoId1").toLong()
name=testRunner.testCase.testSuite.getPropertyValue("name1")
fullName=testRunner.testCase.testSuite.getPropertyValue("fullName1")
shortName=testRunner.testCase.testSuite.getPropertyValue("shortName1")
address=testRunner.testCase.testSuite.getPropertyValue("address1")
globalId=testRunner.testCase.testSuite.getPropertyValue("addressShortId1").toLong()
created=testRunner.testCase.testSuite.getPropertyValue("created1")
closed=testRunner.testCase.testSuite.getPropertyValue("closed2")
currentDate=testRunner.testCase.getPropertyValue("currentDate")
formatedCreated=mainScripts.dates().convertStringToDate(created,dateFormat,dateFormat)
formatedClosed=mainScripts.dates().convertStringToDate(closed,dateFormat,dateFormat)
formatedCurrentDate=mainScripts.dates().convertStringToDate(currentDate,dateTimeFormat,dateTimeFormat2)


def mapReq=[
				id : id,
                    archived: false ,
                    moId: moId ,
                    name: name ,
                    shortName: shortName ,
                    fullName: fullName ,
                    isHead: false,
                    aoId: null,
                    closed: formatedClosed,
                    created: formatedCreated
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=mf.getMedicalFacilityMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="640e0bbc-b4ad-4578-a5b3-084c81a80959"><con:settings/><con:config><script>def mf = new MedicalFacility(context, testRunner, log)
mf.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMO</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-21 18:23:03</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>address1</con:name><con:value>город Москва, улица Родионовская, дом 10, корпус 2</con:value></con:property><con:property><con:name>address2</con:name><con:value>Адрес автотест2</con:value></con:property><con:property><con:name>name1</con:name><con:value>обычное имя МУ автотест </con:value></con:property><con:property><con:name>name2</con:name><con:value>Название МУ2</con:value></con:property><con:property><con:name>shortName1</con:name><con:value>короткое имя МУ автотест </con:value></con:property><con:property><con:name>shortName2</con:name><con:value>Короткое название МУ2</con:value></con:property><con:property><con:name>fullName1</con:name><con:value>полное имя МУ автотест </con:value></con:property><con:property><con:name>fullName2</con:name><con:value>Полное название МУ автотест2</con:value></con:property><con:property><con:name>created1</con:name><con:value>1991-12-25</con:value></con:property><con:property><con:name>created2</con:name><con:value>2000-01-02</con:value></con:property><con:property><con:name>closed1</con:name><con:value>2001-01-01</con:value></con:property><con:property><con:name>closed2</con:name><con:value>2001-01-02</con:value></con:property><con:property><con:name>topicName</con:name><con:value>topicMF.rir2</con:value></con:property><con:property><con:name>addressShortId1</con:name><con:value>73086779</con:value></con:property><con:property><con:name>addressShortId2</con:name><con:value>1234</con:value></con:property><con:property><con:name>dateTimeFormat</con:name><con:value>yyyy-MM-dd HH:mm:ss</con:value></con:property><con:property><con:name>dateFormat</con:name><con:value>yyyy-MM-dd</con:value></con:property><con:property><con:name>dateTimeFormat2</con:name><con:value>yyyy-MM-dd HH:mm:ss.SSS</con:value></con:property></con:properties></con:testSuite><con:testSuite id="826a44ea-eeac-4336-8060-72cba92a98ff" name="Обработка сообщения о создании/изменении Локации"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ced08b5b-bb61-4a17-8b72-0ddf1cfe9889" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание локации со всеми параметрами и archived=false" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="00b87055-d72c-40ed-b92e-6a9a6cbef984"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.getNonexistentLocationIdForEsu()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="b10450a2-f3aa-48e5-a019-c733a9d772b0"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("locId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def specId=testRunner.testCase.getPropertyValue("specId1")

def roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle1")
def stage=testRunner.testCase.testSuite.getPropertyValue("stage1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns4:location archived="false" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns4:roomTitle>"""+roomTitle+"""</ns4:roomTitle>"""+
	"""<ns4:stage>"""+stage+"""</ns4:stage>"""+
	"""<ns4:building id="13">"""+
		"""<ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress>"""+
	"""</ns4:building>"""+
	"""<ns4:specializationId>"""+specId+"""</ns4:specializationId>"""+
	"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""</ns4:location>"""


scripts.kafka().sendMessageToKafka2(topicName,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в БД" id="c7cb1437-b424-4412-9d05-4ec2edcd3e7e"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def loc = new Location(context, testRunner, log)

id=testRunner.testCase.getPropertyValue("locId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
specId=testRunner.testCase.getPropertyValue("specId1").toLong()
roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle1")
stage=testRunner.testCase.testSuite.getPropertyValue("stage1").toLong()

def mapReq=[
                    id : id,
                    archived: false ,
                    roomTitle: roomTitle,
                    stage: stage ,
                    mfId: mfId ,
                    specId: specId
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=loc.getLocationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="2adc997c-8caf-4145-bfb8-3ec301932113"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMf</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="c37df8c8-a400-46df-9911-a555c5f14892" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание локации со всеми параметрами и archived=true" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="0efdc4a5-ed85-43e0-a6d5-8d965602e30a"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.getNonexistentLocationIdForEsu()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="b833fbe6-9690-4981-8ceb-559fa80d8347"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("locId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def specId=testRunner.testCase.getPropertyValue("specId1")

def roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle1")
def stage=testRunner.testCase.testSuite.getPropertyValue("stage1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns4:location archived="true" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns4:roomTitle>"""+roomTitle+"""</ns4:roomTitle>"""+
	"""<ns4:stage>"""+stage+"""</ns4:stage>"""+
	"""<ns4:building id="13">"""+
		"""<ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress>"""+
	"""</ns4:building>"""+
	"""<ns4:specializationId>"""+specId+"""</ns4:specializationId>"""+
	"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""</ns4:location>"""


scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в БД" id="d47dc8f2-c53a-4653-91f8-d8d643b4badc"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def loc = new Location(context, testRunner, log)

id=testRunner.testCase.getPropertyValue("locId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
specId=testRunner.testCase.getPropertyValue("specId1").toLong()
roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle1")
stage=testRunner.testCase.testSuite.getPropertyValue("stage1").toLong()

def mapReq=[
                    id : id,
                    archived: true ,
                    roomTitle: roomTitle,
                    stage: stage ,
                    mfId: mfId ,
                    specId: specId
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=loc.getLocationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="aafc35fa-a7c5-42f5-a72c-d77c71782dd4"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMf</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="6df98584-4ff4-4d05-aed5-4894e8c388be" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание локации только с обязательными параметрами" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="c1fc7b84-775c-410f-a769-fe0e7f21cc35"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.getNonexistentLocationIdForEsu()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="6fe0a2f9-6afd-45a9-b666-225d0db582c9"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("locId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle1")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns4:location  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns4:roomTitle>"""+roomTitle+"""</ns4:roomTitle>"""+
	"""<ns4:building id="13">"""+
		"""<ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress>"""+
	"""</ns4:building>"""+
	"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""</ns4:location>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в БД" id="af1be3e7-f299-4b6c-85bf-5e40af93b1d8"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def loc = new Location(context, testRunner, log)

id=testRunner.testCase.getPropertyValue("locId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
specId=testRunner.testCase.getPropertyValue("specId1").toLong()
roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle1")
stage=testRunner.testCase.testSuite.getPropertyValue("stage1").toLong()

def mapReq=[
                    id : id,
                    archived: false ,
                    roomTitle: roomTitle,
                    stage: null ,
                    mfId: mfId ,
                    specId: null
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=loc.getLocationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="85d60f26-1977-4065-a4d2-2f0216ad5949"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMf</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="1bf8ab14-8461-4700-9605-99b10bc1f3f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение всех параметров и архивация локации" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="ca868b52-393b-4891-bb36-727a298feb57"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.createLocationForEsu()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="9582e26d-050d-4bf4-9193-14c8ffde1535"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("locId1")
def mfId=testRunner.testCase.getPropertyValue("mfId2")
def specId=testRunner.testCase.getPropertyValue("specId1")

def roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle2")
def stage=testRunner.testCase.testSuite.getPropertyValue("stage2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns4:location archived="true" id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns4:roomTitle>"""+roomTitle+"""</ns4:roomTitle>"""+
	"""<ns4:stage>"""+stage+"""</ns4:stage>"""+
	"""<ns4:building id="13">"""+
		"""<ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress>"""+
	"""</ns4:building>"""+
	"""<ns4:specializationId>"""+specId+"""</ns4:specializationId>"""+
	"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""</ns4:location>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="45c3eeca-3567-4ae9-a8a5-ccc83d1e2fe2"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def loc = new Location(context, testRunner, log)

id=testRunner.testCase.getPropertyValue("locId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId2").toLong()
specId=testRunner.testCase.getPropertyValue("specId1").toLong()
roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle2")
stage=testRunner.testCase.testSuite.getPropertyValue("stage2").toLong()

def mapReq=[
                    id : id,
                    archived: true ,
                    roomTitle: roomTitle,
                    stage: stage ,
                    mfId: mfId ,
                    specId: specId
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=loc.getLocationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="385431d3-0c70-4584-a2c1-3c006b8316a6"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMf</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:testCase id="c1c429cc-d153-4f3d-8933-f09105783c4a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение только обязательных параметров локации" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать id" id="c70c369a-41ef-4042-8fb0-44644d9d7737"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.createLocationForEsu(true,true)
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="6b5dc82e-6832-472a-809c-91a585e0e097"><con:settings/><con:config><script><![CDATA[def scripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("locId1")
def mfId=testRunner.testCase.getPropertyValue("mfId2")
def specId=testRunner.testCase.getPropertyValue("specId2")

def roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle2")
def stage=testRunner.testCase.testSuite.getPropertyValue("stage2")

def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<ns4:location  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
	"""<ns4:roomTitle>"""+roomTitle+"""</ns4:roomTitle>"""+
	"""<ns4:building id="13">"""+
		"""<ns5:buildingAddress>город Москва, улица Челябинская, дом 16, корпус 2</ns5:buildingAddress>"""+
	"""</ns4:building>"""+
	"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""</ns4:location>"""

scripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в БД" id="6a352f18-5e74-4649-ab27-4881055e08fe"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def loc = new Location(context, testRunner, log)

id=testRunner.testCase.getPropertyValue("locId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId2").toLong()
specId=testRunner.testCase.getPropertyValue("specId1").toLong()
roomTitle=testRunner.testCase.testSuite.getPropertyValue("roomTitle2")
stage=testRunner.testCase.testSuite.getPropertyValue("stage1").toLong()

def mapReq=[
                    id : id,
                    archived: false ,
                    roomTitle: roomTitle,
                    stage: null ,
                    mfId: mfId ,
                    specId: null
                ]
                
//найти созданную в бд запись и собрать ее в мапу
dbMap=loc.getLocationMap(id)
// сравнить две мапы если запись создана
if(dbMap) mainScripts.utils().compareMaps(mapReq,dbMap )

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="e8441693-22a5-43e1-ae8e-d7500e3f4846"><con:settings/><con:config><script>def loc = new Location(context, testRunner, log)
loc.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>counterMf</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>roomTitle1</con:name><con:value>Локация автотест</con:value></con:property><con:property><con:name>roomTitle2</con:name><con:value>Локация автотест2</con:value></con:property><con:property><con:name>stage1</con:name><con:value>1</con:value></con:property><con:property><con:name>stage2</con:name><con:value>2</con:value></con:property><con:property><con:name>subBuilding1</con:name><con:value>строение 1</con:value></con:property><con:property><con:name>subBuilding2</con:name><con:value>строение 2</con:value></con:property><con:property><con:name>topicName</con:name><con:value>topicLocation.rir2</con:value></con:property></con:properties></con:testSuite><con:testSuite id="0340fd41-8a96-4efe-ab74-308d7683e563" name="Обработка сообщений по Оборудованию в локации"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="c5bd316b-0920-4aad-b82c-2c1909b92080" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Оборудования в локации без archived и personalizedService = true_ID76585" searchProperties="true"><con:settings><con:setting id="46815ef8-d10a-4886-988e-60d4f1ad1ed4fileName">Создание-Оборудования-в-локации-без-archived_ID76585</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="6b0c45c6-f6a6-4cc4-ad9f-45f8c7e9442a"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
e.getEquipmentIdForEsu()
//
//e.resTypes.getSarResourceTypes()
//e.findEquipmentProfile(1)
//e.getNonExistedEquipment()
//e.mo.createStructureOfMO(1)
//e.mo.findDepartmentNoms()</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="d9caa009-0e6c-4df1-979e-1719589dcc76"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании Оборудования" id="fb83bee3-ffb1-4e15-8e34-15410a6393ee"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("equipmentId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("locId1")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1")
def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

treatments=e.collectTreatments(1)

message="""<ns4:locationEquipment  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId>"""+
"""<ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId>"""+
"""<ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId>"""+
"""<ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel>"""+
"""<ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId>"""+
"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""<ns4:department id=\""""+depId+"""\">"""+
"""<ns5:title>"""+depNomTitle+"""</ns5:title>"""+
"""<ns5:nomId>"""+depNomId+"""</ns5:nomId>"""+
"""</ns4:department>"""+
"""<ns4:locationId>"""+locId+"""</ns4:locationId>"""+
"""<ns4:personalizedService>true</ns4:personalizedService>"""+
"""<ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom>"""+
"""<ns4:treatments>"""+treatments+"""</ns4:treatments>"""+
"""</ns4:locationEquipment>"""

e.mainScripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в EQUIPMENT" id="e4a8cfff-3ce3-44a3-841a-4792dfc07c01"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
mainScripts= new ScriptLibrary(context, testRunner, log)
//собрать параметры оборудрования из пропертей
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
//log.info(lastItem)
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
locId=testRunner.testCase.getPropertyValue("locId1").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1").toLong()
typeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1").toLong()
profileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()
personalizedService=true
capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1").toLong()
departmentId=testRunner.testCase.testSuite.getPropertyValue("depId1").toLong()
departmentTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

//собрать мапу из параметров, которые были переданны в сообщение на предыдущем шаге
def messageEquipment=[
                 id :id,
                 equipmentTypeId:typeId,
                 personalizedService:personalizedService,
                 capacity:capacity,
                 equipmentProfileId :profileId,
                 moId:moId,
                 mfId: mfId,
                 depId: departmentId,
                 depTitle: departmentTitle,
                 depNomId: departmentNomId,
                 locId:locId,
                 archived: false,
                 equipmentId: equipmentId,
                 model: model
        ]       
//собрать такую же мапу из записи в бд        
dbEquipment=e.getEquipmentMapFromDB(id)
// сравнить две мапы
if( dbEquipment)mainScripts.utils().compareMaps(messageEquipment,dbEquipment)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в EQUIPMENT_TREATMENT" id="f012224e-9de9-4a11-88b9-2c1fe7dee1cd"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

// собрать массив из данных ММ из параметров кейса
countTreatments = testRunner.testCase.getPropertyValue("countTreatments").toLong()
useByDefault=true
messageEquipmentTreatment=[]
for (int i=1; i<=countTreatments; i++){
		tId = testRunner.testCase.getPropertyValue("treatmentId"+i).toLong()
		map=[id:tId, useByDefault:useByDefault]
		useByDefault=false
		messageEquipmentTreatment << map
}

// собрать массив из данных ММ из параметров в БД
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
dbEquipmentTreatment=e.getEquipmentTreatments(id)

//отсортировать масиивы по id 
dbEquipmentTreatment.sort { a, b -> a.id <=> b.id }
messageEquipmentTreatment.sort { a, b -> a.id <=> b.id }

// сравнить кол-во элементов в двух массивах
assert messageEquipmentTreatment.size() == dbEquipmentTreatment.size()

// сравнить параметры каждого элемента массива
for(int i=0; i<messageEquipmentTreatment.size(); i++){
	assert dbEquipmentTreatment[i] == messageEquipmentTreatment[i]
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в RESOURCE" id="69982471-6029-468e-a593-d3709a505b70"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"SAR")
mainScripts.utils().createPropertyWithCreatedByTCparameter("resourceId", dbResource.id.toString(), "1")
//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
resource =[
                archived:false,
                title : model,
                resourceKind : "SPECIAL_AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : null
        ]

 // сравнить две мапы
mainScripts.utils().compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.dates().formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="3eabaded-d568-4185-896f-ce1e111c7f16"><con:settings/><con:config><script>//def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
//Long id = testRunner.testCase.getPropertyValue("nonExistedEId1").toLong()

res.clearResourcesAndParents()
//e.clearEquipment("nonExistedEId")
//e.mo.clearStructureOfMO(1)
//e.mo.clearDepartmentNoms()
//e.resTypes.clearSarResourceTypes()
</script></con:config></con:testStep><con:properties><con:property><con:name>resourceId</con:name><con:value>30100211051</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-27 18:13</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>1</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>1</con:value></con:property><con:property><con:name>countEP</con:name><con:value>1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="f325b92d-8ab0-4568-9431-48911dada204" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Оборудования в локации с archived=false и personalizedService =false _ID76586" searchProperties="true"><con:settings><con:setting id="46815ef8-d10a-4886-988e-60d4f1ad1ed4fileName">Создание-Оборудования-в-локации-без-archived_ID76585</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="13d3c96c-bc4f-4b83-b2bf-7202473b0f8f"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
e.getEquipmentIdForEsu()
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="c1d33d64-1f2e-4af5-b971-827af33b445d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании Оборудования" id="89065f56-6263-45ec-8250-032aec959232"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("equipmentId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("locId1")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1")
def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

treatments=e.collectTreatments(1)

message="""<ns4:locationEquipment archived="false"  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId>"""+
"""<ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId>"""+
"""<ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId>"""+
"""<ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel>"""+
"""<ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId>"""+
"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""<ns4:department id=\""""+depId+"""\">"""+
"""<ns5:title>"""+depNomTitle+"""</ns5:title>"""+
"""<ns5:nomId>"""+depNomId+"""</ns5:nomId>"""+
"""</ns4:department>"""+
"""<ns4:locationId>"""+locId+"""</ns4:locationId>"""+
"""<ns4:personalizedService>false</ns4:personalizedService>"""+
"""<ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom>"""+
"""<ns4:treatments>"""+treatments+"""</ns4:treatments>"""+
"""</ns4:locationEquipment>"""

e.mainScripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в EQUIPMENT" id="e62f5b79-7b7c-407b-9f90-fe1b42b59b97"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
mainScripts= new ScriptLibrary(context, testRunner, log)
//собрать параметры оборудрования из пропертей
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
//log.info(lastItem)
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
locId=testRunner.testCase.getPropertyValue("locId1").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1").toLong()
typeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1").toLong()
profileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()
personalizedService=false
capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1").toLong()
departmentId=testRunner.testCase.testSuite.getPropertyValue("depId1").toLong()
departmentTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

//собрать мапу из параметров, которые были переданны в сообщение на предыдущем шаге
def messageEquipment=[
                 id :id,
                 equipmentTypeId:typeId,
                 personalizedService:personalizedService,
                 capacity:capacity,
                 equipmentProfileId :profileId,
                 moId:moId,
                 mfId: mfId,
                 depId: departmentId,
                 depTitle: departmentTitle,
                 depNomId: departmentNomId,
                 locId:locId,
                 archived: false,
                 equipmentId: equipmentId,
                 model: model
        ]       
//собрать такую же мапу из записи в бд        
dbEquipment=e.getEquipmentMapFromDB(id)
// сравнить две мапы
mainScripts.utils().compareMaps(messageEquipment,dbEquipment)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в EQUIPMENT_TREATMENT" id="d41caca7-89c1-49ee-9be7-7989deb85a0e"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

// собрать массив из данных ММ из параметров кейса
countTreatments = testRunner.testCase.getPropertyValue("countTreatments").toLong()
useByDefault=true
messageEquipmentTreatment=[]
for (int i=1; i<=countTreatments; i++){
		tId = testRunner.testCase.getPropertyValue("treatmentId"+i).toLong()
		map=[id:tId, useByDefault:useByDefault]
		useByDefault=false
		messageEquipmentTreatment << map
}

// собрать массив из данных ММ из параметров в БД
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
dbEquipmentTreatment=e.getEquipmentTreatments(id)

//отсортировать масиивы по id 
dbEquipmentTreatment.sort { a, b -> a.id <=> b.id }
messageEquipmentTreatment.sort { a, b -> a.id <=> b.id }

// сравнить кол-во элементов в двух массивах
assert messageEquipmentTreatment.size() == dbEquipmentTreatment.size()

// сравнить параметры каждого элемента массива
for(int i=0; i<messageEquipmentTreatment.size(); i++){
	assert dbEquipmentTreatment[i] == messageEquipmentTreatment[i]
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в RESOURCE" id="ce455a55-0e5e-4925-9163-a338138b6ce8"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)

id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"SAR")
e.mainScripts.utils().createPropertyWithCreatedByTCparameter("resourceId", dbResource.id.toString(), "1")
//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
resource =[
                archived:false,
                title : model,
                resourceKind : "SPECIAL_AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : null
        ]

 // сравнить две мапы
mainScripts.utils().compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.dates().formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="54306a1d-1cdb-45b9-9371-33c67fa1f9b1"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
res.clearResourcesAndParents()</script></con:config></con:testStep><con:properties><con:property><con:name>countEP</con:name><con:value>1</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-27 18:13</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="dac0f387-cce9-4ad9-883c-9efcb8be9953" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Оборудования в локации с archived=true" searchProperties="true"><con:settings><con:setting id="46815ef8-d10a-4886-988e-60d4f1ad1ed4fileName">Создание-Оборудования-в-локации-без-archived_ID76585</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="5c136f8a-3da8-468b-b9e2-d0f3c4dcbee1"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
e.getEquipmentIdForEsu()
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="55035d97-c2c1-4896-8205-a63fd95a2e07"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании Оборудования" id="c231bf02-fd9d-4cfb-a814-b9ed0fb5fb13"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("equipmentId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("locId1")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1")
def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

treatments=e.collectTreatments(1)

message="""<ns4:locationEquipment archived="true"  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId>"""+
"""<ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId>"""+
"""<ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId>"""+
"""<ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel>"""+
"""<ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId>"""+
"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""<ns4:department id=\""""+depId+"""\">"""+
"""<ns5:title>"""+depNomTitle+"""</ns5:title>"""+
"""<ns5:nomId>"""+depNomId+"""</ns5:nomId>"""+
"""</ns4:department>"""+
"""<ns4:locationId>"""+locId+"""</ns4:locationId>"""+
"""<ns4:personalizedService>false</ns4:personalizedService>"""+
"""<ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom>"""+
"""<ns4:treatments>"""+treatments+"""</ns4:treatments>"""+
"""</ns4:locationEquipment>"""

e.mainScripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в EQUIPMENT" id="11410eb4-ee72-4227-a584-f9ea11352596"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)

id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
log.info id.getClass()
// получить запись в таблице оборудования по id 
equipment=e.mainScripts.sql().getEntityFromDb("tableE", id )
// проверить, что такой записи нет
assert !equipment
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в RESOURCE" id="051a4f9a-a0ae-4382-b868-279c0180117d"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()

dbResource =res.getResourceIdByParent(id,"SAR")
assert !dbResource
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="6a979182-722d-4b24-abd7-40b932b8c532"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
res.clearResourcesAndParents()</script></con:config></con:testStep><con:properties><con:property><con:name>countEP</con:name><con:value>1</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-27 18:13</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="9e042cf8-f860-4ccf-bf6e-dc94739302b8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Оборудования в локации с 100 MM" searchProperties="true"><con:settings><con:setting id="46815ef8-d10a-4886-988e-60d4f1ad1ed4fileName">Создание-Оборудования-в-локации-без-archived_ID76585</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="18c350ef-2c76-4877-ae27-e2073a8ff086"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
e.getEquipmentIdForEsu()
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="f81cefd2-00c4-4168-9bd8-b25af3c9c6f4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение о создании Оборудования" id="7da35dbd-3ed4-4f93-8387-2796d1187aa7"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("equipmentId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("locId1")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1")
def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

treatments=e.collectTreatments(100)

message="""<ns4:locationEquipment  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId>"""+
"""<ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId>"""+
"""<ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId>"""+
"""<ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel>"""+
"""<ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId>"""+
"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""<ns4:department id=\""""+depId+"""\">"""+
"""<ns5:title>"""+depNomTitle+"""</ns5:title>"""+
"""<ns5:nomId>"""+depNomId+"""</ns5:nomId>"""+
"""</ns4:department>"""+
"""<ns4:locationId>"""+locId+"""</ns4:locationId>"""+
"""<ns4:personalizedService>true</ns4:personalizedService>"""+
"""<ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom>"""+
"""<ns4:treatments>"""+treatments+"""</ns4:treatments>"""+
"""</ns4:locationEquipment>"""

e.mainScripts.kafka().sendMessageToKafka2(topicName,message)
sleep(1000)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в EQUIPMENT" id="ba80f61a-01ad-4149-a40a-f8fd81b0e517"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
mainScripts= new ScriptLibrary(context, testRunner, log)
//собрать параметры оборудрования из пропертей
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
//log.info(lastItem)
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
locId=testRunner.testCase.getPropertyValue("locId1").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1").toLong()
typeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1").toLong()
profileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()
personalizedService=true
capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1").toLong()
departmentId=testRunner.testCase.testSuite.getPropertyValue("depId1").toLong()
departmentTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

//собрать мапу из параметров, которые были переданны в сообщение на предыдущем шаге
def messageEquipment=[
                 id :id,
                 equipmentTypeId:typeId,
                 personalizedService:personalizedService,
                 capacity:capacity,
                 equipmentProfileId :profileId,
                 moId:moId,
                 mfId: mfId,
                 depId: departmentId,
                 depTitle: departmentTitle,
                 depNomId: departmentNomId,
                 locId:locId,
                 archived: false,
                 equipmentId: equipmentId,
                 model: model
        ]       
//собрать такую же мапу из записи в бд        
dbEquipment=e.getEquipmentMapFromDB(id)
// сравнить две мапы
mainScripts.utils().compareMaps(messageEquipment,dbEquipment)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в EQUIPMENT_TREATMENT" id="04310f18-3cb5-4985-bc45-1b59626b77b3"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

// собрать массив из данных ММ из параметров кейса
countTreatments = testRunner.testCase.getPropertyValue("countTreatments").toLong()
useByDefault=true
messageEquipmentTreatment=[]
for (int i=1; i<=countTreatments; i++){
		tId = testRunner.testCase.getPropertyValue("treatmentId"+i).toLong()
		map=[id:tId, useByDefault:useByDefault]
		useByDefault=false
		messageEquipmentTreatment << map
}

// собрать массив из данных ММ из параметров в БД
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
dbEquipmentTreatment=e.getEquipmentTreatments(id)

//отсортировать масиивы по id 
dbEquipmentTreatment.sort { a, b -> a.id <=> b.id }
messageEquipmentTreatment.sort { a, b -> a.id <=> b.id }

// сравнить кол-во элементов в двух массивах
assert messageEquipmentTreatment.size() == dbEquipmentTreatment.size()

// сравнить параметры каждого элемента массива
for(int i=0; i<messageEquipmentTreatment.size(); i++){
	assert dbEquipmentTreatment[i] == messageEquipmentTreatment[i]
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в RESOURCE" id="e863ef0b-66e9-43ba-bfa9-e2b255c1bae2"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
def mainScripts = new ScriptLibrary(context, testRunner, log)
//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"SAR")
e.mainScripts.utils().createPropertyWithCreatedByTCparameter("resourceId", dbResource.id.toString(), "1")
//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
resource =[
                archived:false,
                title : model,
                resourceKind : "SPECIAL_AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : null
        ]

 // сравнить две мапы
mainScripts.utils().compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.dates()formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="31517858-aa1a-45a0-9146-9ff48843d194"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
res.clearResourcesAndParents()</script></con:config></con:testStep><con:properties><con:property><con:name>countTreatments</con:name><con:value>100</con:value></con:property><con:property><con:name>countEP</con:name><con:value>1</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-27 18:13</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="f5254aa7-ff0c-4e58-b3b4-ae0fabd90149" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение Оборудования в локации +архивирование" searchProperties="true"><con:settings><con:setting id="46815ef8-d10a-4886-988e-60d4f1ad1ed4fileName">Создание-Оборудования-в-локации-без-archived_ID76585</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="b5ab2875-fc5c-411b-aad5-85eb11f2d056"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)

e.findEverythingForEquipment(2)
</script></con:config></con:testStep><con:testStep type="groovy" name="Создать записи в equipment и equipment_treatment" id="4582a43b-71ff-4762-a48a-2e99fbeed668"><con:settings/><con:config><script> def e = new Equipment(context, testRunner, log)

personalizedService=true
archived=false
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("locId1")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1")

values=[
                    personalizedService : personalizedService,
                    capacity : capacity,
                    equipmentProfileId : equipmentProfileId,
                    moId : moId,
                    mfId : mfId,
                    depNomId : depNomId,
                    locId : locId,
                    archived  : archived,
                    equipmentId : equipmentId,
                    model : equipmentModel
            ]
log.info values
e.createEquipment(values)
e.createEquipmentTreatments("equipmentId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Создать записи в resource" id="c7143e91-21ee-4ecf-b265-94e01527b499"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("equipmentId1").toLong()

res.createSarResourceByParentEntity(id)
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="1655d4e1-3fc2-44d7-8108-b55cd8f4faa6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение об изменении Оборудования" id="fa29ef62-c8ff-4437-989a-00d371934c66"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("equipmentId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId2")
def locId=testRunner.testCase.getPropertyValue("locId2")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel2")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId2")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId2")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId2")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId2")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle2")
def depNomId=testRunner.testCase.getPropertyValue("depNomId2")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity2")
def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

treatmentsId=e.t.getTreatmentsIdList(2,2)
treatments=e.collectTreatmentsForMessage(treatmentsId)

log.info treatments

message="""<ns4:locationEquipment archived="true"  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId>"""+
"""<ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId>"""+
"""<ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId>"""+
"""<ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel>"""+
"""<ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId>"""+
"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""<ns4:department id=\""""+depId+"""\">"""+
"""<ns5:title>"""+depNomTitle+"""</ns5:title>"""+
"""<ns5:nomId>"""+depNomId+"""</ns5:nomId>"""+
"""</ns4:department>"""+
"""<ns4:locationId>"""+locId+"""</ns4:locationId>"""+
"""<ns4:personalizedService>true</ns4:personalizedService>"""+
"""<ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom>"""+
"""<ns4:treatments>"""+treatments+"""</ns4:treatments>"""+
"""</ns4:locationEquipment>"""

mainScripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в EQUIPMENT" id="bb243dba-9521-4595-849d-06b4df5696fa"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
//собрать параметры оборудрования из пропертей
// мо, му, профиль оборудования измениться не должны
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
//log.info(lastItem)
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
locId=testRunner.testCase.getPropertyValue("locId2").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel2")
equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId2").toLong()
typeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId2").toLong()
profileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()
personalizedService=true
capacity=testRunner.testCase.testSuite.getPropertyValue("capacity2").toLong()
departmentId=testRunner.testCase.testSuite.getPropertyValue("depId2").toLong()
departmentTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle2")
departmentNomId=testRunner.testCase.getPropertyValue("depNomId2").toLong()

//собрать мапу из параметров, которые были переданны в сообщение на предыдущем шаге
def messageEquipment=[
                 id :id,
                 equipmentTypeId:typeId,
                 personalizedService:personalizedService,
                 capacity:capacity,
                 equipmentProfileId :profileId,
                 moId:moId,
                 mfId: mfId,
                 depId: departmentId,
                 depTitle: departmentTitle,
                 depNomId: departmentNomId,
                 locId:locId,
                 archived: true,
                 equipmentId: equipmentId,
                 model: model
        ]       
//собрать такую же мапу из записи в бд        
dbEquipment=e.getEquipmentMapFromDB(id)
// сравнить две мапы
mainScripts.utils().compareMaps(messageEquipment,dbEquipment)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в EQUIPMENT_TREATMENT" id="d85c020e-9c73-48a7-aed8-8daed6bcee2b"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

// собрать массив из данных ММ из параметров кейса
countTreatments = testRunner.testCase.getPropertyValue("countTreatments").toInteger()
index=2
useByDefault=true
messageEquipmentTreatment=[]
for (int i=index; i<=countTreatments; i++){
		tId = testRunner.testCase.getPropertyValue("treatmentId"+index).toLong()
		map=[id:tId, useByDefault:useByDefault]
		useByDefault=false
		messageEquipmentTreatment << map
		index=index+1
}

// собрать массив из данных ММ из параметров в БД
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
dbEquipmentTreatment=e.getEquipmentTreatments(id)

//отсортировать масиивы по id 
dbEquipmentTreatment.sort { a, b -> a.id <=> b.id }
messageEquipmentTreatment.sort { a, b -> a.id <=> b.id }

// сравнить кол-во элементов в двух массивах
assert messageEquipmentTreatment.size() == dbEquipmentTreatment.size()

// сравнить параметры каждого элемента массива
for(int i=0; i<messageEquipmentTreatment.size(); i++){
	assert dbEquipmentTreatment[i] == messageEquipmentTreatment[i]
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в RESOURCE" id="26eefefe-3ab3-483b-a5aa-6fc234fb97df"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"SAR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
//измениться должны только статус и дата синхронизации
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def locId=testRunner.testCase.getPropertyValue("locId1").toLong()

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1").toLong()
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1").toLong()
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1").toLong()
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1").toLong()
def resTypeId=testRunner.testCase.getPropertyValue("sarResTypeId1").toLong()
resource =[
                archived:false,
                title : equipmentModel,
                resourceKind : "SPECIAL_AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : resTypeId,
                specId : null,
                depId : depId,
                depTitle : depNomTitle,
                depNomId : depNomId,
                functionKind : "EQUIPMENT_FUNCTION",
                functionId : equipmentProfileId,
                functionTitle : equipmentModel,
                functionVolume : null,
                mfId : mfId,
                locId : locId,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : equipmentTypeId,
                schedulingMedicalFacilityId : null
        ]

 // сравнить две мапы
mainScripts.utils().compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=mainScripts.dates().formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="588452d5-4571-4b7c-a0a7-ab24fbf15bab"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
res.clearResourcesAndParents()</script></con:config></con:testStep><con:properties><con:property><con:name>countEP</con:name><con:value>2</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-27 18:13</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="d9fe6ede-6491-4126-bb7e-021dbb1cc129" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение Оборудования в локации +вывод из архива без archived" searchProperties="true"><con:settings><con:setting id="46815ef8-d10a-4886-988e-60d4f1ad1ed4fileName">Создание-Оборудования-в-локации-без-archived_ID76585</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="174661b6-96de-4028-a682-ec0adb41b167"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)

e.findEverythingForEquipment(2)
</script></con:config></con:testStep><con:testStep type="groovy" name="Создать записи в equipment и equipment_treatment" id="cf598ecc-b925-476c-810f-619227e9dce9"><con:settings/><con:config><script> def e = new Equipment(context, testRunner, log)

personalizedService=true
archived=true
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("locId1")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1")

values=[
                    personalizedService : personalizedService,
                    capacity : capacity,
                    equipmentProfileId : equipmentProfileId,
                    moId : moId,
                    mfId : mfId,
                    depNomId : depNomId,
                    locId : locId,
                    archived  : archived,
                    equipmentId : equipmentId,
                    model : equipmentModel
            ]
log.info values
e.createEquipment(values)
e.createEquipmentTreatments("equipmentId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Создать записи в resource" id="c90c02e2-7a28-4970-a631-d20fdf636653"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("equipmentId1").toLong()

res.createSarResourceByParentEntity(id)

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="d951e0bb-dc79-473f-a909-6b8ba74aee01"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение об изменении Оборудования" id="c16316b1-2afe-4e72-b0f8-1f34f4438ed7"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
def id=testRunner.testCase.getPropertyValue("equipmentId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId2")
def locId=testRunner.testCase.getPropertyValue("locId2")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel2")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId2")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId2")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId2")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId2")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle2")
def depNomId=testRunner.testCase.getPropertyValue("depNomId2")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity2")
def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

treatmentsId=e.t.getTreatmentsIdList(2,2)
treatments=e.collectTreatmentsForMessage(treatmentsId)

log.info treatments

message="""<ns4:locationEquipment  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId>"""+
"""<ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId>"""+
"""<ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId>"""+
"""<ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel>"""+
"""<ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId>"""+
"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""<ns4:department id=\""""+depId+"""\">"""+
"""<ns5:title>"""+depNomTitle+"""</ns5:title>"""+
"""<ns5:nomId>"""+depNomId+"""</ns5:nomId>"""+
"""</ns4:department>"""+
"""<ns4:locationId>"""+locId+"""</ns4:locationId>"""+
"""<ns4:personalizedService>true</ns4:personalizedService>"""+
"""<ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom>"""+
"""<ns4:treatments>"""+treatments+"""</ns4:treatments>"""+
"""</ns4:locationEquipment>"""

mainScripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в EQUIPMENT" id="86e121e6-a302-49ff-b11d-cd8dfba57340"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)

//собрать параметры оборудрования из пропертей
// мо, му, профиль оборудования измениться не должны
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
//log.info(lastItem)
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
locId=testRunner.testCase.getPropertyValue("locId2").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel2")
equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId2").toLong()
typeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId2").toLong()
profileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()
personalizedService=true
capacity=testRunner.testCase.testSuite.getPropertyValue("capacity2").toLong()
departmentId=testRunner.testCase.testSuite.getPropertyValue("depId2").toLong()
departmentTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle2")
departmentNomId=testRunner.testCase.getPropertyValue("depNomId2").toLong()

//собрать мапу из параметров, которые были переданны в сообщение на предыдущем шаге
def messageEquipment=[
                 id :id,
                 equipmentTypeId:typeId,
                 personalizedService:personalizedService,
                 capacity:capacity,
                 equipmentProfileId :profileId,
                 moId:moId,
                 mfId: mfId,
                 depId: departmentId,
                 depTitle: departmentTitle,
                 depNomId: departmentNomId,
                 locId:locId,
                 archived: false,
                 equipmentId: equipmentId,
                 model: model
        ]       
//собрать такую же мапу из записи в бд        
dbEquipment=e.getEquipmentMapFromDB(id)
// сравнить две мапы
mainScripts.utils().compareMaps(messageEquipment,dbEquipment)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в EQUIPMENT_TREATMENT" id="d8d66002-e734-475b-ae85-c6ee0bcfd556"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

// собрать массив из данных ММ из параметров кейса
countTreatments = testRunner.testCase.getPropertyValue("countTreatments").toLong()
index=2
useByDefault=true
messageEquipmentTreatment=[]
for (int i=index; i<=countTreatments; i++){
		tId = testRunner.testCase.getPropertyValue("treatmentId"+index).toLong()
		map=[id:tId, useByDefault:useByDefault]
		useByDefault=false
		messageEquipmentTreatment << map
		index=index+1
}

// собрать массив из данных ММ из параметров в БД
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
dbEquipmentTreatment=e.getEquipmentTreatments(id)

//отсортировать масиивы по id 
dbEquipmentTreatment.sort { a, b -> a.id <=> b.id }
messageEquipmentTreatment.sort { a, b -> a.id <=> b.id }

// сравнить кол-во элементов в двух массивах
assert messageEquipmentTreatment.size() == dbEquipmentTreatment.size()

// сравнить параметры каждого элемента массива
for(int i=0; i<messageEquipmentTreatment.size(); i++){
	assert dbEquipmentTreatment[i] == messageEquipmentTreatment[i]
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в RESOURCE" id="4ea30045-4552-4dd3-91f4-f77b9c2605af"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"SAR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
//измениться должны только статус и дата синхронизации
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def locId=testRunner.testCase.getPropertyValue("locId1").toLong()

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1").toLong()
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1").toLong()
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1").toLong()
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1").toLong()
def resTypeId=testRunner.testCase.getPropertyValue("sarResTypeId1").toLong()
resource =[
                archived:true,
                title : equipmentModel,
                resourceKind : "SPECIAL_AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : resTypeId,
                specId : null,
                depId : depId,
                depTitle : depNomTitle,
                depNomId : depNomId,
                functionKind : "EQUIPMENT_FUNCTION",
                functionId : equipmentProfileId,
                functionTitle : equipmentModel,
                functionVolume : null,
                mfId : mfId,
                locId : locId,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : equipmentTypeId,
                schedulingMedicalFacilityId : null
        ]

 // сравнить две мапы
mainScripts.utils().compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=mainScripts.dates().formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="9850a88d-b073-4aaf-9032-f3d74202d544"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
res.clearResourcesAndParents()
//res.e.clearAllByPropertyName()
</script></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>topicLocationEquipment.rir2</con:value></con:property><con:property><con:name>equipmentTypeId2</con:name><con:value>12</con:value></con:property><con:property><con:name>equipmentTypeId1</con:name><con:value>10</con:value></con:property><con:property><con:name>equipmentModel2</con:name><con:value>Название модели оборудования автотест рир 2</con:value></con:property><con:property><con:name>equipmentModel1</con:name><con:value>Название модели оборудования автотест рир</con:value></con:property><con:property><con:name>depTitle2</con:name><con:value>Описание отделения автотет2</con:value></con:property><con:property><con:name>depTitle1</con:name><con:value>Описание отделения автотет</con:value></con:property><con:property><con:name>depId2</con:name><con:value>123452</con:value></con:property><con:property><con:name>depId1</con:name><con:value>123456</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-27 18:13</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countEP</con:name><con:value>1</con:value></con:property><con:property><con:name>capacity2</con:name><con:value>2</con:value></con:property><con:property><con:name>capacity1</con:name><con:value>1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="2d9d6823-faf2-481f-9a47-292171685391" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение Оборудования в локации +вывод из архива с archived" searchProperties="true"><con:settings><con:setting id="46815ef8-d10a-4886-988e-60d4f1ad1ed4fileName">Создание-Оборудования-в-локации-без-archived_ID76585</con:setting></con:settings><con:testStep type="groovy" name="Подбор id" id="cbe3d108-1bbf-416d-99c2-5e2cd042a92a"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)

e.findEverythingForEquipment(2)
</script></con:config></con:testStep><con:testStep type="groovy" name="Создать записи в equipment и equipment_treatment" id="60802b64-8cd1-4906-aad6-b23ca286d7b9"><con:settings/><con:config><script> def e = new Equipment(context, testRunner, log)

personalizedService=true
archived=true
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")
def locId=testRunner.testCase.getPropertyValue("locId1")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1")

values=[
                    personalizedService : personalizedService,
                    capacity : capacity,
                    equipmentProfileId : equipmentProfileId,
                    moId : moId,
                    mfId : mfId,
                    depNomId : depNomId,
                    locId : locId,
                    archived  : archived,
                    equipmentId : equipmentId,
                    model : equipmentModel
            ]
log.info values
e.createEquipment(values)
e.createEquipmentTreatments("equipmentId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Создать записи в resource" id="d223026c-edad-4c1e-89a7-92a4c60ffa72"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("equipmentId1").toLong()

res.createSarResourceByParentEntity(id)
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="d29c0ba0-64c5-4ec9-a9dd-01df3fa2240f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение об изменении Оборудования" id="14a7d5f0-60de-4b1b-8fe5-d0e16487b599"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)
def id=testRunner.testCase.getPropertyValue("equipmentId1")
def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId2")
def locId=testRunner.testCase.getPropertyValue("locId2")

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel2")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId2")
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId2")
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId2")

def depId=testRunner.testCase.testSuite.getPropertyValue("depId2")
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle2")
def depNomId=testRunner.testCase.getPropertyValue("depNomId2")

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity2")
def topicName=testRunner.testCase.testSuite.getPropertyValue("topicName")

treatmentsId=e.t.getTreatmentsIdList(2,2)
treatments=e.collectTreatmentsForMessage(treatmentsId)

log.info treatments

message="""<ns4:locationEquipment archived="false"  id=\""""+id+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<ns4:equipmentId>"""+equipmentId+"""</ns4:equipmentId>"""+
"""<ns4:equipmentTypeNsiId>"""+equipmentTypeId+"""</ns4:equipmentTypeNsiId>"""+
"""<ns4:equipmentProfileId>"""+equipmentProfileId+"""</ns4:equipmentProfileId>"""+
"""<ns4:equipmentModel>"""+equipmentModel+"""</ns4:equipmentModel>"""+
"""<ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId>"""+
"""<ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId>"""+
"""<ns4:department id=\""""+depId+"""\">"""+
"""<ns5:title>"""+depNomTitle+"""</ns5:title>"""+
"""<ns5:nomId>"""+depNomId+"""</ns5:nomId>"""+
"""</ns4:department>"""+
"""<ns4:locationId>"""+locId+"""</ns4:locationId>"""+
"""<ns4:personalizedService>true</ns4:personalizedService>"""+
"""<ns4:capacityForRoom>"""+capacity+"""</ns4:capacityForRoom>"""+
"""<ns4:treatments>"""+treatments+"""</ns4:treatments>"""+
"""</ns4:locationEquipment>"""

mainScripts.kafka().sendMessageToKafka2(topicName,message)]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в EQUIPMENT" id="568e1729-1717-4f3d-9ef3-df3454e8f924"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def mainScripts = new ScriptLibrary(context, testRunner, log)

//собрать параметры оборудрования из пропертей
// мо, му, профиль оборудования измениться не должны
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
//log.info(lastItem)
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
locId=testRunner.testCase.getPropertyValue("locId2").toLong()
model=testRunner.testCase.testSuite.getPropertyValue("equipmentModel2")
equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId2").toLong()
typeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId2").toLong()
profileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()
personalizedService=true
capacity=testRunner.testCase.testSuite.getPropertyValue("capacity2").toLong()
departmentId=testRunner.testCase.testSuite.getPropertyValue("depId2").toLong()
departmentTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle2")
departmentNomId=testRunner.testCase.getPropertyValue("depNomId2").toLong()

//собрать мапу из параметров, которые были переданны в сообщение на предыдущем шаге
def messageEquipment=[
                 id :id,
                 equipmentTypeId:typeId,
                 personalizedService:personalizedService,
                 capacity:capacity,
                 equipmentProfileId :profileId,
                 moId:moId,
                 mfId: mfId,
                 depId: departmentId,
                 depTitle: departmentTitle,
                 depNomId: departmentNomId,
                 locId:locId,
                 archived: false,
                 equipmentId: equipmentId,
                 model: model
        ]       
//собрать такую же мапу из записи в бд        
dbEquipment=e.getEquipmentMapFromDB(id)
// сравнить две мапы
mainScripts.utils().compareMaps(messageEquipment,dbEquipment)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в EQUIPMENT_TREATMENT" id="14beba58-91b8-492a-b463-8cd15520e08a"><con:settings/><con:config><script><![CDATA[def e = new Equipment(context, testRunner, log)

// собрать массив из данных ММ из параметров кейса
countTreatments = testRunner.testCase.getPropertyValue("countTreatments").toLong()
index=2
useByDefault=true
messageEquipmentTreatment=[]
for (int i=index; i<=countTreatments; i++){
		tId = testRunner.testCase.getPropertyValue("treatmentId"+index).toLong()
		map=[id:tId, useByDefault:useByDefault]
		useByDefault=false
		messageEquipmentTreatment << map
		index=index+1
}

// собрать массив из данных ММ из параметров в БД
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()
dbEquipmentTreatment=e.getEquipmentTreatments(id)

//отсортировать масиивы по id 
dbEquipmentTreatment.sort { a, b -> a.id <=> b.id }
messageEquipmentTreatment.sort { a, b -> a.id <=> b.id }

// сравнить кол-во элементов в двух массивах
assert messageEquipmentTreatment.size() == dbEquipmentTreatment.size()

// сравнить параметры каждого элемента массива
for(int i=0; i<messageEquipmentTreatment.size(); i++){
	assert dbEquipmentTreatment[i] == messageEquipmentTreatment[i]
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить изменение записи в RESOURCE" id="e8e15f0a-3697-4c64-be32-f5c2b5f77283"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("equipmentId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"SAR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
//измениться должны только статус и дата синхронизации
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def locId=testRunner.testCase.getPropertyValue("locId1").toLong()

def equipmentModel=testRunner.testCase.testSuite.getPropertyValue("equipmentModel1")
def equipmentId=testRunner.testCase.testSuite.getPropertyValue("equipmentId1").toLong()
def equipmentTypeId=testRunner.testCase.testSuite.getPropertyValue("equipmentTypeId1").toLong()
def equipmentProfileId=testRunner.testCase.getPropertyValue("equipmentProfileId1").toLong()

def depId=testRunner.testCase.testSuite.getPropertyValue("depId1").toLong()
def depNomTitle=testRunner.testCase.testSuite.getPropertyValue("depTitle1")
def depNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def capacity=testRunner.testCase.testSuite.getPropertyValue("capacity1").toLong()
def resTypeId=testRunner.testCase.getPropertyValue("sarResTypeId1").toLong()
resource =[
                archived:true,
                title : equipmentModel,
                resourceKind : "SPECIAL_AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : resTypeId,
                specId : null,
                depId : depId,
                depTitle : depNomTitle,
                depNomId : depNomId,
                functionKind : "EQUIPMENT_FUNCTION",
                functionId : equipmentProfileId,
                functionTitle : equipmentModel,
                functionVolume : null,
                mfId : mfId,
                locId : locId,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : equipmentTypeId,
                schedulingMedicalFacilityId : null
        ]

 // сравнить две мапы
mainScripts.utils().compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=mainScripts.dates().formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="f5316058-5e7d-4d97-8da8-75226a69903c"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
res.clearResourcesAndParents()</script></con:config></con:testStep><con:properties><con:property><con:name>countEP</con:name><con:value>2</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-11-27 18:13</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>topicName</con:name><con:value>topicLocationEquipment.rir2</con:value></con:property><con:property><con:name>equipmentModel1</con:name><con:value>Название модели оборудования автотест рир</con:value></con:property><con:property><con:name>equipmentModel2</con:name><con:value>Название модели оборудования автотест рир2</con:value></con:property><con:property><con:name>capacity1</con:name><con:value>1</con:value></con:property><con:property><con:name>capacity2</con:name><con:value>2</con:value></con:property><con:property><con:name>depId1</con:name><con:value>123456</con:value></con:property><con:property><con:name>depId2</con:name><con:value>234567</con:value></con:property><con:property><con:name>depTitle1</con:name><con:value>Тестовое подразделение</con:value></con:property><con:property><con:name>depTitle2</con:name><con:value>Описание отделения автотет2</con:value></con:property><con:property><con:name>equipmentTypeId1</con:name><con:value>123</con:value></con:property><con:property><con:name>equipmentTypeId2</con:name><con:value>11</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicLocationEquipment.rir2</con:value></con:property><con:property><con:name>equipmentId1</con:name><con:value>2365</con:value></con:property><con:property><con:name>equipmentId2</con:name><con:value>254645</con:value></con:property><con:property><con:name>personalizedServiceTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>personalizedServiceFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>dateTimeFormat</con:name><con:value>yyyy-MM-dd HH:mm</con:value></con:property><con:property><con:name>resourceId</con:name><con:value>30100211051</con:value></con:property></con:properties></con:testSuite><con:testSuite id="f98c7cf8-c280-4cf6-9d02-577630a79619" name="Обработка сообщения по Исполнения должности"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="29f1fd2e-6a17-401f-bdb3-4ac8a419fdfe" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание неархивного Исполнения должности со всеми параметрами" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="f534c6ef-92f5-4b11-a059-134519b7dec6"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.getNonExistedJobExecution()

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="36ac6cf0-136e-4b27-84b1-e5a463185f99"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о создании Исполнения должности" id="7cb68b5c-10fe-4b50-97aa-e0e0e80ccde0"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution archived=\""""+archived+"""\" id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<maternityLeave>"""+maternityLeave+"""</maternityLeave>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution" id="9c920fdf-8320-468d-b848-6dca7af17975"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 
import java.text.SimpleDateFormat

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1").toLong()
def mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()

def posNomId=testRunner.testCase.getPropertyValue("posNomId1").toLong()

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def specId=testRunner.testCase.getPropertyValue("specId1").toLong()
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1").toLong()
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1").toLong()
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1").toLong()

def dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")
formattedStart=je.mainScripts.convertStringToDate(start,dateFormat,dateFormat)
formattedEnd=je.mainScripts.convertStringToDate(end,dateFormat,dateFormat)	

def jobEx = [
          id: id,
          archived:archived,
          moId: moId,
          employeeId: employeeId,
          snils: snils,
          lastName: lastName,
          firstName:firstName,
          middleName: middleName,
          volume: volume,
          start: formattedStart,
          end:formattedEnd,
          posNomId: posNomId,
          title: title,
          departmentId: departmentId,
          departmentTitle: departmentTitle,
          departmentNomId: departmentNomId,
          specId :specId,
          maternityLeave: maternityLeave,
          defaultMfId:mfId,
          isResource:isResource
  ]
	
//собрать такую же мапу из записи в бд        
dbJobExecution=je.getJobExecutionMapFromDB(id)

log.info formattedStart.getClass()
// сравнить две мапы
je.mainScripts.compareMaps(jobEx,dbJobExecution)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution_position_profile" id="8d54a2c3-a103-45e4-a011-d0f0d3eab925"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

archivedPosProf=false
id = testRunner.testCase.getPropertyValue("nonExistedJEId1")
countPosProf = testRunner.testCase.getPropertyValue("countPosProf").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getJobExecutionPosProf = ("SELECT position_profile_id as id FROM job_execution_position_profile WHERE job_execution_id="+id+" order by position_profile_id")
jobExecutionPosProf= sql.rows(getJobExecutionPosProf)
assert jobExecutionPosProf.size()==countPosProf

for(int i=1; i&lt;=countPosProf; i++){
	posProfId=testRunner.testCase.getPropertyValue("posProfId"+i)
	n=i-1
	assert posProfId==jobExecutionPosProf[n].id.toString()
}

log.info 'end' </script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в resource" id="5dad2e43-0d3b-4b17-900a-e763c839506f"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"AR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
title=lastName +  " " + firstName +  " " + middleName
resource =[
                archived:false,
                title : title,
                resourceKind : "AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : mfId
        ]

 // сравнить две мапы
e.mainScripts.compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="08424294-276a-4573-b687-877213edc04b"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
def res = new Resource(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

res.clearArResourceByParentId(id)

je.clearJobExecution("nonExistedJEId")
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>currentDate</con:name><con:value>2023-11-27 17:49</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>counterMF</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:testCase id="8d429f12-f073-4cd0-9787-c8afbebf8ea6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности с end > текущей даты" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="0b625256-2985-4d1d-8f08-16b37e1ab17d"><con:settings/><con:config><script>import java.time.LocalDate
def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.getNonExistedJobExecution()

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")

currentDate=LocalDate.now()
tomorrow=currentDate.plusDays(1)

testRunner.testCase.setPropertyValue("today",currentDate.toString())
testRunner.testCase.setPropertyValue("tomorrow",tomorrow.toString())
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="11c95141-c8e9-47df-a9d3-c648dc95ab21"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()


</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о создании Исполнения должности" id="95ba1457-3732-4d12-8f70-af17ed717266"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.getPropertyValue("tomorrow")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution archived=\""""+archived+"""\" id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<maternityLeave>"""+maternityLeave+"""</maternityLeave>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution" id="89943856-2121-4d60-8aa9-b5181dc26bda"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 
import java.text.SimpleDateFormat

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1").toLong()
def mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()

def posNomId=testRunner.testCase.getPropertyValue("posNomId1").toLong()

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def specId=testRunner.testCase.getPropertyValue("specId1").toLong()
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1").toLong()
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.getPropertyValue("tomorrow")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1").toLong()
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1").toLong()

def dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")
formattedStart=je.mainScripts.convertStringToDate(start,dateFormat,dateFormat)
formattedEnd=je.mainScripts.convertStringToDate(end,dateFormat,dateFormat)	

def jobEx = [
          id: id,
          archived:archived,
          moId: moId,
          employeeId: employeeId,
          snils: snils,
          lastName: lastName,
          firstName:firstName,
          middleName: middleName,
          volume: volume,
          start: formattedStart,
          end:formattedEnd,
          posNomId: posNomId,
          title: title,
          departmentId: departmentId,
          departmentTitle: departmentTitle,
          departmentNomId: departmentNomId,
          specId :specId,
          maternityLeave: maternityLeave,
          defaultMfId:mfId,
          isResource:isResource
  ]
	
//собрать такую же мапу из записи в бд        
dbJobExecution=je.getJobExecutionMapFromDB(id)

log.info formattedStart.getClass()
// сравнить две мапы
je.mainScripts.compareMaps(jobEx,dbJobExecution)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution_position_profile" id="d13b0e43-92b3-41ab-ba9b-da100eeb1d86"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

archivedPosProf=false
id = testRunner.testCase.getPropertyValue("nonExistedJEId1")
countPosProf = testRunner.testCase.getPropertyValue("countPosProf").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getJobExecutionPosProf = ("SELECT position_profile_id as id FROM job_execution_position_profile WHERE job_execution_id="+id+" order by position_profile_id")
jobExecutionPosProf= sql.rows(getJobExecutionPosProf)
assert jobExecutionPosProf.size()==countPosProf

for(int i=1; i&lt;=countPosProf; i++){
	posProfId=testRunner.testCase.getPropertyValue("posProfId"+i)
	n=i-1
	assert posProfId==jobExecutionPosProf[n].id.toString()
}

log.info 'end' </script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в resource" id="22cde484-f240-4b6f-aaa2-229d5834e429"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"AR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
title=lastName +  " " + firstName +  " " + middleName
resource =[
                archived:false,
                title : title,
                resourceKind : "AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : mfId
        ]

 // сравнить две мапы
e.mainScripts.compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="6a855c7c-69bb-44d5-888e-cb41c33a8eb2"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
def res = new Resource(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

res.clearArResourceByParentId(id)

je.clearJobExecution("nonExistedJEId")
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentId2</con:name><con:value>37</con:value></con:property><con:property><con:name>posProfTreatmentId1</con:name><con:value>36</con:value></con:property><con:property><con:name>posNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posNomId1</con:name><con:value>125684946</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14 13:00</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>1</con:value></con:property><con:property><con:name>today</con:name><con:value>2023-03-14</con:value></con:property><con:property><con:name>tomorrow</con:name><con:value>2023-03-15</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309622</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>128309623</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="661fc7df-fcab-4148-b594-5cb490e9c7ec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности с end = текущая дата" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="9748af8a-7e38-484b-a29e-538b1cb5f5d0"><con:settings/><con:config><script>import java.time.LocalDate
def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.getNonExistedJobExecution()

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")

currentDate=LocalDate.now()

testRunner.testCase.setPropertyValue("today",currentDate.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="832df514-9fe9-45d6-8ac2-87a540af5821"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о создании Исполнения должности" id="c243d45d-4369-4b78-b57a-3054e89a2036"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.getPropertyValue("today")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution archived=\""""+archived+"""\" id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<maternityLeave>"""+maternityLeave+"""</maternityLeave>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution" id="7b60e4cc-5708-4c38-86b1-8eab92682213"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 
import java.text.SimpleDateFormat

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1").toLong()
def mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()

def posNomId=testRunner.testCase.getPropertyValue("posNomId1").toLong()

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def specId=testRunner.testCase.getPropertyValue("specId1").toLong()
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1").toLong()
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.getPropertyValue("today")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1").toLong()
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1").toLong()

def dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")
formattedStart=je.mainScripts.convertStringToDate(start,dateFormat,dateFormat)
formattedEnd=je.mainScripts.convertStringToDate(end,dateFormat,dateFormat)	

def jobEx = [
          id: id,
          archived:archived,
          moId: moId,
          employeeId: employeeId,
          snils: snils,
          lastName: lastName,
          firstName:firstName,
          middleName: middleName,
          volume: volume,
          start: formattedStart,
          end:formattedEnd,
          posNomId: posNomId,
          title: title,
          departmentId: departmentId,
          departmentTitle: departmentTitle,
          departmentNomId: departmentNomId,
          specId :specId,
          maternityLeave: maternityLeave,
          defaultMfId:mfId,
          isResource:isResource
  ]
	
//собрать такую же мапу из записи в бд        
dbJobExecution=je.getJobExecutionMapFromDB(id)

log.info dbJobExecution
// сравнить две мапы
je.mainScripts.compareMaps(jobEx,dbJobExecution)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution_position_profile" id="b753f962-7e36-48a7-be23-78319330d223"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

archivedPosProf=false
id = testRunner.testCase.getPropertyValue("nonExistedJEId1")
countPosProf = testRunner.testCase.getPropertyValue("countPosProf").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getJobExecutionPosProf = ("SELECT position_profile_id as id FROM job_execution_position_profile WHERE job_execution_id="+id+" order by position_profile_id")
jobExecutionPosProf= sql.rows(getJobExecutionPosProf)
assert jobExecutionPosProf.size()==countPosProf

for(int i=1; i&lt;=countPosProf; i++){
	posProfId=testRunner.testCase.getPropertyValue("posProfId"+i)
	n=i-1
	assert posProfId==jobExecutionPosProf[n].id.toString()
}

log.info 'end' </script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в resource" id="e9c8616e-c05d-4afb-b378-28c8b9aa9eea"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"AR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
title=lastName +  " " + firstName +  " " + middleName
resource =[
                archived:false,
                title : title,
                resourceKind : "AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : mfId
        ]

 // сравнить две мапы
e.mainScripts.compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="17d1afe7-f537-4f64-a435-7f2f8f166d36"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
def res = new Resource(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

res.clearArResourceByParentId(id)

je.clearJobExecution("nonExistedJEId")
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentId2</con:name><con:value>37</con:value></con:property><con:property><con:name>posProfTreatmentId1</con:name><con:value>36</con:value></con:property><con:property><con:name>posNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posNomId1</con:name><con:value>125684946</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14 13:06</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>1</con:value></con:property><con:property><con:name>today</con:name><con:value>2023-03-14</con:value></con:property><con:property><con:name>tomorrow</con:name><con:value>2023-03-15</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309622</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>128309623</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="55614d1f-6c63-4be5-a8ad-0a741fa3b359" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности с end &lt; текущей даты" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="aa8be415-3ae0-45f5-a739-bf6e91de221b"><con:settings/><con:config><script>import java.time.LocalDate
def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.getNonExistedJobExecution()

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")

currentDate=LocalDate.now()
yesterday=currentDate.minusDays(1)
testRunner.testCase.setPropertyValue("yesterday",yesterday.toString())
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="1392b105-ee55-4e19-82ef-d62fa29a95ab"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о создании Исполнения должности" id="e038e042-865a-41df-99a9-f8482f647d5c"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.getPropertyValue("yesterday")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution archived=\""""+archived+"""\" id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<maternityLeave>"""+maternityLeave+"""</maternityLeave>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в таблице job_execution" id="a52d8207-8e71-441a-a454-3a1569c1e295"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
//проверить отсутствие записи в job_execution 
assert !je.checkExistenceJobExecution(id)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в resource" id="f8bd2eff-9e83-4347-94a3-be34ffc79342"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

assert !res.checkExistenceResourceByParent(id,"AR")

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="b5074b47-fb26-49b3-a0e6-df849939e226"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

je.mainScripts.clearCreatedByTestInTestCaseWithIndex("tableJE","nonExistedJEId",1)
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentId2</con:name><con:value>37</con:value></con:property><con:property><con:name>posProfTreatmentId1</con:name><con:value>36</con:value></con:property><con:property><con:name>posNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posNomId1</con:name><con:value>125684946</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14 14:33</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>1</con:value></con:property><con:property><con:name>today</con:name><con:value>2023-03-14</con:value></con:property><con:property><con:name>tomorrow</con:name><con:value>2023-03-15</con:value></con:property><con:property><con:name>yesterday</con:name><con:value>2023-03-13</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309622</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>128309623</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="ff869dbc-8222-4880-839f-3172702566cb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности без maternityLeave" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="6088a3b1-ee56-400c-81f7-3ee624a196a2"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.getNonExistedJobExecution()

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="a029f21d-750f-43bd-a90e-3611bbba9e7f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о создании Исполнения должности" id="d448d4d3-19fa-4dd0-9c45-a3ca2a53bef8"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=true
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution archived=\""""+archived+"""\" id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution" id="3d34947c-c3f3-4b21-8a07-e7c2a70f35e3"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 
import java.text.SimpleDateFormat

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1").toLong()
def mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()

def posNomId=testRunner.testCase.getPropertyValue("posNomId1").toLong()

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def specId=testRunner.testCase.getPropertyValue("specId1").toLong()
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1").toLong()
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1").toLong()
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1").toLong()

def dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")
formattedStart=je.mainScripts.convertStringToDate(start,dateFormat,dateFormat)
formattedEnd=je.mainScripts.convertStringToDate(end,dateFormat,dateFormat)	

def jobEx = [
          id: id,
          archived:archived,
          moId: moId,
          employeeId: employeeId,
          snils: snils,
          lastName: lastName,
          firstName:firstName,
          middleName: middleName,
          volume: volume,
          start: formattedStart,
          end:formattedEnd,
          posNomId: posNomId,
          title: title,
          departmentId: departmentId,
          departmentTitle: departmentTitle,
          departmentNomId: departmentNomId,
          specId :specId,
          maternityLeave: maternityLeave,
          defaultMfId:mfId,
          isResource:isResource
  ]
	
//собрать такую же мапу из записи в бд        
dbJobExecution=je.getJobExecutionMapFromDB(id)

log.info formattedStart.getClass()
// сравнить две мапы
je.mainScripts.compareMaps(jobEx,dbJobExecution)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution_position_profile" id="3c83a2fe-0679-4165-9d71-1b4e9bd4a36d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

archivedPosProf=false
id = testRunner.testCase.getPropertyValue("nonExistedJEId1")
countPosProf = testRunner.testCase.getPropertyValue("countPosProf").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getJobExecutionPosProf = ("SELECT position_profile_id as id FROM job_execution_position_profile WHERE job_execution_id="+id+" order by position_profile_id")
jobExecutionPosProf= sql.rows(getJobExecutionPosProf)
assert jobExecutionPosProf.size()==countPosProf

for(int i=1; i&lt;=countPosProf; i++){
	posProfId=testRunner.testCase.getPropertyValue("posProfId"+i)
	n=i-1
	assert posProfId==jobExecutionPosProf[n].id.toString()
}

log.info 'end' </script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в resource" id="37f8cd42-a849-41db-8932-b208660dd9c5"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"AR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
title=lastName +  " " + firstName +  " " + middleName
resource =[
                archived:false,
                title : title,
                resourceKind : "AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : mfId
        ]

 // сравнить две мапы
e.mainScripts.compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="768075e9-1377-467a-b647-7522e4034e48"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
def res = new Resource(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

res.clearArResourceByParentId(id)

je.clearJobExecution("nonExistedJEId")
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentId2</con:name><con:value>37</con:value></con:property><con:property><con:name>posProfTreatmentId1</con:name><con:value>36</con:value></con:property><con:property><con:name>posNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posNomId1</con:name><con:value>125684946</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14 14:38</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>1</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309622</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>128309623</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="43c8541c-de77-472c-b442-117c6af4a54c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности с maternityLeave=true" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="c8793397-f2dd-46aa-8c7c-5f6a5665f979"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.getNonExistedJobExecution()

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="3fec64da-5aa7-4f82-8b5c-b5e31cb74e4f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о создании Исполнения должности" id="65b1a9aa-d6ae-48a1-9923-f809ce56a9c1"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=true
maternityLeave=true
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution  id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<maternityLeave>"""+maternityLeave+"""</maternityLeave>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution" id="ba10f4f6-b3dd-4cc8-84e7-f31c889c7d67"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 
import java.text.SimpleDateFormat

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
archived=false
manageable=true
maternityLeave=true
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1").toLong()
def mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()

def posNomId=testRunner.testCase.getPropertyValue("posNomId1").toLong()

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def specId=testRunner.testCase.getPropertyValue("specId1").toLong()
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1").toLong()
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1").toLong()
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1").toLong()

def dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")
formattedStart=je.mainScripts.convertStringToDate(start,dateFormat,dateFormat)
formattedEnd=je.mainScripts.convertStringToDate(end,dateFormat,dateFormat)	

def jobEx = [
          id: id,
          archived:archived,
          moId: moId,
          employeeId: employeeId,
          snils: snils,
          lastName: lastName,
          firstName:firstName,
          middleName: middleName,
          volume: volume,
          start: formattedStart,
          end:formattedEnd,
          posNomId: posNomId,
          title: title,
          departmentId: departmentId,
          departmentTitle: departmentTitle,
          departmentNomId: departmentNomId,
          specId :specId,
          maternityLeave: maternityLeave,
          defaultMfId:mfId,
          isResource:isResource
  ]
	
//собрать такую же мапу из записи в бд        
dbJobExecution=je.getJobExecutionMapFromDB(id)

log.info formattedStart.getClass()
// сравнить две мапы
je.mainScripts.compareMaps(jobEx,dbJobExecution)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution_position_profile" id="ebc70642-94b8-44ae-99c5-90925713cf37"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

archivedPosProf=false
id = testRunner.testCase.getPropertyValue("nonExistedJEId1")
countPosProf = testRunner.testCase.getPropertyValue("countPosProf").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getJobExecutionPosProf = ("SELECT position_profile_id as id FROM job_execution_position_profile WHERE job_execution_id="+id+" order by position_profile_id")
jobExecutionPosProf= sql.rows(getJobExecutionPosProf)
assert jobExecutionPosProf.size()==countPosProf

for(int i=1; i&lt;=countPosProf; i++){
	posProfId=testRunner.testCase.getPropertyValue("posProfId"+i)
	n=i-1
	assert posProfId==jobExecutionPosProf[n].id.toString()
}

log.info 'end' </script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в resource" id="be3ea8be-d707-4dd3-b7b6-994d4bee154c"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

assert !res.checkExistenceResourceByParent(id,"AR")

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="14748cda-111e-466e-b466-06cacb1601f8"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
def res = new Resource(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

//res.clearArResourceByParentId(id)

je.clearJobExecution("nonExistedJEId")
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentId2</con:name><con:value>37</con:value></con:property><con:property><con:name>posProfTreatmentId1</con:name><con:value>36</con:value></con:property><con:property><con:name>posNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posNomId1</con:name><con:value>125684946</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14 14:50</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>1</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309622</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>128309623</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="6481dca6-6461-49fd-9671-7af275b6a91f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности с departmentManageable = false" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="18148f4d-7a74-43e6-ac73-025229dcf194"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.getNonExistedJobExecution()

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="7049861a-b98f-4d92-99f3-0de348650c81"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о создании Исполнения должности" id="88a15093-78ae-4ead-804f-1c9c4e5866d8"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=false
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.getPropertyValue("tomorrow")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution  id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<maternityLeave>"""+maternityLeave+"""</maternityLeave>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в таблице job_execution" id="421a2d19-3bab-4c68-ba6c-db4c7b037fb1"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
//проверить отсутствие записи в job_execution 
assert !je.checkExistenceJobExecution(id)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в resource" id="eb80efb4-f130-41aa-82e9-843242d2bc9f"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

assert !res.checkExistenceResourceByParent(id,"AR")

</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="3c24cc74-1a21-4514-b097-7b970a07a26d"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

je.mainScripts.clearCreatedByTestInTestCaseWithIndex("tableJE","nonExistedJEId",1)
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentId2</con:name><con:value>37</con:value></con:property><con:property><con:name>posProfTreatmentId1</con:name><con:value>36</con:value></con:property><con:property><con:name>posNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posNomId1</con:name><con:value>125684946</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14 14:56</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>1</con:value></con:property><con:property><con:name>today</con:name><con:value>2023-03-14</con:value></con:property><con:property><con:name>tomorrow</con:name><con:value>2023-03-15</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309622</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>128309623</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="6965b618-e5b6-44a4-82ed-3e8e75a4179a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание Исполнения должности с 100 positionProfile" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="c266e598-902b-4694-ae33-0fc2a557e61e"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.getNonExistedJobExecution()

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="edff2bb7-984a-44a9-8502-be18a29c7449"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о создании Исполнения должности" id="9d38c78e-22ec-4427-84d1-61eba4f9b85b"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution archived=\""""+archived+"""\" id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<maternityLeave>"""+maternityLeave+"""</maternityLeave>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution" id="d767c197-ef18-4ea1-8efe-977dc837d269"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 
import java.text.SimpleDateFormat

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1").toLong()
def mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()

def posNomId=testRunner.testCase.getPropertyValue("posNomId1").toLong()

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def specId=testRunner.testCase.getPropertyValue("specId1").toLong()
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1").toLong()
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1").toLong()
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1").toLong()

def dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")
formattedStart=je.mainScripts.convertStringToDate(start,dateFormat,dateFormat)
formattedEnd=je.mainScripts.convertStringToDate(end,dateFormat,dateFormat)	

def jobEx = [
          id: id,
          archived:archived,
          moId: moId,
          employeeId: employeeId,
          snils: snils,
          lastName: lastName,
          firstName:firstName,
          middleName: middleName,
          volume: volume,
          start: formattedStart,
          end:formattedEnd,
          posNomId: posNomId,
          title: title,
          departmentId: departmentId,
          departmentTitle: departmentTitle,
          departmentNomId: departmentNomId,
          specId :specId,
          maternityLeave: maternityLeave,
          defaultMfId:mfId,
          isResource:isResource
  ]
	
//собрать такую же мапу из записи в бд        
dbJobExecution=je.getJobExecutionMapFromDB(id)

log.info formattedStart.getClass()
// сравнить две мапы
je.mainScripts.compareMaps(jobEx,dbJobExecution)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution_position_profile" id="e9c4eb0f-0f0b-46e5-ae18-125555f506b9"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

archivedPosProf=false
id = testRunner.testCase.getPropertyValue("nonExistedJEId1")
countPosProf = testRunner.testCase.getPropertyValue("countPosProf").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getJobExecutionPosProf = ("SELECT position_profile_id as id FROM job_execution_position_profile WHERE job_execution_id="+id+" order by position_profile_id")
jobExecutionPosProf= sql.rows(getJobExecutionPosProf)
assert jobExecutionPosProf.size()==countPosProf

for(int i=1; i&lt;=countPosProf; i++){
	posProfId=testRunner.testCase.getPropertyValue("posProfId"+i)
	n=i-1
	assert posProfId==jobExecutionPosProf[n].id.toString()
}

log.info 'end' </script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в resource" id="2eaee818-f682-48ce-8708-564dcfafe482"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"AR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
title=lastName +  " " + firstName +  " " + middleName
resource =[
                archived:false,
                title : title,
                resourceKind : "AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : mfId
        ]

 // сравнить две мапы
e.mainScripts.compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="15787ccd-6bab-432b-8eb6-eb1cdb5e44c5"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
def res = new Resource(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

res.clearArResourceByParentId(id)

je.clearJobExecution("nonExistedJEId")
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentId2</con:name><con:value>37</con:value></con:property><con:property><con:name>posProfTreatmentId1</con:name><con:value>36</con:value></con:property><con:property><con:name>posNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posNomId1</con:name><con:value>125684946</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14 15:00</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>100</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309622</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>128309623</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="c89d0717-adde-4040-a90a-98f58403a577" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение всех параметров Исполнения должности" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать данные" id="810a3ecc-4c75-44d1-9416-ecd335907462"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
treatments.findTreatmentsWithTreatmentCount()
count=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
treatmentsList = treatments.getTreatmentsIdStringList(count)
log.info treatmentsList

count=testRunner.testCase.getPropertyValue("countPosProf").toInteger()

je.posProf.createPosProfilesWithCount(1,count)

je.posProf.createPosProfTreatmentsForPosProfList(treatmentsList,count)

je.mo.createStructureOfMO(1)

je.mo.findDepartmentNoms()

je.resTypes.getArResourceTypes()

je.findPosNomId("arResTypeId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="bd3e98ea-2369-4baa-8037-15331164b397"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.dates().saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="groovy" name="Создать записи в job_execution и job_execution_position_profile" id="b671301f-9804-4a7d-bd3d-e59deea7873a"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 

archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def specId=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

values=archived.toString()+","+moId+","+employeeId+",'"+snils+"','"+lastName+"','"+firstName+"','"+middleName+"',"+volume+",'"+start+"','"+end+"',"+posNomId+",'"+title+"',"+departmentId+",'"+departmentTitle+"',"+departmentNomId+","+specId+","+maternityLeave.toString()+","+mfId+","+isResource.toString()
//"id,archived,medical_organization_id,employee_id,employee_snils,employee_last_name,employee_first_name,employee_middle_name,job_execution_volume,\"start\",finish,position_nom_id,position_title,department_id,department_title,department_nom_id,specialization_id,maternity_leave,default_medical_facility_id,is_resource"
log.info values
je.createJobExecution(values)
je.createJobExecutionPosProf("jobExecutionId1")
</script></con:config></con:testStep><con:testStep type="groovy" name="Создать записи в resource" id="fc656b6b-eded-42b8-b145-064dd16081d2"><con:settings/><con:config><script>def res = new Resource(context, testRunner, log)

def id=testRunner.testCase.getPropertyValue("jobExecutionId1").toLong()
log.info id.getClass()
res.createArResourceByParentEntity(id)
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщения о изменении Исполнения должности" id="6e463c3e-0743-432b-bb17-1555338e0763"><con:settings/><con:config><script><![CDATA[def je = new JobExecution(context, testRunner, log) 

posProfiles=je.posProf.collectPositionProfiles(false)

log.info "posProfiles "+posProfiles

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1")
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1")
def mfId=testRunner.testCase.getPropertyValue("mfId1")

def posNomId=testRunner.testCase.getPropertyValue("posNomId1")

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1")

def spec=testRunner.testCase.getPropertyValue("specId1")
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1")
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1")
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1")

def topicJobExecution=testRunner.testCase.testSuite.getPropertyValue("topicJobExecution")

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>"""+
"""<jobExecution id=\""""+id+"""\" isAvailableResource=\""""+isResource+"""\" xmlns="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns5="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns2="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns4="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types">"""+
"""<title>"""+title+"""</title>"""+
"""<nomId>"""+posNomId+"""</nomId>"""+
"""<employee id=\""""+employeeId+"""\">"""+
"""<ns2:snils>"""+snils+"""</ns2:snils>"""+
"""<ns2:lastName>"""+lastName+"""</ns2:lastName>"""+
"""<ns2:firstName>"""+firstName+"""</ns2:firstName>"""+
"""<ns2:middleName>"""+middleName+"""</ns2:middleName>"""+
"""</employee>"""+
"""<jobExecutionVolume>"""+volume+"""</jobExecutionVolume>"""+
"""<jobExecutionPeriod>"""+
"""<ns2:start>"""+start+"""</ns2:start>"""+
"""<ns2:end>"""+end+"""</ns2:end>"""+
"""</jobExecutionPeriod>"""+
"""<ns2:medicalOrganizationId>"""+moId+"""</ns2:medicalOrganizationId>"""+
"""<department  id=\""""+departmentId+"""\" manageable = \""""+manageable+"""\">"""+
"""<ns2:title>"""+departmentTitle+"""</ns2:title>"""+
"""<ns2:nomId>"""+departmentNomId+"""</ns2:nomId>"""+
"""</department>"""+
"""<specializationId>"""+spec+"""</specializationId>"""+
"""<maternityLeave>"""+maternityLeave+"""</maternityLeave>"""+
"""<defaultMedicalFacilityId>"""+mfId+"""</defaultMedicalFacilityId>"""+posProfiles+
"""</jobExecution>"""

je.mainScripts.sendMessageToKafka2(topicJobExecution,message)
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution" id="cea1e67b-d162-4093-a6d9-7d9ef8e1e1f7"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log) 
import java.text.SimpleDateFormat

def id=testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()
archived=false
manageable=true
maternityLeave=false
isResource=true

def moId=testRunner.testCase.getPropertyValue("moId1").toLong()
def mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()

def posNomId=testRunner.testCase.getPropertyValue("posNomId1").toLong()

def departmentNomId=testRunner.testCase.getPropertyValue("depNomId1").toLong()

def specId=testRunner.testCase.getPropertyValue("specId1").toLong()
def title=testRunner.testCase.testSuite.getPropertyValue("title1")
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
def departmentId=testRunner.testCase.testSuite.getPropertyValue("departmentId1").toLong()
def departmentTitle=testRunner.testCase.testSuite.getPropertyValue("departmentTitle1")
def end=testRunner.testCase.testSuite.getPropertyValue("end1")
def start=testRunner.testCase.testSuite.getPropertyValue("start1")
def employeeId=testRunner.testCase.testSuite.getPropertyValue("employeeId1").toLong()
def snils=testRunner.testCase.testSuite.getPropertyValue("employeeSnils1")
def volume=testRunner.testCase.testSuite.getPropertyValue("jobExecutionVolume1").toLong()

def dateFormat=testRunner.testCase.testSuite.getPropertyValue("dateFormat")
formattedStart=je.mainScripts.convertStringToDate(start,dateFormat,dateFormat)
formattedEnd=je.mainScripts.convertStringToDate(end,dateFormat,dateFormat)	

def jobEx = [
          id: id,
          archived:archived,
          moId: moId,
          employeeId: employeeId,
          snils: snils,
          lastName: lastName,
          firstName:firstName,
          middleName: middleName,
          volume: volume,
          start: formattedStart,
          end:formattedEnd,
          posNomId: posNomId,
          title: title,
          departmentId: departmentId,
          departmentTitle: departmentTitle,
          departmentNomId: departmentNomId,
          specId :specId,
          maternityLeave: maternityLeave,
          defaultMfId:mfId,
          isResource:isResource
  ]
	
//собрать такую же мапу из записи в бд        
dbJobExecution=je.getJobExecutionMapFromDB(id)

log.info formattedStart.getClass()
// сравнить две мапы
je.mainScripts.compareMaps(jobEx,dbJobExecution)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в таблице job_execution_position_profile" id="983f0222-cdb7-4b52-b843-e75cb760660f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

archivedPosProf=false
id = testRunner.testCase.getPropertyValue("nonExistedJEId1")
countPosProf = testRunner.testCase.getPropertyValue("countPosProf").toInteger()
table = testRunner.testCase.testSuite.project.getPropertyValue("tableJE")
getJobExecutionPosProf = ("SELECT position_profile_id as id FROM job_execution_position_profile WHERE job_execution_id="+id+" order by position_profile_id")
jobExecutionPosProf= sql.rows(getJobExecutionPosProf)
assert jobExecutionPosProf.size()==countPosProf

for(int i=1; i&lt;=countPosProf; i++){
	posProfId=testRunner.testCase.getPropertyValue("posProfId"+i)
	n=i-1
	assert posProfId==jobExecutionPosProf[n].id.toString()
}

log.info 'end' </script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в resource" id="21e34e7e-993a-404a-bd68-5e5dd4016574"><con:settings/><con:config><script>def e = new Equipment(context, testRunner, log)
def res = new Resource(context, testRunner, log)
id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

//получить созданный ресурс из бд как мапу
dbResource =res.getResourceByParent(id,"AR")

//записать отдельно дату синхронизации, удалить из мапы id и дату синхронизации. id мы не можем угадать заранее, а дату сравним отдельно
dbSyncStatusChanged=dbResource.syncStatusChanged
dbSyncDate=dbResource.syncStatusChanged.toString()
dbResource.remove('id')
dbResource.remove('syncStatusChanged')

//записать в мапу ожидаемые параметры ресурса
moId=testRunner.testCase.getPropertyValue("moId1").toLong()
mfId=testRunner.testCase.getPropertyValue("mfId1").toLong()
def lastName=testRunner.testCase.testSuite.getPropertyValue("employeeLastName1")
def firstName=testRunner.testCase.testSuite.getPropertyValue("employeeFirstName1")
def middleName=testRunner.testCase.testSuite.getPropertyValue("employeeMiddleName1")
title=lastName +  " " + firstName +  " " + middleName
resource =[
                archived:false,
                title : title,
                resourceKind : "AVAILABLE_RESOURCE",
                parentId : id,
                moId : moId,
                resTypeId : null,
                specId : null,
                depId : null,
                depTitle : null,
                depNomId : null,
                functionKind : null,
                functionId : null,
                functionTitle : null,
                functionVolume : null,
                mfId : mfId,
                locId : null,
                syncStatus : 'IN_PROGRESS',
                parentTypeId : null,
                schedulingMedicalFacilityId : mfId
        ]

 // сравнить две мапы
e.mainScripts.compareMaps(resource,dbResource)

// отформатировать  дату до отправки сообщения
currentDate=testRunner.testCase.getPropertyValue("currentDate")
format=testRunner.testCase.testSuite.getPropertyValue("dateTimeFormat")
formattedCurrentDate=e.mainScripts.formatStringDate(currentDate,format)

//сравнить, что дата синхронизации меньше или равна записанной текущей дате
assert formattedCurrentDate&lt;=dbSyncDate
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить созданные данные" id="9736e01c-0f96-421f-b5e1-5ad1c7a4d59d"><con:settings/><con:config><script>def je = new JobExecution(context, testRunner, log)
def treatments = new Treatments(context, testRunner, log)
def res = new Resource(context, testRunner, log)
Long id = testRunner.testCase.getPropertyValue("nonExistedJEId1").toLong()

res.clearArResourceByParentId(id)

je.clearJobExecution("nonExistedJEId")
je.posProf.clearPosProf()
je.mo.clearStructureOfMO(1)
je.mo.clearDepartmentNoms()
je.resTypes.clearArResourceTypes()
treatments.clearTreatments2()
</script></con:config></con:testStep><con:properties><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfTreatmentId2</con:name><con:value>37</con:value></con:property><con:property><con:name>posProfTreatmentId1</con:name><con:value>36</con:value></con:property><con:property><con:name>posNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posNomId1</con:name><con:value>125684946</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14 12:44</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>1</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>tId1</con:name><con:value>128309622</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>128309623</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>215</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_auto1</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>Профиль должности автотест1</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-336</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>6845</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-336</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>7564</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>depNomId1</con:name><con:value>125693084</con:value></con:property><con:property><con:name>depNomIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>arResTypeId1</con:name><con:value>158297691</con:value></con:property><con:property><con:name>arResTypeIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>jobExecutionId1</con:name><con:value>11877871298</con:value></con:property><con:property><con:name>jobExecutionIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>resourceId1</con:name><con:value>30100210854</con:value></con:property><con:property><con:name>resourceIdCreatedByTest1</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topicJobExecution</con:name><con:value>topicJobExecution.rir2</con:value></con:property><con:property><con:name>dateTimeFormat</con:name><con:value>yyyy-MM-dd HH:mm</con:value></con:property><con:property><con:name>departmentId1</con:name><con:value>200001</con:value></con:property><con:property><con:name>departmentId2</con:name><con:value>200002</con:value></con:property><con:property><con:name>departmentTitle1</con:name><con:value>Описание подразделения автотес 1</con:value></con:property><con:property><con:name>departmentTitle2</con:name><con:value>Описание подразделения автотест 2</con:value></con:property><con:property><con:name>employeeFirstName1</con:name><con:value>Антон</con:value></con:property><con:property><con:name>employeeFirstName2</con:name><con:value>Алексей</con:value></con:property><con:property><con:name>employeeId1</con:name><con:value>100001</con:value></con:property><con:property><con:name>employeeId2</con:name><con:value>100002</con:value></con:property><con:property><con:name>employeeLastName1</con:name><con:value>Иванов</con:value></con:property><con:property><con:name>employeeLastName2</con:name><con:value>Петров</con:value></con:property><con:property><con:name>employeeMiddleName1</con:name><con:value>Эдуардович</con:value></con:property><con:property><con:name>employeeMiddleName2</con:name><con:value>Геннадьевич </con:value></con:property><con:property><con:name>employeeSnils1</con:name><con:value>05659887845</con:value></con:property><con:property><con:name>employeeSnils2</con:name><con:value>323565655</con:value></con:property><con:property><con:name>end1</con:name><con:value>2200-10-01</con:value></con:property><con:property><con:name>end2</con:name><con:value>2021-12-31</con:value></con:property><con:property><con:name>jobExecutionVolume1</con:name><con:value>1</con:value></con:property><con:property><con:name>jobExecutionVolume2</con:name><con:value>2</con:value></con:property><con:property><con:name>posTitle1</con:name><con:value>Описание должности автотест 1</con:value></con:property><con:property><con:name>posTitle2</con:name><con:value>Описание должности автотест 2</con:value></con:property><con:property><con:name>start1</con:name><con:value>1999-01-01</con:value></con:property><con:property><con:name>start2</con:name><con:value>1999-01-02</con:value></con:property><con:property><con:name>title1</con:name><con:value>Описание исполнения должности</con:value></con:property><con:property><con:name>title2</con:name><con:value>Описание исполнения должности2</con:value></con:property><con:property><con:name>dateFormat</con:name><con:value>yyyy-MM-dd</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>ArScheduleWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/ArSchedule?wsdl</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.173.127:5432/rir2</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>rir2</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>rir2</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>db_rir2_con</con:name><con:value>10.2.173.127:5432/rir2</con:value></con:property><con:property><con:name>db_rir2_password</con:name><con:value>rir2</con:value></con:property><con:property><con:name>db_rir2_user</con:name><con:value>rir2</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>112740</con:value></con:property><con:property><con:name>journalWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/Journal?wsdl</con:value></con:property><con:property><con:name>PushWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/push</con:value></con:property><con:property><con:name>ResourcesWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/Resources</con:value></con:property><con:property><con:name>RouteWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/Route?wsdl</con:value></con:property><con:property><con:name>SarScheduleWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/SarSchedule?wsdl</con:value></con:property><con:property><con:name>ScheduleWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/Schedule?wsdl</con:value></con:property><con:property><con:name>securityUsername</con:name><con:value>KPI_APC_METHODIST/HAdiatullina</con:value></con:property><con:property><con:name>systemName</con:name><con:value>KPI_APC_METHODIST</con:value></con:property><con:property><con:name>SystemWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/System?wsdl</con:value></con:property><con:property><con:name>tableAG</con:name><con:value>AGE_GROUP</con:value></con:property><con:property><con:name>tableAO</con:name><con:value>ADDRESS_OBJECT</con:value></con:property><con:property><con:name>tableArRuleType</con:name><con:value>AR_SCHRULE_TYPE</con:value></con:property><con:property><con:name>tableDepNom</con:name><con:value>DEPARTMENT_NOM</con:value></con:property><con:property><con:name>tableDiagnosis</con:name><con:value>diagnosis</con:value></con:property><con:property><con:name>tableE</con:name><con:value>EQUIPMENT</con:value></con:property><con:property><con:name>tableEP</con:name><con:value>EQUIPMENT_PROFILE</con:value></con:property><con:property><con:name>tableET</con:name><con:value>EQUIPMENT_TREATMENT</con:value></con:property><con:property><con:name>tableJ</con:name><con:value>JOURNAL</con:value></con:property><con:property><con:name>tableJE</con:name><con:value>JOB_EXECUTION</con:value></con:property><con:property><con:name>tableLoc</con:name><con:value>LOCATION</con:value></con:property><con:property><con:name>tableMF</con:name><con:value>MEDICAL_FACILITY</con:value></con:property><con:property><con:name>tableMFWH</con:name><con:value>MEDICAL_FACILITY_WORKHOURS</con:value></con:property><con:property><con:name>tableMO</con:name><con:value>MEDICAL_ORGANIZATION</con:value></con:property><con:property><con:name>tablePCalendar</con:name><con:value>PRODUCTION_CALENDAR</con:value></con:property><con:property><con:name>tablePosNom</con:name><con:value>POSITION_NOM</con:value></con:property><con:property><con:name>tablePosProf</con:name><con:value>position_profile</con:value></con:property><con:property><con:name>tablePosProfTreatment</con:name><con:value>position_profile_treatment</con:value></con:property><con:property><con:name>tableRes</con:name><con:value>RESOURCE</con:value></con:property><con:property><con:name>tableResSchedule</con:name><con:value>RESOURCE_SCHEDULE</con:value></con:property><con:property><con:name>tableResType</con:name><con:value>RESOURCE_TYPE</con:value></con:property><con:property><con:name>tableRoute</con:name><con:value>ROUTE</con:value></con:property><con:property><con:name>tableRouteDiag</con:name><con:value>ROUTE_DIAGNOSIS</con:value></con:property><con:property><con:name>tableRoutePosProf</con:name><con:value>route_position_profile</con:value></con:property><con:property><con:name>tableRouteRecMF</con:name><con:value>route_receiving_medical_facility</con:value></con:property><con:property><con:name>tableRouteRefMO</con:name><con:value>route_referral_medical_organization</con:value></con:property><con:property><con:name>tableRouteT</con:name><con:value>ROUTE_TREATMENT</con:value></con:property><con:property><con:name>tableRPCM</con:name><con:value>ROUTE_POSITION_CODE_MAPPING</con:value></con:property><con:property><con:name>tableRTLM</con:name><con:value>ROUTE_TREATMENT_LDP_MAPPING</con:value></con:property><con:property><con:name>tableSarRule</con:name><con:value>SAR_SCHRULE</con:value></con:property><con:property><con:name>tableSarRuleType</con:name><con:value>SAR_SCHRULE_TYPE</con:value></con:property><con:property><con:name>tableSchedule</con:name><con:value>SCHEDULE</con:value></con:property><con:property><con:name>tableSpec</con:name><con:value>SPECIALIZATION</con:value></con:property><con:property><con:name>tableSysLock</con:name><con:value>SYSTEM_LOCKS</con:value></con:property><con:property><con:name>tableSYSOP</con:name><con:value>SYSOP</con:value></con:property><con:property><con:name>tableT</con:name><con:value>TREATMENT</con:value></con:property><con:property><con:name>tableTC</con:name><con:value>TREATMENT_CATEGORY</con:value></con:property><con:property><con:name>topic</con:name><con:value>ScheduleChangeProcessingStatusTest</con:value></con:property><con:property><con:name>topicJobExecution</con:name><con:value>SVMRInformerJobExecution</con:value></con:property><con:property><con:name>topicJobExecution.rir2</con:name><con:value>SVMRInformerJobExecution.rir2</con:value></con:property><con:property><con:name>topicLocation</con:name><con:value>SVMRInformerLocation</con:value></con:property><con:property><con:name>topicLocation.APPOINTMENT3</con:name><con:value>SVMRInformerLocation.APPOINTMENT3</con:value></con:property><con:property><con:name>topicLocation.rir2</con:name><con:value>SVMRInformerLocation.rir2</con:value></con:property><con:property><con:name>topicLocationEquipment</con:name><con:value>SVMRInformerLocationEquipment</con:value></con:property><con:property><con:name>topicLocationEquipment.rir2</con:name><con:value>SVMRInformerLocationEquipment.rir2</con:value></con:property><con:property><con:name>topicMF</con:name><con:value>MUMsg</con:value></con:property><con:property><con:name>topicMF.APPOINTMENT3</con:name><con:value>MUMsg.APPOINTMENT3</con:value></con:property><con:property><con:name>topicMF.rir2</con:name><con:value>MUMsg.rir2</con:value></con:property><con:property><con:name>topicMO</con:name><con:value>MOMsg</con:value></con:property><con:property><con:name>topicMO.APPOINTMENT3</con:name><con:value>MOMsg.APPOINTMENT3</con:value></con:property><con:property><con:name>topicMO.rir2</con:name><con:value>MOMsg.rir2</con:value></con:property><con:property><con:name>topicResource</con:name><con:value>ResourceChange</con:value></con:property><con:property><con:name>topicRoute</con:name><con:value>Rir2Routes</con:value></con:property><con:property><con:name>topicScheduleChange</con:name><con:value>ScheduleChange</con:value></con:property><con:property><con:name>topicScheduleChangeProcessingStatus</con:name><con:value>ScheduleChangeProcessingStatus</con:value></con:property><con:property><con:name>topicScheduleProcessing</con:name><con:value>ScheduleChangeProcessingStatus</con:value></con:property><con:property><con:name>topicScheduleProcessingTest</con:name><con:value>ScheduleChangeProcessingStatusTest</con:value></con:property><con:property><con:name>userName</con:name><con:value>HAdiatullina</con:value></con:property><con:property><con:name>userRoleId</con:name><con:value>7014</con:value></con:property><con:property><con:name>tableJEPP</con:name><con:value>job_execution_position_profile</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>