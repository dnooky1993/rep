<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="b6862093-30d6-43fd-b88f-1db684a7f8e9" activeEnvironment="Default" name="ДН Kafka" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" encryptionMode="Not encrypted" updated="3.10.0 2021-09-14T15:18:10Z" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" id="170d76b2-36aa-4c8c-973a-10a2a2acaa2e" wsaVersion="NONE" name="simiServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/simi/simiService/v5/}simiServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl"><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<!--Generated by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.3.1 (UNKNOWN_BRANCH-false; 2015-01-15T16:53:43+0100) JAXWS-RI/2.2.10 JAXWS-API/2.2.11 JAXB-RI/2.2.10-b140802.1033 JAXB-API/2.2.12-b140109.1041 svn-revision#unknown.-->
<definitions name="simiService" targetNamespace="http://emias.mos.ru/simi/simiService/v5/" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:cet="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="http://emias.mos.ru/simi/simiService/v5/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <documentation>Сервис SimiService с объектной моделью Document v5</documentation>
  <types>
    <xsd:schema>
      <xsd:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wSPe7rI6EH1EGGOBEEq2OF.g-"/>
      <xsd:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wSQbg4gjq.Y9UZnNlFAIM5dk-"/>
      <xsd:import namespace="http://emias.mos.ru/simi/faults/v5/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wQ6SMCzdAAsFjb8wvLCEekDY-"/>
      <xsd:import namespace="http://emias.mos.ru/simi/simiService/v5/types/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wShAlHpHNw6RfsO82_pitXUTj"/>
    </xsd:schema>
  </types>
  <message name="userContext">
    <documentation>Контекст пользователя</documentation>
    <part element="uctx:userContext" name="userContext"/>
  </message>
  <message name="fault">
    <documentation>Ошибка</documentation>
    <part element="nsf:fault" name="fault"/>
  </message>
  <message name="deprecateDocumentInput">
    <part element="cet:deprecateDocumentRequest" name="parameters"/>
  </message>
  <message name="deprecateDocumentOutput">
    <part element="cet:deprecateDocumentResponse" name="parameters"/>
  </message>
  <message name="getCareEventDocumentsInput">
    <part element="cet:getCareEventDocumentsRequest" name="parameters"/>
  </message>
  <message name="getCareEventDocumentsOutput">
    <part element="cet:getCareEventDocumentsResponse" name="parameters"/>
  </message>
  <message name="saveDocumentInput">
    <part element="cet:saveDocumentRequest" name="parameters"/>
  </message>
  <message name="saveDocumentOutput">
    <part element="cet:saveDocumentResponse" name="parameters"/>
  </message>
  <message name="archiveDocumentInput">
    <part element="cet:archiveDocumentRequest" name="parameters"/>
  </message>
  <message name="archiveDocumentOutput">
    <part element="cet:archiveDocumentResponse" name="parameters"/>
  </message>
  <message name="searchDocumentsInput">
    <part element="cet:searchDocumentsRequest" name="parameters"/>
  </message>
  <message name="searchDocumentsOutput">
    <part element="cet:searchDocumentsResponse" name="parameters"/>
  </message>
  <message name="getDocumentInput">
    <part element="cet:getDocumentRequest" name="parameters"/>
  </message>
  <message name="getDocumentOutput">
    <part element="cet:getDocumentResponse" name="parameters"/>
  </message>
  <message name="getAuditRecordsInput">
    <part element="cet:getAuditRecordsRequest" name="parameters"/>
  </message>
  <message name="getAuditRecordsOutput">
    <part element="cet:getAuditRecordsResponse" name="parameters"/>
  </message>
  <message name="createDocumentInput">
    <part element="cet:createDocumentRequest" name="parameters"/>
  </message>
  <message name="createDocumentOutput">
    <part element="cet:createDocumentResponse" name="parameters"/>
  </message>
  <message name="getCareEventDocumentsForSignInput">
    <part element="cet:getCareEventDocumentsForSignRequest" name="parameters"/>
  </message>
  <message name="getCareEventDocumentsForSignOutput">
    <part element="cet:getCareEventDocumentsForSignResponse" name="parameters"/>
  </message>
  <message name="getDocumentsByPatientForSignInput">
    <part element="cet:getDocumentsByPatientForSignRequest" name="parameters"/>
  </message>
  <message name="getDocumentsByPatientForSignOutput">
    <part element="cet:getDocumentsByPatientForSignResponse" name="parameters"/>
  </message>
  <message name="getDocumentsForSignInput">
    <part element="cet:getDocumentsForSignRequest" name="parameters"/>
  </message>
  <message name="getDocumentsForSignOutput">
    <part element="cet:getDocumentsForSignResponse" name="parameters"/>
  </message>
  <portType name="simiServicePortType">
    <operation name="deprecateDocument">
      <documentation>Аннулирование документов</documentation>
      <input message="tns:deprecateDocumentInput" name="deprecateDocumentInput"/>
      <output message="tns:deprecateDocumentOutput" name="deprecateDocumentOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="getCareEventDocuments">
      <documentation>Получение документов по событию</documentation>
      <input message="tns:getCareEventDocumentsInput" name="getCareEventDocumentsInput"/>
      <output message="tns:getCareEventDocumentsOutput" name="getCareEventDocumentsOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="saveDocument">
      <documentation>Сохранение документа</documentation>
      <input message="tns:saveDocumentInput" name="saveDocumentInput"/>
      <output message="tns:saveDocumentOutput" name="saveDocumentOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="archiveDocument">
      <documentation>Архивирование документов</documentation>
      <input message="tns:archiveDocumentInput" name="archiveDocumentInput"/>
      <output message="tns:archiveDocumentOutput" name="archiveDocumentOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="searchDocuments">
      <documentation>Выборка документов</documentation>
      <input message="tns:searchDocumentsInput" name="searchDocumentsInput"/>
      <output message="tns:searchDocumentsOutput" name="searchDocumentsOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="getDocument">
      <documentation>Получение документа</documentation>
      <input message="tns:getDocumentInput" name="getDocumentInput"/>
      <output message="tns:getDocumentOutput" name="getDocumentOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="getAuditRecords">
      <documentation>Получение записей об аудите</documentation>
      <input message="tns:getAuditRecordsInput" name="getAuditRecordsInput"/>
      <output message="tns:getAuditRecordsOutput" name="getAuditRecordsOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="createDocument">
      <documentation>Создание документа</documentation>
      <input message="tns:createDocumentInput" name="createDocumentInput"/>
      <output message="tns:createDocumentOutput" name="createDocumentOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="getCareEventDocumentsForSign">
      <documentation>Получение документов для подписания по клиническому событию</documentation>
      <input message="tns:getCareEventDocumentsForSignInput" name="getCareEventDocumentsForSignInput"/>
      <output message="tns:getCareEventDocumentsForSignOutput" name="getCareEventDocumentsForSignOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="getDocumentsByPatientForSign">
      <documentation>Получение документов для подписания по пациенту</documentation>
      <input message="tns:getDocumentsByPatientForSignInput" name="getDocumentsByPatientForSignInput"/>
      <output message="tns:getDocumentsByPatientForSignOutput" name="getDocumentsByPatientForSignOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
    <operation name="getDocumentsForSign">
      <documentation>Получение документов для подписания по идентификаторам</documentation>
      <input message="tns:getDocumentsForSignInput" name="getDocumentsForSignInput"/>
      <output message="tns:getDocumentsForSignOutput" name="getDocumentsForSignOutput"/>
      <fault message="tns:fault" name="fault"/>
    </operation>
  </portType>
  <binding name="simiServiceBinding" type="tns:simiServicePortType">
    <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="deprecateDocument">
      <soap12:operation soapAction="deprecateDocument"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="getCareEventDocuments">
      <soap12:operation soapAction="getCareEventDocuments"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="saveDocument">
      <soap12:operation soapAction="saveDocument"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="archiveDocument">
      <soap12:operation soapAction="archiveDocument"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDocuments">
      <soap12:operation soapAction="searchDocuments"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="getDocument">
      <soap12:operation soapAction="getDocument"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="getAuditRecords">
      <soap12:operation soapAction="getAuditRecords"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="createDocument">
      <soap12:operation soapAction="createDocument"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="getCareEventDocumentsForSign">
      <soap12:operation soapAction="getCareEventDocumentsForSign"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="getDocumentsByPatientForSign">
      <soap12:operation soapAction="getDocumentsByPatientForSign"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="getDocumentsForSign">
      <soap12:operation soapAction="getDocumentsForSign"/>
      <input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"/>
        <soap12:body use="literal"/>
      </input>
      <output>
        <soap12:body use="literal"/>
      </output>
      <fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </fault>
    </operation>
  </binding>
  <service name="simiService" xmlns:wsp="http://www.w3.org/ns/ws-policy">
    <port binding="tns:simiServiceBinding" name="simiServicePort">
      <soap12:address location="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService"/>
      <wsp:PolicyReference URI="#authPolicy"/>
    </port>
  </service>
  <wsp:Policy wsu:Id="authPolicy" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wSPe7rI6EH1EGGOBEEq2OF.g-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/userContext/" xmlns:core="http://emias.mos.ru/system/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wT2c7RR2Mr0q5YRmjA.MCyXw-"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Роли пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль пользователя"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>ИД Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wT2c7RR2Mr0q5YRmjA.MCyXw-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wSQbg4gjq.Y9UZnNlFAIM5dk-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns="http://emias.mos.ru/system/v1/faults/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wT2c7RR2Mr0q5YRmjA.MCyXw-"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wSPe7rI6EH1EGGOBEEq2OF.g-"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wQ6SMCzdAAsFjb8wvLCEekDY-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<xs:schema targetNamespace="http://emias.mos.ru/simi/faults/v5/" version="1.0" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wSQbg4gjq.Y9UZnNlFAIM5dk-"/>
  <!--base types-->
  <xs:complexType name="SimiFault">
    <xs:annotation>
      <xs:documentation>Ошибка обработки запроса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="nsf:BaseFault">
        <xs:sequence>
          <xs:element name="contextEntries">
            <xs:annotation>
              <xs:documentation>Параметры контекста возникновения ошибки</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:annotation>
                <xs:documentation>Параметры контекста возникновения ошибки</xs:documentation>
              </xs:annotation>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                  <xs:annotation>
                    <xs:documentation>Параметр контекста возникновения ошибки</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:annotation>
                      <xs:documentation>Параметр контекста возникновения ошибки</xs:documentation>
                    </xs:annotation>
                    <xs:sequence>
                      <xs:element minOccurs="0" name="key" type="xs:anyType">
                        <xs:annotation>
                          <xs:documentation>Название параметра контекста возникновения ошибки</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="value" type="xs:anyType">
                        <xs:annotation>
                          <xs:documentation>Значение параметра контекста возникновения ошибк</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="stackTrace" type="xs:string">
            <xs:annotation>
              <xs:documentation>Стек-трейс</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="message" type="xs:string">
            <xs:annotation>
              <xs:documentation>Сообщение об ошибке</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="errorCode" type="xs:int" use="required">
          <xs:annotation>
            <xs:documentation>Код ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wShAlHpHNw6RfsO82_pitXUTj</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<xs:schema targetNamespace="http://emias.mos.ru/simi/simiService/v5/types/" version="1.0" xmlns:cct="http://emias.mos.ru/simi/cct/v5/" xmlns:doc="http://emias.mos.ru/simi/document/v5/" xmlns:simicore="http://emias.mos.ru/simi/core/v5/" xmlns:tns="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/simi/document/v5/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wQlXXRbEu5B8xEV8OKo6cYgc-"/>
  <xs:import namespace="http://emias.mos.ru/simi/core/v5/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTUeN2BFRYvYdnD_hDrwHLR8-"/>
  <xs:import namespace="http://emias.mos.ru/simi/cct/v5/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTpZgC5viSZTrH4qCBUyAO00-"/>
  <!--query documents-->
  <xs:complexType name="DocumentsResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора Документов СИМИ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="simicore:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="item" type="doc:Metadata">
            <xs:annotation>
              <xs:documentation>Представляет метаданные Документа СИМИ</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DocumentsQueryData">
    <xs:annotation>
      <xs:documentation>Параметры отбора Документов СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="conditions">
        <xs:annotation>
          <xs:documentation>Условия отбора результатов</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>Условия отбора результатов</xs:documentation>
          </xs:annotation>
          <xs:sequence>
            <xs:element form="qualified" maxOccurs="unbounded" minOccurs="0" name="condition" type="tns:DocumentsFilterCondition">
              <xs:annotation>
                <xs:documentation>Условие отбора Документов СИМИ</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element form="qualified" minOccurs="0" name="orderClauses">
        <xs:annotation>
          <xs:documentation>Способы сортировки результатов</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>Способы сортировки результатов</xs:documentation>
          </xs:annotation>
          <xs:sequence>
            <xs:element form="qualified" maxOccurs="unbounded" minOccurs="0" name="orderClause" type="tns:DocumentsOrderClause">
              <xs:annotation>
                <xs:documentation>Способ сортировки результатов</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DocumentsFilterCondition">
    <xs:annotation>
      <xs:documentation>Условие отбора Документов СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element form="qualified" name="leftOperand" type="tns:DocumentsSearchAttribute">
        <xs:annotation>
          <xs:documentation>Левый операнд в условии сравнения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element form="qualified" name="rightOperand" type="xs:string">
        <xs:annotation>
          <xs:documentation>Правый операнд в условии сравнения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="operator" type="simicore:ComparisonType" use="required">
      <xs:annotation>
        <xs:documentation>Способ сравнения операндов</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="DocumentsOrderClause">
    <xs:annotation>
      <xs:documentation>Способ сортировки результатов отбора Документов СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element form="qualified" name="attributeName" type="tns:DocumentsSearchAttribute">
        <xs:annotation>
          <xs:documentation>Атрибут отбора Документов СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="ascending" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки (ascending/descending)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="DocumentsSearchAttribute">
    <xs:annotation>
      <xs:documentation>Атрибуты отбора Документов СИМИ</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="PATIENT_ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Пациента в ЕМИАС</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="STATUS">
        <xs:annotation>
          <xs:documentation>Статус документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SIMI_VERSION">
        <xs:annotation>
          <xs:documentation>Версия объектной модели Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="LINKS_PARENT">
        <xs:annotation>
          <xs:documentation>Восходящая зависимость</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="LINKS_DESCENDANT">
        <xs:annotation>
          <xs:documentation>Нисходящая зависимость</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DOCUMENT_ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DOCUMENT_SUBMISSION_SET">
        <xs:annotation>
          <xs:documentation>Идентификатор набора документов, которому принадлежит Документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DOCUMENT_CREATED">
        <xs:annotation>
          <xs:documentation>Дата/время создания Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="VALID">
        <xs:annotation>
          <xs:documentation>Бизнес признак валидности контента Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SIGNEE_LOGIN">
        <xs:annotation>
          <xs:documentation>Логин пользователя, подписавшего электронной подписью документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CCT_CODE">
        <xs:annotation>
          <xs:documentation>Код элемента терминологии CCT</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CARE_EVENT_ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Клинического события в операционном сервисе ЕМИАС.СУПП.События</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CARE_EVENT_STARTED">
        <xs:annotation>
          <xs:documentation>Дата/время начала Клинического события</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CARE_EVENT_FINISHED">
        <xs:annotation>
          <xs:documentation>Дата/время окончания Клинического события</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="AUTHOR_LOGIN">
        <xs:annotation>
          <xs:documentation>Логин пользователя-автора Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TAG_SCHEMA">
        <xs:annotation>
          <xs:documentation>Идентификатор терминологии "Тэга"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TAG_CODE">
        <xs:annotation>
          <xs:documentation>Код элемента терминологии "Тэга"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TAG_VALUE">
        <xs:annotation>
          <xs:documentation>Значение элемента терминологии "Тэга"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TAG_ROLE">
        <xs:annotation>
          <xs:documentation>Роль элемента терминологии "Тэга"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ASSOCIATION_TARGET_DOCUMENT_ID">
        <xs:annotation>
          <xs:documentation>Идентификатор целевого Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ASSOCIATION_TARGET_ROLE">
        <xs:annotation>
          <xs:documentation>Роль целевого Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ASSOCIATION_SOURCE_ROLE">
        <xs:annotation>
          <xs:documentation>Роль текущего Документа СИМИ по отношению к целевому Документу СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ASSOCIATION_TYPE_SCHEMA">
        <xs:annotation>
          <xs:documentation>Идентификатор типа междокументарной связи</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ASSOCIATION_TYPE_CODE">
        <xs:annotation>
          <xs:documentation>Код типа междокументарной связи</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ASSOCIATION_TYPE_VALUE">
        <xs:annotation>
          <xs:documentation>Значение типа междокументарной связи</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ASSOCIATION_TARGET_CCT_CODE">
        <xs:annotation>
          <xs:documentation>Код класса документов СИМИ, которому принадлежит целевой Документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <!--query audit user actions-->
  <xs:complexType name="AuditResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений из Журнала аудита операций, совершаемых пользователями</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="simicore:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="item" type="tns:AuditRecord">
            <xs:annotation>
              <xs:documentation>Результат отбора сведений из Журнала аудита операций, совершаемых пользователями</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AuditQueryData">
    <xs:annotation>
      <xs:documentation>Параметры отбора сведений из Журнала аудита операций, совершаемых пользователями</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element form="qualified" name="conditions">
        <xs:annotation>
          <xs:documentation>Условия отбора результатов</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>Условия отбора результатов</xs:documentation>
          </xs:annotation>
          <xs:sequence>
            <xs:element form="qualified" maxOccurs="unbounded" name="condition" type="tns:AuditFilterCondition">
              <xs:annotation>
                <xs:documentation>Условие отбора результатов</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element form="qualified" minOccurs="0" name="orderClauses">
        <xs:annotation>
          <xs:documentation>Способы сортировки результатов</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>Способы сортировки результатов</xs:documentation>
          </xs:annotation>
          <xs:sequence>
            <xs:element form="qualified" maxOccurs="unbounded" minOccurs="0" name="orderClause" type="tns:AuditOrderClause">
              <xs:annotation>
                <xs:documentation>Способ сортировки результатов</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AuditFilterCondition">
    <xs:annotation>
      <xs:documentation>Условие отбора сведений из Журнала аудита операций, совершаемых пользователями</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element form="qualified" name="leftOperand" type="tns:AuditSearchAttribute">
        <xs:annotation>
          <xs:documentation>Левый операнд в условии сравнения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element form="qualified" name="rightOperand" type="xs:string">
        <xs:annotation>
          <xs:documentation>Правый операнд в условии сравнения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="operator" type="simicore:ComparisonType" use="required">
      <xs:annotation>
        <xs:documentation>Способ сравнения операндов</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="AuditOrderClause">
    <xs:annotation>
      <xs:documentation>Способ сортировки результатов отбора сведений из Журнала аудита операций, совершаемых пользователями</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element form="qualified" name="attributeName" type="tns:AuditSearchAttribute">
        <xs:annotation>
          <xs:documentation>Поле журнала аудита действий пользователей</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="ascending" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки (ascending/descending)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="AuditRecord">
    <xs:annotation>
      <xs:documentation>Запись Журнала аудита операций, совершаемых пользователями</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="doc:documentId"/>
    </xs:sequence>
    <xs:attribute name="eventTime" type="xs:dateTime" use="required">
      <xs:annotation>
        <xs:documentation>Дата и время совершения операции пользователем</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action" type="tns:UserActionType" use="required">
      <xs:annotation>
        <xs:documentation>Тип операции, совершенной пользователем</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorCode" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Код ошибки выполнения операции, совершенной пользователем</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userLogin" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Логин пользователя, совершившего данную операцию</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="AuditSearchAttribute">
    <xs:annotation>
      <xs:documentation>Поля Журнала аудита операций, совершаемых пользователями</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="EVENT_TIME">
        <xs:annotation>
          <xs:documentation>Дата и время совершения операции пользователем</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACTION">
        <xs:annotation>
          <xs:documentation>Тип операции, совершенной пользователем</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DOCUMENT_ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ERROR_CODE">
        <xs:annotation>
          <xs:documentation>Код ошибки выполнения операции, совершенной пользователем</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="USER_LOGIN">
        <xs:annotation>
          <xs:documentation>Логин пользователя, совершившего данную операцию</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="UserActionType">
    <xs:annotation>
      <xs:documentation>Типы операций, совершаемых пользователями</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="CREATE_DOCUMENT">
        <xs:annotation>
          <xs:documentation>Создание Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CHANGE_DOCUMENT">
        <xs:annotation>
          <xs:documentation>Изменение черновика Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SIGN_DOCUMENT">
        <xs:annotation>
          <xs:documentation>Подписание Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DEPRECATE_DOCUMENT">
        <xs:annotation>
          <xs:documentation>Аннулирование Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ARCHIVE_DOCUMENT">
        <xs:annotation>
          <xs:documentation>Архивирование Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNKNOWN_ACTION">
        <xs:annotation>
          <xs:documentation>Неизвестное действие</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="GET_DOCUMENT">
        <xs:annotation>
          <xs:documentation>Получение документа</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SAVE_EXTERNAL_DOCUMENT">
        <xs:annotation>
          <xs:documentation>Сохранен подписанный документ за один шаг</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNKNOWN_SAVE">
        <xs:annotation>
          <xs:documentation>Неопределенное изменение при сохранении</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CHANGE_METADATA">
        <xs:annotation>
          <xs:documentation>Изменены метаданные у документа, который находится в статусе SIGNING</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <!--requests & responses-->
  <xs:element name="archiveDocumentRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода archiveDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода archiveDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="doc:documentId"/>
        <xs:element minOccurs="0" ref="simicore:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="archiveDocumentResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода archiveDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода archiveDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence/>
    </xs:complexType>
  </xs:element>
  <xs:element name="createDocumentRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода createDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода createDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="cct:cctCode"/>
        <xs:element ref="simicore:patientId"/>
        <xs:element ref="simicore:careEventId"/>
        <xs:element ref="simicore:careEventStarted"/>
        <xs:element minOccurs="0" ref="simicore:careEventFinished"/>
        <xs:element minOccurs="0" ref="simicore:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createDocumentResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода createDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода createDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="doc:document"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deprecateDocumentRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода deprecateDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода deprecateDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="doc:documentId"/>
        <xs:element minOccurs="0" ref="simicore:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deprecateDocumentResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода deprecateDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода deprecateDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence/>
    </xs:complexType>
  </xs:element>
  <xs:element name="getAuditRecordsRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getAuditRecords</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода getAuditRecords</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="params" type="tns:AuditQueryData">
          <xs:annotation>
            <xs:documentation>Параметры отбора сведений об операциях, совершенных пользователями</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="simicore:pagingOptions"/>
        <xs:element minOccurs="0" ref="simicore:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getAuditRecordsResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getAuditRecords</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода getAuditRecords</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="return" type="tns:AuditResultPage">
          <xs:annotation>
            <xs:documentation>Результаты отбора сведений из Журнала аудита операций, совершаемых пользователями</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCareEventDocumentsRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getCareEventDocuments</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода getCareEventDocuments</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="simicore:careEventId"/>
        <xs:element minOccurs="0" ref="cct:cctCode"/>
        <xs:element minOccurs="0" ref="simicore:pagingOptions"/>
        <xs:element minOccurs="0" ref="simicore:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCareEventDocumentsResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getCareEventDocuments</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода getCareEventDocuments</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="return" type="tns:DocumentsResultPage">
          <xs:annotation>
            <xs:documentation>Результаты отбора Документов СИМИ</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getDocumentRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода getDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="doc:documentId"/>
        <xs:element minOccurs="0" ref="simicore:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getDocumentResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода getDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="doc:document"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="saveDocumentRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода saveDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода saveDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="doc:document"/>
        <xs:element minOccurs="0" ref="simicore:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="saveDocumentResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода saveDocument</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода saveDocument</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element minOccurs="0" ref="doc:document"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchDocumentsRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода searchDocuments</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода searchDocuments</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element minOccurs="0" name="queryName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Имя подготовленного (хранимого) запроса</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="params" type="tns:DocumentsQueryData">
          <xs:annotation>
            <xs:documentation>Параметры отбора Документов СИМИ</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" ref="simicore:pagingOptions"/>
        <xs:element minOccurs="0" ref="simicore:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchDocumentsResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода searchDocuments</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода searchDocuments</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="return" type="tns:DocumentsResultPage">
          <xs:annotation>
            <xs:documentation>Результаты отбора Документов СИМИ</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCareEventDocumentsForSignRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getCareEventDocumentsForSign</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода getCareEventDocumentsForSign</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="simicore:careEventId"/>
        <xs:element minOccurs="0" ref="simicore:pagingOptions"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCareEventDocumentsForSignResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getCareEventDocumentsForSign</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода getCareEventDocumentsForSign</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="return" type="tns:DocumentsResultPage">
          <xs:annotation>
            <xs:documentation>Результаты отбора Документов СИМИ</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getDocumentsByPatientForSignRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getDocumentsByPatientForSign</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода getCareEventDocumentsForSign</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element ref="simicore:patientId"/>
        <xs:element minOccurs="0" ref="simicore:pagingOptions"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getDocumentsByPatientForSignResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getDocumentsByPatientForSign</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода getCareEventDocumentsForSign</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="return" type="tns:DocumentsResultPage">
          <xs:annotation>
            <xs:documentation>Результаты отбора Документов СИМИ</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getDocumentsForSignRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getDocumentsForSign</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Входные параметры метода getCareEventDocumentsForSign</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" ref="doc:documentId"/>
        <xs:element minOccurs="0" ref="simicore:pagingOptions"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getDocumentsForSignResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getDocumentsForSign</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Выходные параметры метода getCareEventDocumentsForSign</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="return" type="tns:DocumentsResultPage">
          <xs:annotation>
            <xs:documentation>Результаты отбора Документов СИМИ</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wQlXXRbEu5B8xEV8OKo6cYgc-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<xs:schema targetNamespace="http://emias.mos.ru/simi/document/v5/" version="1.0" xmlns:cct="http://emias.mos.ru/simi/cct/v5/" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:simicore="http://emias.mos.ru/simi/core/v5/" xmlns:tns="http://emias.mos.ru/simi/document/v5/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/simi/core/v5/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTUeN2BFRYvYdnD_hDrwHLR8-"/>
  <xs:import namespace="http://emias.mos.ru/simi/cct/v5/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTpZgC5viSZTrH4qCBUyAO00-"/>
  <xs:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTLbWlpc_hChP4qzACBOF3y4-"/>
  <!--reusable elements-->
  <xs:element name="document" nillable="false" type="tns:Document">
    <xs:annotation>
      <xs:documentation>Документ СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="documentId" nillable="false" type="xs:string">
    <xs:annotation>
      <xs:documentation>Идентификатор Документа СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="data" type="xs:base64Binary">
    <xs:annotation>
      <xs:documentation>Контент Документа СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--document entity and its main sections-->
  <xs:complexType name="DocumentTag">
    <xs:annotation>
      <xs:documentation>Представляет "Тэг" Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="simicore:Tag">
        <xs:attribute name="definedByCct" type="xs:boolean" use="required">
          <xs:annotation>
            <xs:documentation>Признак принадлежности "Тэга" к взятым из CCT терминологии "Тэгам"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DocumentTagCollection">
    <xs:annotation>
      <xs:documentation>Представляет коллекцию "Тэгов" Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="tag" type="tns:DocumentTag">
        <xs:annotation>
          <xs:documentation>Представляет "Тэг" Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Document">
    <xs:annotation>
      <xs:documentation>Представляет Документ СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="metadata" type="tns:Metadata">
        <xs:annotation>
          <xs:documentation>Представляет метаданные Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element form="qualified" name="content" type="tns:Content">
        <xs:annotation>
          <xs:documentation>Описывает контент Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element form="qualified" maxOccurs="unbounded" minOccurs="0" name="signature" type="tns:Signature">
        <xs:annotation>
          <xs:documentation>Описывает сведения об электронной подписи Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Metadata">
    <xs:annotation>
      <xs:documentation>Представляет метаданные Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="tns:documentId">
        <xs:annotation>
          <xs:documentation>Идентификатор Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element form="qualified" name="documentInfo" type="tns:DocumentInfo">
        <xs:annotation>
          <xs:documentation>Базовые сведения о Документе СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="cct:visualizations">
        <xs:annotation>
          <xs:documentation>Представляет коллекцию сведений о XSLT преобразованиях</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="confidentialityTags" type="tns:DocumentTagCollection">
        <xs:annotation>
          <xs:documentation>Коллекция Тэгов, определяющих уровень конфеденциальности Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="links" type="tns:Links">
        <xs:annotation>
          <xs:documentation>Сведения о междокументарных связях Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="associations" type="tns:Associations">
        <xs:annotation>
          <xs:documentation>Сведения об ассоциациях между Документами СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="status" type="tns:Status" use="required">
      <xs:annotation>
        <xs:documentation>Статус документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authorLogin" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Логин пользователя-автора Документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signeeLogin" type="xs:string">
      <xs:annotation>
        <xs:documentation>Логин пользователя, подписавшего электронной подписью документ СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Content">
    <xs:annotation>
      <xs:documentation>Описывает контент Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="visualization" type="xs:base64Binary">
        <xs:annotation>
          <xs:documentation>XSLT преобразование, использованное при подписании контента Документа СИМИ
                        электронной подписью</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="tns:data">
        <xs:annotation>
          <xs:documentation>Контент Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="mimeClass" type="cct:MimeClass" use="required">
      <xs:annotation>
        <xs:documentation>MIME-класс, которому принадлежит контент Документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mimeType" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>MIME-тип, которому принадлежит контент Документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valid" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Бизнес признак валидности контента Документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Signature">
    <xs:annotation>
      <xs:documentation>Описывает сведения об электронной подписи Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="ds:Signature">
        <xs:annotation>
          <xs:documentation>Цифровая подпись по стандарту XMLDSig</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="signatureCAdES" type="xs:base64Binary">
        <xs:annotation>
          <xs:documentation>Цифровая подпись по стандарту CAdES</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="technicalSignature" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Признак (true/false) использования технической подписи для подписания Документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userFIO" type="xs:string">
      <xs:annotation>
        <xs:documentation>ФИО подписанта</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateSign" type="xs:dateTime" use="required">
      <xs:annotation>
        <xs:documentation>Дата подписания</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobExecutionId" type="xs:long">
      <xs:annotation>
        <xs:documentation>Идентификатор исполняемой должности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signMO" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Признак (true/false) подписи медицинской организации</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signeeLogin" type="xs:string">
      <xs:annotation>
        <xs:documentation>Логин пользователя, подписавшего документ электронной подписью (указывается только при
                    использовании технической подписи, то есть если атрибут technicalSignature=true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deprecated" type="xs:dateTime">
      <xs:annotation>
        <xs:documentation>Дата/время аннулирования подписанного документа (указывается только если Документ СИМИ
                    аннулирован то есть его статус установлен в DEPRECATED)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--documents' metadata description elements-->
  <xs:complexType name="CctInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Классе документов СИМИ (определенный терминологией CCT), которому принадлежит
                данный Документ СИМИ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="simicore:Tag">
        <xs:sequence>
          <xs:element ref="cct:cctParameters">
            <xs:annotation>
              <xs:documentation>Представляет параметры, специфичные для Класса документов СИМИ,
                                определенного элементом терминологии CCT</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="cct:contentTypeInfo">
            <xs:annotation>
              <xs:documentation>Представляет тип контента, разрешенного для Документа СИМИ, являющегося
                                представителем Класса документов СИМИ, определенного элементом терминологии CCT</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DocumentInfo">
    <xs:annotation>
      <xs:documentation>Описывает базовые сведения о Документе СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="simicore:patientId">
        <xs:annotation>
          <xs:documentation>Идентификатор Пациента в ЕМИАС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="simicore:careEventId">
        <xs:annotation>
          <xs:documentation>Идентификатор Клинического события в операционном сервисе ЕМИАС.СУПП.События</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="simicore:careEventStarted">
        <xs:annotation>
          <xs:documentation>Дата/время начала Клинического события</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" ref="simicore:careEventFinished">
        <xs:annotation>
          <xs:documentation>Дата/время окончания Клинического события</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element form="qualified" name="cctInfo" type="tns:CctInfo">
        <xs:annotation>
          <xs:documentation>Сведения о Классе документов СИМИ (определенный терминологией CCT), которому
                        принадлежит данный Документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="tags" type="tns:DocumentTagCollection">
        <xs:annotation>
          <xs:documentation>Тэги Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="documentCreated" type="xs:dateTime" use="required">
      <xs:annotation>
        <xs:documentation>Дата/время создания Документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="documentSubmissionSetId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Идентификатор набора документов, которому принадлежит Документ СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="simiVersion" type="xs:unsignedShort" use="required">
      <xs:annotation>
        <xs:documentation>Версия объектной модели Документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--enumerations-->
  <xs:simpleType name="Status">
    <xs:annotation>
      <xs:documentation>Представляет перечисление статусов Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="CREATED">
        <xs:annotation>
          <xs:documentation>Созданный Документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DRAFT">
        <xs:annotation>
          <xs:documentation>Черновик Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SIGNED">
        <xs:annotation>
          <xs:documentation>Подписанный Документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SIGNING">
        <xs:annotation>
          <xs:documentation>Подписывающийся Документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DEPRECATED">
        <xs:annotation>
          <xs:documentation>Аннулированный Документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ARCHIVED">
        <xs:annotation>
          <xs:documentation>Архивированный Документ СИМИ</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="LinkedDocument">
    <xs:annotation>
      <xs:documentation>Идентификатор Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="tns:documentId">
        <xs:annotation>
          <xs:documentation>Идентификатор Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Links">
    <xs:annotation>
      <xs:documentation>Сведения о междокументарных связях Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="parent" type="tns:LinkedDocument">
        <xs:annotation>
          <xs:documentation>Документ-родитель</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="descendants" type="tns:LinkedDocument">
        <xs:annotation>
          <xs:documentation>Документы-потомки</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssociationType">
    <xs:annotation>
      <xs:documentation>Тип ассоциации между Документами СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="schema" type="xs:string">
        <xs:annotation>
          <xs:documentation>Идентификатор терминологии</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код элемента терминологии</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="value" type="xs:string">
        <xs:annotation>
          <xs:documentation>Описание элемента терминологии</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Association">
    <xs:annotation>
      <xs:documentation>Ассоциация между Документами СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="myRole" type="xs:string">
        <xs:annotation>
          <xs:documentation>Роль текущего Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="otherRole" type="xs:string">
        <xs:annotation>
          <xs:documentation>Роль другого Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="tns:AssociationType">
        <xs:annotation>
          <xs:documentation>Тип ассоциации</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="otherId" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор другого Документа СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Associations">
    <xs:annotation>
      <xs:documentation>Сведения об ассоциациях между Документами СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="association" type="tns:Association">
        <xs:annotation>
          <xs:documentation>Ассоциация между Документами СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTUeN2BFRYvYdnD_hDrwHLR8-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<xs:schema targetNamespace="http://emias.mos.ru/simi/core/v5/" version="1.0" xmlns:tns="http://emias.mos.ru/simi/core/v5/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wStcNMYJZ0u2i5cYGH_KL84s-"/>
  <!--business entities which don't belong to SIMI services-->
  <xs:element name="patientId" type="xs:long">
    <xs:annotation>
      <xs:documentation>Идентификатор Пациента в ЕМИАС</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="careEventId" type="xs:long">
    <xs:annotation>
      <xs:documentation>Идентификатор Клинического события в операционном сервисе ЕМИАС.СУПП.События</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="careEventStarted" type="xs:dateTime">
    <xs:annotation>
      <xs:documentation>Дата/время начала Клинического события</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="careEventFinished" type="xs:dateTime">
    <xs:annotation>
      <xs:documentation>Дата/время окончания Клинического события</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--base types-->
  <xs:complexType name="Tag">
    <xs:annotation>
      <xs:documentation>Представляет "Тэг"</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="schema" type="xs:string">
        <xs:annotation>
          <xs:documentation>Идентификатор терминологии</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код элемента терминологии</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="value" type="xs:string">
        <xs:annotation>
          <xs:documentation>Описание элемента терминологии</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="role" type="xs:string">
      <xs:annotation>
        <xs:documentation>Назначение/роль "Тэга"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="TagCollection">
    <xs:annotation>
      <xs:documentation>Представляет коллекцию "Тэгов"</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="tag" type="tns:Tag">
        <xs:annotation>
          <xs:documentation>Представляет "Тэг"</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="ComparisonType">
    <xs:annotation>
      <xs:documentation>Представляет перечисление типов сравнения значений</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="GT">
        <xs:annotation>
          <xs:documentation>Сравнение "больше чем"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="GE">
        <xs:annotation>
          <xs:documentation>Сравнение "больше или равно"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="EQ">
        <xs:annotation>
          <xs:documentation>Сравнение "в точности равно"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="LT">
        <xs:annotation>
          <xs:documentation>Сравнение "меньше чем"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="LE">
        <xs:annotation>
          <xs:documentation>Сравнение "меньше или равно"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="LIKE">
        <xs:annotation>
          <xs:documentation>Сравнение по подстроке</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NE">
        <xs:annotation>
          <xs:documentation>Сравнение "не равно"</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wStcNMYJZ0u2i5cYGH_KL84s-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wT2c7RR2Mr0q5YRmjA.MCyXw-"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTpZgC5viSZTrH4qCBUyAO00-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<xs:schema targetNamespace="http://emias.mos.ru/simi/cct/v5/" version="1.0" xmlns:simicore="http://emias.mos.ru/simi/core/v5/" xmlns:tns="http://emias.mos.ru/simi/cct/v5/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/simi/core/v5/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTUeN2BFRYvYdnD_hDrwHLR8-"/>
  <!--reusable elements-->
  <xs:element name="cctCode" nillable="false" type="xs:unsignedInt">
    <xs:annotation>
      <xs:documentation>Код элемента терминологии CCT</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="cctItem" type="tns:CctItem">
    <xs:annotation>
      <xs:documentation>Представление элемента терминологии CCT</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="cctFolder" type="tns:CctFolder">
    <xs:annotation>
      <xs:documentation>Представление группирующего элемента терминологии CCT</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="cctItemCollection" type="tns:CctItemCollection">
    <xs:annotation>
      <xs:documentation>Набор элементов и группирующих элементов терминологии CCT</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="cctParameters" type="simicore:TagCollection">
    <xs:annotation>
      <xs:documentation>Представляет параметры, специфичные для Класса документов СИМИ, определенного элементом терминологии CCT</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:attribute name="lifecycleState" type="tns:LifecycleState">
    <xs:annotation>
      <xs:documentation>Состояние жизненного цикла элемента CCT</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <!--description of cct type-->
  <xs:complexType name="CctItemCollection">
    <xs:annotation>
      <xs:documentation>Представляет коллекцию элементов и группирующих элементов терминологии CCT</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="cctFolder" type="tns:CctFolder">
        <xs:annotation>
          <xs:documentation>Набор группирующих элементов терминологии CCT</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="cctItem" type="tns:CctItem">
        <xs:annotation>
          <xs:documentation>Набор элементов терминологии CCT</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CctItem">
    <xs:annotation>
      <xs:documentation>Представление элемента терминологии CCT</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:CctBase">
        <xs:sequence>
          <xs:element ref="tns:contentTypeInfo">
            <xs:annotation>
              <xs:documentation>Представляет тип контента, разрешенного для Документа СИМИ, являющегося представителем Класса документов СИМИ, определенного элементом терминологии CCT</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="tns:cctParameters">
            <xs:annotation>
              <xs:documentation>Представляет параметры, специфичные для Класса документов СИМИ, определенного элементом терминологии CCT</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="canDeprecateAfterSign" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак возможности анулирования Документа СИМИ после его подписания ЭП (если не задан - true)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute ref="tns:lifecycleState">
          <xs:annotation>
            <xs:documentation>Состояние жизненного цикла элемента CCT</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CctFolder">
    <xs:annotation>
      <xs:documentation>Представление группирующего элемента терминологии CCT</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:CctBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="CctBase">
    <xs:annotation>
      <xs:documentation>Базовое представление элемента терминологии CCT</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="tns:cctCode">
        <xs:annotation>
          <xs:documentation>Код элемента терминологии CCT</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="cctDescription" type="xs:string">
        <xs:annotation>
          <xs:documentation>Описание элемента терминологии CCT</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="tags" type="simicore:TagCollection">
        <xs:annotation>
          <xs:documentation>Коллекция Тэгов, наследуемых Документом СИМИ, вследствие его принадлежности к Классу документов СИМИ, определенного элементом терминологии CCT</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="confidentialityTags" type="simicore:TagCollection">
        <xs:annotation>
          <xs:documentation>Коллекция Тэгов, определяющих уровень конфиденциальности Документа СИМИ, наследуемых Документом СИМИ, вследствие его принадлежности к Классу документов СИМИ, определенного элементом терминологии CCT</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="parentCode" type="xs:unsignedInt" use="required">
      <xs:annotation>
        <xs:documentation>Код родительского элемента терминологиии CCT</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--content type description-->
  <xs:element name="contentTypeInfo" type="tns:ContentTypeInfo">
    <xs:annotation>
      <xs:documentation>Представляет тип контента, разрешенного для Документа СИМИ, являющегося представителем Класса документов СИМИ, определенного элементом терминологии CCT</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ContentTypeInfo">
    <xs:annotation>
      <xs:documentation>Описывает сведения о типе контента, разрешенного для Документа СИМИ, являющегося представителем Класса документов СИМИ, определенного элементом терминологии CCT</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="mimeType" type="xs:string">
        <xs:annotation>
          <xs:documentation>Коллекция MIME-типов, разрешенных для Класса документов СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="mimeClass" type="tns:MimeClass" use="required">
      <xs:annotation>
        <xs:documentation>MIME-класс, определенный для Класса документов СИМИ</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="MimeClass">
    <xs:annotation>
      <xs:documentation>Представляет перечисление типов контента Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="APPLICATION">
        <xs:annotation>
          <xs:documentation>Любые двоичные данные</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="AUDIO">
        <xs:annotation>
          <xs:documentation>Аудио</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="IMAGE">
        <xs:annotation>
          <xs:documentation>Изображение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TEXT">
        <xs:annotation>
          <xs:documentation>Текст</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="VIDEO">
        <xs:annotation>
          <xs:documentation>Видео</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="VND">
        <xs:annotation>
          <xs:documentation>Вендор-зависимый класс контента</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="X">
        <xs:annotation>
          <xs:documentation>Нестандартный подтип, не зарегистрирован в «Центре присвоенных номеров Интернета» (IANA)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <!--visualization description-->
  <xs:element name="visualizationId" nillable="false" type="xs:string">
    <xs:annotation>
      <xs:documentation>Представляет идентификатор XSLT представления контента Документа СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="visualizations" type="tns:VisualizationCollection">
    <xs:annotation>
      <xs:documentation>Представляет коллекцию сведений о XSLT преобразованиях</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VisualizationCollection">
    <xs:annotation>
      <xs:documentation>Представляет коллекцию сведений о XSLT преобразованиях</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="visualization" type="tns:Visualization">
        <xs:annotation>
          <xs:documentation>Представляет сведения о XSLT преобразовании, которое может быть использовано для визуализации контента Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Visualization">
    <xs:annotation>
      <xs:documentation>Описывает сведения о XSLT преобразовании, которое может быть использовано для визуализации контента Документа СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="tns:visualizationId">
        <xs:annotation>
          <xs:documentation>Представляет идентификатор XSLT представления контента Документа СИМИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="tns:cctCode">
        <xs:annotation>
          <xs:documentation>Код элемента терминологии CCT</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="visualizationInfo" type="tns:VisualizationInfo">
        <xs:annotation>
          <xs:documentation>Базовые сведения о XSLT преобразовании</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="visualizationData" type="xs:base64Binary">
        <xs:annotation>
          <xs:documentation>Данные XSLT преобразования в формате base64</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="VisualizationInfo">
    <xs:annotation>
      <xs:documentation>Описывает базовые сведения о XSLT преобразовании</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element form="qualified" name="tags" type="simicore:TagCollection">
        <xs:annotation>
          <xs:documentation>Тэги XSLT преобразования</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование XSLT преобразования</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Описание XSLT преобразования</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="tns:XsltVersion" use="required">
      <xs:annotation>
        <xs:documentation>Версия спецификации XSLT преобразования</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signature" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Признак (true/false) возможности использования данного XSLT преобразования для визуализации контента Документа СИМИ при его подписании (истинное значение должен иметь только один элемент списка)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="XsltVersion">
    <xs:annotation>
      <xs:documentation>Представляет перечисление версий спецификаций XSLT преобразований</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="XSLT_1_0">
        <xs:annotation>
          <xs:documentation>Версия 1.0</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="XSLT_1_1">
        <xs:annotation>
          <xs:documentation>Версия 1.1</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="XSLT_2_0">
        <xs:annotation>
          <xs:documentation>Версия 2.0</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="XSLT_3_0">
        <xs:annotation>
          <xs:documentation>Версия 3.0</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LifecycleState">
    <xs:annotation>
      <xs:documentation>Состояние жизненного цикла элемента CCT</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ALPHA">
        <xs:annotation>
          <xs:documentation>Доступ на АРМ врача возможен только у модельеров</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BETA">
        <xs:annotation>
          <xs:documentation>Предоставляется тестовый доступ врачам</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACTIVE">
        <xs:annotation>
          <xs:documentation>Свободное (промышленное) использование</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DEPRECATED">
        <xs:annotation>
          <xs:documentation>Элемент терминологии является "архивным" (более не используется)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService?wsdl=AAAADHAjUCM4P2cuZURELi98RDQPMaHHvg8b8xpVn.MGIEHVggmCXbQ0dhtcMqGCCf5p9E2fX2xHY6a_FzSeMjAmCycg7tWR7G9lxjiCln.4RrsqhanG_w3UiEX.KZtbDKO5Yyms8ZXQkw6wTLbWlpc_hChP4qzACBOF3y4-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<xs:schema targetNamespace="http://www.w3.org/2000/09/xmldsig#" version="1.0" xmlns:tns="http://www.w3.org/2000/09/xmldsig#" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="CanonicalizationMethod" type="tns:CanonicalizationMethodType"/>
  <xs:element name="DSAKeyValue" type="tns:DSAKeyValueType"/>
  <xs:element name="DigestMethod" type="tns:DigestMethodType"/>
  <xs:element name="DigestValue" type="tns:DigestValueType"/>
  <xs:element name="HMACOutputLength" type="tns:HMACOutputLengthType"/>
  <xs:element name="KeyInfo" type="tns:KeyInfoType"/>
  <xs:element name="KeyName" type="xs:string"/>
  <xs:element name="KeyValue" type="tns:KeyValueType"/>
  <xs:element name="Manifest" type="tns:ManifestType"/>
  <xs:element name="MgmtData" type="xs:string"/>
  <xs:element name="Object" type="tns:ObjectType"/>
  <xs:element name="PGPData" type="tns:PGPDataType"/>
  <xs:element name="PGPKeyID" type="xs:base64Binary"/>
  <xs:element name="PGPKeyPacket" type="xs:base64Binary"/>
  <xs:element name="RSAKeyValue" type="tns:RSAKeyValueType"/>
  <xs:element name="Reference" type="tns:ReferenceType"/>
  <xs:element name="RetrievalMethod" type="tns:RetrievalMethodType"/>
  <xs:element name="SPKIData" type="tns:SPKIDataType"/>
  <xs:element name="SPKISexp" type="xs:base64Binary"/>
  <xs:element name="Signature" type="tns:SignatureType"/>
  <xs:element name="SignatureMethod" type="tns:SignatureMethodType"/>
  <xs:element name="SignatureProperties" type="tns:SignaturePropertiesType"/>
  <xs:element name="SignatureProperty" type="tns:SignaturePropertyType"/>
  <xs:element name="SignatureValue" type="tns:SignatureValueType"/>
  <xs:element name="SignedInfo" type="tns:SignedInfoType"/>
  <xs:element name="Transform" type="tns:TransformType"/>
  <xs:element name="Transforms" type="tns:TransformsType"/>
  <xs:element name="X509CRL" type="xs:base64Binary"/>
  <xs:element name="X509Certificate" type="xs:base64Binary"/>
  <xs:element name="X509Data" type="tns:X509DataType"/>
  <xs:element name="X509IssuerSerial" type="tns:X509IssuerSerialType"/>
  <xs:element name="X509SKI" type="xs:base64Binary"/>
  <xs:element name="X509SubjectName" type="xs:string"/>
  <xs:element name="XPath" type="xs:string"/>
  <xs:complexType mixed="true" name="ObjectType">
    <xs:sequence>
      <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##other" processContents="lax"/>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:ID"/>
    <xs:attribute name="MimeType" type="xs:string"/>
    <xs:attribute name="Encoding" type="xs:anyURI"/>
  </xs:complexType>
  <xs:complexType name="ManifestType">
    <xs:sequence>
      <xs:element form="qualified" maxOccurs="unbounded" name="Reference" type="tns:ReferenceType"/>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:ID"/>
  </xs:complexType>
  <xs:complexType name="ReferenceType">
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="Transforms" type="tns:TransformsType"/>
      <xs:element form="qualified" name="DigestMethod" type="tns:DigestMethodType"/>
      <xs:element form="qualified" name="DigestValue" type="xs:base64Binary"/>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:ID"/>
    <xs:attribute name="URI" type="xs:anyURI"/>
    <xs:attribute name="Type" type="xs:anyURI"/>
  </xs:complexType>
  <xs:complexType name="TransformsType">
    <xs:sequence>
      <xs:element form="qualified" maxOccurs="unbounded" name="Transform" type="tns:TransformType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType mixed="true" name="TransformType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="tns:XPath"/>
        <xs:any namespace="##other" processContents="lax"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
  </xs:complexType>
  <xs:complexType mixed="true" name="DigestMethodType">
    <xs:sequence>
      <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##other" processContents="lax"/>
    </xs:sequence>
    <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
  </xs:complexType>
  <xs:complexType name="X509DataType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="tns:X509Certificate"/>
        <xs:element ref="tns:X509SubjectName"/>
        <xs:element ref="tns:X509CRL"/>
        <xs:element ref="tns:X509IssuerSerial"/>
        <xs:element ref="tns:X509SKI"/>
        <xs:any namespace="##other" processContents="lax"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SignedInfoType">
    <xs:sequence>
      <xs:element form="qualified" name="CanonicalizationMethod" type="tns:CanonicalizationMethodType"/>
      <xs:element form="qualified" name="SignatureMethod" type="tns:SignatureMethodType"/>
      <xs:element form="qualified" maxOccurs="unbounded" name="Reference" type="tns:ReferenceType"/>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:ID"/>
  </xs:complexType>
  <xs:complexType mixed="true" name="CanonicalizationMethodType">
    <xs:sequence>
      <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##other" processContents="lax"/>
    </xs:sequence>
    <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
  </xs:complexType>
  <xs:complexType mixed="true" name="SignatureMethodType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="tns:HMACOutputLength"/>
        <xs:any namespace="##other" processContents="lax"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
  </xs:complexType>
  <xs:complexType name="PGPDataType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="tns:PGPKeyID"/>
        <xs:element ref="tns:PGPKeyPacket"/>
        <xs:any namespace="##other" processContents="lax"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType mixed="true" name="KeyInfoType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="tns:X509Data"/>
        <xs:element ref="tns:KeyValue"/>
        <xs:element ref="tns:RetrievalMethod"/>
        <xs:element ref="tns:KeyName"/>
        <xs:element ref="tns:MgmtData"/>
        <xs:element ref="tns:PGPData"/>
        <xs:element ref="tns:SPKIData"/>
        <xs:any namespace="##other" processContents="lax"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:ID"/>
  </xs:complexType>
  <xs:complexType name="SignatureType">
    <xs:sequence>
      <xs:element form="qualified" name="SignedInfo" type="tns:SignedInfoType"/>
      <xs:element form="qualified" name="SignatureValue" type="tns:SignatureValueType"/>
      <xs:element form="qualified" minOccurs="0" name="KeyInfo" type="tns:KeyInfoType"/>
      <xs:element form="qualified" maxOccurs="unbounded" minOccurs="0" name="Object" type="tns:ObjectType"/>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:ID"/>
  </xs:complexType>
  <xs:complexType name="SignatureValueType">
    <xs:simpleContent>
      <xs:extension base="xs:base64Binary">
        <xs:attribute name="Id" type="xs:ID"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="SPKIDataType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="tns:SPKISexp"/>
        <xs:any namespace="##other" processContents="lax"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType mixed="true" name="KeyValueType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="tns:DSAKeyValue"/>
        <xs:element ref="tns:RSAKeyValue"/>
        <xs:any namespace="##other" processContents="lax"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="HMACOutputLengthType">
    <xs:restriction base="xs:integer"/>
  </xs:simpleType>
  <xs:complexType name="X509IssuerSerialType">
    <xs:sequence>
      <xs:element form="qualified" name="X509IssuerName" type="xs:string"/>
      <xs:element form="qualified" name="X509SerialNumber" type="xs:integer"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DSAKeyValueType">
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="P" type="xs:base64Binary"/>
      <xs:element form="qualified" minOccurs="0" name="Q" type="xs:base64Binary"/>
      <xs:element form="qualified" minOccurs="0" name="G" type="xs:base64Binary"/>
      <xs:element form="qualified" name="Y" type="xs:base64Binary"/>
      <xs:element form="qualified" minOccurs="0" name="J" type="xs:base64Binary"/>
      <xs:element form="qualified" minOccurs="0" name="Seed" type="xs:base64Binary"/>
      <xs:element form="qualified" minOccurs="0" name="PgenCounter" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RetrievalMethodType">
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="Transforms" type="tns:TransformsType"/>
    </xs:sequence>
    <xs:attribute name="URI" type="xs:anyURI"/>
    <xs:attribute name="Type" type="xs:anyURI"/>
  </xs:complexType>
  <xs:complexType name="SignaturePropertiesType">
    <xs:sequence>
      <xs:element form="qualified" maxOccurs="unbounded" name="SignatureProperty" type="tns:SignaturePropertyType"/>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:ID"/>
  </xs:complexType>
  <xs:complexType mixed="true" name="SignaturePropertyType">
    <xs:sequence>
      <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##other" processContents="lax"/>
    </xs:sequence>
    <xs:attribute name="Target" type="xs:anyURI" use="required"/>
    <xs:attribute name="Id" type="xs:ID"/>
  </xs:complexType>
  <xs:complexType name="RSAKeyValueType">
    <xs:sequence>
      <xs:element form="qualified" name="Modulus" type="xs:base64Binary"/>
      <xs:element form="qualified" name="Exponent" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="DigestValueType">
    <xs:restriction base="xs:base64Binary"/>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:endpoint>http://esbcamelvv3.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint></con:endpoints><con:operation id="779b300b-6110-4ef0-b0cd-36f68a49f8bf" isOneWay="false" action="archiveDocument" name="archiveDocument" bindingOperationName="archiveDocument" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="cef78baa-588d-4c86-8eb0-3f91c9a7777d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:archiveDocumentRequest>\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:archiveDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/archiveDocumentRequest"/></con:call><con:call id="6a3cb5e9-5692-4305-b760-fd61f5e39e18" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:archiveDocumentRequest>\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:archiveDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/archiveDocumentRequest"/></con:call><con:call id="20e404b6-4004-4f19-8e30-4a8c6daa88c8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:archiveDocumentRequest>\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:archiveDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/archiveDocumentRequest"/></con:call></con:operation><con:operation id="f03af38d-d2a9-4f63-93b0-5b366bb56be6" isOneWay="false" action="createDocument" name="createDocument" bindingOperationName="createDocument" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="8edd25c5-cd97-4286-abe8-8b74f85ef5c5" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/cct/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createDocumentRequest>\r
         <v5:cctCode>?</v5:cctCode>\r
         <v51:patientId>?</v51:patientId>\r
         <v51:careEventId>?</v51:careEventId>\r
         <v51:careEventStarted>?</v51:careEventStarted>\r
         <!--Optional:-->\r
         <v51:careEventFinished>?</v51:careEventFinished>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:createDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/createDocumentRequest"/></con:call><con:call id="f3c51f81-cbfc-4efe-ae07-950b9703e34a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/cct/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createDocumentRequest>\r
         <v5:cctCode>?</v5:cctCode>\r
         <v51:patientId>?</v51:patientId>\r
         <v51:careEventId>?</v51:careEventId>\r
         <v51:careEventStarted>?</v51:careEventStarted>\r
         <!--Optional:-->\r
         <v51:careEventFinished>?</v51:careEventFinished>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:createDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/createDocumentRequest"/></con:call><con:call id="ce6314b4-c38e-4f51-982a-1754234c1f2c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/cct/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createDocumentRequest>\r
         <v5:cctCode>?</v5:cctCode>\r
         <v51:patientId>?</v51:patientId>\r
         <v51:careEventId>?</v51:careEventId>\r
         <v51:careEventStarted>?</v51:careEventStarted>\r
         <!--Optional:-->\r
         <v51:careEventFinished>?</v51:careEventFinished>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:createDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/createDocumentRequest"/></con:call></con:operation><con:operation id="7a268fa9-f335-4a27-98bb-0847b1cad11f" isOneWay="false" action="deprecateDocument" name="deprecateDocument" bindingOperationName="deprecateDocument" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="12c33f2b-c5bf-4c3d-b31e-dcfded2964ed" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:deprecateDocumentRequest>\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:deprecateDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/deprecateDocumentRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="35dcf475-329c-429a-9c64-2de6101b3a67" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:deprecateDocumentRequest>\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:deprecateDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/deprecateDocumentRequest"/></con:call><con:call id="e69b85c7-8bc9-4d4c-a96c-08eef2d68dde" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:deprecateDocumentRequest>\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:deprecateDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/deprecateDocumentRequest"/></con:call></con:operation><con:operation id="029de42b-9d88-45ea-b5f3-14eef9ce8dc0" isOneWay="false" action="getAuditRecords" name="getAuditRecords" bindingOperationName="getAuditRecords" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e1823ee7-f7a8-4ca5-a294-e961d693b725" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getAuditRecordsRequest>\r
         <params>\r
            <typ:conditions>\r
               <!--1 or more repetitions:-->\r
               <typ:condition operator="?">\r
                  <typ:leftOperand>?</typ:leftOperand>\r
                  <typ:rightOperand>?</typ:rightOperand>\r
               </typ:condition>\r
            </typ:conditions>\r
            <!--Optional:-->\r
            <typ:orderClauses>\r
               <!--Zero or more repetitions:-->\r
               <typ:orderClause ascending="?">\r
                  <typ:attributeName>?</typ:attributeName>\r
               </typ:orderClause>\r
            </typ:orderClauses>\r
         </params>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:getAuditRecordsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getAuditRecordsRequest"/></con:call><con:call id="b1cc12f0-9206-4cb2-837b-19f9805924af" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getAuditRecordsRequest>\r
         <params>\r
            <typ:conditions>\r
               <!--1 or more repetitions:-->\r
               <typ:condition operator="?">\r
                  <typ:leftOperand>?</typ:leftOperand>\r
                  <typ:rightOperand>?</typ:rightOperand>\r
               </typ:condition>\r
            </typ:conditions>\r
            <!--Optional:-->\r
            <typ:orderClauses>\r
               <!--Zero or more repetitions:-->\r
               <typ:orderClause ascending="?">\r
                  <typ:attributeName>?</typ:attributeName>\r
               </typ:orderClause>\r
            </typ:orderClauses>\r
         </params>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:getAuditRecordsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getAuditRecordsRequest"/></con:call><con:call id="1e44b427-22f2-4390-8e4b-898311584085" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getAuditRecordsRequest>\r
         <params>\r
            <typ:conditions>\r
               <!--1 or more repetitions:-->\r
               <typ:condition operator="?">\r
                  <typ:leftOperand>?</typ:leftOperand>\r
                  <typ:rightOperand>?</typ:rightOperand>\r
               </typ:condition>\r
            </typ:conditions>\r
            <!--Optional:-->\r
            <typ:orderClauses>\r
               <!--Zero or more repetitions:-->\r
               <typ:orderClause ascending="?">\r
                  <typ:attributeName>?</typ:attributeName>\r
               </typ:orderClause>\r
            </typ:orderClauses>\r
         </params>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:getAuditRecordsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getAuditRecordsRequest"/></con:call></con:operation><con:operation id="3d2e59f4-4db0-4e1b-b442-fdf59459280d" isOneWay="false" action="getCareEventDocuments" name="getCareEventDocuments" bindingOperationName="getCareEventDocuments" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="80909368-9efa-482c-94b2-9197cee781e1" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/" xmlns:v51="http://emias.mos.ru/simi/cct/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCareEventDocumentsRequest>\r
         <v5:careEventId>?</v5:careEventId>\r
         <!--Optional:-->\r
         <v51:cctCode>?</v51:cctCode>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:getCareEventDocumentsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getCareEventDocumentsRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="4a9e297a-fcb7-40db-bffd-ce7bf7bc12c9" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/" xmlns:v51="http://emias.mos.ru/simi/cct/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCareEventDocumentsRequest>\r
         <v5:careEventId>?</v5:careEventId>\r
         <!--Optional:-->\r
         <v51:cctCode>?</v51:cctCode>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:getCareEventDocumentsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getCareEventDocumentsRequest"/></con:call><con:call id="3a0929bc-45e1-4502-8b6c-0b637a7694fc" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/" xmlns:v51="http://emias.mos.ru/simi/cct/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCareEventDocumentsRequest>\r
         <v5:careEventId>?</v5:careEventId>\r
         <!--Optional:-->\r
         <v51:cctCode>?</v51:cctCode>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:getCareEventDocumentsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getCareEventDocumentsRequest"/></con:call></con:operation><con:operation id="7162e278-fa00-453c-b330-b40e3a6970cd" isOneWay="false" action="getCareEventDocumentsForSign" name="getCareEventDocumentsForSign" bindingOperationName="getCareEventDocumentsForSign" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="dc1709e3-6c77-4cd6-ad05-4f107979d7b3" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCareEventDocumentsForSignRequest>\r
         <v5:careEventId>?</v5:careEventId>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getCareEventDocumentsForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getCareEventDocumentsForSignRequest"/></con:call><con:call id="d2690315-6d16-4ef5-8bf8-6f6c85ad3e54" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCareEventDocumentsForSignRequest>\r
         <v5:careEventId>?</v5:careEventId>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getCareEventDocumentsForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getCareEventDocumentsForSignRequest"/></con:call><con:call id="9e160d2b-3b30-4f17-94b2-48eae172c38a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getCareEventDocumentsForSignRequest>\r
         <v5:careEventId>?</v5:careEventId>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getCareEventDocumentsForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getCareEventDocumentsForSignRequest"/></con:call></con:operation><con:operation id="ed23ecb1-f5ca-4244-ac88-9e3e79353818" isOneWay="false" action="getDocument" name="getDocument" bindingOperationName="getDocument" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d7fa6d5a-38fc-47a3-8487-22378feb28e4" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getDocumentRequest>\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:getDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getDocumentRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="ccfbaa7d-34cf-4df7-96d6-2e4746ff4dbd" isOneWay="false" action="getDocumentsByPatientForSign" name="getDocumentsByPatientForSign" bindingOperationName="getDocumentsByPatientForSign" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="aae8cd72-d868-43a7-9ff5-e2cc84af3981" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getDocumentsByPatientForSignRequest>\r
         <v5:patientId>?</v5:patientId>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getDocumentsByPatientForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getDocumentsByPatientForSignRequest"/></con:call><con:call id="258dc56d-b34d-4e93-a472-9a5525553789" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getDocumentsByPatientForSignRequest>\r
         <v5:patientId>?</v5:patientId>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getDocumentsByPatientForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getDocumentsByPatientForSignRequest"/></con:call><con:call id="0f9b736c-3744-4444-bdde-767ed61d43bc" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getDocumentsByPatientForSignRequest>\r
         <v5:patientId>?</v5:patientId>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getDocumentsByPatientForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getDocumentsByPatientForSignRequest"/></con:call></con:operation><con:operation id="057bd3f8-cbf8-4be2-abf1-8333db7dda62" isOneWay="false" action="getDocumentsForSign" name="getDocumentsForSign" bindingOperationName="getDocumentsForSign" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="de01be40-cc6a-4a99-b184-92add4addee6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getDocumentsForSignRequest>\r
         <!--Zero or more repetitions:-->\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getDocumentsForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getDocumentsForSignRequest"/></con:call><con:call id="106c1657-568e-4ab3-92f7-bf14fa5ecfdf" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getDocumentsForSignRequest>\r
         <!--Zero or more repetitions:-->\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getDocumentsForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getDocumentsForSignRequest"/></con:call><con:call id="7687a3a4-ad0a-436e-b2b7-0ca2e1c67a73" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getDocumentsForSignRequest>\r
         <!--Zero or more repetitions:-->\r
         <v5:documentId>?</v5:documentId>\r
         <!--Optional:-->\r
         <v51:pagingOptions pageNumber="?" pageSize="?"/>\r
      </typ:getDocumentsForSignRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getDocumentsForSignRequest"/></con:call></con:operation><con:operation id="459a583f-0bdb-4be3-ba6d-220762ef548f" isOneWay="false" action="saveDocument" name="saveDocument" bindingOperationName="saveDocument" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="97648559-2b0a-4ef4-b7f2-9283fe0513af" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/" xmlns:v52="http://emias.mos.ru/simi/cct/v5/" xmlns:xd="http://www.w3.org/2000/09/xmldsig#">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:saveDocumentRequest>\r
         <v5:document>\r
            <metadata status="?" authorLogin="?" signeeLogin="?">\r
               <v5:documentId>?</v5:documentId>\r
               <v5:documentInfo documentCreated="?" documentSubmissionSetId="?" simiVersion="?">\r
                  <v51:patientId>?</v51:patientId>\r
                  <v51:careEventId>?</v51:careEventId>\r
                  <v51:careEventStarted>?</v51:careEventStarted>\r
                  <!--Optional:-->\r
                  <v51:careEventFinished>?</v51:careEventFinished>\r
                  <v5:cctInfo role="?">\r
                     <schema>?</schema>\r
                     <code>?</code>\r
                     <description>?</description>\r
                     <v52:cctParameters>\r
                        <!--Zero or more repetitions:-->\r
                        <v51:entry key="?">?</v51:entry>\r
                     </v52:cctParameters>\r
                     <v52:contentTypeInfo mimeClass="?">\r
                        <!--1 or more repetitions:-->\r
                        <mimeType>?</mimeType>\r
                     </v52:contentTypeInfo>\r
                  </v5:cctInfo>\r
                  <tags>\r
                     <!--Zero or more repetitions:-->\r
                     <tag role="?" definedByCct="?">\r
                        <schema>?</schema>\r
                        <code>?</code>\r
                        <description>?</description>\r
                     </tag>\r
                  </tags>\r
               </v5:documentInfo>\r
               <v52:visualizations>\r
                  <!--Zero or more repetitions:-->\r
                  <visualization>\r
                     <!--Optional:-->\r
                     <v52:visualizationId>?</v52:visualizationId>\r
                     <v52:cctCode>?</v52:cctCode>\r
                     <visualizationInfo name="?" description="?" xsltVersion="?" signature="?">\r
                        <v52:tags>\r
                           <!--Zero or more repetitions:-->\r
                           <tag role="?">\r
                              <schema>?</schema>\r
                              <code>?</code>\r
                              <description>?</description>\r
                           </tag>\r
                        </v52:tags>\r
                     </visualizationInfo>\r
                     <!--Optional:-->\r
                     <visualizationData>cid:447634699916</visualizationData>\r
                  </visualization>\r
               </v52:visualizations>\r
               <confidentialityTags>\r
                  <!--Zero or more repetitions:-->\r
                  <tag role="?" definedByCct="?">\r
                     <schema>?</schema>\r
                     <code>?</code>\r
                     <description>?</description>\r
                  </tag>\r
               </confidentialityTags>\r
               <links>\r
                  <!--Optional:-->\r
                  <parent>\r
                     <v5:documentId>?</v5:documentId>\r
                  </parent>\r
                  <!--Zero or more repetitions:-->\r
                  <descendants>\r
                     <v5:documentId>?</v5:documentId>\r
                  </descendants>\r
               </links>\r
               <associations>\r
                  <!--Zero or more repetitions:-->\r
                  <association otherId="?">\r
                     <!--Optional:-->\r
                     <myRole>?</myRole>\r
                     <!--Optional:-->\r
                     <otherRole>?</otherRole>\r
                     <!--Optional:-->\r
                     <type>\r
                        <schema>?</schema>\r
                        <code>?</code>\r
                        <description>?</description>\r
                     </type>\r
                  </association>\r
               </associations>\r
            </metadata>\r
            <v5:content mimeClass="?" mimeType="?" valid="?">\r
               <!--Optional:-->\r
               <v5:visualization>cid:1512352470423</v5:visualization>\r
               <v5:data>cid:298286523464</v5:data>\r
            </v5:content>\r
            <!--Zero or more repetitions:-->\r
            <v5:signature technicalSignature="?" userFIO="?" dateSign="?" jobExecutionId="?" signMO="?" signeeLogin="?" deprecated="?">\r
               <!--Optional:-->\r
               <xd:Signature Id="?">\r
                  <xd:SignedInfo Id="?">\r
                     <xd:CanonicalizationMethod Algorithm="?">\r
                        e\r
                        <!--You may enter ANY elements at this point-->\r
                        gero\r
                     </xd:CanonicalizationMethod>\r
                     <xd:SignatureMethod Algorithm="?">\r
                        cum\r
                        <!--You have a CHOICE of the next 2 items at this level-->\r
                        <xd:HMACOutputLength>?</xd:HMACOutputLength>\r
                        <!--You may enter ANY elements at this point-->\r
                        sonoras\r
                     </xd:SignatureMethod>\r
                     <!--1 or more repetitions:-->\r
                     <xd:Reference Id="?" URI="?" Type="?">\r
                        <!--Optional:-->\r
                        <xd:Transforms>\r
                           <!--1 or more repetitions:-->\r
                           <xd:Transform Algorithm="?">\r
                              aeoliam\r
                              <!--You have a CHOICE of the next 2 items at this level-->\r
                              <xd:XPath>?</xd:XPath>\r
                              <!--You may enter ANY elements at this point-->\r
                              quae\r
                           </xd:Transform>\r
                        </xd:Transforms>\r
                        <xd:DigestMethod Algorithm="?">\r
                           ventos\r
                           <!--You may enter ANY elements at this point-->\r
                           verrantque\r
                        </xd:DigestMethod>\r
                        <xd:DigestValue>cid:129155049327</xd:DigestValue>\r
                     </xd:Reference>\r
                  </xd:SignedInfo>\r
                  <xd:SignatureValue Id="?">cid:908006027682</xd:SignatureValue>\r
                  <!--Optional:-->\r
                  <xd:KeyInfo Id="?">\r
                     temperat\r
                     <!--You have a CHOICE of the next 8 items at this level-->\r
                     <xd:X509Data>\r
                        <!--You have a CHOICE of the next 6 items at this level-->\r
                        <xd:X509Certificate>cid:728112886832</xd:X509Certificate>\r
                        <xd:X509SubjectName>?</xd:X509SubjectName>\r
                        <xd:X509CRL>cid:1400742636353</xd:X509CRL>\r
                        <xd:X509IssuerSerial>\r
                           <xd:X509IssuerName>?</xd:X509IssuerName>\r
                           <xd:X509SerialNumber>?</xd:X509SerialNumber>\r
                        </xd:X509IssuerSerial>\r
                        <xd:X509SKI>cid:1332713971540</xd:X509SKI>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:X509Data>\r
                     <xd:KeyValue>\r
                        per\r
                        <!--You have a CHOICE of the next 3 items at this level-->\r
                        <xd:DSAKeyValue>\r
                           <!--Optional:-->\r
                           <xd:P>cid:552162589823</xd:P>\r
                           <!--Optional:-->\r
                           <xd:Q>cid:1064568838753</xd:Q>\r
                           <!--Optional:-->\r
                           <xd:G>cid:226621087518</xd:G>\r
                           <xd:Y>cid:890426439910</xd:Y>\r
                           <!--Optional:-->\r
                           <xd:J>cid:1147669195175</xd:J>\r
                           <!--Optional:-->\r
                           <xd:Seed>cid:15608783350</xd:Seed>\r
                           <!--Optional:-->\r
                           <xd:PgenCounter>cid:1184724098547</xd:PgenCounter>\r
                        </xd:DSAKeyValue>\r
                        <xd:RSAKeyValue>\r
                           <xd:Modulus>cid:1439167875515</xd:Modulus>\r
                           <xd:Exponent>cid:202619004526</xd:Exponent>\r
                        </xd:RSAKeyValue>\r
                        <!--You may enter ANY elements at this point-->\r
                        turbine\r
                     </xd:KeyValue>\r
                     <xd:RetrievalMethod URI="?" Type="?">\r
                        <!--Optional:-->\r
                        <xd:Transforms>\r
                           <!--1 or more repetitions:-->\r
                           <xd:Transform Algorithm="?">\r
                              circum\r
                              <!--You have a CHOICE of the next 2 items at this level-->\r
                              <xd:XPath>?</xd:XPath>\r
                              <!--You may enter ANY elements at this point-->\r
                              regemque\r
                           </xd:Transform>\r
                        </xd:Transforms>\r
                     </xd:RetrievalMethod>\r
                     <xd:KeyName>?</xd:KeyName>\r
                     <xd:MgmtData>?</xd:MgmtData>\r
                     <xd:PGPData>\r
                        <!--You have a CHOICE of the next 3 items at this level-->\r
                        <xd:PGPKeyID>cid:1160985630192</xd:PGPKeyID>\r
                        <xd:PGPKeyPacket>cid:1122043035757</xd:PGPKeyPacket>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:PGPData>\r
                     <xd:SPKIData>\r
                        <!--You have a CHOICE of the next 2 items at this level-->\r
                        <xd:SPKISexp>cid:361100062303</xd:SPKISexp>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:SPKIData>\r
                     <!--You may enter ANY elements at this point-->\r
                     nimborum\r
                  </xd:KeyInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <xd:Object Id="?" MimeType="?" Encoding="?">\r
                     fremunt\r
                     <!--You may enter ANY elements at this point-->\r
                     foedere\r
                  </xd:Object>\r
               </xd:Signature>\r
               <!--Optional:-->\r
               <signatureCAdES>cid:1120154152363</signatureCAdES>\r
            </v5:signature>\r
         </v5:document>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:saveDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/saveDocumentRequest"/></con:call><con:call id="989d29c9-6cda-4332-a108-78a27b30e3ed" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/" xmlns:v52="http://emias.mos.ru/simi/cct/v5/" xmlns:xd="http://www.w3.org/2000/09/xmldsig#">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:saveDocumentRequest>\r
         <v5:document>\r
            <metadata status="?" authorLogin="?" signeeLogin="?">\r
               <v5:documentId>?</v5:documentId>\r
               <v5:documentInfo documentCreated="?" documentSubmissionSetId="?" simiVersion="?">\r
                  <v51:patientId>?</v51:patientId>\r
                  <v51:careEventId>?</v51:careEventId>\r
                  <v51:careEventStarted>?</v51:careEventStarted>\r
                  <!--Optional:-->\r
                  <v51:careEventFinished>?</v51:careEventFinished>\r
                  <v5:cctInfo role="?">\r
                     <!--Optional:-->\r
                     <schema>?</schema>\r
                     <!--Optional:-->\r
                     <code>?</code>\r
                     <!--Optional:-->\r
                     <value>?</value>\r
                     <v52:cctParameters>\r
                        <!--Zero or more repetitions:-->\r
                        <tag role="?">\r
                           <!--Optional:-->\r
                           <schema>?</schema>\r
                           <!--Optional:-->\r
                           <code>?</code>\r
                           <!--Optional:-->\r
                           <value>?</value>\r
                        </tag>\r
                     </v52:cctParameters>\r
                     <v52:contentTypeInfo mimeClass="?">\r
                        <!--1 or more repetitions:-->\r
                        <mimeType>?</mimeType>\r
                     </v52:contentTypeInfo>\r
                  </v5:cctInfo>\r
                  <tags>\r
                     <!--Zero or more repetitions:-->\r
                     <tag role="?" definedByCct="?">\r
                        <!--Optional:-->\r
                        <schema>?</schema>\r
                        <!--Optional:-->\r
                        <code>?</code>\r
                        <!--Optional:-->\r
                        <value>?</value>\r
                     </tag>\r
                  </tags>\r
               </v5:documentInfo>\r
               <v52:visualizations>\r
                  <!--Zero or more repetitions:-->\r
                  <visualization>\r
                     <!--Optional:-->\r
                     <v52:visualizationId>?</v52:visualizationId>\r
                     <v52:cctCode>?</v52:cctCode>\r
                     <visualizationInfo name="?" description="?" xsltVersion="?" signature="?">\r
                        <v52:tags>\r
                           <!--Zero or more repetitions:-->\r
                           <tag role="?">\r
                              <!--Optional:-->\r
                              <schema>?</schema>\r
                              <!--Optional:-->\r
                              <code>?</code>\r
                              <!--Optional:-->\r
                              <value>?</value>\r
                           </tag>\r
                        </v52:tags>\r
                     </visualizationInfo>\r
                     <!--Optional:-->\r
                     <visualizationData>cid:417478379348</visualizationData>\r
                  </visualization>\r
               </v52:visualizations>\r
               <confidentialityTags>\r
                  <!--Zero or more repetitions:-->\r
                  <tag role="?" definedByCct="?">\r
                     <!--Optional:-->\r
                     <schema>?</schema>\r
                     <!--Optional:-->\r
                     <code>?</code>\r
                     <!--Optional:-->\r
                     <value>?</value>\r
                  </tag>\r
               </confidentialityTags>\r
               <links>\r
                  <!--Optional:-->\r
                  <parent>\r
                     <v5:documentId>?</v5:documentId>\r
                  </parent>\r
                  <!--Zero or more repetitions:-->\r
                  <descendants>\r
                     <v5:documentId>?</v5:documentId>\r
                  </descendants>\r
               </links>\r
               <associations>\r
                  <!--Zero or more repetitions:-->\r
                  <association otherId="?">\r
                     <!--Optional:-->\r
                     <myRole>?</myRole>\r
                     <!--Optional:-->\r
                     <otherRole>?</otherRole>\r
                     <!--Optional:-->\r
                     <type>\r
                        <!--Optional:-->\r
                        <schema>?</schema>\r
                        <!--Optional:-->\r
                        <code>?</code>\r
                        <!--Optional:-->\r
                        <value>?</value>\r
                     </type>\r
                  </association>\r
               </associations>\r
            </metadata>\r
            <v5:content mimeClass="?" mimeType="?" valid="?">\r
               <!--Optional:-->\r
               <v5:visualization>cid:979662269099</v5:visualization>\r
               <v5:data>cid:1447598839313</v5:data>\r
            </v5:content>\r
            <!--Zero or more repetitions:-->\r
            <v5:signature technicalSignature="?" userFIO="?" dateSign="?" jobExecutionId="?" signMO="?" signeeLogin="?" deprecated="?">\r
               <!--Optional:-->\r
               <xd:Signature Id="?">\r
                  <xd:SignedInfo Id="?">\r
                     <xd:CanonicalizationMethod Algorithm="?">\r
                        e\r
                        <!--You may enter ANY elements at this point-->\r
                        gero\r
                     </xd:CanonicalizationMethod>\r
                     <xd:SignatureMethod Algorithm="?">\r
                        cum\r
                        <!--You have a CHOICE of the next 2 items at this level-->\r
                        <xd:HMACOutputLength>?</xd:HMACOutputLength>\r
                        <!--You may enter ANY elements at this point-->\r
                        sonoras\r
                     </xd:SignatureMethod>\r
                     <!--1 or more repetitions:-->\r
                     <xd:Reference Id="?" URI="?" Type="?">\r
                        <!--Optional:-->\r
                        <xd:Transforms>\r
                           <!--1 or more repetitions:-->\r
                           <xd:Transform Algorithm="?">\r
                              aeoliam\r
                              <!--You have a CHOICE of the next 2 items at this level-->\r
                              <xd:XPath>?</xd:XPath>\r
                              <!--You may enter ANY elements at this point-->\r
                              quae\r
                           </xd:Transform>\r
                        </xd:Transforms>\r
                        <xd:DigestMethod Algorithm="?">\r
                           ventos\r
                           <!--You may enter ANY elements at this point-->\r
                           verrantque\r
                        </xd:DigestMethod>\r
                        <xd:DigestValue>cid:351908196774</xd:DigestValue>\r
                     </xd:Reference>\r
                  </xd:SignedInfo>\r
                  <xd:SignatureValue Id="?">cid:1397297454374</xd:SignatureValue>\r
                  <!--Optional:-->\r
                  <xd:KeyInfo Id="?">\r
                     temperat\r
                     <!--You have a CHOICE of the next 8 items at this level-->\r
                     <xd:X509Data>\r
                        <!--You have a CHOICE of the next 6 items at this level-->\r
                        <xd:X509Certificate>cid:528222054126</xd:X509Certificate>\r
                        <xd:X509SubjectName>?</xd:X509SubjectName>\r
                        <xd:X509CRL>cid:60633567937</xd:X509CRL>\r
                        <xd:X509IssuerSerial>\r
                           <xd:X509IssuerName>?</xd:X509IssuerName>\r
                           <xd:X509SerialNumber>?</xd:X509SerialNumber>\r
                        </xd:X509IssuerSerial>\r
                        <xd:X509SKI>cid:317371216966</xd:X509SKI>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:X509Data>\r
                     <xd:KeyValue>\r
                        per\r
                        <!--You have a CHOICE of the next 3 items at this level-->\r
                        <xd:DSAKeyValue>\r
                           <!--Optional:-->\r
                           <xd:P>cid:748461685384</xd:P>\r
                           <!--Optional:-->\r
                           <xd:Q>cid:44360678228</xd:Q>\r
                           <!--Optional:-->\r
                           <xd:G>cid:1188400713206</xd:G>\r
                           <xd:Y>cid:739610228466</xd:Y>\r
                           <!--Optional:-->\r
                           <xd:J>cid:450148968009</xd:J>\r
                           <!--Optional:-->\r
                           <xd:Seed>cid:592389156223</xd:Seed>\r
                           <!--Optional:-->\r
                           <xd:PgenCounter>cid:187080003095</xd:PgenCounter>\r
                        </xd:DSAKeyValue>\r
                        <xd:RSAKeyValue>\r
                           <xd:Modulus>cid:1202886676041</xd:Modulus>\r
                           <xd:Exponent>cid:915180311849</xd:Exponent>\r
                        </xd:RSAKeyValue>\r
                        <!--You may enter ANY elements at this point-->\r
                        turbine\r
                     </xd:KeyValue>\r
                     <xd:RetrievalMethod URI="?" Type="?">\r
                        <!--Optional:-->\r
                        <xd:Transforms>\r
                           <!--1 or more repetitions:-->\r
                           <xd:Transform Algorithm="?">\r
                              circum\r
                              <!--You have a CHOICE of the next 2 items at this level-->\r
                              <xd:XPath>?</xd:XPath>\r
                              <!--You may enter ANY elements at this point-->\r
                              regemque\r
                           </xd:Transform>\r
                        </xd:Transforms>\r
                     </xd:RetrievalMethod>\r
                     <xd:KeyName>?</xd:KeyName>\r
                     <xd:MgmtData>?</xd:MgmtData>\r
                     <xd:PGPData>\r
                        <!--You have a CHOICE of the next 3 items at this level-->\r
                        <xd:PGPKeyID>cid:1586211559649</xd:PGPKeyID>\r
                        <xd:PGPKeyPacket>cid:252527331253</xd:PGPKeyPacket>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:PGPData>\r
                     <xd:SPKIData>\r
                        <!--You have a CHOICE of the next 2 items at this level-->\r
                        <xd:SPKISexp>cid:707543863917</xd:SPKISexp>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:SPKIData>\r
                     <!--You may enter ANY elements at this point-->\r
                     nimborum\r
                  </xd:KeyInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <xd:Object Id="?" MimeType="?" Encoding="?">\r
                     fremunt\r
                     <!--You may enter ANY elements at this point-->\r
                     foedere\r
                  </xd:Object>\r
               </xd:Signature>\r
               <!--Optional:-->\r
               <signatureCAdES>cid:1449827450284</signatureCAdES>\r
            </v5:signature>\r
         </v5:document>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:saveDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/saveDocumentRequest"/></con:call><con:call id="e05d7972-e46d-4c6f-980d-6bd780213aea" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/" xmlns:v52="http://emias.mos.ru/simi/cct/v5/" xmlns:xd="http://www.w3.org/2000/09/xmldsig#">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:saveDocumentRequest>\r
         <v5:document>\r
            <metadata status="?" authorLogin="?" signeeLogin="?">\r
               <v5:documentId>?</v5:documentId>\r
               <v5:documentInfo documentCreated="?" documentSubmissionSetId="?" simiVersion="?">\r
                  <v51:patientId>?</v51:patientId>\r
                  <v51:careEventId>?</v51:careEventId>\r
                  <v51:careEventStarted>?</v51:careEventStarted>\r
                  <!--Optional:-->\r
                  <v51:careEventFinished>?</v51:careEventFinished>\r
                  <v5:cctInfo role="?">\r
                     <!--Optional:-->\r
                     <schema>?</schema>\r
                     <!--Optional:-->\r
                     <code>?</code>\r
                     <!--Optional:-->\r
                     <value>?</value>\r
                     <v52:cctParameters>\r
                        <!--Zero or more repetitions:-->\r
                        <tag role="?">\r
                           <!--Optional:-->\r
                           <schema>?</schema>\r
                           <!--Optional:-->\r
                           <code>?</code>\r
                           <!--Optional:-->\r
                           <value>?</value>\r
                        </tag>\r
                     </v52:cctParameters>\r
                     <v52:contentTypeInfo mimeClass="?">\r
                        <!--1 or more repetitions:-->\r
                        <mimeType>?</mimeType>\r
                     </v52:contentTypeInfo>\r
                  </v5:cctInfo>\r
                  <tags>\r
                     <!--Zero or more repetitions:-->\r
                     <tag role="?" definedByCct="?">\r
                        <!--Optional:-->\r
                        <schema>?</schema>\r
                        <!--Optional:-->\r
                        <code>?</code>\r
                        <!--Optional:-->\r
                        <value>?</value>\r
                     </tag>\r
                  </tags>\r
               </v5:documentInfo>\r
               <v52:visualizations>\r
                  <!--Zero or more repetitions:-->\r
                  <visualization>\r
                     <!--Optional:-->\r
                     <v52:visualizationId>?</v52:visualizationId>\r
                     <v52:cctCode>?</v52:cctCode>\r
                     <visualizationInfo name="?" description="?" xsltVersion="?" signature="?">\r
                        <v52:tags>\r
                           <!--Zero or more repetitions:-->\r
                           <tag role="?">\r
                              <!--Optional:-->\r
                              <schema>?</schema>\r
                              <!--Optional:-->\r
                              <code>?</code>\r
                              <!--Optional:-->\r
                              <value>?</value>\r
                           </tag>\r
                        </v52:tags>\r
                     </visualizationInfo>\r
                     <!--Optional:-->\r
                     <visualizationData>cid:1107037835859</visualizationData>\r
                  </visualization>\r
               </v52:visualizations>\r
               <confidentialityTags>\r
                  <!--Zero or more repetitions:-->\r
                  <tag role="?" definedByCct="?">\r
                     <!--Optional:-->\r
                     <schema>?</schema>\r
                     <!--Optional:-->\r
                     <code>?</code>\r
                     <!--Optional:-->\r
                     <value>?</value>\r
                  </tag>\r
               </confidentialityTags>\r
               <links>\r
                  <!--Optional:-->\r
                  <parent>\r
                     <v5:documentId>?</v5:documentId>\r
                  </parent>\r
                  <!--Zero or more repetitions:-->\r
                  <descendants>\r
                     <v5:documentId>?</v5:documentId>\r
                  </descendants>\r
               </links>\r
               <associations>\r
                  <!--Zero or more repetitions:-->\r
                  <association otherId="?">\r
                     <!--Optional:-->\r
                     <myRole>?</myRole>\r
                     <!--Optional:-->\r
                     <otherRole>?</otherRole>\r
                     <!--Optional:-->\r
                     <type>\r
                        <!--Optional:-->\r
                        <schema>?</schema>\r
                        <!--Optional:-->\r
                        <code>?</code>\r
                        <!--Optional:-->\r
                        <value>?</value>\r
                     </type>\r
                  </association>\r
               </associations>\r
            </metadata>\r
            <v5:content mimeClass="?" mimeType="?" valid="?">\r
               <!--Optional:-->\r
               <v5:visualization>cid:246344402932</v5:visualization>\r
               <v5:data>cid:267047771142</v5:data>\r
            </v5:content>\r
            <!--Zero or more repetitions:-->\r
            <v5:signature technicalSignature="?" userFIO="?" dateSign="?" jobExecutionId="?" signMO="?" signeeLogin="?" deprecated="?">\r
               <!--Optional:-->\r
               <xd:Signature Id="?">\r
                  <xd:SignedInfo Id="?">\r
                     <xd:CanonicalizationMethod Algorithm="?">\r
                        e\r
                        <!--You may enter ANY elements at this point-->\r
                        gero\r
                     </xd:CanonicalizationMethod>\r
                     <xd:SignatureMethod Algorithm="?">\r
                        cum\r
                        <!--You have a CHOICE of the next 2 items at this level-->\r
                        <xd:HMACOutputLength>?</xd:HMACOutputLength>\r
                        <!--You may enter ANY elements at this point-->\r
                        sonoras\r
                     </xd:SignatureMethod>\r
                     <!--1 or more repetitions:-->\r
                     <xd:Reference Id="?" URI="?" Type="?">\r
                        <!--Optional:-->\r
                        <xd:Transforms>\r
                           <!--1 or more repetitions:-->\r
                           <xd:Transform Algorithm="?">\r
                              aeoliam\r
                              <!--You have a CHOICE of the next 2 items at this level-->\r
                              <xd:XPath>?</xd:XPath>\r
                              <!--You may enter ANY elements at this point-->\r
                              quae\r
                           </xd:Transform>\r
                        </xd:Transforms>\r
                        <xd:DigestMethod Algorithm="?">\r
                           ventos\r
                           <!--You may enter ANY elements at this point-->\r
                           verrantque\r
                        </xd:DigestMethod>\r
                        <xd:DigestValue>cid:1626665994350</xd:DigestValue>\r
                     </xd:Reference>\r
                  </xd:SignedInfo>\r
                  <xd:SignatureValue Id="?">cid:141191998106</xd:SignatureValue>\r
                  <!--Optional:-->\r
                  <xd:KeyInfo Id="?">\r
                     temperat\r
                     <!--You have a CHOICE of the next 8 items at this level-->\r
                     <xd:X509Data>\r
                        <!--You have a CHOICE of the next 6 items at this level-->\r
                        <xd:X509Certificate>cid:1164767799669</xd:X509Certificate>\r
                        <xd:X509SubjectName>?</xd:X509SubjectName>\r
                        <xd:X509CRL>cid:1388394215666</xd:X509CRL>\r
                        <xd:X509IssuerSerial>\r
                           <xd:X509IssuerName>?</xd:X509IssuerName>\r
                           <xd:X509SerialNumber>?</xd:X509SerialNumber>\r
                        </xd:X509IssuerSerial>\r
                        <xd:X509SKI>cid:435421124812</xd:X509SKI>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:X509Data>\r
                     <xd:KeyValue>\r
                        per\r
                        <!--You have a CHOICE of the next 3 items at this level-->\r
                        <xd:DSAKeyValue>\r
                           <!--Optional:-->\r
                           <xd:P>cid:788133703117</xd:P>\r
                           <!--Optional:-->\r
                           <xd:Q>cid:641292976452</xd:Q>\r
                           <!--Optional:-->\r
                           <xd:G>cid:422359685829</xd:G>\r
                           <xd:Y>cid:244685936969</xd:Y>\r
                           <!--Optional:-->\r
                           <xd:J>cid:218203399224</xd:J>\r
                           <!--Optional:-->\r
                           <xd:Seed>cid:1208871378921</xd:Seed>\r
                           <!--Optional:-->\r
                           <xd:PgenCounter>cid:431754155931</xd:PgenCounter>\r
                        </xd:DSAKeyValue>\r
                        <xd:RSAKeyValue>\r
                           <xd:Modulus>cid:839877286627</xd:Modulus>\r
                           <xd:Exponent>cid:869053686796</xd:Exponent>\r
                        </xd:RSAKeyValue>\r
                        <!--You may enter ANY elements at this point-->\r
                        turbine\r
                     </xd:KeyValue>\r
                     <xd:RetrievalMethod URI="?" Type="?">\r
                        <!--Optional:-->\r
                        <xd:Transforms>\r
                           <!--1 or more repetitions:-->\r
                           <xd:Transform Algorithm="?">\r
                              circum\r
                              <!--You have a CHOICE of the next 2 items at this level-->\r
                              <xd:XPath>?</xd:XPath>\r
                              <!--You may enter ANY elements at this point-->\r
                              regemque\r
                           </xd:Transform>\r
                        </xd:Transforms>\r
                     </xd:RetrievalMethod>\r
                     <xd:KeyName>?</xd:KeyName>\r
                     <xd:MgmtData>?</xd:MgmtData>\r
                     <xd:PGPData>\r
                        <!--You have a CHOICE of the next 3 items at this level-->\r
                        <xd:PGPKeyID>cid:336949639631</xd:PGPKeyID>\r
                        <xd:PGPKeyPacket>cid:765602988304</xd:PGPKeyPacket>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:PGPData>\r
                     <xd:SPKIData>\r
                        <!--You have a CHOICE of the next 2 items at this level-->\r
                        <xd:SPKISexp>cid:180427642849</xd:SPKISexp>\r
                        <!--You may enter ANY elements at this point-->\r
                     </xd:SPKIData>\r
                     <!--You may enter ANY elements at this point-->\r
                     nimborum\r
                  </xd:KeyInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <xd:Object Id="?" MimeType="?" Encoding="?">\r
                     fremunt\r
                     <!--You may enter ANY elements at this point-->\r
                     foedere\r
                  </xd:Object>\r
               </xd:Signature>\r
               <!--Optional:-->\r
               <signatureCAdES>cid:1146375258324</signatureCAdES>\r
            </v5:signature>\r
         </v5:document>\r
         <!--Optional:-->\r
         <v51:options>\r
            <!--Zero or more repetitions:-->\r
            <v51:entry key="?">?</v51:entry>\r
         </v51:options>\r
      </typ:saveDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/saveDocumentRequest"/></con:call></con:operation><con:operation id="334aa9f2-915e-4e52-8c26-e3b0b8410cb4" isOneWay="false" action="searchDocuments" name="searchDocuments" bindingOperationName="searchDocuments" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="44cbf975-e812-44fa-b9d7-7947e030d043" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/SIMI/SIMI/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchDocumentsRequest>\r
         <!--Optional:-->\r
         <queryName>?</queryName>\r
         <params>\r
            <!--Optional:-->\r
            <typ:conditions>\r
               <!--Zero or more repetitions:-->\r
               <typ:condition operator="?">\r
                  <typ:leftOperand>?</typ:leftOperand>\r
                  <typ:rightOperand>?</typ:rightOperand>\r
               </typ:condition>\r
            </typ:conditions>\r
            <!--Optional:-->\r
            <typ:orderClauses>\r
               <!--Zero or more repetitions:-->\r
               <typ:orderClause ascending="?">\r
                  <typ:attributeName>?</typ:attributeName>\r
               </typ:orderClause>\r
            </typ:orderClauses>\r
         </params>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:searchDocumentsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/searchDocumentsRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="163ed631-506d-4fd2-be2f-dcabe048a4bb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchDocumentsRequest>\r
         <!--Optional:-->\r
         <queryName>?</queryName>\r
         <params>\r
            <!--Optional:-->\r
            <typ:conditions>\r
               <!--Zero or more repetitions:-->\r
               <typ:condition operator="?">\r
                  <typ:leftOperand>?</typ:leftOperand>\r
                  <typ:rightOperand>?</typ:rightOperand>\r
               </typ:condition>\r
            </typ:conditions>\r
            <!--Optional:-->\r
            <typ:orderClauses>\r
               <!--Zero or more repetitions:-->\r
               <typ:orderClause ascending="?">\r
                  <typ:attributeName>?</typ:attributeName>\r
               </typ:orderClause>\r
            </typ:orderClauses>\r
         </params>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:searchDocumentsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/searchDocumentsRequest"/></con:call><con:call id="dc42e7a9-9b4f-46bf-97d8-3a4a819293cb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/core/v5/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchDocumentsRequest>\r
         <!--Optional:-->\r
         <queryName>?</queryName>\r
         <params>\r
            <!--Optional:-->\r
            <typ:conditions>\r
               <!--Zero or more repetitions:-->\r
               <typ:condition operator="?">\r
                  <typ:leftOperand>?</typ:leftOperand>\r
                  <typ:rightOperand>?</typ:rightOperand>\r
               </typ:condition>\r
            </typ:conditions>\r
            <!--Optional:-->\r
            <typ:orderClauses>\r
               <!--Zero or more repetitions:-->\r
               <typ:orderClause ascending="?">\r
                  <typ:attributeName>?</typ:attributeName>\r
               </typ:orderClause>\r
            </typ:orderClauses>\r
         </params>\r
         <!--Optional:-->\r
         <v5:pagingOptions pageNumber="?" pageSize="?"/>\r
         <!--Optional:-->\r
         <v5:options>\r
            <!--Zero or more repetitions:-->\r
            <v5:entry key="?">?</v5:entry>\r
         </v5:options>\r
      </typ:searchDocumentsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/searchDocumentsRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="79476f06-8bf3-4bb5-9ed0-07a32f77cb48" wsaVersion="NONE" name="meiPTBv2" type="wsdl" bindingName="{http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/}meiPTBv2" soapVersion="1_2" anonymous="optional" definition="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?wsdl"><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="applicationService" targetNamespace="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:ns1="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cc0F8uYE2kXICd7dyFKU8gNg2pcdsBsT958mJpjC6nz5H2DnwklaLl0r"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cc0F8uYE2kXICd7O2kKKxR8g1oEBqZZ41n6AJ5sT7_AGwQnxmw--"/>
      <xs:import namespace="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnSS7p3FNh_8wLXK8udGqJm7rStsY6PEA2y7TSJzHwlKD.AJowdwT9hsf_YtopHhe1EUart7ccDdJgLOU9M990w9i"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="searchEmployeesInput">
    <wsdl:part element="ns1:searchEmployeesRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchEmployeesOptionalOutput">
    <wsdl:part element="ns1:searchEmployeesOptionalResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchEmployeesOutput">
    <wsdl:part element="ns1:searchEmployeesResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMeInfoByJobIdOutput">
    <wsdl:part element="ns1:getMeInfoByJobIdResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMeInfoByJobIdInput">
    <wsdl:part element="ns1:getMeInfoByJobIdRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchEmployeesOptionalInput">
    <wsdl:part element="ns1:searchEmployeesOptionalRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="medicalEmployeeInfoPT">
    <wsdl:operation name="getMeInfoByJobId">
      <wsdl:documentation>Создание заявления на прикрепление</wsdl:documentation>
      <wsdl:input message="tns:getMeInfoByJobIdInput"></wsdl:input>
      <wsdl:output message="tns:getMeInfoByJobIdOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchEmployees">
      <wsdl:documentation>Создание заявления на прикрепление</wsdl:documentation>
      <wsdl:input message="tns:searchEmployeesInput"></wsdl:input>
      <wsdl:output message="tns:searchEmployeesOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchEmployeesOptional">
      <wsdl:documentation>Создание заявления на прикрепление</wsdl:documentation>
      <wsdl:input message="tns:searchEmployeesOptionalInput"></wsdl:input>
      <wsdl:output message="tns:searchEmployeesOptionalOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="meiPTBv2" type="tns:medicalEmployeeInfoPT">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getMeInfoByJobId">
      <soap:operation soapAction="getMeInfoByJobId"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchEmployees">
      <soap:operation soapAction="searchEmployees"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchEmployeesOptional">
      <soap:operation soapAction="searchEmployeesOptional"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="medicalEmployeeInfoService">
    <wsdl:port binding="tns:meiPTBv2" name="medicalEmployeeInfoPort">
      <soap:address location="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cc0F8uYE2kXICd7dyFKU8gNg2pcdsBsT958mJpjC6nz5H2DnwklaLl0r</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" version="1.0" xmlns="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cd0T8_dPwVqQQIPMm8M.xCm.uNXE4SV.sjfB9A--"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cd0T8_dPwVqQQIPMm8M.xCm.uNXE4SV.sjfB9A--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.2" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cc0F8uYE2kXICd7QyFMFKBT1Wcprr3uHchFV3_HA"/>
  <!--references-->
  <xs:element name="mail" type="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="compositionId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор
Композиции Think!EHR
ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="simiDocumentId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор
Документа СИМИ
ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--abstract types-->
  <xs:complexType abstract="true" name="Base">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания
компонентов сущностей,
владельцеми которых является
текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор
сущности/записи
на уровне всего ЕМИАС</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания сущностей,
владельцем которых является
текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base">
        <xs:attribute name="archived" type="xs:boolean" use="required">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания
компонентов сущностей,
владельцами которых являются
другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания сущностей,
владельцами которых являются
другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания типов,
реализующих справочники ЕМИАС.НСИ.2</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование элемента справочника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiWithCodeBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания типов,
реализующих справочники ЕМИАС.НСИ.2, в которых имеется бизнес-код</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Бизнес-код</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="SIMIDocumentBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания cведений о документе СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="simiDocumentId"/>
      <xs:element minOccurs="0" ref="compositionId"/>
    </xs:sequence>
  </xs:complexType>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="totalItemsCount" type="xs:long" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество элементов (на всех страницах)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
(используются в соответствии с
переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--keys-->
  <xs:complexType name="EntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор сущности,
непосредственно принадлежащей
текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ForeignEntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор
сущности ЕМИАС,
внешней по отношнению
к текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NsiGlobalId">
    <xs:annotation>
      <xs:documentation>Глобальный идентфикатор
ЕМИАС.НСИ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cc0F8uYE2kXICd7QyFMFKBT1Wcprr3uHchFV3_HA</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:maxLength value="320"/>
      <xs:pattern value=".+@.+\..+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cc0F8uYE2kXICd7O2kKKxR8g1oEBqZZ41n6AJ5sT7_AGwQnxmw--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" version="1.0" xmlns="http://emias.mos.ru/system/v1/faults/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cc0F8uYE2kXICd7QyFMFKBT1Wcprr3uHchFV3_HA"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cc0F8uYE2kXICd7dyFKU8gNg2pcdsBsT958mJpjC6nz5H2DnwklaLl0r"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnSS7p3FNh_8wLXK8udGqJm7rStsY6PEA2y7TSJzHwlKD.AJowdwT9hsf_YtopHhe1EUart7ccDdJgLOU9M990w9i</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/" xmlns:core="http://emias.mos.ru/suppmeinfo/core/v2/" xmlns:tns="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/suppmeinfo/core/v2/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnSS7p3FNh_8wLXK8udGqJm7rRNEO5LwXhUXGS5TxKNn8g_rbOFOcUEH812oD"/>
  <xs:complexType name="MedicalInfoResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о мед работниках</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="employee" type="core:Employee">
            <xs:annotation>
              <xs:documentation>Сведения о мед работнике</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SearchEmployeeResultPage">
    <xs:annotation>
      <xs:documentation>Результаты отбора сведений о мед работниках</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="employee" type="core:EmployeeList">
            <xs:annotation>
              <xs:documentation>Сведения о мед работнике</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="getMeInfoByJobIdRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" name="jobIds">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="jobId" type="core:ID"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getMeInfoByJobIdResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getMedicalEmployeeJobInfo</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="tns:MedicalInfoResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchEmployeesRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" name="searchParameters">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" name="employeeInfo">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element minOccurs="0" name="employeeId" type="core:ID"/>
                    <xs:element minOccurs="0" name="snils" type="xs:string"/>
                    <xs:element minOccurs="0" name="lastName" type="xs:string"/>
                    <xs:element minOccurs="0" name="firstName" type="xs:string"/>
                    <xs:element minOccurs="0" name="secondName" type="xs:string"/>
                    <xs:element minOccurs="0" name="gender" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element minOccurs="0" name="jobInfo">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element minOccurs="0" name="jobId" type="core:ID"/>
                    <xs:element minOccurs="0" name="moId" type="core:ID"/>
                    <xs:element minOccurs="0" name="muId" type="core:ID"/>
                    <xs:element minOccurs="0" name="muDepartmentId" type="core:ID"/>
                    <xs:element minOccurs="0" name="patientAgeGroupCodes">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element maxOccurs="unbounded" name="patientAgeGroupCode" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element minOccurs="0" name="specialityIds">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element maxOccurs="unbounded" name="specialityId" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element minOccurs="0" name="positionTypeId" type="core:ID"/>
                    <xs:element minOccurs="0" name="positionKindId" type="xs:string"/>
                    <xs:element minOccurs="0" name="assistanceTypeId" type="xs:string"/>
                    <xs:element minOccurs="0" name="assistanceConditionId" type="xs:string"/>
                    <xs:element minOccurs="0" name="tapCode" type="xs:string"/>
                    <xs:element minOccurs="0" name="preferentialCode" type="xs:string"/>
                    <xs:element minOccurs="0" name="startDate">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element minOccurs="0" name="startDateIn" type="xs:date"/>
                          <xs:element minOccurs="0" name="startDateOut" type="xs:date"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element minOccurs="0" name="jobIsActive" type="xs:boolean"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchEmployeesResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getMedicalEmployeeJobInfo</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="tns:SearchEmployeeResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchEmployeesOptionalRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" name="searchParameters">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" name="employeeInfo" type="core:EmployeeInfoRequest"/>
              <xs:element minOccurs="0" name="jobInfo" type="core:JobInfoRequest"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="outputParameters">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="outputParameter" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" ref="core:options"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchEmployeesOptionalResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода searchEmployeesOptional</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="tns:SearchEmployeeResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnSS7p3FNh_8wLXK8udGqJm7rRNEO5LwXhUXGS5TxKNn8g_rbOFOcUEH812oD</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/suppmeinfo/core/v2/" xmlns="http://emias.mos.ru/suppmeinfo/core/v2/" xmlns:tns="http://emias.mos.ru/suppmeinfo/core/v2/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELiUCf89H7RkzAWIKlGTmAmSzpjXxvUOr.UVaYQt4toRKFChcG9OdO5IRmbKVQqlKc5JjvT7bNqZoTg3qZ_PeWk7MyPYh7Za1OR.DgI_QGQOlnW_44T4QhukoNGOi892pKWC2Cd0T8_dPwVqQQIPMm8M.xCm.uNXE4SV.sjfB9A--"/>
  <xs:complexType name="IdNameType">
    <xs:sequence>
      <xs:element name="id" type="ID">
        <xs:annotation>
          <xs:documentation>Ид</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IdNameStringType">
    <xs:sequence>
      <xs:element name="id" type="xs:string">
        <xs:annotation>
          <xs:documentation>Ид</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IdNameOGRNType">
    <xs:complexContent>
      <xs:extension base="IdNameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="ogrn" type="xs:string">
            <xs:annotation>
              <xs:documentation>ОГРН</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EmployeeInfo">
    <xs:annotation>
      <xs:documentation>Группирующая сущность информации о сотруднике</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="employeeId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор МР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="snils" type="xs:string">
        <xs:annotation>
          <xs:documentation>СНИЛС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="firstName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя сотрудника</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="secondName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Отчество сотрудника</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="lastName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Фамилия сотрудника</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="gender" type="xs:string">
        <xs:annotation>
          <xs:documentation>Пол</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="phone" type="xs:string">
        <xs:annotation>
          <xs:documentation>Номер телефона</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="email" type="xs:string">
        <xs:annotation>
          <xs:documentation>Электронная почта</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="birthDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата рождения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="updateDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата последнего обновления</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="JobInfo">
    <xs:annotation>
      <xs:documentation>Группирующая сущность информации об исполняемой должности сотрудника</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="jobId" type="ID"/>
      <xs:element minOccurs="0" name="mo" type="IdNameOGRNType"/>
      <xs:element name="mu" type="IdNameType"/>
      <xs:element name="muDepartment" type="IdNameType"/>
      <xs:element name="speciality" type="IdNameStringType"/>
      <xs:element minOccurs="0" name="position" type="IdNameStringType"/>
      <xs:element minOccurs="0" name="positionType" type="IdNameType"/>
      <xs:element minOccurs="0" name="positionKind" type="IdNameStringType"/>
      <xs:element minOccurs="0" name="assistanceType" type="IdNameStringType"/>
      <xs:element minOccurs="0" name="assistanceCondition" type="IdNameType"/>
      <xs:element minOccurs="0" name="period">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="startDate" type="xs:dateTime"/>
            <xs:element minOccurs="0" name="endDate" type="xs:dateTime"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="tapCode" type="xs:string"/>
      <xs:element minOccurs="0" name="preferentialCode" type="xs:string"/>
      <xs:element minOccurs="0" name="archived" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Группирующая сущность с информацией о сотруднике</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="employeeInfo" type="EmployeeInfo"/>
      <xs:element name="jobInfo" type="JobInfo"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EmployeeList">
    <xs:annotation>
      <xs:documentation>Группирующая сущность с информацией о сотруднике</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="employeeInfo" type="EmployeeInfo"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="jobInfo" type="JobInfo"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EmployeeInfoRequest">
    <xs:annotation>
      <xs:documentation>Фильтры поиска по сведениям МР</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="employeeId" type="ID"/>
      <xs:element minOccurs="0" name="snils" type="xs:string"/>
      <xs:element minOccurs="0" name="lastName" type="xs:string"/>
      <xs:element minOccurs="0" name="firstName" type="xs:string"/>
      <xs:element minOccurs="0" name="secondName" type="xs:string"/>
      <xs:element minOccurs="0" name="gender" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="JobInfoRequest">
    <xs:annotation>
      <xs:documentation>Фильтры поиска по сведениям исполнения должности МР</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="jobId" type="ID"/>
      <xs:element minOccurs="0" name="moId" type="ID"/>
      <xs:element minOccurs="0" name="muId" type="ID"/>
      <xs:element minOccurs="0" name="muDepartmentId" type="ID"/>
      <xs:element minOccurs="0" name="specialityIds">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="specialityId" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="positionTypeId" type="ID"/>
      <xs:element minOccurs="0" name="positionKindId" type="xs:string"/>
      <xs:element minOccurs="0" name="assistanceTypeId" type="xs:string"/>
      <xs:element minOccurs="0" name="assistanceConditionId" type="xs:string"/>
      <xs:element minOccurs="0" name="tapCode" type="xs:string"/>
      <xs:element minOccurs="0" name="preferentialCode" type="xs:string"/>
      <xs:element minOccurs="0" name="startDate">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="startDateIn" type="xs:date"/>
            <xs:element minOccurs="0" name="startDateOut" type="xs:date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="jobIsActive" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService</con:endpoint></con:endpoints><con:operation id="39d89fca-1c45-4385-b7ee-7d1990c9a2cb" isOneWay="false" action="getMeInfoByJobId" name="getMeInfoByJobId" bindingOperationName="getMeInfoByJobId" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="02bd2683-d9cc-4f73-9efb-a7ba81f57e82" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/" xmlns:v2="http://emias.mos.ru/suppmeinfo/core/v2/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getMeInfoByJobIdRequest>\r
         <typ:jobIds>\r
            <!--1 or more repetitions:-->\r
            <typ:jobId>?</typ:jobId>\r
         </typ:jobIds>\r
         <!--Optional:-->\r
         <v2:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </v2:options>\r
         <!--Optional:-->\r
         <v2:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v2:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v2:sortOrder attributeName="?" desceding="false"/>\r
            </v2:sortingOptions>\r
         </v2:pagingOptions>\r
      </typ:getMeInfoByJobIdRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/medicalEmployeeInfoPT/getMeInfoByJobIdRequest"/></con:call></con:operation><con:operation id="8241ee6b-dbd8-445e-9d86-7d3f8a17609d" isOneWay="false" action="searchEmployees" name="searchEmployees" bindingOperationName="searchEmployees" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9c4042a4-53b9-4871-8f8e-f6dd51072079" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/" xmlns:v2="http://emias.mos.ru/suppmeinfo/core/v2/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchEmployeesRequest>\r
         <typ:searchParameters>\r
            <!--Optional:-->\r
            <typ:employeeInfo>\r
               <!--Optional:-->\r
               <typ:employeeId>?</typ:employeeId>\r
               <!--Optional:-->\r
               <typ:snils>?</typ:snils>\r
               <!--Optional:-->\r
               <typ:lastName>?</typ:lastName>\r
               <!--Optional:-->\r
               <typ:firstName>?</typ:firstName>\r
               <!--Optional:-->\r
               <typ:secondName>?</typ:secondName>\r
               <!--Optional:-->\r
               <typ:gender>?</typ:gender>\r
            </typ:employeeInfo>\r
            <!--Optional:-->\r
            <typ:jobInfo>\r
               <!--Optional:-->\r
               <typ:jobId>?</typ:jobId>\r
               <!--Optional:-->\r
               <typ:moId>?</typ:moId>\r
               <!--Optional:-->\r
               <typ:muId>?</typ:muId>\r
               <!--Optional:-->\r
               <typ:muDepartmentId>?</typ:muDepartmentId>\r
               <!--Optional:-->\r
               <typ:patientAgeGroupCodes>\r
                  <!--1 or more repetitions:-->\r
                  <typ:patientAgeGroupCode>?</typ:patientAgeGroupCode>\r
               </typ:patientAgeGroupCodes>\r
               <!--Optional:-->\r
               <typ:specialityIds>\r
                  <!--1 or more repetitions:-->\r
                  <typ:specialityId>?</typ:specialityId>\r
               </typ:specialityIds>\r
               <!--Optional:-->\r
               <typ:positionTypeId>?</typ:positionTypeId>\r
               <!--Optional:-->\r
               <typ:positionKindId>?</typ:positionKindId>\r
               <!--Optional:-->\r
               <typ:assistanceTypeId>?</typ:assistanceTypeId>\r
               <!--Optional:-->\r
               <typ:assistanceConditionId>?</typ:assistanceConditionId>\r
               <!--Optional:-->\r
               <typ:tapCode>?</typ:tapCode>\r
               <!--Optional:-->\r
               <typ:preferentialCode>?</typ:preferentialCode>\r
               <!--Optional:-->\r
               <typ:startDate>\r
                  <!--Optional:-->\r
                  <typ:startDateIn>?</typ:startDateIn>\r
                  <!--Optional:-->\r
                  <typ:startDateOut>?</typ:startDateOut>\r
               </typ:startDate>\r
               <!--Optional:-->\r
               <typ:jobIsActive>?</typ:jobIsActive>\r
            </typ:jobInfo>\r
         </typ:searchParameters>\r
         <!--Optional:-->\r
         <v2:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </v2:options>\r
         <!--Optional:-->\r
         <v2:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v2:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v2:sortOrder attributeName="?" desceding="false"/>\r
            </v2:sortingOptions>\r
         </v2:pagingOptions>\r
      </typ:searchEmployeesRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/medicalEmployeeInfoPT/searchEmployeesRequest"/></con:call></con:operation><con:operation id="e324a638-124a-46a0-b6d4-b38337b9e4aa" isOneWay="false" action="searchEmployeesOptional" name="searchEmployeesOptional" bindingOperationName="searchEmployeesOptional" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7a3f6371-e99f-4e10-87ba-0d0fc0595dd6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/" xmlns:v2="http://emias.mos.ru/suppmeinfo/core/v2/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchEmployeesOptionalRequest>\r
         <typ:searchParameters>\r
            <!--Optional:-->\r
            <typ:employeeInfo>\r
               <!--Optional:-->\r
               <v2:employeeId>?</v2:employeeId>\r
               <!--Optional:-->\r
               <v2:snils>?</v2:snils>\r
               <!--Optional:-->\r
               <v2:lastName>?</v2:lastName>\r
               <!--Optional:-->\r
               <v2:firstName>?</v2:firstName>\r
               <!--Optional:-->\r
               <v2:secondName>?</v2:secondName>\r
               <!--Optional:-->\r
               <v2:gender>?</v2:gender>\r
            </typ:employeeInfo>\r
            <!--Optional:-->\r
            <typ:jobInfo>\r
               <!--Optional:-->\r
               <v2:jobId>?</v2:jobId>\r
               <!--Optional:-->\r
               <v2:moId>?</v2:moId>\r
               <!--Optional:-->\r
               <v2:muId>?</v2:muId>\r
               <!--Optional:-->\r
               <v2:muDepartmentId>?</v2:muDepartmentId>\r
               <!--Optional:-->\r
               <v2:specialityIds>\r
                  <!--1 or more repetitions:-->\r
                  <v2:specialityId>?</v2:specialityId>\r
               </v2:specialityIds>\r
               <!--Optional:-->\r
               <v2:positionTypeId>?</v2:positionTypeId>\r
               <!--Optional:-->\r
               <v2:positionKindId>?</v2:positionKindId>\r
               <!--Optional:-->\r
               <v2:assistanceTypeId>?</v2:assistanceTypeId>\r
               <!--Optional:-->\r
               <v2:assistanceConditionId>?</v2:assistanceConditionId>\r
               <!--Optional:-->\r
               <v2:tapCode>?</v2:tapCode>\r
               <!--Optional:-->\r
               <v2:preferentialCode>?</v2:preferentialCode>\r
               <!--Optional:-->\r
               <v2:startDate>\r
                  <!--Optional:-->\r
                  <v2:startDateIn>?</v2:startDateIn>\r
                  <!--Optional:-->\r
                  <v2:startDateOut>?</v2:startDateOut>\r
               </v2:startDate>\r
               <!--Optional:-->\r
               <v2:jobIsActive>?</v2:jobIsActive>\r
            </typ:jobInfo>\r
         </typ:searchParameters>\r
         <!--Optional:-->\r
         <typ:outputParameters>\r
            <!--Zero or more repetitions:-->\r
            <typ:outputParameter>?</typ:outputParameter>\r
         </typ:outputParameters>\r
         <!--Optional:-->\r
         <v2:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </v2:options>\r
         <!--Optional:-->\r
         <v2:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v2:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v2:sortOrder attributeName="?" desceding="false"/>\r
            </v2:sortingOptions>\r
         </v2:pagingOptions>\r
      </typ:searchEmployeesOptionalRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/medicalEmployeeInfoPT/searchEmployeesOptionalRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" id="6ed7d6da-4de8-43af-bb23-289d786c8e56" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="_search" path="/default_registry/_search" id="0b78f9dc-be97-47a9-b85a-f43fe8ffaa23"><con:settings/><con:parameters/><con:method name="_search" id="ea96abcc-c3ec-42a5-9dac-beb421015e7e" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search">_se:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>406 400</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search">_se:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="search по пациенту" id="c7017a8c-dcd6-4d31-b6ac-bd9287caabdf" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":0,"track_total_hits":false,"query":{"bool":{"must":[{"match":{"groupId":{"query":"10000290"}}},{"match":{"data.attachment.attachments.areaId":{"query":196}}}]}},"aggs":{"attached":{"filter":{"bool":{"must":[{"match":{"data.attachment.attached.areaId":{"query":196}}},{"match":{"data.attachment.attached.moId":{"query":10000290}}}]}}},"detached":{"filter":{"bool":{"must":[{"match":{"data.attachment.attachments.areaId":{"query":196}}}]}}}}}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="_search 2" id="5a98bfe5-f0a5-4531-a4f6-942af131cd70" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="search test" id="f0330b84-b8d0-4ee4-9509-8f7f869f0ee7" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{\r
    "query": {\r
        "bool": {\r
            "must": [\r
            {\r
                "exists": {\r
                    "field": "data.patientInfo.policyNumber"\r
                }\r
            }]\r
        }\r
    }\r
}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="_search 3" id="3d8af54c-9020-4c3f-bef2-09f106cc4b65" method="POST"><con:settings/><con:parameters/><con:request name="search test Copy" id="f2b3a6a0-114f-4edd-abf6-196a2953c02a" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":true,"query":{"bool":{"must":[{"match":{"groupId":{"query":"10000290"}}},\r
{"match":{"data.attachment.attachments.areaId":{"query":196}}},\r
{"match":{"data.attachment.attached.areaId":{"query":196}}},\r
{"match":{"data.attachment.attached.moId":{"query":10000290}}},\r
{"match":{"data.attachment.attachments.areaId":{"query":196}}},\r
{"match":{"data.attachment.attached.moId":{"query":10000290}}}\r
]}}}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="_search" path="/analytics_covid_li/_search" id="91698caf-8073-4c52-84e4-c333fb86025e"><con:settings/><con:parameters/><con:method name="_search" id="383df855-7ee5-4c4e-8b8d-8f6bfcf18f39" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="covid_li search по пациенту" id="7f377499-e90a-41af-9259-9fb250416a96" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"928"}}}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="_search 2" id="78d35e86-f2e1-4e7a-b551-bb19c82b077a" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="covid_li search test" id="479fdbf3-e4de-496f-b4e7-87b582451ed0" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{\r
    "query": {\r
        "bool": {\r
            "must": [{\r
                "match": {\r
                    "data.patientInfo.death": "true"\r
                }\r
            }]\r
        }\r
    }\r
}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="20911307_156" path="/default_registry/_update/20911307_156" id="ca770d86-7e94-4097-aa84-3f6f06ce241e"><con:settings/><con:parameters/><con:method name="20911307_156" id="07b1112f-2c28-4d8b-9eef-9d27b93191b1" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>routing</con:name><con:value>156</con:value><con:style>QUERY</con:style><con:default>156</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Fault</con:element></con:representation><con:request name="create" id="582f4739-695d-4e77-ad1e-9d1cdd02d209" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{\r
  "doc":\r
{\r
         "patientId": "20911307",\r
         "data": {\r
                        "ambulance": {\r
                            "updated": "2021-05-12T15:15:40.764059+03:00",\r
                            "ambulanceCounter": 3,\r
                            "ambulanceItems": [\r
                                {\r
                                    "ambulanceDate": "2019-07-28",\r
                                    "timeCommitted": "2020-07-28T11:09:02.451+03:00",\r
                                    "documentId": "002cf655-aa75-46c6-8953-5e4663daaa5f"\r
                                },\r
                                {\r
                                    "compositionId": "5e852089-58fa-4801-bc48-c8482edb9f08",\r
                                    "ambulanceDate": "2020-12-09",\r
                                    "timeCommitted": "2020-12-09T15:57:32.097+03:00"\r
                                },\r
                                {\r
                                    "compositionId": "002cf655-aa75-46c6-8953-5e4663daaa5f",\r
                                    "ambulanceDate": "2020-07-28",\r
                                    "timeCommitted": "2020-07-28T11:09:02.451+03:00"\r
                                }\r
                            ]\r
                        }\r
                        }\r
                    }\r
}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:entry key="routing" value="156"/></con:parameters><con:parameterOrder><con:entry>routing</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="4502806f-a406-4f9f-bcea-fe5d971be827" name="А_ЕСУ_01 - Обработка триггера на подписание и аннулирование формы 030У"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="c361f322-cd40-472b-8a27-51e06769b847" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#70063" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate uid" id="dc32bf55-3351-48bb-8e15-292d8b3894d5"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="529c7916-090c-4da1-b814-5a26121c7bfc"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="getNonexistendPatientId" id="09c39056-f8fa-43f8-9698-cd3ab021e7c5"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Group Data" id="b339900f-4f9b-47c3-968c-56472e22baaf"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="9d793a48-231b-4720-a245-70a8150ba2f9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '1917-08-30', '2020-06-09 00:01:44.000', NULL, NULL, NULL, NULL, 0);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="9bc08f7b-e828-4d1a-813a-d33f1e3d2032"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 1" id="17ad9087-3248-4af8-9fea-522b7664749f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>            &lt;C_DN_JUSTIFICATION_CHECK.DN_DOCUMENT_UID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.DN_DOCUMENT_UID>
            &lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID/>
            &lt;C_DN_JUSTIFICATION_CHECK.SIMI_RECEIVED_TIME/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5e738c63-de5c-4dcd-a96e-1128f270243b" name="Contains 1"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="208539b0-9446-40dc-8cbf-57f108c84497" name="Contains 2"><con:configuration><token><![CDATA[<C_DN_JUSTIFICATION_CHECK.OPERATION_TYPE>update</C_DN_JUSTIFICATION_CHECK.OPERATION_TYPE>
            <C_DN_JUSTIFICATION_CHECK.PATIENT_ID>${#TestCase#patientId}</C_DN_JUSTIFICATION_CHECK.PATIENT_ID>
            <C_DN_JUSTIFICATION_CHECK.SIGNED_DATE>${#TestCase#date2} 00:00:00</C_DN_JUSTIFICATION_CHECK.SIGNED_DATE>
            <C_DN_JUSTIFICATION_CHECK.GROUP_CODE>${#TestCase#groupCode}</C_DN_JUSTIFICATION_CHECK.GROUP_CODE>
            <C_DN_JUSTIFICATION_CHECK.DOCTOR_FIO>Моисеева Марина Евгеньевна</C_DN_JUSTIFICATION_CHECK.DOCTOR_FIO>
            <C_DN_JUSTIFICATION_CHECK.SPECIALITY_CODE>50</C_DN_JUSTIFICATION_CHECK.SPECIALITY_CODE>
            <C_DN_JUSTIFICATION_CHECK.SPECIALITY_NAME>Врач - педиатр участковый</C_DN_JUSTIFICATION_CHECK.SPECIALITY_NAME>
            <C_DN_JUSTIFICATION_CHECK.SPECIALIZATION_CODE>${#TestCase#specializationCode}</C_DN_JUSTIFICATION_CHECK.SPECIALIZATION_CODE>
            <C_DN_JUSTIFICATION_CHECK.SPECIALIZATION_NAME>${#TestCase#specializationName}</C_DN_JUSTIFICATION_CHECK.SPECIALIZATION_NAME>
            <C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_CODE>${#TestCase#diagnosisCode}</C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_CODE>
            <C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_NAME>проверка</C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_NAME>
            <C_DN_JUSTIFICATION_CHECK.DIAGNOSIS>язвенный колит</C_DN_JUSTIFICATION_CHECK.DIAGNOSIS>
            <C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_DATE>2018-02-06 00:00:00</C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_DATE>
            <C_DN_JUSTIFICATION_CHECK.REPEAT>диагноз установлен в предыдущ. году или ранее (-)</C_DN_JUSTIFICATION_CHECK.REPEAT>
            <C_DN_JUSTIFICATION_CHECK.START_DATE>2018-02-06</C_DN_JUSTIFICATION_CHECK.START_DATE>
            <C_DN_JUSTIFICATION_CHECK.END_DATE/>
            <C_DN_JUSTIFICATION_CHECK.CANCEL_REASON_CODE/>
            <C_DN_JUSTIFICATION_CHECK.CANCEL_REASON_NAME/>
            <C_DN_JUSTIFICATION_CHECK.EMPLOYEE_ID>10479782</C_DN_JUSTIFICATION_CHECK.EMPLOYEE_ID>
            <C_DN_JUSTIFICATION_CHECK.DN_DOCTOR_JOB_EXECUTION_ID/>
            <C_DN_JUSTIFICATION_CHECK.NO_DOCTOR>отсутствует</C_DN_JUSTIFICATION_CHECK.NO_DOCTOR>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Set Data" id="f87d1841-1d64-4dbe-adc9-2c8519c18ca6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE c_dn_justification_check SET think_received_time='2032-01-19 10:20:42.556' WHERE dn_document_uid='${#TestCase#patientId}${#TestCase#uid}';</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="2237690a-979d-4c67-9f75-693646c894f0"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2" id="8077f340-bc1b-4e8c-bc2c-ff571d16c45d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>            &lt;C_DN_JUSTIFICATION_CHECK.DN_DOCUMENT_UID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.DN_DOCUMENT_UID>
            &lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID/>
            &lt;C_DN_JUSTIFICATION_CHECK.SIMI_RECEIVED_TIME/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5e738c63-de5c-4dcd-a96e-1128f270243b" name="Contains 1"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="208539b0-9446-40dc-8cbf-57f108c84497" name="Contains 2"><con:configuration><token><![CDATA[<C_DN_JUSTIFICATION_CHECK.OPERATION_TYPE>update</C_DN_JUSTIFICATION_CHECK.OPERATION_TYPE>
            <C_DN_JUSTIFICATION_CHECK.PATIENT_ID>${#TestCase#patientId}</C_DN_JUSTIFICATION_CHECK.PATIENT_ID>
            <C_DN_JUSTIFICATION_CHECK.SIGNED_DATE>${#TestCase#date2} 00:00:00</C_DN_JUSTIFICATION_CHECK.SIGNED_DATE>
            <C_DN_JUSTIFICATION_CHECK.GROUP_CODE>${#TestCase#groupCode}</C_DN_JUSTIFICATION_CHECK.GROUP_CODE>
            <C_DN_JUSTIFICATION_CHECK.DOCTOR_FIO>Моисеева Марина Евгеньевна</C_DN_JUSTIFICATION_CHECK.DOCTOR_FIO>
            <C_DN_JUSTIFICATION_CHECK.SPECIALITY_CODE>50</C_DN_JUSTIFICATION_CHECK.SPECIALITY_CODE>
            <C_DN_JUSTIFICATION_CHECK.SPECIALITY_NAME>Врач - педиатр участковый</C_DN_JUSTIFICATION_CHECK.SPECIALITY_NAME>
            <C_DN_JUSTIFICATION_CHECK.SPECIALIZATION_CODE>${#TestCase#specializationCode}</C_DN_JUSTIFICATION_CHECK.SPECIALIZATION_CODE>
            <C_DN_JUSTIFICATION_CHECK.SPECIALIZATION_NAME>${#TestCase#specializationName}</C_DN_JUSTIFICATION_CHECK.SPECIALIZATION_NAME>
            <C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_CODE>${#TestCase#diagnosisCode}</C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_CODE>
            <C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_NAME>проверка</C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_NAME>
            <C_DN_JUSTIFICATION_CHECK.DIAGNOSIS>язвенный колит</C_DN_JUSTIFICATION_CHECK.DIAGNOSIS>
            <C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_DATE>2018-02-06 00:00:00</C_DN_JUSTIFICATION_CHECK.DIAGNOSIS_DATE>
            <C_DN_JUSTIFICATION_CHECK.REPEAT>диагноз установлен в предыдущ. году или ранее (-)</C_DN_JUSTIFICATION_CHECK.REPEAT>
            <C_DN_JUSTIFICATION_CHECK.START_DATE>2018-02-06</C_DN_JUSTIFICATION_CHECK.START_DATE>
            <C_DN_JUSTIFICATION_CHECK.END_DATE/>
            <C_DN_JUSTIFICATION_CHECK.CANCEL_REASON_CODE/>
            <C_DN_JUSTIFICATION_CHECK.CANCEL_REASON_NAME/>
            <C_DN_JUSTIFICATION_CHECK.EMPLOYEE_ID>10479782</C_DN_JUSTIFICATION_CHECK.EMPLOYEE_ID>
            <C_DN_JUSTIFICATION_CHECK.DN_DOCTOR_JOB_EXECUTION_ID/>
            <C_DN_JUSTIFICATION_CHECK.NO_DOCTOR>отсутствует</C_DN_JUSTIFICATION_CHECK.NO_DOCTOR>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5824</con:value></con:property><con:property><con:name>uid</con:name><con:value>3443724</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-24T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-24</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5582</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ba12c894-9b65-4f17-ad36-afbd2c02dd8b" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101330 с фиксом EMIASDN-1478" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="1f2b9804-28e6-4685-85b3-e87f89df93d0"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="156b3639-82e4-4a3b-a7b2-9d98087633ba"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении. Дата ниже
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет', false, '1234', 'Имя отчество', 'вервые', 'тест');
--- не забыть указать тот же uid что и в сообщении. Дата выше
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(5${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.474', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет', false, '1234', 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.475', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, '1235', 'Имя отчество', 'вервые', 'тест2');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(6${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.476', NULL, '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, '1235', 'Имя отчество', 'вервые', 'тест2');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1236', 'Имя отчество', 'вервые', 'тест');


--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении


INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="074a70e5-5fda-4ce2-98c8-3397e60f6250"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
   "auditDetails": {
      "@class": "AUDIT_DETAILS",
      "system_id": "default",
      "committer": {
         "@class": "PARTY_IDENTIFIED",
         "name": "emias_qa"
      },
      "time_committed": {
         "@class": "DV_DATE_TIME",
         "value": "2022-06-06T15:15:12.397119+03:00"
      },
      "change_type": {
         "@class": "DV_CODED_TEXT",
         "value": "deleted",
         "defining_code": {
            "@class": "CODE_PHRASE",
            "terminology_id": {
               "@class": "TERMINOLOGY_ID",
               "value": "openehr"
            },
            "code_string": "523"
         }
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="24f55889-a101-4ccf-8869-84c1a7e8ac7c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="f9cf8ca6-3363-494f-963b-334dd7506100"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a8136aee-4bb4-4398-a7c6-3f7e2804a621" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1644</con:value></con:property><con:property><con:name>uid</con:name><con:value>1521</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="b6e7a173-7407-486b-9ab0-46b8d3276c25" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101359 с фиксом EMIASDN-1478" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="a32dbea5-065c-41a1-b78d-c5ad87f34740"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="00aeb691-0e27-4f11-a503-fbc3beef7e26"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, '2020-07-06 00:00:00.000', 173933129, 204, true);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289229, '716', 125676809, NULL, 'Исходные данные.', true, '1235', 'Имя отчество', 'вервые', 'тест2');
--- event с другим uid и еще более старой датой.
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(5${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.472', '5${#TestCase#patientId}', '10503947964', 128289229, '716', 125676809, NULL, 'Оставляет на шаге 11, т.к. дата ниже', true, '1235', 'Имя отчество', 'вервые', 'тест2');
--- event с другим uid и с более старой датой, но без UID.
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(6${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.474', NULL, '10503947964', 128289229, '716', 125676809, NULL, 'Удаляет на шаге 11', true, '1235', 'Имя отчество', 'вервые', 'тест2');
--- event с другим uid и с более старой датой, но тем же UID.
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(7${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.474', '1${#TestCase#patientId}', '10503947964', 128289229, '716', 125676809, NULL, 'Удаляет на шаге 11', true, '1235', 'Имя отчество', 'вервые', 'тест2');

--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1236', 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');


--- простановка проактивности
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4098;
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE id=4100;
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="f8a696af-ffd9-44a2-a0b9-f4aea60cc673"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="0fe16798-b600-4924-8054-e1d72b0d87a8"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "newResults": [
    {
      "patientId": "79812",
      "uid": "fb20d746-821c-4928-abc4-8bc6878dc59a",
      "timeCommitted":"2020-12-23T13:04:07.347+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "comment": "Modify Composition"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="983d69d4-4ada-419f-8bf2-246f99a7be19"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 1" id="72b31bcc-9c3e-4d26-9350-2f2cf8c8730c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where id = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>13425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>3425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>430</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-01-01</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10503947964</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>128289228</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>716</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>125676809</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>13425</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>3425</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10503947964</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10503947964&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="322cd366-8829-440b-aa15-1d5eb98b499b" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Имя отчество&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 3"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>вервые&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>тест2&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2b8d0f0e-61ba-4c66-a769-bc4bddd6f435"><con:configuration/></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="a049dd9b-fd16-4b5c-9fd9-1c1d9ae2957f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})</con:query><con:assertion type="Simple NotContains" id="8dd53226-7b31-4d29-9837-9daf6e4e9b06" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cd0f0f56-a3a9-4307-8e15-255bf36f4228" name="Осталось событие с исходными данными"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>2${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="56d8682a-c2b9-4f7b-ba90-1f3256f2dca2" name="Удалено событие по UID"><con:configuration><token> &lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cd0f0f56-a3a9-4307-8e15-255bf36f4228" name="Осталось событие с на шаге 11 с более старой датой"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>5${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="56d8682a-c2b9-4f7b-ba90-1f3256f2dca2" name="Удалено событие на шаге 11 с более свежей датой и без uid"><con:configuration><token> &lt;F_ATTACHMENT_EVENT.ID>6${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="56d8682a-c2b9-4f7b-ba90-1f3256f2dca2" name="Удалено событие на шаге 11 с более свежей датой"><con:configuration><token> &lt;F_ATTACHMENT_EVENT.ID>7${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cd0f0f56-a3a9-4307-8e15-255bf36f4228" name="Осталось событие с не относящиеся к UID"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>4${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="dcd44d5a-e1f4-4e87-afa8-c3f5a291c00c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#patientId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>3${#TestCase#patientId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="bc1e0fa9-6156-426f-a73d-63e0b646e544"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.groupCode=="DNC0411"

assert messageJson.groupName=="Ожирение"

assert messageJson.groupSpecializationCode=="22"

assert messageJson.groupSpecializationName=="Детская эндокринология"

assert messageJson.doctorFIO=="Фамилия Имя Отчество"

assert messageJson.employeeId==10503947963

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="716"

assert messageJson.specialityName=="тест"

assert messageJson.specializationCode=="22"

assert messageJson.specializationName=="Детская эндокринология"

assert messageJson.diagnosisCode=="E66.0"

assert messageJson.diagnosisName=="Ожирение, обусловленное избыточным поступлением энергетических ресурсов"

assert messageJson.repeat=="Повторно"

assert messageJson.startDate=="2018-01-01"

assert messageJson.dnDoctorJobExecutionId=="1235"

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:testStep type="jdbc" name="Revert Proactive" id="2efdae1c-bedc-428f-b53c-2175f5665dfa"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- простановка проактивности
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4098;
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4100;
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2299</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1681368327728</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="36742514-ac00-4b9a-8a8f-ef68a0e21d99" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101819 с фиксом EMIASDN-1478" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="4ecd0809-16c8-4b04-b793-f96393c56031"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Create dispansaryObservation" id="84553771-cdee-4485-9775-3af3aa9f898b" disabled="true"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "проверка",
   "employeeId": "45354",
   "noDoctor": "false",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "E66.9",
   "diagnosisName": "7658",
   "diagnosisDate": "2021-10-16T15:00:58",
   "repeat": "повторно",
   "startDate": "2021-10-16",
   "endDate": null,
   "cancelReasonCode": "4",
   "cancelReasonName": "Пациент достиг 18 лет",
   "timeCommitted": "2021-10-22T15:00:58",
   "dnDoctorJobExecutionId": "3454",
   "diagnosisProactive": false,
   "diagnosisObservationPeriod": 30
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5987d4ee-19d8-435d-9050-3be1a829d5ed" disabled="true"><con:settings/><con:config><delay>300000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR" id="d75d74f7-91f6-4206-a3ff-20089386a0ed" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="11e2cf6f-1fcc-4700-bb80-e5450a0ef3e8" name="Создан dispensaryObservations"><con:configuration><token>dispensaryObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7953371c-b4a2-44a0-9a3e-82ff743fd396" name="Есть код Группы ДН"><con:configuration><token>DNC0411</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="ee7f62b5-fe66-486c-872e-18e3fd73acae"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="e889b7e0-3a94-4952-b8c3-b852dcab86c7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач
INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);

--- создание прикреплений и событий
--- прикрепление с переданным uid. Удаляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');

--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество2', 'Повторно2', 'тест2');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '21${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1235', 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание тасок, которые ссылаются на прикрепление 1
---  ContinuedObsTask
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, '2021-11-01 15:41:59.000', NULL, 'test', false, 125694880, 2);
INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) VALUES(2${#TestCase#uid}, 1${#TestCase#patientId}, 128289228, 1);


--- JobExpirationTask
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(3${#TestCase#uid}, ${#TestCase#patientId}, '2021-11-01 15:41:59.000', NULL, 'test', false, 125694880, 7);
INSERT INTO f_job_expiration_task (id, attachment_id, mkb10_id, status_id) VALUES(3${#TestCase#uid}, 1${#TestCase#patientId}, 128289228, 1);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="ef1f3d34-82b5-4200-920a-8c7d1abaf27f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="c921b391-f9d9-42c0-b4ff-5860bb625b5e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2022-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "dnDoctorJobExecutionId":"123",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "newResults": [
    {
      "patientId": "79812",
      "uid": "fb20d746-821c-4928-abc4-8bc6878dc59a",
      "timeCommitted":"2022-12-23T13:04:07.347+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "dnDoctorJobExecutionId":"123",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "comment": "Modify Composition"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="9499433f-1c53-4d15-8b57-9f6e3eeff340"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check f_task" id="1bd1c995-ca58-4b5f-bca7-a3bdf8935fed"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="ef8db92c-b2c7-46a7-936c-6f350f4f3663" name="Все таски удалены"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="40201442-2f44-4ae7-a7d9-cb6be2b35b8a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="a4986bf4-188b-452c-a419-e22dec8e94be" name="Прикрепление с uid из сообщения удалено"><con:configuration><token>&lt;F_ATTACHMENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="dd3bf5b8-4a96-4ca8-a551-02f4a65ae67c" name="Второе прикрепление не изменилось"><con:configuration><token><![CDATA[            <F_ATTACHMENT.ID>3${#TestCase#patientId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10503947963</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>f</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Фамилия Имя Отчество2</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>Повторно2</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>тест2</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="8ede0e4b-a403-4e42-9a16-2a3a6af42629"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="14419e05-f5ea-4de2-8bde-3d17a790ed8a" name="Событие с UID из сообщения удалено"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0a68ab6d-4044-4d59-9e34-612e31dbf4bc" name="Второе событие не изменилось"><con:configuration><token><![CDATA[            <F_ATTACHMENT_EVENT.ID>4${#TestCase#patientId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>3${#TestCase#patientId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2021-05-14 15:41:24.473</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>21${#TestCase#patientId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>10503947963</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128289228</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>716</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Оставляет.</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>1235</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO>Имя отчество</F_ATTACHMENT_EVENT.DOCTOR_FIO>
            <F_ATTACHMENT_EVENT.REPEAT>вервые</F_ATTACHMENT_EVENT.REPEAT>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME>тест</F_ATTACHMENT_EVENT.SPECIALITY_NAME>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="57d5377a-0ffb-4912-874f-16d5bb9170ec"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="cancel"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.groupCode=="DNC0411"

assert messageJson.groupName=="Ожирение"

assert messageJson.groupSpecializationCode=="22"

assert messageJson.groupSpecializationName=="Детская эндокринология"

assert messageJson.doctorFIO=="Фамилия Имя Отчество"

assert messageJson.employeeId==10503947963

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="716"

assert messageJson.specialityName=="тест"

assert messageJson.specializationCode=="22"

assert messageJson.specializationName=="Детская эндокринология"

assert messageJson.diagnosisCode=="E66.0"

assert messageJson.diagnosisName=="Ожирение, обусловленное избыточным поступлением энергетических ресурсов"

assert messageJson.repeat=="Повторно"

assert messageJson.startDate=="2018-01-01"

assert messageJson.dnDoctorJobExecutionId=="123"

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="bd871b80-731d-4dfe-87c7-ab236334c7b2" disabled="true"><con:settings/><con:config><delay>300000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR 2" id="477707bb-ba06-4b8f-b0d8-2f23073cdfa6" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="d91a23e9-a5b1-42ef-9c6b-344ac34e3e11" name="Нет кода Группы ДН"><con:configuration><token>DNC0411</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="1a2637a2-1048-4ea8-beb8-c61d3aea03b6" name="Удален dispensaryObservations"><con:configuration><token>dispensaryObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>6462</con:value></con:property><con:property><con:name>uid</con:name><con:value>10633517</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1681800642809</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="4e366ae2-b59d-4568-8829-ab5a00ffd2a3" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101343" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="c83c0eb1-e625-4ef8-ac73-1d0ff3ad87cf"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="9a0548d2-10b3-4d54-a448-6b0824fea9b2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="d1741f63-49a9-4a3f-949a-ddbaac1974aa"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Create Data</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="568aa745-882f-4296-9a6e-85433ed251ea"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":"проверка",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="bf8d241e-718f-43a6-9b18-dd96b2f110e8"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="700b881c-aff8-4597-b17e-05ad56fa61a7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="d6d6b257-be46-4fb4-babc-d725e579ffe9" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="a79e1846-c9cd-413d-9784-861e77e60fa6"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult><![CDATA[Система формирует сообщение об ошибке E001 с параметрами <uid>, <diagnosisCode> и <groupId>, где groupId - id найденной группы ДН 



Пример сообщения: Диагноз <diagnosisCode>, указанный в документе <uid>, не найден в списке доступных диагнозов для группы c идентификатором <groupId>]]></con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>7812</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNG0001</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>O10.9</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>2</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Врач-акушер-гинеколог</con:value></con:property><con:property><con:name>groupId</con:name><con:value>1189</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128293793</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676760</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Беременность - группа высокого риска</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="c554a451-75c5-4020-af54-e60c927887a0" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101344" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="56d2c1e4-3e00-478d-9d53-dbc19b0b52b3"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="60e06190-c685-4313-8930-7e322005ed14"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="23518eef-adb2-4236-9908-f3f92332f30c"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Create Data</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="e394e119-5ccc-4e44-9077-642677b27a39"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":"проверка",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="bac25ebf-01ad-4f0b-95ed-c983de063a0e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="35cc04e4-f284-40d0-97b6-55a01cf72f92" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="bd159ef0-6cbb-4554-a85a-7b5d9761ce13"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>
Система формирует сообщение об ошибке E004 с параметрами &lt;uid>, &lt;groupCode>



Пример сообщения: Группа с кодом &lt;groupCode>, указанная в документе &lt;uid>, не найдена в списке диспансерных групп</con:expectedResult></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="b3adfb2e-4948-47b7-bfa3-8e4ef5e64513"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is true;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="c030d48a-0412-4431-b6ac-8b8a6691384c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="64802c8e-e54a-4926-93b7-c4a0ccda4d65"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 2" id="48af1c00-bc5c-4c4b-8dfb-4df23e21e8e3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fa6e002d-1be9-4800-930c-51ec4df903f8" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual 2" id="5768bfbf-abf4-49fe-9ec8-fd38a8e7f238"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>
Система формирует сообщение об ошибке E004 с параметрами &lt;uid>, &lt;groupCode>



Пример сообщения: Группа с кодом &lt;groupCode>, указанная в документе &lt;uid>, не найдена в списке диспансерных групп</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>4561</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>diagnosisCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>specializationCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>specializationName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mkbId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>specializationId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ff9c09f9-a308-4874-b462-754356908240" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101345" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="a98f402c-4db8-42d5-9ff2-a995c4084c95"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="1ec49b75-5657-44b0-b319-c5719799edee"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="25b253e7-0667-456c-b5a9-203258fe3e28"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Create Data</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="1032ea1f-7d55-4336-ac72-6e88c5461d02"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":"1231231232",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="47972f0e-d35e-4ece-8a07-684b62bdea11"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="82ea7c51-d0a1-4e9a-a137-5f8f7a733caa"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2c6eec47-fb43-47d8-8d90-804566ec90aa" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="18c780a5-768e-4605-961a-5560627ce5d6"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult><![CDATA[Система формирует сообщение об ошибке E005 c параметром <uid>, <specializationCode>,<groupId> <diagnosisCode>, где groupId - id найденной группы ДН



Пример сообщения: 	Специализация с кодом <specializationCode>, указанная в документе <uid>, не найдена в списке ведущих диспансерную группу с идентификатором<groupId> по диагнозу <diagnosisCode>]]></con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3031</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="24dd6b86-4b48-4491-aa5e-f4cfdb94fd9c" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101347" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Send Message Step 1" id="3e7d7436-7324-4a60-9f5e-931cc6241927"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":"проверка",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="86dbe390-59af-49e2-8277-542b8d214cc4"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E012 с параметрами &lt;uid> и &lt;patientId> 



Пример сообщения: В документе &lt;uid> получен идентификатор пациента &lt;patientId> в формате отличном от ожидаемого</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>6816</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="7e3f4a21-432a-4c23-a8d0-109126dbb7e9" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101348" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="b063238d-ae97-44ca-aa77-3869f1c5332b"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="6b1a6403-18ee-41a2-a7cf-b102c3ab72e2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="10ac12f7-10a6-41f8-bcde-a3424a3f8bae"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Create Data</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="04e1e142-4cd5-41a3-811c-a123a6b940d1"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":""
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="81a615ba-b315-4a65-bd69-bf473af716df"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e2b18ac3-d817-4ebf-ba30-cd466fcfdbc1" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="824999be-5acc-47c2-98ad-a6b6c1bab5e0"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми   

Пример сообщения: Отсутствуют обязательные значения: &lt;params> в документе &lt;uid></con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="0d0e708c-5526-441b-bdc4-0a0e9c6ff34f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":""
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 2" id="44350225-0487-4eb5-9e27-30fea1da5fd9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="17fdabee-7f19-439e-88b1-c777e06d710e" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual 2" id="a81d1a4e-f241-4c28-8262-d235d8f28966"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми   

Пример сообщения: Отсутствуют обязательные значения: &lt;params> в документе &lt;uid></con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 3" id="dbe62d6d-c1d7-4642-baab-1f2610c100c3"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 3" id="20c1502e-2e4a-44ef-aa2c-b60f4151e514"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="7e503705-12a2-453e-906a-8bc7ac78b22d" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual 3" id="23a94b8a-01a1-46e0-a831-d2a221594b7a"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми   



Пример сообщения: Отсутствуют обязательные значения: &lt;params> в документе &lt;uid></con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 4" id="26b4cca0-96d1-4a38-aac3-d59ca0e3e4c4"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 4" id="10358fd4-8f7b-4bcf-82d8-0cf5a44608ef"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="77fa0174-c1ca-4821-a3e0-b951b1919ea0" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual 4" id="c2317c94-5e3f-434a-9da4-274563fb5ca9"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми   



Пример сообщения: Отсутствуют обязательные значения: &lt;params> в документе &lt;uid></con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 5" id="07135f38-57cb-4f4a-8c64-6fea50023ba9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":"",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 5" id="ae53b735-1bd9-41e0-a6c7-185fc738a2b0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="1960df62-5ed1-4e9d-9be7-4d8523cc9db6" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual 5" id="6aa4f339-0bbc-4f2a-94c9-e1c49c0072d7"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>
Система формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми   



Пример сообщения: Отсутствуют обязательные значения: &lt;params> в документе &lt;uid></con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 6" id="8202cee2-2eff-47bb-9d64-2a2044ac76da"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":"",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 6" id="7e6180d0-d5a8-4802-a7e9-81142556fef2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="48259b43-fecd-4977-a64b-d85f2bdeb23a" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual 6" id="f9fc5965-af46-4878-91ec-a682a9a990be"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>
Система формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми   



Пример сообщения: Отсутствуют обязательные значения: &lt;params> в документе &lt;uid></con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 7" id="fdc46982-d576-4acb-a4d5-c9f64ec9f294"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 7" id="35261d4b-3aef-4574-b84b-a5350b083cd9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="831bc0b9-08d4-4bac-bdec-fbab2379a91a" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual 7" id="f80f1a80-db11-4745-a7bd-4e76b090f65e"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми   



Пример сообщения: Отсутствуют обязательные значения: &lt;params> в документе &lt;uid></con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5849</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="8072af2e-5f8f-4a3d-af1e-663b683cc718" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101349" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="6162a8b0-59ad-4fd2-841e-d7dfe629811c"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="9b2fcc1a-aaad-4b3d-a323-072ee3d1b4f4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="a6419ffe-4744-4fa8-8e62-6db1d3206e20"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Create Data</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="fbb86da9-dd55-437d-8299-459e23816cb4"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId"::"проверка",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="e590daef-f069-413e-a235-41a54624055b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="43a6c2db-bc4f-4368-a753-fdb814c88d48" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="a61c5dd5-c019-4b5c-88a1-af99d99e2e87"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>истема формирует сообщение об ошибке E014 c параметром &lt;employeeId>



Пример сообщения: В документе &lt;uid> получен идентификатор медработника &lt;employeeId> в формате отличном от ожидаемого</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>8119</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="1f2e30c3-c328-475c-9796-3d37226e2e47" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101820" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="22fc97f3-1b0b-454c-bba8-2d47b01f4e8b"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="41e608eb-e054-495e-a3ca-ab603e538d71"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="e63f3da8-9767-4445-b748-a69750d37ae3"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Create Data</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="bbfd4513-8847-4e07-b161-86cdb8115ad2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);

--- создание прикреплений и событий
--- прикрепление с переданным uid. Будет удалено алгоритмом
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false);
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удалено.', false);

--- event с другим uid и более свежей датой. Не будет удален алгоритмом
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-15 15:41:27.473', '2${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false);

--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:26.473', '3${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="4e04f5a1-42ee-46a6-85b3-96072380eaa2"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":"999999999999999999",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "newResults": [
    {
      "patientId": "79812",
      "uid": "fb20d746-821c-4928-abc4-8bc6878dc59a",
      "timeCommitted":"2020-12-23T13:04:07.347+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "comment": "Modify Composition"
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="976467ce-dccf-47c8-8527-7cb822a882c1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '999999999999999999'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3ef951b3-a5a6-4cae-8c87-290316dd2d42" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1622</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ddb060c8-893a-4505-800d-8b5a3bd48990" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101346" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="a531d480-f409-42f8-a1ee-d85e9bcdc534"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="aa1ff97f-835f-4cf0-8b7f-cf11c372f8af"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="2eb52aa3-13af-4267-9b5d-1d467ef2150c"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Create Data</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="9d4b43ce-f161-4552-91ce-c3dc8d5dfc82"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":"проверка",
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="8073a484-11ab-4186-8d9f-a0327752cde6"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="b669c437-985c-417c-b9c2-b162cb610fc5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="1ea0587d-5356-469c-9b79-3f257c8e76a7" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="3d7472ae-b86c-4a6e-aad9-2fdd39946710"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E011 c параметрами &lt;uid>, &lt;attachmentCloseReason>



Пример сообщения: Код причины прекращения диспансерного наблюдения &lt;code>, указанный в документе &lt;uid>, не найден в списке возможных причин</con:expectedResult></con:config></con:testStep><con:testStep type="jdbc" name="Set Data" id="c8dd1dda-8831-40dc-92c0-9857fae20f51"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE d_observation_cancel_reason SET archived=true WHERE id=1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="b7308723-43f5-49ff-876c-4782e39f5b2f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":"1",
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="b5ed7fb5-d1bc-413d-b260-d31861adf7df"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 2" id="00887d26-adb1-42ec-989d-53e7efbfe96d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="523273c4-d2d9-4279-a18f-0e24a39e9595" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual 2" id="2351ccc2-0c17-48e7-9806-dba2629ec5a0"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E011 c параметрами &lt;uid>, &lt;attachmentCloseReason>



Пример сообщения: Код причины прекращения диспансерного наблюдения &lt;code>, указанный в документе &lt;uid>, не найден в списке возможных причин</con:expectedResult></con:config></con:testStep><con:testStep type="jdbc" name="Set Data 2" id="e51d7889-1ae7-4320-9506-3925996cddc4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE d_observation_cancel_reason SET archived=false WHERE id=1;</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3056</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="06ed1d21-052a-480e-8606-f6da913eaca1" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101821" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Set Event Id +1" id="464a422d-0674-4863-b98f-ba8f33b9162e"><con:settings/><con:config><script>def incrementValue = context.expand( '${#TestCase#eventId}' )
incrementValue = incrementValue.toInteger() + 1;
testRunner.testCase.setPropertyValue("eventId", incrementValue.toString());
log.info(incrementValue);</script></con:config></con:testStep><con:testStep type="groovy" name="Id" id="23ae7195-3b6e-4699-974b-048e9101abba"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	}
	return random_id
}

id=getNonexistendPatientId()
log.info(id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("id", id.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="82273ea2-7bcf-4641-b7b0-826326850dea"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task fp where id = 1${#TestCase#Id}</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="b46a6020-2105-47e4-8d9b-86b44448c1b1"><con:settings/><con:config><script>def responseAsXml = context.expand( '${Check Task#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/F_TASK.ID[1]}' )
if (responseAsXml == '0')
{
    testRunner.runTestStepByName('Get Event')
}
else
{
    testRunner.runTestStepByName('Id')
}</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Event" id="e11dbddb-f123-4b5e-a0ba-a00878384f5e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fae.id as event_id, fae.attachment_id, fae.document_uid, fp.id as patient_id
from f_attachment_event fae 
join f_attachment fa on fae.attachment_id = fa.id 
join f_patient fp on fa.patient_id = fp.id 
where fae.attachment_id not in (select attachment_id from f_continued_obs_task fcot)
and fae.document_uid like '%-%'
order by random()
limit 1</con:query><con:properties/></con:config></con:testStep><con:testStep type="request" id="d3b824a5-995f-4714-989e-b577279f44a2" name="getDocument"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>simiServiceBinding</con:interface><con:operation>getDocument</con:operation><con:request name="getDocument" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="3baeca07-20ba-4d63-9b6f-d56c4bab3c59"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/" xmlns:v5="http://emias.mos.ru/simi/document/v5/" xmlns:v51="http://emias.mos.ru/simi/core/v5/">\r
<soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken wsu:Id="UsernameToken-50">
        <wsse:Username>KPI_DOCTOR_X/IrIlina</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
    <userContext xmlns="http://emias.mos.ru/system/v1/userContext/">
      <systemName>KPI_DOCTOR_X</systemName>
      <userName>IrIlina</userName>
      <userRoleId>4</userRoleId>
      <isUserRoleSystemWide>false</isUserRoleSystemWide>
      <userRights>
        <userRightId>75010</userRightId>
        <userRightId>470016</userRightId>
        <userRightId>21000</userRightId>
        <userRightId>33033</userRightId>
        <userRightId>4107</userRightId>
        <userRightId>4108</userRightId>
        <userRightId>75020</userRightId>
        <userRightId>10001</userRightId>
        <userRightId>75030</userRightId>
        <userRightId>500510</userRightId>
        <userRightId>320031</userRightId>
        <userRightId>20000</userRightId>
        <userRightId>500004</userRightId>
        <userRightId>500002</userRightId>
        <userRightId>500001</userRightId>
        <userRightId>201003</userRightId>
        <userRightId>500015</userRightId>
        <userRightId>201002</userRightId>
        <userRightId>201001</userRightId>
        <userRightId>500013</userRightId>
        <userRightId>20011</userRightId>
        <userRightId>201007</userRightId>
        <userRightId>500011</userRightId>
        <userRightId>201006</userRightId>
        <userRightId>500010</userRightId>
        <userRightId>201005</userRightId>
        <userRightId>500009</userRightId>
        <userRightId>201004</userRightId>
        <userRightId>201011</userRightId>
        <userRightId>201010</userRightId>
        <userRightId>201009</userRightId>
        <userRightId>350007</userRightId>
        <userRightId>201008</userRightId>
        <userRightId>201015</userRightId>
        <userRightId>350001</userRightId>
        <userRightId>201014</userRightId>
        <userRightId>201013</userRightId>
        <userRightId>350003</userRightId>
        <userRightId>500017</userRightId>
        <userRightId>201012</userRightId>
        <userRightId>201019</userRightId>
        <userRightId>201018</userRightId>
        <userRightId>500030</userRightId>
        <userRightId>201017</userRightId>
        <userRightId>201016</userRightId>
        <userRightId>9020</userRightId>
        <userRightId>201023</userRightId>
        <userRightId>350009</userRightId>
        <userRightId>9021</userRightId>
        <userRightId>201022</userRightId>
        <userRightId>201021</userRightId>
        <userRightId>201020</userRightId>
        <userRightId>350010</userRightId>
        <userRightId>201027</userRightId>
        <userRightId>200002</userRightId>
        <userRightId>201026</userRightId>
        <userRightId>200001</userRightId>
        <userRightId>201025</userRightId>
        <userRightId>201024</userRightId>
        <userRightId>201031</userRightId>
        <userRightId>201030</userRightId>
        <userRightId>201029</userRightId>
        <userRightId>350019</userRightId>
        <userRightId>201028</userRightId>
        <userRightId>201035</userRightId>
        <userRightId>201034</userRightId>
        <userRightId>201033</userRightId>
        <userRightId>201032</userRightId>
        <userRightId>201039</userRightId>
        <userRightId>201038</userRightId>
        <userRightId>201036</userRightId>
        <userRightId>201042</userRightId>
        <userRightId>201041</userRightId>
        <userRightId>201040</userRightId>
        <userRightId>201047</userRightId>
        <userRightId>201046</userRightId>
        <userRightId>201045</userRightId>
        <userRightId>201044</userRightId>
        <userRightId>201051</userRightId>
        <userRightId>201050</userRightId>
        <userRightId>201049</userRightId>
        <userRightId>201048</userRightId>
        <userRightId>201055</userRightId>
        <userRightId>201053</userRightId>
        <userRightId>201052</userRightId>
        <userRightId>201059</userRightId>
        <userRightId>201061</userRightId>
        <userRightId>201060</userRightId>
        <userRightId>17000</userRightId>
        <userRightId>16000</userRightId>
        <userRightId>400004</userRightId>
        <userRightId>400005</userRightId>
        <userRightId>400001</userRightId>
        <userRightId>421524</userRightId>
        <userRightId>421522</userRightId>
        <userRightId>90004</userRightId>
        <userRightId>421523</userRightId>
        <userRightId>421520</userRightId>
        <userRightId>15001</userRightId>
        <userRightId>421528</userRightId>
        <userRightId>4000</userRightId>
        <userRightId>300212</userRightId>
        <userRightId>300213</userRightId>
        <userRightId>300214</userRightId>
        <userRightId>300208</userRightId>
        <userRightId>3000</userRightId>
        <userRightId>2502</userRightId>
        <userRightId>13000</userRightId>
        <userRightId>2000</userRightId>
        <userRightId>2001</userRightId>
        <userRightId>461526</userRightId>
        <userRightId>2002</userRightId>
        <userRightId>2003</userRightId>
        <userRightId>461524</userRightId>
        <userRightId>2004</userRightId>
        <userRightId>2005</userRightId>
        <userRightId>2006</userRightId>
        <userRightId>461521</userRightId>
        <userRightId>2007</userRightId>
        <userRightId>461520</userRightId>
        <userRightId>2008</userRightId>
        <userRightId>23000</userRightId>
        <userRightId>2009</userRightId>
        <userRightId>23001</userRightId>
        <userRightId>2010</userRightId>
        <userRightId>23003</userRightId>
        <userRightId>23004</userRightId>
        <userRightId>2015</userRightId>
        <userRightId>2017</userRightId>
        <userRightId>300005</userRightId>
        <userRightId>300007</userRightId>
        <userRightId>12005</userRightId>
        <userRightId>12006</userRightId>
        <userRightId>300002</userRightId>
        <userRightId>1000</userRightId>
        <userRightId>12009</userRightId>
        <userRightId>470015</userRightId>
        <userRightId>75000</userRightId>
        <userRightId>300005</userRightId>
      </userRights>
      <jobExecutionId>9406805045</jobExecutionId>
    </userContext>
  </soap:Header>
   <soap:Body>\r
      <typ:getDocumentRequest>\r
         <v5:documentId>${Get Event#ResponseAsXml#//F_ATTACHMENT_EVENT.DOCUMENT_UID}</v5:documentId>\r
      </typ:getDocumentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="99a0ba4b-e18e-45bd-a219-5841ca0437d7" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/simi/simiService/v5/simiServicePortType/getDocumentRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="dd954caf-5e4f-45a7-ab68-bcd6392ca24d"><con:settings/><con:config><script>//def response = context.expand( '${getDocument#Response#&lt;code>Concomintant&lt;/code>' )
//log.info(response)

//if (response == 'Concomitant')
//{
//    testRunner.runTestStepByName('Property Transfer')
//}
//else
//{
//    testRunner.runTestStepByName('Set Event Id +1')
//    testRunner.runTestStepByName('getDocument')
//}

def groovyUtils=new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("getDocument#Response")
def response = holder.getNodeValue('//tag/code[text() = "Concomitant" ]')
log.info response

if (response == 'Concomitant')
{
    testRunner.gotoStepByName('Property Transfer')
}
else
{
    testRunner.gotoStepByName('Set Event Id +1')
}

</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="1b491829-5ec5-49c7-9a69-e9765fb7fe8c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getDocument</con:sourceStep><con:sourcePath>//tag/code[text() = "Concomitant" ]/following-sibling::value</con:sourcePath><con:targetType>documentId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Event</con:sourceStep><con:sourcePath>${Get Event#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/F_PATIENT.PATIENT_ID[1]}</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>eventUID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Event</con:sourceStep><con:sourcePath>//F_ATTACHMENT_EVENT.DOCUMENT_UID[1]</con:sourcePath><con:targetType>eventUID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Check UID" id="e2cb8ea2-59ad-43f0-88d7-3f6a182f1f8a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_task ft JOIN f_document fd ON ft.patient_id = fd.patient_id 
WHERE fd.uid = '${#TestCase#documentId}'</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="511b36ad-edf5-4528-8cbe-8580ed5f8f58"><con:settings/><con:config><script>
def responseAsXml = context.expand( '${Check UID#ResponseAsXml#//Results[1]/ResultSet[1]/@fetchSize}' )
log.info(responseAsXml)
	
if (responseAsXml != '0'){
	testRunner.testCase.testSteps['Send Message Step 1'].run(testRunner, context)
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="fa183f00-5e09-4784-9ba6-85f9a334e92c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES (${#TestCase#Id}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694889, 4);

--- связанные таблицы по документу. Указать UID из getDocument и ID пациента

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES (${#TestCase#Id}, '${#TestCase#documentId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#Id}, 128286429, 1, ${#TestCase#Id}, 1${#TestCase#Id});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="7e6e80a2-b3a4-4588-9912-1ad39a69db22"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def eventUID=testRunner.testCase.getPropertyValue("eventUID")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
      "uid": \""""+eventUID+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A23.0",
      "diagnosisName": "A23.0 - Бруцеллез, вызванный Brucella melitensis",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "newResults": [
    {
      "patientId": "1458",
      "uid": "fb20d746-821c-4928-abc4-8bc6878dc59a",
      "timeCommitted": "2020-12-23T13:04:07.347+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "comment": "Modify Composition"
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Document" id="1c080aa7-dd13-458e-b376-18c3e1f6706e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_document_mkb10 fdm 
JOIN f_document fd ON fdm.document_id = fd.id
JOIN f_task ft ON fdm.task_id = ft.id
JOIN d_diagnosis_processing_status ddps ON fdm.status_id = ddps.id 
WHERE fd.uid = '${#TestCase#documentId}'
AND ddps.code = 'NEW';</con:query><con:assertion type="DataAndMetadataAssertion" id="eb6731b3-dfb1-48f6-9481-6aa4bb90cd2f" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_TASK.ID[1]</con:path><con:element>F_TASK.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1${#TestCase#Id}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_TASK.TYPE[1]</con:path><con:element>F_TASK.TYPE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>HOSPITAL_DISCHARGE_DOCUMENT</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_TASK.PATIENT_ID[1]</con:path><con:element>F_TASK.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#patientId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_TASK.OPENED[1]</con:path><con:element>F_TASK.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2021-02-24 17:13:49</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_TASK.CLOSED[1]</con:path><con:element>F_TASK.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_TASK.ASSIGNEE[1]</con:path><con:element>F_TASK.ASSIGNEE</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_TASK.PRIORITY[1]</con:path><con:element>F_TASK.PRIORITY</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>30</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_TASK.DELETED[1]</con:path><con:element>F_TASK.DELETED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>f</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.ID[1]</con:path><con:element>F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1${#TestCase#Id}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.UID[1]</con:path><con:element>F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.UID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#documentId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>2</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_TASK.ID[1]</con:path><con:element>F_TASK.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1${#TestCase#Id}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_TASK.TYPE[1]</con:path><con:element>F_TASK.TYPE</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>HOSPITAL_DISCHARGE_DOCUMENT</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_TASK.PATIENT_ID[1]</con:path><con:element>F_TASK.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>${#TestCase#patientId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_TASK.OPENED[1]</con:path><con:element>F_TASK.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>2021-07-02 15:37:59</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_TASK.CLOSED[1]</con:path><con:element>F_TASK.CLOSED</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>2021-07-02 15:37:59</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_TASK.ASSIGNEE[1]</con:path><con:element>F_TASK.ASSIGNEE</con:element><con:operatorId>9</con:operatorId><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_TASK.PRIORITY[1]</con:path><con:element>F_TASK.PRIORITY</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>30</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_TASK.DELETED[1]</con:path><con:element>F_TASK.DELETED</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>f</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.ID[1]</con:path><con:element>F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>18576</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[2]/F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.UID[1]</con:path><con:element>F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.UID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>${#TestCase#documentId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_TASK.ID>1845</F_TASK.ID>
         <F_TASK.TYPE>HOSPITAL_DISCHARGE_DOCUMENT</F_TASK.TYPE>
         <F_TASK.PATIENT_ID>30000000789606</F_TASK.PATIENT_ID>
         <F_TASK.OPENED>2021-02-24 17:13:49</F_TASK.OPENED>
         <F_TASK.CLOSED/>
         <F_TASK.ASSIGNEE/>
         <F_TASK.PRIORITY>30</F_TASK.PRIORITY>
         <F_TASK.DELETED>f</F_TASK.DELETED>
         <F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.ID>1845</F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.ID>
         <F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.UID>d41a1988-8258-4e4a-ba14-f5ca888e40ac</F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.UID>
      </Row>
      <Row rowNumber="2">
         <F_TASK.ID>18576</F_TASK.ID>
         <F_TASK.TYPE>HOSPITAL_DISCHARGE_DOCUMENT</F_TASK.TYPE>
         <F_TASK.PATIENT_ID>30000000789606</F_TASK.PATIENT_ID>
         <F_TASK.OPENED>2021-07-02 15:37:59</F_TASK.OPENED>
         <F_TASK.CLOSED>2021-07-02 15:37:59</F_TASK.CLOSED>
         <F_TASK.ASSIGNEE/>
         <F_TASK.PRIORITY>30</F_TASK.PRIORITY>
         <F_TASK.DELETED>f</F_TASK.DELETED>
         <F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.ID>18576</F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.ID>
         <F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.UID>d41a1988-8258-4e4a-ba14-f5ca888e40ac</F_DOCUMENT_HOSPITAL_DISCHARGE_TASK.UID>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8a32c6de-5697-4216-af26-1a9c339606fa" name="Contains"><con:configuration><token>&lt;F_TASK.TYPE_ID>4&lt;/F_TASK.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3 2" id="05a0aa1e-e30d-48f8-96e3-d99ca4f66e1d"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue( "eventId", '0' )
def getLocalPropValue = testRunner.testCase.getPropertyValue("eventId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:properties><con:property><con:name>eventUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">e7d2d83e-3c6d-4038-ac39-e78133e49d67</con:value></con:property><con:property><con:name>documentId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">33bba76f-617f-4bd0-bae3-7a4bf8aefb85</con:value></con:property><con:property><con:name>patientId</con:name><con:value>18789660</con:value></con:property><con:property><con:name>Id</con:name><con:value>98741700</con:value></con:property><con:property><con:name>eventId</con:name><con:value>0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="e3787d26-3dff-424f-ada9-087d8bf4ba3a" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113339" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="1f94dddf-1d86-4367-9588-975c61cda110"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="f839219d-2425-422d-b7ff-02a5b11df168"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="2c7ea885-35a0-4f1c-959c-008c933eb208"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="35589a30-340c-45af-85d5-76fb9252f987"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="e71d735b-e340-417f-a9c3-26990705381a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="dcca5cae-ab6e-42d5-9dba-a4487563cbe3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);


--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');


--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="ddc1617d-d512-4076-85ab-1e84c0ad988d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="782cd4a2-8b99-49a5-8731-227d42781da9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479783",
	"noDoctor": "отсутствует",
    "specialityCode": "10",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="10947f8e-67c0-4a3a-9c1e-964d0045f86f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="178e2482-4b60-42b5-b640-e1e90ae23b0d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="b64ab838-58fe-4620-bd91-6e51e2413c3c" name="Cоздает новую запись в таблице f_attachment"><con:configuration><token><![CDATA[            <F_ATTACHMENT.GROUP_ID>${#TestCase#groupId}</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2018-02-06</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10479783</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>${#TestCase#mkbId}</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>10</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>${#TestCase#specializationId}</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Моисеева Марина Евгеньевна</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>диагноз установлен в предыдущ. году или ранее (-)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач - педиатр участковый</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7e70d595-5e2a-4d6f-b4e2-da9e958594bd" name="Проверка даты"><con:configuration><token>&lt;F_ATTACHMENT.DIAGNOSIS_DATE>2018-02-06 00:00:00&lt;/F_ATTACHMENT.DIAGNOSIS_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="5804ebf6-df42-4059-b453-c1fdd0dc8c22"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name=" проставляет f_attachment.proactive_observation = true"><con:configuration><token>            &lt;F_ATTACHMENT.JOB_EXECUTION_ID/>
            &lt;F_ATTACHMENT.PROACTIVE_OBSERVATION>t&lt;/F_ATTACHMENT.PROACTIVE_OBSERVATION></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event" id="87bc8848-d8dd-4a33-992b-3f3998389a3e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})</con:query><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>//F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>//F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID>${#TestCase#patientId}${#TestCase#uid}&lt;/F_ATTACHMENT_EVENT.DOCUMENT_UID></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>//F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>//F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479783</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>//F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>//F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>//F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>//F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Врач - педиатр участковый</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>//F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>//F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>//F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>//F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>//F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>//F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="e7e90bde-3b3b-4282-9a1f-306ff36f9b80"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="new"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479783

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="10"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Врач - педиатр участковый"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="505be5ff-86e9-48cc-a4a7-6b08c28b8960"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>4766</con:value></con:property><con:property><con:name>uid</con:name><con:value>5654865</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-26T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-26</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1674715477118</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="54122210-98b5-46ac-8d0d-4feccfcbe35a" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113340" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="45c38859-60c4-451d-a24a-b3eeb7176a4b"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="6cac9140-d214-4d7a-bf11-eb2e165358aa"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="b927d07e-7213-411f-adaa-d18296b8dcab"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="ae000a44-791c-4c73-8200-26171be39b9c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="315b6edb-9938-4d1d-88f7-58103040d5d4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="7ca36993-aa06-485f-b418-cd9d99f829f4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);

--- создание прикрепления


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=${#TestCase#groupId} and mkb10_id=128286431;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="5b3b888b-03e9-463d-9fd1-e3b45041f167"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="530b34ae-4ce9-4789-8ff3-061768724a30"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="2c813d11-48e5-4491-99d2-f567915853a4"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="58c1068f-59b3-4c45-b66d-9c60e6b85665"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="c964b6b9-a19e-4307-a4cf-e36a6f92fe61"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple NotContains" id="2c7c1719-9586-4185-8ae8-2d8d38a54235" name="Очищено JOB_EXECUTION_ID"><con:configuration><token>&lt;/F_ATTACHMENT.JOB_EXECUTION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2c7c1719-9586-4185-8ae8-2d8d38a54235" name="Обновлено PROACTIVE_OBSERVATION"><con:configuration><token>&lt;/F_ATTACHMENT.JOB_EXECUTION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="3ad2d024-67d3-49ad-b7e2-58adf2d513a9"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType=="DIGITIZED_DOCUMENT"

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479785

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Врач - педиатр участковый"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="d513e0ac-c85c-4def-9937-9ee2566c65f7"><con:settings/><con:config><delay>300000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR" id="bfac9138-3ae8-4612-a74b-0cff797b2619"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="11e2cf6f-1fcc-4700-bb80-e5450a0ef3e8" name="Создан dispensaryObservations"><con:configuration><token>dispensaryObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7953371c-b4a2-44a0-9a3e-82ff743fd396" name="Есть код Группы ДН"><con:configuration><token>${#TestCase#groupCode}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>8252</con:value></con:property><con:property><con:name>uid</con:name><con:value>2677275</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-29T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-29</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1680090839701</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ca0b8b72-cb6f-489a-a0ec-d7ff89928a91" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113341" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="fc702f5e-81d6-471f-8ec5-ee47786affcd"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="c562c00f-65e3-40e2-8129-d6984451176b"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="9b298199-130c-4ed5-b6c9-8a4005ca24b7"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="ab80de2d-36f2-4e7a-9081-e4b08ba51608"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="bf0f5988-4895-40d9-ba98-409f9d5845cf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="ada1b7ef-030c-4633-87f0-e4c376383446"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);
--- создание прикрепления


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2018-02-10', NULL, 10479782, 128286429, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа HOSPITAL_DISCHARGE_DOCUMENT . Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 4);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 4, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});


</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="f5670a34-0e1b-48d2-af7e-d01bfe18d7d1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="994805f0-a78a-40a0-bfb2-2d4cc43645d6"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
      "endDate": "2018-02-10",
      "cancelReasonCode": "2",
      "cancelReasonName": "Выбытие из района обслуживания"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="08d65659-3160-4e0c-ac51-3e28e4709b80"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="27408750-424a-47c2-bf84-823a7361541e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="4d11c45f-5723-497d-beb5-a966fdf4fca6" name="Прикрепление закрыто"><con:configuration><token>&lt;F_ATTACHMENT.CLOSED>2018-02-10&lt;/F_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event" id="79747a6c-2793-46ad-98dd-e1fc8ff0c7a0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = '${#TestCase#patientId}')</con:query><con:assertion type="Simple Contains" id="4d11c45f-5723-497d-beb5-a966fdf4fca6" name="Создано событие с причиной закрытия"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.REASON_ID>2&lt;/F_ATTACHMENT_EVENT.REASON_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="79e1ae17-43d3-4768-b186-08027520ec71"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="close"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType=="HOSPITAL_DISCHARGE_DOCUMENT"

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479785

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Врач - педиатр участковый"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>6410</con:value></con:property><con:property><con:name>uid</con:name><con:value>84327681340</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-03T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-03</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1677840047382</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="c58bbdab-c8f5-4612-8bcb-f3b851fc76db" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113342" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Get Current Date" id="1c463151-f4ad-483b-b697-748f1634122d"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="3fd42e51-0c54-44a0-bee0-925833b299b2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5b7b9cef-949e-4e5c-9164-9156b6ab4fc1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="getNonexistendPatientId" id="da1404fe-b756-453d-b1a0-1db0c3add9fd"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient_area fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient_area fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="0e78196c-4ac2-411a-bdf0-c4d58187b18c"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="7e5806eb-bb04-4a74-a910-a9be72c6e256"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента
INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2011-08-09', '2020-06-08 23:36:07.000', NULL, NULL, NULL, NULL, 0);


--- создание прикрепления

INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении


INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');


--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 5);


--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 5, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="0c387034-9fa2-4740-9390-e41d20912a8f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="81e20149-1120-495f-be38-c3b06282de64"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "dnDoctorJobExecutionId":"123",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
     "endDate": "2018-02-10",
     "cancelReasonCode": "2",
     "cancelReasonName": "Выбытие из района обслуживания"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="296ec27b-c8c1-499c-83ab-5124991bf069"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="89852009-ef98-422c-964d-a29088aa8f9d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="81aaf930-ac28-495d-88c8-a7f83fef7dbc" name="proactive_observation не изменилось"><con:configuration><token>&lt;F_ATTACHMENT.PROACTIVE_OBSERVATION>t&lt;/F_ATTACHMENT.PROACTIVE_OBSERVATION></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="6d33402e-710e-4a7c-a37c-d4fd499c94d1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="close"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType=="PREVENTIVE_EXAMINATION_DOCUMENT"

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Врач - педиатр участковый"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.endDate=="2018-02-10"

assert messageJson.cancelReasonCode=="2"

assert messageJson.cancelReasonName=="Выбытие из района обслуживания"

assert messageJson.dnDoctorJobExecutionId=="123"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>65991458</con:value></con:property><con:property><con:name>uid</con:name><con:value>4104202</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-29T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-29</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1680091136439</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="5859038b-20e5-4510-9c6e-7c2eb06d7f83" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113343" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="36d5ad89-7538-4969-baa0-103eed6515d2"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="90eea0bd-c750-4a83-9a2c-e34b3a6de9cb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач
INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);

--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, NULL, 'Имя отчество', 'вервые', 'тест2');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#patientId}, '1${#TestCase#patientId}', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#patientId}, 128286894, 4, 1${#TestCase#patientId}, 111${#TestCase#patientId});</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="867dc66e-b73d-466e-a10c-07e0b6068968"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="e2790a44-dce1-4a38-9a70-b38ac98fac81"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "newResults": [
    {
      "patientId": "79812",
      "uid": "fb20d746-821c-4928-abc4-8bc6878dc59a",
      "timeCommitted":"2020-12-23T13:04:07.347+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "comment": "Modify Composition"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="22486318-b4c0-4a58-b22a-52a46b5c0fb6"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 1" id="4db6f5e8-52df-492f-9d6c-033cef475c1f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where id = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>13425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>3425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>430</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-01-01</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10503947964</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>128289228</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>716</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>125676809</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>13425</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>3425</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10503947964</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10503947964&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="322cd366-8829-440b-aa15-1d5eb98b499b" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Имя отчество&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 3"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>вервые&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>тест2&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="e00fe11f-1b24-479d-b95f-8debdcd95c10"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8dd53226-7b31-4d29-9837-9daf6e4e9b06" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="f15c4238-708f-4ba1-9047-132d5040d0d6"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType=="DIGITIZED_DOCUMENT"

assert messageJson.groupCode=="DNC0411"

assert messageJson.groupName=="Ожирение"

assert messageJson.groupSpecializationCode=="22"

assert messageJson.groupSpecializationName=="Детская эндокринология"

assert messageJson.doctorFIO=="Фамилия Имя Отчество"

assert messageJson.employeeId==10503947963

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="716"

assert messageJson.specialityName=="тест"

assert messageJson.specializationCode=="22"

assert messageJson.specializationName=="Детская эндокринология"

assert messageJson.diagnosisCode=="E66.0"

assert messageJson.diagnosisName=="Ожирение, обусловленное избыточным поступлением энергетических ресурсов"

assert messageJson.repeat=="Повторно"

assert messageJson.startDate=="2018-01-01"

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>959959</con:value></con:property><con:property><con:name>uid</con:name><con:value>40133</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1681369183363</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="1f61ef23-570b-45d4-a556-8c77c4519b54" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113449" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="e0c38441-f4e6-411b-b4a5-a0595ea2a90b"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="4ff9a6b8-ad18-4936-9b2c-b2ca80fe154f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Обновляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');




--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, '1235', 'Имя отчество', 'вервые', 'тест2');




--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1236', 'Имя отчество', 'вервые', 'тест');


--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении


INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="97b2e38c-98fb-49b4-884b-465a92f1f5b7"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": "-1",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
   "auditDetails": {
      "@class": "AUDIT_DETAILS",
      "system_id": "default",
      "committer": {
         "@class": "PARTY_IDENTIFIED",
         "name": "emias_qa"
      },
      "time_committed": {
         "@class": "DV_DATE_TIME",
         "value": "2022-06-06T15:15:12.397119+03:00"
      },
      "change_type": {
         "@class": "DV_CODED_TEXT",
         "value": "deleted",
         "defining_code": {
            "@class": "CODE_PHRASE",
            "terminology_id": {
               "@class": "TERMINOLOGY_ID",
               "value": "openehr"
            },
            "code_string": "523"
         }
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="99546fc2-0ab7-4dff-b4f1-0e56b9ba185d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="b64cd2a3-5b56-411b-9d96-b1f20894ecb6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="7751033a-63be-4c6b-a361-4fe11db4dd6a" name="Событие не удалено"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="bceaf389-057f-4d9f-b12a-020ba51a73bb"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E012 c параметром &lt;uid>: "В документе &lt;uid> получен идентификатор пациента &lt;patientId> в формате отличном от ожидаемого"</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>6921501</con:value></con:property><con:property><con:name>uid</con:name><con:value>15211501</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ac8f5b05-fb04-4987-9bcf-f71b4b9fd1e8" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#133619" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="08ef73ea-cdd3-4a50-a637-63ceececaaa1"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="f129d356-d12f-4c09-b7da-d3e4e589aee3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', '111', 'D', NULL, NULL, 0);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Обновляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');




--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, '1235', 'Имя отчество', 'вервые', 'тест2');




--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1236', 'Имя отчество', 'вервые', 'тест');


--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении


INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="f81bc2d6-7cfa-4af2-8312-3af6da797461"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
   "auditDetails": {
      "@class": "AUDIT_DETAILS",
      "system_id": "default",
      "committer": {
         "@class": "PARTY_IDENTIFIED",
         "name": "emias_qa"
      },
      "time_committed": {
         "@class": "DV_DATE_TIME",
         "value": "2022-06-06T15:15:12.397119+03:00"
      },
      "change_type": {
         "@class": "DV_CODED_TEXT",
         "value": "deleted",
         "defining_code": {
            "@class": "CODE_PHRASE",
            "terminology_id": {
               "@class": "TERMINOLOGY_ID",
               "value": "openehr"
            },
            "code_string": "523"
         }
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="6e1ece39-8d47-433e-b0c0-06b4d8bc7303"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="2dfc63b1-9406-4c58-8ce6-6de08b2e4186"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="23c4e79e-d80c-422e-a033-25aaa21338b0" name="Событие не удалено"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="dfdf8a9d-fc8e-47c0-b8b1-a60b89b65221"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E061 с параметром &lt;patientId>: "	Невозможно создать/обновить запись о прикреплении пациента к диспансерной группе, т.к. полис пациента &lt;patientId> погашен по смерти."</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5922</con:value></con:property><con:property><con:name>uid</con:name><con:value>1521</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="f7cff00b-3132-48ac-9a88-f157220a6ee2" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#136385" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="5d39f2b1-3bde-4d34-a6a5-9e3080253109"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="7dc5b0df-abfe-46c9-b904-c765fd80c539"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_attachment ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_attachment ft WHERE id = "+random_id+"")
	}
	return random_id
}

uid=getNonexistendPatientId()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="719ff2e3-c600-4869-9a96-a22fe5d5c9ea"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="0943c9b8-2717-4e4c-8953-b8c4cdae310f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="6d7911f5-1afe-426e-8823-a83e399f6359"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="02249f9f-cb55-4b64-aa3a-a5710ed14dcb"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="А_ЕСУ_01" id="d9901f31-82b6-450e-8eb3-7aadbb73dc09"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="groovy" name="А_ЕСУ_07" id="386e927e-8da0-4276-80c2-956f4d4485ed"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"1"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId":\""""+patientId+""""""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="ac412dbe-34b6-496a-9f12-788fa1795fb0"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step Step 2.1" id="61ed8df4-1ccd-487b-82a7-79f9437aefbc"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="XPath Match" id="e52f7024-4496-4b46-8761-5955e7a0ad5b" name="XPath Match"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="871ed14b-020c-4ff5-87eb-d4e031de88c5" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT.ID>${#TestCase#patientId}</F_PATIENT.ID>
            <F_PATIENT.BIRTH_DATE/>
            <F_PATIENT.UPDATE_BIRTH_DATE/>
            <F_PATIENT.POLICY_NUMBER/>
            <F_PATIENT.POLICY_STATUS/>
            <F_PATIENT.POLICY_UPDATE_DATE/>
            <F_PATIENT.CHECK_AREA_DATE/>
            <F_PATIENT.CHECK_AREA_STATUS>0</F_PATIENT.CHECK_AREA_STATUS>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 2.1" id="56ff15fe-1b3f-49a9-a8b7-0df6f0c55895"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1846</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>2499</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#groupId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-02-06</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10479782</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#mkbId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>50</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#specializationId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>1846</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>2499</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-02-06</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10479782</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128286429</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>50</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676831</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="57fa32b8-9765-4f2f-a49e-4f3b0dccd386" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.GROUP_ID>${#TestCase#groupId}&lt;/F_ATTACHMENT.GROUP_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5eeaf89a-7020-42bb-8b22-5b3789c5c09d" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.OPENED>2018-02-06&lt;/F_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="de2432cc-1d46-48b6-b9fe-c40cad090866" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.CLOSED/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="036ff864-0642-4c35-91c9-aa0f3be4b809" name="Contains 3"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="65a9bbaa-1b77-4740-9f45-1146903376ab" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.MKB10_ID>${#TestCase#mkbId}&lt;/F_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="86b35733-fe9b-47e7-bcbe-07638930ae06" name="Contains 5"><con:configuration><token> &lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="094c19ad-59ef-41d0-800c-9a26e874eecd" name="Contains 6"><con:configuration><token>&lt;F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>${#TestCase#specializationId}&lt;/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cf2c3a09-abd1-476d-aad8-a1a9548996d9" name="Contains 7"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bb9e717f-2080-49d5-affd-f44506a61c5a" name="Contains SPECIALITY_NAME"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Врач - педиатр участковый&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bb9e717f-2080-49d5-affd-f44506a61c5a" name="Contains doctor_fio"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Моисеева Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1963be5c-7121-491b-96c4-56ed2a5e74f3" name="Contains repeat"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>диагноз установлен в предыдущ. году или ранее (-)&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="da96399a-de37-498a-bdfa-44dd77cd7835" name="Contains diagnosis_date"><con:configuration><token>&lt;F_ATTACHMENT.DIAGNOSIS_DATE>2018-02-06 00:00:00&lt;/F_ATTACHMENT.DIAGNOSIS_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 2.1" id="e76ba399-5cc4-488a-9c05-4a1d87a401a0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where fa.patient_id = ${#TestCase#patientId})</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.ID[1]</con:path><con:element>F_ATTACHMENT_EVENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>2902</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.ATTACHMENT_ID[1]</con:path><con:element>F_ATTACHMENT_EVENT.ATTACHMENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1847</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.EVENT_DATE[1]</con:path><con:element>F_ATTACHMENT_EVENT.EVENT_DATE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#date2} ${#TestCase#time}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.DOCUMENT_UID[1]</con:path><con:element>F_ATTACHMENT_EVENT.DOCUMENT_UID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#patientId}${#TestCase#uid}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT_EVENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10479782</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT_EVENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#mkbId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT_EVENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>50</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>${#TestCase#specializationId}</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.REASON_ID[1]</con:path><con:element>F_ATTACHMENT_EVENT.REASON_ID</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.DIAGNOSIS[1]</con:path><con:element>F_ATTACHMENT_EVENT.DIAGNOSIS</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>язвенный колит</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT_EVENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT_EVENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT_EVENT.ID>2902</F_ATTACHMENT_EVENT.ID>
         <F_ATTACHMENT_EVENT.ATTACHMENT_ID>1847</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
         <F_ATTACHMENT_EVENT.EVENT_DATE>2021-09-17 00:00:00</F_ATTACHMENT_EVENT.EVENT_DATE>
         <F_ATTACHMENT_EVENT.DOCUMENT_UID>6308401</F_ATTACHMENT_EVENT.DOCUMENT_UID>
         <F_ATTACHMENT_EVENT.EMPLOYEE_ID>10479782</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
         <F_ATTACHMENT_EVENT.MKB10_ID>128286429</F_ATTACHMENT_EVENT.MKB10_ID>
         <F_ATTACHMENT_EVENT.SPECIALITY_CODE>50</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
         <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676831</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT_EVENT.REASON_ID/>
         <F_ATTACHMENT_EVENT.DIAGNOSIS>язвенный колит</F_ATTACHMENT_EVENT.DIAGNOSIS>
         <F_ATTACHMENT_EVENT.NO_DOCTOR>t</F_ATTACHMENT_EVENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0fddcd3d-e9fb-4a48-8ff3-23a1dfa78798" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.EVENT_DATE>${#TestCase#date2} ${#TestCase#time}&lt;/F_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6edc63a3-7d21-4532-bdf2-8aa01b5b92ee" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID>${#TestCase#patientId}${#TestCase#uid}&lt;/F_ATTACHMENT_EVENT.DOCUMENT_UID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c353dfab-843c-4924-966a-0ebe25873715" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT_EVENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="fd07fb44-556e-4b8b-99f3-dd3fd9751db3" name="Contains 3"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.MKB10_ID>${#TestCase#mkbId}&lt;/F_ATTACHMENT_EVENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="85884516-8a22-43c2-90ff-01e25bdcfdcf" name="Contains dn_doctor_job_execution_id"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9df1d16e-59d4-4e5f-a1ea-d9e726593418" name="Contains 6"><con:configuration><token> &lt;F_ATTACHMENT_EVENT.REASON_ID/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c3156940-66d0-460f-a93e-d297531880d2" name="Contains 7"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.DIAGNOSIS>язвенный колит&lt;/F_ATTACHMENT_EVENT.DIAGNOSIS></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d49df228-380f-4f4e-975a-a07e57b40dc6" name="Contains 8"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.NO_DOCTOR>t&lt;/F_ATTACHMENT_EVENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="85884516-8a22-43c2-90ff-01e25bdcfdcf" name="Contains speciality_name"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.SPECIALITY_NAME>Врач - педиатр участковый&lt;/F_ATTACHMENT_EVENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="85884516-8a22-43c2-90ff-01e25bdcfdcf" name="Contains doctor_fio"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.DOCTOR_FIO>Моисеева Марина Евгеньевна&lt;/F_ATTACHMENT_EVENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="85884516-8a22-43c2-90ff-01e25bdcfdcf" name="Contains diagnosis_date"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>2018-02-06 00:00:00&lt;/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="85884516-8a22-43c2-90ff-01e25bdcfdcf" name="Contains repeat"><con:configuration><token>F_ATTACHMENT_EVENT.REPEAT>диагноз установлен в предыдущ. году или ранее (-)&lt;/F_ATTACHMENT_EVENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="ca4cd24e-a024-4e48-9833-6722f08d8893"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.SIMI_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7f1f3e4f-6431-4d83-b673-dafbc5bf9e89" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>1${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="b8e4f72e-2f5b-49ed-882c-01bbbe259ed8"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="new"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Врач - педиатр участковый"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR" id="9a3f3988-1866-4cad-b558-92eee13e331c"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="11e2cf6f-1fcc-4700-bb80-e5450a0ef3e8" name="Создан dispensaryObservations"><con:configuration><token>dispensaryObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7953371c-b4a2-44a0-9a3e-82ff743fd396" name="Есть код Группы ДН"><con:configuration><token>${#TestCase#groupCode}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Generate uid 2" id="7211afb1-2f9b-4d50-94dd-c9584f9351a6"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_attachment ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_attachment ft WHERE id = "+random_id+"")
	}
	return random_id
}

uid=getNonexistendPatientId()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Set Current Date +1" id="6e4736a4-5c7c-4863-b933-0bdd48353b78"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime()+1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime()+1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="f78ca0f5-9480-4fcb-8611-469a5dea1c6a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "dnDoctorJobExecutionId":"123",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
     "endDate": "2018-02-10",
     "cancelReasonCode": "2",
     "cancelReasonName": "Выбытие из района обслуживания"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="groovy" name="А_ЕСУ_07 2" id="e3aa9155-6ce5-4389-85bf-d54c6563a50e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"1"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId":\""""+patientId+""""""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR 2" id="d3446212-4f5a-42cd-8c7f-2099b1bf945d"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="11e2cf6f-1fcc-4700-bb80-e5450a0ef3e8" name="Создан dispensaryObservations"><con:configuration><token>dispensaryObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7953371c-b4a2-44a0-9a3e-82ff743fd396" name="Есть код Группы ДН"><con:configuration><token>${#TestCase#groupCode}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba63d9f1-00f4-40ed-a3c4-2fa94bebca16" name="Прикрепление закрыто"><con:configuration><path>$.hits.hits[0]_source.data.dispensaryObservation.dispensaryObservations[0].active</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2704</con:value></con:property><con:property><con:name>uid</con:name><con:value>8004</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-02-21T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-02-21</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5582</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1676902067179</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="26b75d80-f355-45e6-b297-1cc0dd6f4e92" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229623" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="491bacbd-d9a6-4a13-8744-ba4ba46acb53"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="d23e0aef-a047-49e1-9c28-82393fad0f93"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="4d108a3a-77f4-45fe-92c2-8f4d13b65e3c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5a3dcdfc-378c-4bb8-b75b-9542ebbba9ab"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="71a74f0b-cffb-411e-b15e-5499b07cb0a4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="7b8ace0f-add7-49fd-94bc-3547807cf40d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="a313e784-e2d0-4af0-80ee-111b36202669"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="aceea61f-9b27-440b-abb6-aaf0fe1b132e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="2f1afd52-123d-4b63-9ad5-21dc8629cc6e"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="44bd83ba-3312-4cdb-a9d4-6ebda55723c6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="f0689a92-7441-4f96-aa11-df01b3bb18d0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="job_execution_id без изменений и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment update" id="8c46f3df-0193-4dd3-9d03-653c5a1dbe5b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Педиатрия&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева1 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="df689d15-c080-4ddb-bf99-1c7b87cf354d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479782</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>50</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Педиатрия</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева1 Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event old" id="a349a7be-47ee-4331-aacb-dce3862fa9e5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select count(*) from f_attachment_event fae where fae.attachment_id = 2${#TestCase#uid}</con:query><con:assertion type="Simple Contains" id="06e1dc1f-97bf-47cd-b240-61d974fb24c7" name="Новые события не созданы"><con:configuration><token>&lt;COUNT>1&lt;/COUNT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="d2040704-d403-41b7-8b57-fae64104a6f2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева1 Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Педиатрия"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="bc7b289e-05d4-4803-8ea5-246ab150c269"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 7</con:query><con:assertion type="Simple NotContains" id="ae62dda3-c803-416a-8992-789dfaf78f05" name="Таска не создана"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="292738e7-3f9e-4b06-b6ff-3beff7a4f482"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5647</con:value></con:property><con:property><con:name>uid</con:name><con:value>57440591658</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1674482341567</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="e6465972-ad06-497d-b752-2ee1cdce1f60" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229773" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="1c001cce-f88a-45b4-be08-204dc8efd8de"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="72227941-01df-48fe-b177-7cff4153297f"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="8055144c-ff23-46ba-856d-f54cfb704937"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="840a1b42-1bcf-456b-beb0-12e06c55930c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="56dc95c3-6721-48d2-96ab-2db104a153ab"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="04413b68-88eb-4170-8707-969d115401a7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2019-04-01 00:00:00.000', 10006305, 10145778, true);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839201', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="0bca70b7-35e2-4525-ae4e-6a372a3d7776"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="678b4058-7a8f-4e89-9c71-bb47ae762bc6"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="bea70aad-3ab9-49b7-aa4d-3d8955601093"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="d041e3b8-9527-40c4-9c15-9d27b71e739d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="67b2e57c-8aab-4901-a986-83a83429cbc4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Обновлено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839201</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839201</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment update" id="ba55c38b-0d2c-4234-b93f-6665f2cb9fae"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Педиатрия&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева1 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="345a92a6-cd69-4a8b-bba6-f12524e6560e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479782</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>50</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Педиатрия</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева1 Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event old" id="fd909245-b358-4263-b527-49fbf50c8fc2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select count(*) from f_attachment_event fae where fae.attachment_id = 2${#TestCase#uid}</con:query><con:assertion type="Simple Contains" id="06e1dc1f-97bf-47cd-b240-61d974fb24c7" name="Новые события не созданы"><con:configuration><token>&lt;COUNT>1&lt;/COUNT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="467884cb-219c-4d14-aa53-20a0d813a420"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева1 Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Педиатрия"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="dfbc710b-c5d3-4ea2-a275-cb6eaa2aa237"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 7</con:query><con:assertion type="Simple NotContains" id="ae62dda3-c803-416a-8992-789dfaf78f05" name="Таска не создана"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="945fb2f6-6a47-4a2a-9f49-0afef8c44c8f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>8096</con:value></con:property><con:property><con:name>uid</con:name><con:value>63596981659</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1674482384549</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a19002d8-646b-4dd4-9eee-40465f6fcf18" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229774" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="be3b721b-f2dd-4be2-9c4a-d277ed8654d7"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="3fbfe867-c98b-43cc-99ff-59ba53c26b86"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="d800814d-c7fb-4d84-a93b-b4fabba3ce27"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="d867a3e4-dcb6-4274-bb82-85e96f258400"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="897a8a06-26dc-40d6-810e-49e5451ec791"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="b818b7e3-b78f-4dd8-9e26-a7719efec2b5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2019-04-01 00:00:00.000', 204, 10145778, true);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="76ef95f7-de63-4542-9221-c04058cd52bd"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="28382a5d-a1f3-4e03-a56a-01ff8115ebd6"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="3a04078c-0a2d-4326-8793-13181ac69c60"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="8c86b877-0b8d-4890-975b-668e8ef6488a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="104aef77-1c56-4cbb-9d81-bfd668fe6e50"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Job_execution_id без имзенений и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>10297448</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Job_execution_id без имзенений и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>10297448</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment 1 update" id="c917a04d-7fd5-4b49-8b85-cf6b7a46a240"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10224925&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>759&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Врач-педиатр участковый&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Кидава Елена Александровна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment 2 update" id="59b6d20b-1c5d-4209-b6fc-9b5f439f9dca"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '2${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10224925&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>759&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Врач-педиатр участковый&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Кидава Елена Александровна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="79908afb-0cdd-4a4e-9c8d-4cec15257c92"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10224925</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>759</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Врач-педиатр участковый</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Кидава Елена Александровна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event 2 update" id="ecf60bb2-f64e-49f2-9b77-dd05b636075b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 2${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано второе событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10224925</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>125676760</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>759</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Врач-педиатр участковый</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Кидава Елена Александровна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>Не удалено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE</path><content>&lt;F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="b1f05a08-6828-461f-b84a-37635c992a40"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Кидава Елена Александровна"

assert messageJson.specializationCode=="49" || "2"

assert messageJson.specializationName=="Педиатрия" || "Акушерство и гинекология"

assert messageJson.startDate=="2018-02-06" || "2018-02-10"

assert messageJson.employeeId==10224925

assert messageJson.specialityCode=="759"

assert messageJson.noDoctor==false||true

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Врач-педиатр участковый"

assert messageJson.diagnosisDate==null || "2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="224fe13f-217c-4a0d-b3e5-122e3eb049fa"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft
join f_job_expiration_task fjet
on ft.id = fjet.id 
where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 7</con:query><con:assertion type="Simple Contains" id="2cb5fa9d-b230-429a-91d5-b28f242e6101" name="opened = текущие дата и время"><con:configuration><token>&lt;F_TASK.OPENED>${#TestCase#date}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2cb5fa9d-b230-429a-91d5-b28f242e6101" name="area_type_id = groupAreaTypeId"><con:configuration><token>&lt;F_TASK.AREA_TYPE_ID>125694882&lt;/F_TASK.AREA_TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2cb5fa9d-b230-429a-91d5-b28f242e6101" name="closed = NULL"><con:configuration><token> &lt;F_TASK.CLOSED/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2cb5fa9d-b230-429a-91d5-b28f242e6101" name="assignee = NULL"><con:configuration><token>&lt;F_TASK.ASSIGNEE/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2cb5fa9d-b230-429a-91d5-b28f242e6101" name="deleted = false"><con:configuration><token>&lt;F_TASK.DELETED>f&lt;/F_TASK.DELETED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2cb5fa9d-b230-429a-91d5-b28f242e6101" name="attachment_id = f_attachment.id"><con:configuration><token> &lt;F_JOB_EXPIRATION_TASK.ATTACHMENT_ID>2${#TestCase#uid}&lt;/F_JOB_EXPIRATION_TASK.ATTACHMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2cb5fa9d-b230-429a-91d5-b28f242e6101" name="mkb10_id = f_attachment.mkb10_id"><con:configuration><token>&lt;F_JOB_EXPIRATION_TASK.MKB10_ID>128286429&lt;/F_JOB_EXPIRATION_TASK.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2cb5fa9d-b230-429a-91d5-b28f242e6101" name="status_id = NEW"><con:configuration><token>&lt;F_JOB_EXPIRATION_TASK.STATUS_ID>1&lt;/F_JOB_EXPIRATION_TASK.STATUS_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="ccfbba53-acaf-46ed-9cfe-6db3f50759f5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false  WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1109</con:value></con:property><con:property><con:name>uid</con:name><con:value>69669181016</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-02-28 10</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-02-28</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1677568618860</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a68ccabb-c7c3-419f-ac38-1651e2999ed9" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229794" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="9d8b885c-5d4e-4931-94b8-6975cd339f7f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="c8edc4ef-10d9-43d3-8e2a-cf49c502256a"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="d036cc93-ecf9-4c39-8e33-9d7cfb053684"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="0d3ea8ee-83ec-49fb-bfdc-b66a1245e05c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="1e93bcdd-27d8-4eda-a65b-2dcf4f2b89b7"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="8e02e44e-a791-431b-8a71-20d349bff513"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2019-04-01 00:00:00.000', 204, 10145778, true);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};

--- проставление признака архивности для участкового
UPDATE f_area_medical_employee SET archived=true WHERE id=166;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="2c9391bb-290a-4040-8219-1dada4c85a6f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="d074176f-2d8b-4267-8446-58d2c64a1454"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="7f75e56f-30c1-4f6b-9b57-60c81e287346"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="45f65f5d-15fc-438c-bc5a-6ee8438e3193"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="26593d3b-6fcb-4138-b627-027d881f5cbb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment 1 update" id="4be62197-140e-4393-891c-550a2633fb34"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Педиатрия&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева1 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment 2 update" id="bff43871-845e-44c2-a58c-88347ecc198d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '2${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Педиатрия&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева1 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="feb7053c-f53c-48ca-8c1c-1685ed6dc35c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479782</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>50</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Педиатрия</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева1 Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event 2 update" id="070e6327-6a09-481d-a891-12cd0d66ccbb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 2${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple NotContains" id="c8e134a6-9f49-4fae-989a-d8026119ee32" name="Второе событие не создано, т.к. прикрепление не менялось"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="8bc47fb7-0853-45da-97dc-72b052c2be0b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева1 Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Педиатрия"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="6e54dea5-6057-4477-b0e8-2d6f513367e5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 7</con:query><con:assertion type="Simple NotContains" id="ae62dda3-c803-416a-8992-789dfaf78f05" name="Таска не создана"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="2e705b96-5e27-4678-8fad-5390838e2e4a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>4818</con:value></con:property><con:property><con:name>uid</con:name><con:value>2142732</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1674482066260</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a3703d6c-39d5-41b6-bc32-27f5e5314a58" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229795" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="dea15ed7-b5b1-44b4-bff8-ad308b2a3648"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="c0a67190-e112-414d-9850-f813c14f0386"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="62d0cd92-1a86-4d7a-ba25-9386b58a14f8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="d6b0c9b3-078a-4894-a55b-4e5222bae6ca"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="ed71bf84-6768-4c49-aa25-62ac5b9605f3"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="45feb390-ffa6-4757-a51f-675d03977241"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="6bc41cc9-21fe-4205-b90e-7865ae9b11b5"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="f79fbfa0-10f8-4fb7-9b81-e5373e8d9240"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="c5fc16d5-65c9-44bc-a0be-e5f0efc3a2d4"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="b88b0a4f-d3c2-433b-bef9-102d9ec0731b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="e433995e-1b9b-4535-b2b4-cf1aea16bda2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Прикрепление не изменилось. Не было перехода в А_ВА_18"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="c9cb8fff-5b53-4901-9226-59f55bc04958"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>6486</con:value></con:property><con:property><con:name>uid</con:name><con:value>4153759</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1674482088620</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="aeffb000-1098-4700-aa64-2033de505c9a" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229796" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="2dfe22c5-4d9f-4ef7-9215-b0abb33fc797"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="e9f07d4d-c569-4646-bc0b-fe5a09816fb7"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="e66cd2d9-96c9-4518-827c-4f4d6ecc171e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="4ea2021c-a8d6-4ac4-83ec-9998318cf65d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="f9d12567-083a-4fc5-b2e3-192587dc6e78"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="452d9f0e-402f-4a3e-a750-037be29971b7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="bfdb7f9a-94cb-41a9-96be-76602d75bc3d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="b3c6ad64-13e1-4637-956d-0c02d56a5a20"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="44116815-33c0-46e1-acec-a4cafe92a7f4"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="4f760f73-1b48-4d8f-beec-211315261cb9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="7005db51-df7d-43db-8959-b54d6467aec4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name=" проставляет f_attachment.proactive_observation = true"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment update" id="aeea8dde-23cd-4253-975d-5ede8098000a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479785&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Врач - педиатр участковый&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева2 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="66733dfb-730b-4d37-af26-0fc71eac8a97"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID>${#TestCase#patientId}${#TestCase#uid}&lt;/F_ATTACHMENT_EVENT.DOCUMENT_UID></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479785</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>50</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Врач - педиатр участковый</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева2 Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="ecd6b69f-e990-4e86-819f-2435372a57a1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2418</con:value></con:property><con:property><con:name>uid</con:name><con:value>1367937</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-24 10</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-24</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1674544993608</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="4de24604-665c-4fda-9f81-2e8ebd425546" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229790" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="22a5a1e3-dd5e-4a1a-b874-00bfb5823aff"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="50b6bb23-33ff-4e74-8d7e-26f88a6f6d68"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="deb4ffb7-493d-4256-88b2-91464fc1a3d3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="54895e91-f59f-434c-8bb7-e47194a79e54"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="a399555d-d447-43c4-89cf-8ff7260994e4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="d5fb1937-1092-40a2-b05c-0551c7a60a79"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2019-04-01 00:00:00.000', 204, 10145778, true);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};

--- проставление признака архивности для участкового
UPDATE f_area_medical_employee SET archived=true WHERE id=166;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="f09d6494-b418-44fa-a960-acb58d7d308b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="85914fb4-b6ab-4716-a84f-886b1afac60c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="983c490a-f6fa-4c97-bc66-25060cadfcb2"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="eb4220de-4ac4-4897-9d67-2a1c66ae9f4f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="9c7245f6-3e1c-40a0-90cc-45160351279b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment update" id="a2af7825-d0b6-4820-b673-38d8bce8490e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Педиатрия&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева1 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="6a25a28b-44de-46a6-a783-e1c860bca023"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479782</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>50</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Педиатрия</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева1 Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event old" id="96b113d9-a65c-4d21-8d7d-3e9bdc5e3c62"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select count(*) from f_attachment_event fae where fae.attachment_id = 2${#TestCase#uid}</con:query><con:assertion type="Simple Contains" id="06e1dc1f-97bf-47cd-b240-61d974fb24c7" name="Новые события не созданы"><con:configuration><token>&lt;COUNT>1&lt;/COUNT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="3f0e3b0f-35d9-41d1-a9bb-b97ddf8f6bb7"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева1 Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Педиатрия"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="bfe79420-62ee-4dd1-b9b4-cf4aa1548a4c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 7</con:query><con:assertion type="Simple NotContains" id="ae62dda3-c803-416a-8992-789dfaf78f05" name="Таска не создана"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert f_area_medical_employee" id="e6770e5e-5242-43fa-885d-9edb09037bbf"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_area_medical_employee SET archived=false WHERE id=166;</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="464c00c0-c8ba-46ae-a292-3dcc140ba5d4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1844</con:value></con:property><con:property><con:name>uid</con:name><con:value>4116561</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1673874703083</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="3fa65234-6855-456f-bbd5-8d277a14d9a0" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229800" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="14f56067-2ae3-416f-8f5b-964aec693164"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="737f829b-c420-49c7-b9e5-c39cc037c8f7"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="f7b99bc1-1b52-4aea-808f-10d21d315d84"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="efab56db-0467-4916-aa2f-a644f68d94f5"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="0b7deac7-9537-4602-a64c-3fc9c8f1619b"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="e1d2c8cd-5cbe-47a6-b61b-4f4b58335e5a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста (несколько записей для проверки А_ВА_17)
--- пропускает, т.к. diagnosis_date == NULL
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, null);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- пропускает, т.к. дата diagnosis_date не максимальная
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(3${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева3 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:42:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#uid}, 3${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- пропускает, т.к. дата opened не минимальная
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(4${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева4 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:43:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#uid}, 4${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- пропускает, т.к. ID не минимальный
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(6${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-09', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева6 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:43:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(6${#TestCase#uid}, 6${#TestCase#uid}, '2021-05-15 15:40:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- выбрано это прикрепление
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(5${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-09', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева5 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:43:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(5${#TestCase#uid}, 5${#TestCase#uid}, '2021-05-15 15:40:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="0270b13c-4b95-4e9c-b748-885729a37c81"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="f96100e8-610d-4192-931c-2efb1f95b034"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="1177d6b5-0fd6-4edb-9802-2dea94514a35"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="90a3d88b-87e2-49d9-b3f5-94889fabae22"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="db7b27ef-b2ce-43e8-aef9-47b90ca061b8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="5">
            <F_ATTACHMENT.ID>5${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 2"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 3"><con:configuration><token><![CDATA[        <Row rowNumber="3">
            <F_ATTACHMENT.ID>3${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 4"><con:configuration><token><![CDATA[        <Row rowNumber="4">
            <F_ATTACHMENT.ID>4${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 6"><con:configuration><token><![CDATA[        <Row rowNumber="6">
            <F_ATTACHMENT.ID>6${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment update" id="1afec5f9-7410-4a69-9c04-f89fdc353a8a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Педиатрия&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева5 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="62d1b685-6c01-490c-854e-9ae063900636"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479782</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>50</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Педиатрия</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева5 Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event old" id="07313a86-1adc-445d-b86b-f61232f36c3f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select count(*) from f_attachment_event fae where fae.attachment_id = 5${#TestCase#uid}</con:query><con:assertion type="Simple Contains" id="06e1dc1f-97bf-47cd-b240-61d974fb24c7" name="Новые события не созданы"><con:configuration><token>&lt;COUNT>1&lt;/COUNT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="a0e75de7-e514-4927-99d6-64a2851f7a21"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева5 Марина Евгеньевна"

assert messageJson.specializationCode=="2" || "49"

assert messageJson.specializationName=="Акушерство и гинекология" || "Педиатрия"

assert messageJson.startDate=="2018-02-09" || "2018-02-10"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==false||true

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Педиатрия"

assert messageJson.diagnosisDate=="2021-05-15T15:43:27.473" || "2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="7e55f9dd-af57-4331-9f43-b5c2052cb636"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 7</con:query><con:assertion type="Simple NotContains" id="ae62dda3-c803-416a-8992-789dfaf78f05" name="Таска не создана"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="0b6938ac-32c1-4f2a-ab6d-07f34f549db6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>7724</con:value></con:property><con:property><con:name>uid</con:name><con:value>1483472</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1674482122532</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="647dd9ef-962f-4952-b03f-6e9513a981da" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229806" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="9250360d-b4fa-4b8f-aa97-f00fdd89bdb2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="336099d6-584b-4489-878a-52de67c9356f"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="1ff9ae2a-4068-4c82-8905-1441467a477c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ceb4b75c-8b83-4fa8-a969-dba7961f8520"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="2f477628-d1ca-407f-9b9f-3131b5a21df3"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="d1295af2-3de4-4875-834a-bf921eb04c76"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста (несколько записей для проверки А_ВА_17)
--- пропускает, т.к. diagnosis_date == NULL
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, null);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- пропускает, т.к. дата diagnosis_date не максимальная
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(3${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева3 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:42:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#uid}, 3${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- пропускает, т.к. дата opened не минимальная
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(4${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева4 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:43:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#uid}, 4${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- выбрано это прикрепление
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(6${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-09', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева6 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:43:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(6${#TestCase#uid}, 6${#TestCase#uid}, '2021-05-15 15:40:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="38dc785c-1658-46db-a826-292397169d3f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="1cc40843-2a2e-4e67-8734-efd6b27fef53"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="01b7c624-c33d-4865-89f7-7e32635788bf"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="3fcca402-3e1e-45cd-b42c-38fe1325c0d5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="d5920d8b-9431-44ae-b984-6b95186305e0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="5">
            <F_ATTACHMENT.ID>6${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 2"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 3"><con:configuration><token><![CDATA[        <Row rowNumber="3">
            <F_ATTACHMENT.ID>3${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 4"><con:configuration><token><![CDATA[        <Row rowNumber="4">
            <F_ATTACHMENT.ID>4${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment update" id="f1df94a2-791a-45a6-bf9a-026747907df4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Педиатрия&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева6 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="e8676713-5cdd-41a1-97f0-422970518b56"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479782</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>50</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Педиатрия</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева6 Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event old" id="0684a1c0-e839-4981-b3f6-d4ec9f3e2064"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select count(*) from f_attachment_event fae where fae.attachment_id = 6${#TestCase#uid}</con:query><con:assertion type="Simple Contains" id="06e1dc1f-97bf-47cd-b240-61d974fb24c7" name="Новые события не созданы"><con:configuration><token>&lt;COUNT>1&lt;/COUNT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="3d0afa64-db59-468f-b4e1-764a2e62235b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева6 Марина Евгеньевна"

assert messageJson.specializationCode=="2"

assert messageJson.specializationName=="Акушерство и гинекология"

assert messageJson.startDate=="2018-02-10"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Педиатрия"

assert messageJson.diagnosisDate==null || "2021-05-15T15:43:27.473"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="efcb0f95-17e6-4d99-a461-ccd716558cad"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 7</con:query><con:assertion type="Simple NotContains" id="ae62dda3-c803-416a-8992-789dfaf78f05" name="Таска не создана"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="c3d8251f-8bb0-4627-9cc4-68498d2bb06e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3865</con:value></con:property><con:property><con:name>uid</con:name><con:value>8383274</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1673873921161</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="1f3fc274-09f4-4c93-811e-8ec727d45984" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229807" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="320b8986-f9c4-466e-8580-cd48a9ed3a5c"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="5c11e2f5-cca4-465e-adad-41cbe0708817"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="e9d3def1-1651-471a-8fad-85512f4e3a5f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="3075a6ba-47e4-4f3c-b36f-f3c43b4cdf3b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="037c1a37-923e-4a1e-b343-8295200dc14f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="16a874fd-e5b4-45a8-b485-33b0b9038d21"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста (несколько записей для проверки А_ВА_17)
--- пропускает, т.к. diagnosis_date == NULL
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, null);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- пропускает, т.к. дата diagnosis_date не максимальная
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(3${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева3 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:42:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#uid}, 3${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
--- выбрано это прикрепление
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(4${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева4 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false, '2021-05-15 15:43:27.473');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#uid}, 4${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="c0aa737a-4678-4623-b52f-2543d98ec04b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="f1839c7e-ebdc-4d21-9527-446f767a5b70"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="718a0a4a-a327-4a4e-a8d6-6afbbb001bda"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="3df8e643-aa3f-440d-885e-d605bc2fb66a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="4f510098-6e70-4cd3-a481-1434db4daf3f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 2"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 3"><con:configuration><token><![CDATA[        <Row rowNumber="3">
            <F_ATTACHMENT.ID>3${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Не очищено job_execution_id и проставлено proactive_observation false 4"><con:configuration><token><![CDATA[        <Row rowNumber="4">
            <F_ATTACHMENT.ID>4${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment update" id="e16dd179-d8b4-4d12-b793-49b371892401"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where fa.id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.employee_id"><con:configuration><token> &lt;F_ATTACHMENT.EMPLOYEE_ID>10479782&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_code"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_CODE>50&lt;/F_ATTACHMENT.SPECIALITY_CODE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.speciality_name"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>Педиатрия&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9e78e5ff-eb1d-4e8f-8274-e08a1d2d85fc" name="Обновлен f_attachment.doctor_fio"><con:configuration><token>F_ATTACHMENT.DOCTOR_FIO>Моисеева4 Марина Евгеньевна&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event update" id="cfc667b0-46d4-4164-bdec-8ecc73e42137"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.attachment_id = 1${#TestCase#uid}
order by fae.event_date asc</con:query><con:assertion type="Simple Contains" id="5ede0108-8f56-40fd-a4b7-a9ee8cbca6a2" name="Создано третье событие по прикреплению"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479782</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>50</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Педиатрия</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева4 Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event old" id="bfd0fb7c-5900-4ae1-a5ea-fb02e109ca6d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select count(*) from f_attachment_event fae where fae.attachment_id = 4${#TestCase#uid}</con:query><con:assertion type="Simple Contains" id="06e1dc1f-97bf-47cd-b240-61d974fb24c7" name="Новые события не созданы"><con:configuration><token>&lt;COUNT>1&lt;/COUNT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="28899045-41aa-448f-b580-7ce73b3b97ec"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.dnDoctorJobExecutionId==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева4 Марина Евгеньевна"

assert messageJson.specializationCode=="2"

assert messageJson.specializationName=="Акушерство и гинекология"

assert messageJson.startDate=="2018-02-10"

assert messageJson.employeeId==10479782

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="50"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Педиатрия"

assert messageJson.diagnosisDate==null || "2021-05-15T15:42:27.473"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="343c7690-d382-4332-9ff3-5341f7478f16"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 7</con:query><con:assertion type="Simple NotContains" id="ae62dda3-c803-416a-8992-789dfaf78f05" name="Таска не создана"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="df56c8f8-c8cb-4096-989f-327f1a1aa74a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>9982</con:value></con:property><con:property><con:name>uid</con:name><con:value>7812402</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1673874964162</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ac3aca4a-fee5-4846-ba5c-b72802ce1c75" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#229831" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="5ad42274-77fe-44d5-80bb-bbca4397bf2c"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="0020083f-7af2-45be-9fc0-673fd7bd92e2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, '2020-07-06 00:00:00.000', 173933129, 204, true);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, proactive_observation) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест', false);
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289229, '716', 125676809, NULL, 'Исходные данные.', true, '1235', 'Имя отчество', 'вервые', 'тест2');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1236', 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');


--- простановка проактивности
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE id=4098;
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4100;
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="18344732-8987-4e49-92fa-b0b498aac5ba"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="a58a810f-b820-4854-b8fa-12572e372b99"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "newResults": [
    {
      "patientId": "79812",
      "uid": "fb20d746-821c-4928-abc4-8bc6878dc59a",
      "timeCommitted":"2020-12-23T13:04:07.347+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "comment": "Modify Composition"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="51d6912f-7125-4985-adb9-3cd2214a196a"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 1" id="70592527-c838-4d0f-90cd-adfc7c57383b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where id = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>13425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>3425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>430</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-01-01</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10503947964</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>128289228</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>716</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>125676809</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>13425</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>3425</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10503947964</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10503947964&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="322cd366-8829-440b-aa15-1d5eb98b499b" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Имя отчество&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 3"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>вервые&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>тест2&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6606311f-0450-4567-8ff1-ced31e0c2ecb"><con:configuration/></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="b68429b9-7f31-4397-b04c-16f2633b771b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8dd53226-7b31-4d29-9837-9daf6e4e9b06" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="e058e089-fbfa-4777-aafd-1183bd56557b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Очищено job_execution_id и проставлено proactive_observation NULL"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#patientId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>3${#TestCase#patientId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="408d8be7-95b4-4a11-9190-fbde653d94b3"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.groupCode=="DNC0411"

assert messageJson.groupName=="Ожирение"

assert messageJson.groupSpecializationCode=="22"

assert messageJson.groupSpecializationName=="Детская эндокринология"

assert messageJson.doctorFIO=="Фамилия Имя Отчество"

assert messageJson.employeeId==10503947963

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="716"

assert messageJson.specialityName=="тест"

assert messageJson.specializationCode=="22"

assert messageJson.specializationName=="Детская эндокринология"

assert messageJson.diagnosisCode=="E66.0"

assert messageJson.diagnosisName=="Ожирение, обусловленное избыточным поступлением энергетических ресурсов"

assert messageJson.repeat=="Повторно"

assert messageJson.startDate=="2018-01-01"

assert messageJson.dnDoctorJobExecutionId=="1235"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Revert Proactive" id="7c390e9a-a6b2-4407-9072-bc0e4ae3cb94"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- простановка проактивности
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4098;
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4100;
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>8320</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1681369237125</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="e1fe5510-ed9d-4be1-bc48-9f1db8043f2f" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#230284" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="9e8aaf40-90ad-4443-9cdf-c209c71b2374"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="793ea706-cb8b-4e28-ab35-bc4d44720b4a"><con:settings/><con:config><script>def today = Calendar.getInstance();
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="780d243f-dfe6-4eca-8598-9c9e9cdd5b74"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="6ee12bc3-60ff-40cb-a763-8a74b6944c6d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="4eda54bd-dbbc-4974-aa92-0da4cd0d0475"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="1e7be675-e464-475c-98d9-f195f06772c4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);

--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286431, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

---специализация ДН не совпадает со специализацией, соответствующей типу участка, и для которых не выставлен признак отсутствия специалиста
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, ${#TestCase#groupId}, '2018-02-10', NULL, 10479782, 128286429, '50', 125676760, false, NULL, NULL, 'Моисеева1 Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#uid}, 2${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128286431, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});

--- проставление признака не проактивности для старого диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=128286431;

--- проставление признака проактивности для нового диагноза
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="8a77d9ee-3292-4b4b-b6d8-dba8e93417e9"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="25ecd3f2-a15a-48ef-b48c-f204e56dfdfa"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date2=testRunner.testCase.getPropertyValue("date2")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date2+"""T00:00:00.0\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева2 Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="d7cb8095-c0fb-425d-8d79-bb1cf4ff662f"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="2597c9a5-895a-4835-90ea-88b6b5c50c57"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="d1b88209-9174-4e19-ba12-18db1d724ec1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="fc92372f-1c59-4beb-a49b-20dbc78d6f0e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=58 and mkb10_id=${#TestCase#mkbId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="ff14dcba-0169-4b00-9e06-1ac478442c7d"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E059 с параметрами &lt;patientId> и &lt;groupAreaTypeId>, т.к. для пациента нет записи в f_patient_area и newEmployeeId = NULL.</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>8442</con:value></con:property><con:property><con:name>uid</con:name><con:value>5275759</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23 16</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1672125914136</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="acf1b623-3ce7-4df4-b932-3e2375e911e8" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#237276" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="eafa8b5c-628a-4d81-9606-b6410d70568e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="370246ed-cbaa-4b9d-806b-e6f8de5897b9"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="557edbd0-b9f4-4521-9cde-bd1a305a0521"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="3f541757-3971-4ac9-b6a1-8520e98eecf4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="6de23a1d-db35-4982-b6a0-39a01b28e1bb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);
--- создание прикрепления


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2018-02-10', '2018-02-10', 10479782, 128286429, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия', '7748839200');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание документа HOSPITAL_DISCHARGE_DOCUMENT . Не забыть указать uid = justification_document_id

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 4);

--- связанные записи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', ${#TestCase#patientId}, '2020-07-26 19:05:08.897', 4, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#uid}, 128286429, 1, 1${#TestCase#uid}, 1${#TestCase#uid});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="45b80971-2fbb-4510-beed-ab7f5c3332bf"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479785",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
      "endDate": "2018-02-10",
      "cancelReasonCode": "2",
      "cancelReasonName": "Выбытие из района обслуживания"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check" id="5686288a-895d-4cac-b578-887ff870a030"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="2d10310b-d3c9-4c85-be44-aba0d710a2b6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="f0eb69b3-fb91-4fc1-be71-7dac6fe9f33b" name="Прикрепление не изменилось"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2018-02-10</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2018-02-10</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10479782</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128286429</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>50</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676831</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Моисеева Марина Евгеньевна</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>диагноз установлен в предыдущ. году или ранее (-)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Педиатрия</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event" id="14df9326-3a5e-4de6-989b-7fd107fd5ee8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})</con:query><con:assertion type="Simple NotContains" id="ad254e5b-109c-4225-917f-3348491a0d23" name="Событие не создано"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить грейлог" id="dd44b82f-9472-4d64-a8bc-38ef315e93d0"><con:description>В грейлоге есть ошибка E060 "Получен запрос на закрытие ДН, не найденного среди действующих"</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>869</con:value></con:property><con:property><con:name>uid</con:name><con:value>9199665</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-23T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-23</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1674473148248</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="2fe7f885-fc11-4503-aa2b-e80c56703bed" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#246704" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="a45a0ae0-3dd4-4d93-8d65-05a2250d65ce"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="a3eee8de-af9b-4f80-addf-3c71f1cea20a"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_attachment ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_attachment ft WHERE id = "+random_id+"")
	}
	return random_id
}

uid=getNonexistendPatientId()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="6868c025-337d-407f-a5ec-3fc33d47fca7"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="aab06ce2-e976-4a59-a31e-2931eb9f4efb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента
INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2011-08-09', '2020-06-08 23:36:07.000', NULL, 'D', NULL, NULL, 0);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="8067a9c9-9a46-414d-bc58-4fac363abdcb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fdog.id, fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="9b7e2b28-5350-41ed-aafd-cb7026fa8599"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="А_ЕСУ_01" id="a082ebe7-afc4-4800-8bd9-98eb8e57a094"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479782",
	"noDoctor": "отсутствует",
    "specialityCode":"50",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="groovy" name="А_ЕСУ_07" id="16ab9cba-e239-4bcd-a7cb-7de0752acbce"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"1"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId":\""""+patientId+""""""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="fe4f103d-0194-4b0c-9648-6ac4b4d2cea2"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment" id="427685cf-2a82-46d2-a8c2-a5dd05f5321a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="54731c97-6a99-4daf-972d-1b4e4cf72bdb" name="Прикрепление не создано"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check" id="83aa690f-f657-4bd9-a013-863a4f446307"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.SIMI_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7f1f3e4f-6431-4d83-b673-dafbc5bf9e89" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>1${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="db1a4720-e6e6-4557-9f02-d130477fe33b"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E061 с параметром &lt;patientId> : "Невозможно создать/обновить запись о прикреплении пациента к диспансерной группе, т.к. полис пациента &lt;patientId> погашен по смерти."</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3967</con:value></con:property><con:property><con:name>uid</con:name><con:value>2941</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-29T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-29</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5582</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1676272530239</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="fe59530f-6a75-4398-9ba1-6b9745039a73" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="EMIASDN-1451" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="3d675f89-3db6-4946-9667-79bfee33c3a4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="5e0dd119-3a1e-4316-9eb3-12948008a13f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="fccc3d91-4cfc-4f21-a4ef-3172efe5f0c7"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="a8b1ad37-b6e9-4858-ab42-572413737c85"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select distinct (fdog.id), fdog.code, fdogm.dispensary_obs_group_id, fdog.title, fdogm.mkb10_id, dm.code, dms.code, dms.id, dms.title 
from f_dispensary_obs_group fdog
join f_disp_obs_group_mkb10 fdogm 
on fdog.id = fdogm.dispensary_obs_group_id
join d_mkb10 dm
on dm.id = fdogm.mkb10_id
join l_disp_obs_group_watched_by ldogwb 
on fdogm.id = ldogwb.disp_obs_group_mkb10_id 
join d_medical_specialization dms 
on ldogwb.medical_specialization_id = dms.id 
where fdog.archived is false
limit 2</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="e3e75d26-20fa-4f1f-bf69-30a7b438d67d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosisCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityCode</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>groupId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkbId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specializationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupCode2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/F_DISPENSARY_OBS_GROUP.CODE</con:sourcePath><con:targetType>groupCode2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>diagnosisCode2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/D_MKB10.CODE</con:sourcePath><con:targetType>diagnosisCode2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>specializationCode2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/D_MEDICAL_SPECIALIZATION.CODE</con:sourcePath><con:targetType>specializationCode2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>specialityCode2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/D_MEDICAL_SPECIALIZATION.TITLE</con:sourcePath><con:targetType>specializationName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/F_DISPENSARY_OBS_GROUP.ID</con:sourcePath><con:targetType>groupId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>mkbId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/F_DISP_OBS_GROUP_MKB10.MKB10_ID</con:sourcePath><con:targetType>mkbId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>specializationId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/D_MEDICAL_SPECIALIZATION.ID</con:sourcePath><con:targetType>specializationId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>groupName2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/F_DISPENSARY_OBS_GROUP.TITLE</con:sourcePath><con:targetType>groupName2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="2ee1a7fc-b823-44f9-a234-802cd977fe11"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);


--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}, '${#TestCase#patientId}${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');
INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES(${#TestCase#patientId}${#TestCase#uid}2, '${#TestCase#patientId}${#TestCase#uid}2', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', '${#TestCase#groupCode}', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');


--- проставление признака проактивности для диагноза 1
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=${#TestCase#groupId} and mkb10_id=${#TestCase#mkbId};

--- проставление признака проактивности для диагноза 2
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE dispensary_obs_group_id=${#TestCase#groupId2} and mkb10_id=${#TestCase#mkbId2};</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="d4a2146e-b1e7-49ed-8de4-1c443b92d466"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="f0fb01a2-1eca-4b74-81a7-9c3dd25cb1d9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode=testRunner.testCase.getPropertyValue("groupCode")
def groupName=testRunner.testCase.getPropertyValue("groupName")
def specializationCode=testRunner.testCase.getPropertyValue("specializationCode")
def specializationName=testRunner.testCase.getPropertyValue("specializationName")
def diagnosisCode=testRunner.testCase.getPropertyValue("diagnosisCode")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode+"""\",
    "groupName":\""""+groupName+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479783",
	"noDoctor": "отсутствует",
    "specialityCode": "10",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode+"""\",
    "specializationName":\""""+specializationName+"""\",
    "diagnosisCode":\""""+diagnosisCode+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message 2 Step 1" id="ae83db30-6c45-48c8-a0a8-b7b6dd5e7e51"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def date=testRunner.testCase.getPropertyValue("date")
def groupCode2=testRunner.testCase.getPropertyValue("groupCode2")
def groupName2=testRunner.testCase.getPropertyValue("groupName2")
def specializationCode2=testRunner.testCase.getPropertyValue("specializationCode2")
def specializationName2=testRunner.testCase.getPropertyValue("specializationName2")
def diagnosisCode2=testRunner.testCase.getPropertyValue("diagnosisCode2")

sendMessageToKafka("DnForm30","""{"domain":"default","ehrUid":"2f058325-88ee-48b4-86ef-a98fc546977d","operationType":"update","eventName":"form30yCompositionQueue","compositionId":"5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2", "oldResults": [{"patientId":"1045","uid":"fb20d746-821c-4928-abc4-8bc68781247","timeCommitted":"2020-12-23T13:02:53.97+03:00","groupCode":"DNA0001","groupName":"Инфекционные болезни","doctorFio":"Никитина Юлия Петровна","employeeId":"10008348","specialityCode":"50","specialityName":"Врач-инфекционист","specializationCode":"24","specializationName":"Инфекционные болезни","diagnosisCode":"A00","diagnosisName":"A00 - Холера","diagnosis":"укнрарпр","diagnosisDate":"2020-12-23T13:02:29.487+03:00","repeat":"диагноз установлен в предыдущ. году или ранее (-)","startDate":"2020-12-02","endDate":null,"cancelReasonCode":null,"cancelReasonName":null}],
"newResults":[
{
    "patientId":\""""+patientId+"""\",
    "uid":\""""+patientId+""""""+uid+"""2\",
    "timeCommitted":\""""+date+"""\",
    "groupCode":\""""+groupCode2+"""\",
    "groupName":\""""+groupName2+"""\",
    "doctorFio":"Моисеева Марина Евгеньевна",
    "employeeId":"10479783",
	"noDoctor": "отсутствует",
    "specialityCode": "10",
    "specialityName":"Врач - педиатр участковый",
    "specializationCode":\""""+specializationCode2+"""\",
    "specializationName":\""""+specializationName2+"""\",
    "diagnosisCode":\""""+diagnosisCode2+"""\",
    "diagnosisName":"проверка",
    "diagnosis":"язвенный колит",
    "diagnosisDate":"2018-02-06T00:00:00+03:00",
    "repeat":"диагноз установлен в предыдущ. году или ранее (-)",
    "startDate":"2018-02-06",
    "endDate":null,
    "cancelReasonCode":null,
    "cancelReasonName":null,
    "observedFrom": "2018-02-06"
}],
"comment":"Modify Composition"}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="25b23e34-aa22-431e-ab9a-924e5d917b78"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>${#TestCase#patientId}${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="da1e0850-f7f8-4441-81f0-a22f81e2de5a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *  from f_attachment fa where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="b64ab838-58fe-4620-bd91-6e51e2413c3c" name="Cоздает новую запись в таблице f_attachment"><con:configuration><token><![CDATA[            <F_ATTACHMENT.GROUP_ID>${#TestCase#groupId}</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2018-02-06</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10479783</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>${#TestCase#mkbId}</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>10</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>${#TestCase#specializationId}</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Моисеева Марина Евгеньевна</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>диагноз установлен в предыдущ. году или ранее (-)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач - педиатр участковый</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7e70d595-5e2a-4d6f-b4e2-da9e958594bd" name="Проверка даты"><con:configuration><token>&lt;F_ATTACHMENT.DIAGNOSIS_DATE>2018-02-06 00:00:00&lt;/F_ATTACHMENT.DIAGNOSIS_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="f3d570fe-7a83-4ddb-969e-d41aa3687db6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name=" проставляет f_attachment.proactive_observation = true"><con:configuration><token>            &lt;F_ATTACHMENT.JOB_EXECUTION_ID/>
            &lt;F_ATTACHMENT.PROACTIVE_OBSERVATION>t&lt;/F_ATTACHMENT.PROACTIVE_OBSERVATION></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event" id="add65655-24a7-4197-b951-dca4bdf1c1af"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})</con:query><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка event_date"><con:configuration><path>//F_ATTACHMENT_EVENT.EVENT_DATE/text()</path><content>${#TestCase#date2}*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка document_uid"><con:configuration><path>//F_ATTACHMENT_EVENT.DOCUMENT_UID</path><content>&lt;F_ATTACHMENT_EVENT.DOCUMENT_UID>${#TestCase#patientId}${#TestCase#uid}&lt;/F_ATTACHMENT_EVENT.DOCUMENT_UID></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка dn_doctor_job_execution_id"><con:configuration><path>//F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID</path><content>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка employee_id"><con:configuration><path>//F_ATTACHMENT_EVENT.EMPLOYEE_ID/text()</path><content>10479783</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка mkb10_id"><con:configuration><path>//F_ATTACHMENT_EVENT.MKB10_ID/text()</path><content>${#TestCase#mkbId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка medical_specialization_id"><con:configuration><path>//F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID/text()</path><content>${#TestCase#specializationId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_code"><con:configuration><path>//F_ATTACHMENT_EVENT.SPECIALITY_CODE/text()</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка speciality_name"><con:configuration><path>//F_ATTACHMENT_EVENT.SPECIALITY_NAME/text()</path><content>Врач - педиатр участковый</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка doctor_fio"><con:configuration><path>//F_ATTACHMENT_EVENT.DOCTOR_FIO/text()</path><content>Моисеева Марина Евгеньевна</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка no_doctor"><con:configuration><path>//F_ATTACHMENT_EVENT.NO_DOCTOR/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis"><con:configuration><path>//F_ATTACHMENT_EVENT.DIAGNOSIS/text()</path><content>язвенный колит</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка diagnosis_date"><con:configuration><path>//F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/text()</path><content>2018-02-06 00:00:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка repeat"><con:configuration><path>//F_ATTACHMENT_EVENT.REPEAT/text()</path><content>диагноз установлен в предыдущ. году или ранее (-)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f7cdd3dd-3c24-439f-8e69-3dd457c958c7" name="Проверка reason_id"><con:configuration><path>//F_ATTACHMENT_EVENT.REASON_ID</path><content>&lt;F_ATTACHMENT_EVENT.REASON_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="1ebc35dd-2dad-4846-a9b4-5893c320a782"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="new"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.0"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella melitensis"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Моисеева Марина Евгеньевна"

assert messageJson.specializationCode=="49"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2018-02-06"

assert messageJson.employeeId==10479783

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="10"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.specialityName=="Врач - педиатр участковый"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.diagnosisProactive==true</script></con:config></con:testStep><con:testStep type="jdbc" name="Revert proactive_diagnosis" id="0cbe596b-3faa-4a42-961e-2900b3ab4390"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=${#TestCase#groupId} and mkb10_id=${#TestCase#mkbId};
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE dispensary_obs_group_id=${#TestCase#groupId2} and mkb10_id=${#TestCase#mkbId2};</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>9528</con:value></con:property><con:property><con:name>uid</con:name><con:value>7725611</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-15T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-15</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNA0113</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>M93.9</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>79</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Травматология и ортопедия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>592</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128293291</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676825</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Хондропатии</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1678864409602</con:value></con:property><con:property><con:name>groupCode2</con:name><con:value>DNG0001</con:value></con:property><con:property><con:name>diagnosisCode2</con:name><con:value>O90.4</con:value></con:property><con:property><con:name>specializationCode2</con:name><con:value>2</con:value></con:property><con:property><con:name>specializationName2</con:name><con:value>Акушерство и гинекология</con:value></con:property><con:property><con:name>groupId2</con:name><con:value>1189</con:value></con:property><con:property><con:name>mkbId2</con:name><con:value>128294237</con:value></con:property><con:property><con:name>specializationId2</con:name><con:value>125676760</con:value></con:property><con:property><con:name>groupName2</con:name><con:value>Беременность - группа высокого риска</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="6541aaea-5486-47de-9c1e-0cfaa0bed4b2" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101330" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="9c7b093f-98cf-4990-adb2-dd280f6498c2"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="1e608296-b3ff-497c-9e93-d52347559820"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Обновляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');




--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, '1235', 'Имя отчество', 'вервые', 'тест2');




--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1236', 'Имя отчество', 'вервые', 'тест');


--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении


INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="0f3db2aa-2c32-4405-a46d-c6e1c9226acd"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
   "auditDetails": {
      "@class": "AUDIT_DETAILS",
      "system_id": "default",
      "committer": {
         "@class": "PARTY_IDENTIFIED",
         "name": "emias_qa"
      },
      "time_committed": {
         "@class": "DV_DATE_TIME",
         "value": "2022-06-06T15:15:12.397119+03:00"
      },
      "change_type": {
         "@class": "DV_CODED_TEXT",
         "value": "deleted",
         "defining_code": {
            "@class": "CODE_PHRASE",
            "terminology_id": {
               "@class": "TERMINOLOGY_ID",
               "value": "openehr"
            },
            "code_string": "523"
         }
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="0c47aee4-55ce-4f66-9e2c-a6608d73c5c3"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="4bc753fb-d4b2-4817-876f-45a2476684bf"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a8136aee-4bb4-4398-a7c6-3f7e2804a621" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5485</con:value></con:property><con:property><con:name>uid</con:name><con:value>1521</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="11e73849-f83d-4191-92aa-a773b3f0f774" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101359" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="476db7ed-0fcf-4313-91ae-12580cf079d9"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="d39951c6-ea95-4a84-8bc4-d94fc9aec1e0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, '2020-07-06 00:00:00.000', 173933129, 204, true);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289229, '716', 125676809, NULL, 'Исходные данные.', true, '1235', 'Имя отчество', 'вервые', 'тест2');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест', '7748839200', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1236', 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');


--- простановка проактивности
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4098;
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=true WHERE id=4100;
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="81e60d2e-1222-4645-a058-7d949bb3d25a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="f4e06ec7-b76c-40f4-8254-50958586f511"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2020-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "newResults": [
    {
      "patientId": "79812",
      "uid": "fb20d746-821c-4928-abc4-8bc6878dc59a",
      "timeCommitted":"2020-12-23T13:04:07.347+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "comment": "Modify Composition"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="71bd1809-ec17-4212-b6bc-a9c6406ff19b"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 1" id="fff77d0c-f7d0-4ec1-a128-c64c54aee8c3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where id = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>13425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>3425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>430</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-01-01</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10503947964</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>128289228</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>716</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>125676809</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>13425</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>3425</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10503947964</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10503947964&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="322cd366-8829-440b-aa15-1d5eb98b499b" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Имя отчество&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 3"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>вервые&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>тест2&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2b8d0f0e-61ba-4c66-a769-bc4bddd6f435"><con:configuration/></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="4f59b35d-bb9d-4883-b020-035b5c75578c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8dd53226-7b31-4d29-9837-9daf6e4e9b06" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment proactive_observation и job_execution_id" id="14727e50-6071-465a-97cd-f7f7babc340d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id, fa.job_execution_id, proactive_observation  from f_attachment fa where patient_id = '${#TestCase#patientId}'
order by fa.id</con:query><con:assertion type="Simple Contains" id="b4a08498-3800-4e1e-898c-df5780d5f872" name="Очищено job_execution_id и проставлено proactive_observation true"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#patientId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>t</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a80a24f8-8324-4abd-8db1-9d9284d6e72a" name="Не очищено job_execution_id и проставлено proactive_observation false"><con:configuration><token><![CDATA[        <Row rowNumber="2">
            <F_ATTACHMENT.ID>3${#TestCase#patientId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.JOB_EXECUTION_ID>7748839200</F_ATTACHMENT.JOB_EXECUTION_ID>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION>f</F_ATTACHMENT.PROACTIVE_OBSERVATION>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="982df8f0-fb17-4902-a811-475c160e89be"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.groupCode=="DNC0411"

assert messageJson.groupName=="Ожирение"

assert messageJson.groupSpecializationCode=="22"

assert messageJson.groupSpecializationName=="Детская эндокринология"

assert messageJson.doctorFIO=="Фамилия Имя Отчество"

assert messageJson.employeeId==10503947963

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="716"

assert messageJson.specialityName=="тест"

assert messageJson.specializationCode=="22"

assert messageJson.specializationName=="Детская эндокринология"

assert messageJson.diagnosisCode=="E66.0"

assert messageJson.diagnosisName=="Ожирение, обусловленное избыточным поступлением энергетических ресурсов"

assert messageJson.repeat=="Повторно"

assert messageJson.startDate=="2018-01-01"

assert messageJson.dnDoctorJobExecutionId=="1235"

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:testStep type="jdbc" name="Revert Proactive" id="2d8a4e39-7fd3-4cdd-b91a-340ad4e2e945"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- простановка проактивности
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4098;
UPDATE f_disp_obs_group_mkb10 SET proactive_diagnosis=false WHERE id=4100;
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5179</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1680703095932</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a2c6e169-35da-45c2-b600-5bcddf6f5e27" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#101819" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="83136952-3c44-4b20-b381-ab772e55b224"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Create dispansaryObservation" id="af833949-5fc1-4bd7-9437-dd200666933b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "проверка",
   "employeeId": "45354",
   "noDoctor": "false",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "E66.9",
   "diagnosisName": "7658",
   "diagnosisDate": "2021-10-16T15:00:58",
   "repeat": "повторно",
   "startDate": "2021-10-16",
   "endDate": null,
   "cancelReasonCode": "4",
   "cancelReasonName": "Пациент достиг 18 лет",
   "timeCommitted": "2021-10-22T15:00:58",
   "dnDoctorJobExecutionId": "3454",
   "diagnosisProactive": false,
   "diagnosisObservationPeriod": 30
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5b3796c2-3e1a-4d03-b2f7-530d1dd3e76f" disabled="true"><con:settings/><con:config><delay>300000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR" id="ec3c08bf-8368-43ea-9338-c14d54f55414" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/analytics_covid_li/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="11e2cf6f-1fcc-4700-bb80-e5450a0ef3e8" name="Создан dispensaryObservations"><con:configuration><token>dispensaryObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7953371c-b4a2-44a0-9a3e-82ff743fd396" name="Есть код Группы ДН"><con:configuration><token>DNC0411</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="c74062d0-4089-473d-a81c-ebed45aeb05a"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="d6cb7c1b-0e1d-4605-92e5-fdc9305856ae"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач
INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);

--- создание прикреплений и событий
--- прикрепление с переданным uid. Удаляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, '1234', 'Имя отчество', 'вервые', 'тест');

--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество2', 'Повторно2', 'тест2');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '21${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, '1235', 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#patientId}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', '123', 'отсутствует');

--- создание тасок, которые ссылаются на прикрепление 1
---  ContinuedObsTask
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(2${#TestCase#uid}, ${#TestCase#patientId}, '2021-11-01 15:41:59.000', NULL, 'test', false, 125694880, 2);
INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) VALUES(2${#TestCase#uid}, 1${#TestCase#patientId}, 128289228, 1);


--- JobExpirationTask
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(3${#TestCase#uid}, ${#TestCase#patientId}, '2021-11-01 15:41:59.000', NULL, 'test', false, 125694880, 7);
INSERT INTO f_job_expiration_task (id, attachment_id, mkb10_id, status_id) VALUES(3${#TestCase#uid}, 1${#TestCase#patientId}, 128289228, 1);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="40e1c1f1-cdc3-47a4-bf37-89eadb9599d2"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="b3a0be41-1744-4de4-a8fd-23d3a202a41f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("DnForm30","""{
  "domain": "default",
  "ehrUid": "2f058325-88ee-48b4-86ef-a98fc546977d",
  "operationType": "delete",
  "eventName": "form30yCompositionQueue",
  "compositionId": "5a9a9f19-85ad-4400-abc1-950a1e4d9ed2::default::2",
  "oldResults": [
    {
      "patientId": \""""+patientId+"""\",
       "uid":\"1"""+patientId+"""\",
      "timeCommitted": "2022-12-23T13:02:53.97+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "dnDoctorJobExecutionId":"123",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "newResults": [
    {
      "patientId": "79812",
      "uid": "fb20d746-821c-4928-abc4-8bc6878dc59a",
      "timeCommitted":"2022-12-23T13:04:07.347+03:00",
      "groupCode": "DNA0001",
      "groupName": "Инфекционные болезни",
      "doctorFio": "Никитина Юлия Петровна",
      "dnDoctorJobExecutionId":"123",
      "employeeId": "10008348",
      "noDoctor": "отсутствует",
      "specialityCode": "50",
      "specialityName": "Врач-инфекционист",
      "specializationCode": "24",
      "specializationName": "Инфекционные болезни",
      "diagnosisCode": "A00",
      "diagnosisName": "A00 - Холера",
      "diagnosis": "укнрарпр",
      "diagnosisDate": "2020-12-23T13:02:29.487+03:00",
      "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
      "startDate": "2020-12-02",
      "endDate": null,
      "cancelReasonCode": null,
      "cancelReasonName": null
    }
  ],
  "comment": "Modify Composition"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="0162b266-7b0c-449d-b56a-6d7bfe2e3c2d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check f_task" id="8861f769-cce9-433e-abc0-ed2ea4a45f96"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="ef8db92c-b2c7-46a7-936c-6f350f4f3663" name="Все таски удалены"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="8b673e3e-f4dd-43df-a4fb-c981c6850f40"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="a4986bf4-188b-452c-a419-e22dec8e94be" name="Прикрепление с uid из сообщения удалено"><con:configuration><token>&lt;F_ATTACHMENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="dd3bf5b8-4a96-4ca8-a551-02f4a65ae67c" name="Второе прикрепление не изменилось"><con:configuration><token><![CDATA[            <F_ATTACHMENT.ID>3${#TestCase#patientId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10503947963</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>f</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Фамилия Имя Отчество2</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>Повторно2</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>тест2</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="9f39137a-a99e-40c7-acf3-9e9af83aa486"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="14419e05-f5ea-4de2-8bde-3d17a790ed8a" name="Событие с UID из сообщения удалено"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0a68ab6d-4044-4d59-9e34-612e31dbf4bc" name="Второе событие не изменилось"><con:configuration><token><![CDATA[            <F_ATTACHMENT_EVENT.ID>4${#TestCase#patientId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>3${#TestCase#patientId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2021-05-14 15:41:24.473</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>21${#TestCase#patientId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>10503947963</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128289228</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>716</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Оставляет.</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>1235</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO>Имя отчество</F_ATTACHMENT_EVENT.DOCTOR_FIO>
            <F_ATTACHMENT_EVENT.REPEAT>вервые</F_ATTACHMENT_EVENT.REPEAT>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME>тест</F_ATTACHMENT_EVENT.SPECIALITY_NAME>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="d0ef0a8a-06c0-4489-9f7c-34a685084063"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="cancel"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType==null

assert messageJson.groupCode=="DNC0411"

assert messageJson.groupName=="Ожирение"

assert messageJson.groupSpecializationCode=="22"

assert messageJson.groupSpecializationName=="Детская эндокринология"

assert messageJson.doctorFIO=="Фамилия Имя Отчество"

assert messageJson.employeeId==10503947963

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="716"

assert messageJson.specialityName=="тест"

assert messageJson.specializationCode=="22"

assert messageJson.specializationName=="Детская эндокринология"

assert messageJson.diagnosisCode=="E66.0"

assert messageJson.diagnosisName=="Ожирение, обусловленное избыточным поступлением энергетических ресурсов"

assert messageJson.repeat=="Повторно"

assert messageJson.startDate=="2018-01-01"

assert messageJson.dnDoctorJobExecutionId=="123"

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="198d5956-a58b-4f36-879a-3b3f715a22d3" disabled="true"><con:settings/><con:config><delay>300000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR 2" id="cd26d389-7d5e-484f-9dc8-96d760451d0f" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/analytics_covid_li/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="d91a23e9-a5b1-42ef-9c6b-344ac34e3e11" name="Нет кода Группы ДН"><con:configuration><token>DNC0411</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="1a2637a2-1048-4ea8-beb8-c61d3aea03b6" name="Удален dispensaryObservations"><con:configuration><token>dispensaryObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>6773</con:value></con:property><con:property><con:name>uid</con:name><con:value>1599831</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1680703047600</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>uid</con:name><con:value>573</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-01-24T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-01-24</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>limit</con:name><con:value>100</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>registryLogin</con:name><con:value>erp_dn_view</con:value></con:property><con:property><con:name>registryPassword</con:name><con:value>wd#0311FD8</con:value></con:property><con:property><con:name>registryConnect</con:name><con:value>@//10.0.49.100:1521/erptest</con:value></con:property><con:property><con:name>registryTestLogin</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestPassword</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestConnect</con:name><con:value>@//10.2.172.16:1521/patient_registry.mosgorzdrav.local</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1000349</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="5d770c3b-41b6-4142-9a5b-15d61b4a2e6d" name="А_ЕСУ_02 - Обработка триггера на аннулирование документов оснований"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3b3fff64-7c9e-4912-a109-5533685d78b6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#81553" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Get Current Date" id="be060c65-e709-4239-bb06-aa1b0ef59820"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="237d6d8a-e1e3-4fda-8cf5-116986af7f0f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_document fd where deprecated = false
LIMIT 3</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="241acd76-37f9-4930-96da-b5599341bc72"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>uid1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[1]/F_DOCUMENT.UID</con:sourcePath><con:targetType>uid1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>uid2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[2]/F_DOCUMENT.UID</con:sourcePath><con:targetType>uid2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>uid3</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//Row[3]/F_DOCUMENT.UID</con:sourcePath><con:targetType>uid3</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="af46fd60-1c2b-45ef-baad-6d21d00a1043"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def uid1=testRunner.testCase.getPropertyValue("uid1")

sendMessageToKafka("DnBaseDocumentDeleted","""{
   "domain": "default",
   "ehrUid": "71e6bc88-8103-4d1c-8e75-45a4c47af3f9",
   "operationType": "delete",
   "eventName": "DNFoundationDocumentsCompositionQueueSPED",
   "compositionId": "ba023c5a-e314-4bf9-a5a8-8eb4238d22f0::default::2",
   "oldResults": [
      {
         "documentId": \""""+uid1+"""\"
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="2244dc87-7083-412a-b7e5-212001030a9a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def uid2=testRunner.testCase.getPropertyValue("uid2")

sendMessageToKafka("DnBaseDocumentDeleted","""{
   "domain": "default",
   "ehrUid": "71e6bc88-8103-4d1c-8e75-45a4c47af3f9",
   "operationType": "delete",
   "eventName": "DNFoundationDocumentsCompositionQueue",
   "compositionId": "ba023c5a-e314-4bf9-a5a8-8eb4238d22f0::default::2",
   "oldResults": [
      {
         "documentId": \""""+uid2+"""\"
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 3" id="21e5b373-dfd3-421e-9b33-65552a70cfbf"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def uid3=testRunner.testCase.getPropertyValue("uid3")

sendMessageToKafka("DnBaseDocumentDeleted","""{
   "domain": "default",
   "ehrUid": "71e6bc88-8103-4d1c-8e75-45a4c47af3f9",
   "operationType": "delete",
   "eventName": "DNFoundationDocumentsCompositionQueuePREV",
   "compositionId": "ba023c5a-e314-4bf9-a5a8-8eb4238d22f0::default::2",
   "oldResults": [
      {
         "documentId": \""""+uid3+"""\"
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data 2" id="aab7751b-437f-4f19-889a-3672357ef0aa"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_document fd where uid in ('${#TestCase#uid1}', '${#TestCase#uid2}', '${#TestCase#uid3}') and deprecated = true and deprecated_date > '${#TestCase#date}' and deprecated_date &lt; '${#TestCase#date2} 23:59:59'</con:query><con:assertion type="Simple Contains" id="3fffe088-cbbd-4d90-9b92-f0f3f1daa9eb" name="Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>uid1</con:name><con:value>3eb5a1ea-943b-49f9-84a9-03f4647a53fd</con:value></con:property><con:property><con:name>uid2</con:name><con:value>744727a9-d412-4831-a4c3-7972b06642d3</con:value></con:property><con:property><con:name>uid3</con:name><con:value>b1c82dd4-7724-47a7-b175-67257d1d6548</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-08-25T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-08-25</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="4b1fd8f3-193d-40c9-b976-15918d8a9446" name="А_ЕСУ_03 - Обработка сообщения о подписании свидетельства о смерти"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="83f3180d-aa09-43f3-9aa4-f5c2b2506646" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#81554" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Generate patientId" id="514c85eb-f9f7-4bae-ae07-154d9a96470f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}
patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="859e39ef-0a46-4c5d-bf72-7e107decc895"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="95361ccc-4f16-42ff-9c0a-cee2eb75976e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="2f0f3b07-889b-4add-86c5-78c0ca2287b1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="83abb892-7485-495b-9b3a-442a651c8280"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

areaId=getNonexistendArea()
log.info(areaId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", areaId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="ffc6bcab-099a-4ef0-855f-a8df88344c7a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, ${#TestCase#areaId}, '2003-07-28 10:21:54.000', '2002-10-28', NULL);
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked) VALUES(1111${#TestCase#areaId}, ${#TestCase#patientId}, 125694880, '2017-04-04 21:14:05.000', 127, 1);

--- создание прикреплений

INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false); -- проверка обработки различных статусов no_doctor
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, NULL); -- проверка обработки различных статусов no_doctor
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, true); -- проверка обработки различных статусов no_doctor
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', '2021-03-09', 14484, 128290661, '602', 125676819, false); --- прикрепление не обрабатывается, т.к. закрыто

INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', false, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', NULL, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', false, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');

--- создание тасок и связанных данных
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694889, 0, 4); -- проставлено deleted
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694889, 0, 3); -- проставлено deleted
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694889, 0, 1); -- проставлено deleted
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694889, 0, 2); -- проставлено deleted
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694889, 0, 4); --- не обработает, т.к. закрыта
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(8${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, true, 125694889, 0, 3);  --- не обработает, т.к. deleted = true

--- заполнение связанных таблиц
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#areaId}, '2edb2286-d140-4857-b2b5-02a2987${#TestCase#areaId}', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', 4, false, NULL);
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(5${#TestCase#areaId}, '2edb2286-d140-4857-b2b5-02a2988${#TestCase#areaId}', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', 4, false, NULL);
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(3${#TestCase#areaId}, '9f133c19-f164-423c-88f0-a9628b1e${#TestCase#areaId}', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', 1, false, NULL);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(1${#TestCase#areaId}, 128291744, 0, 1${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(5${#TestCase#areaId}, 128291744, 0, 5${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(3${#TestCase#areaId}, 128290661, 3, 3${#TestCase#areaId});


INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) VALUES(4${#TestCase#areaId}, 1${#TestCase#areaId}, 128290661, 1);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="f5705b34-a091-4fc3-8bfe-13aa0d8d6724"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="c0db1318-53b9-41af-aaff-5a8c26e51add"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("FactOfDeath","""{
    "domain": "default",
    "ehrUid": "29e0c054-db98-4e0f-99d5-89113efea7a0",
    "operationType": "create",
    "eventName": "FactOfDeath",
    "compositionId": "23504e43-aeb1-4d96-955d-0c51dac5ad98::default::1",
    "newResults": [
        {
            "patientId": \""""+patientId+"""\",
            "status": "complete",
            "documentId": null,
            "compositionId": "23504e43-aeb1-4d96-955d-0c51dac5ad98::default::1",
            "deathDateTime": "2020-11-25T09:40",
            "deathDateTimeType": "at0123",
            "deathCertSeries": "4520",
            "deathCertNum": "119979",
            "deathCertDate": "2020-11-25",
            "deathCertTypeId": "at0009",
            "deathCertType": "окончательное",
            "deathReasonId": "at0034",
            "deathReason": "от заболевания",
            "medicalOrg": "Обособленное подразделение ГБУЗ «ГКБ им В.П. Демихова ДЗМ» «Инфекционный центр»",
            "medicalOrgOkpo": null
        }
    ],
    "comment": "Create new Composition"
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="9f3d9cf5-14ce-4240-a7c4-dfc8f8398db8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area where patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="bb26192e-21e5-425b-83a0-66473121827b" name="Данные об участке удалены"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachments Step 1" id="40ed0b16-257a-4ae1-9377-3e0380f85d1d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}
order by fa.id</con:query><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match"><con:configuration><path>//Row[1]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 2"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 3"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 4"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[4]/F_ATTACHMENT.CLOSED/text()</path><content>2021-03-09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 1 Step 1" id="af1ac770-b091-498a-89c9-5f40dd1568e8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 1${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 2 Step 1" id="12f2723c-5c2e-4961-9335-880de2e521aa"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 2${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 3 Step 1" id="9ace5149-ce27-4c50-beb1-b8568aeae6ce"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 3${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 4 Step 1" id="299a5e95-c92c-4095-9483-1f97807f0450"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 4${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 1 Step 1" id="ef1eb1ea-3c54-4bfd-b19f-c4066833feb4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 1${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 2 Step 1" id="2ac4afbc-ea06-4a7a-94b6-c42b82ff4780"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 2${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 3 Step 1" id="a31caf9a-780f-4852-b4d1-b911fed72ee7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 3${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 4 Step 1" id="c834f338-0006-4642-bfda-47c8ced0f742"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 4${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 5 Step 1" id="bdee6fe8-0964-47aa-be3d-00a84e61d7fe"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 5${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 6 Step 1" id="65c73059-edc7-4700-8f84-d09ec14f5614"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 8${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="de1d1749-0b6c-4add-be5f-894dc004b79b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="close"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.groupCode=="DNA0088"

assert messageJson.groupName=="Грипп и пневмония"

assert messageJson.diagnosisCode=="J45.0"

assert messageJson.diagnosisName=="Астма с преобладанием аллергического компонента"

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.endDate==date2

assert messageJson.cancelReasonCode=="3"

assert messageJson.cancelReasonName=="Смерть"

assert messageJson.dnDoctorJobExecutionId=="111"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>6517</con:value></con:property><con:property><con:name>areaId</con:name><con:value>21028371</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-09-22T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-09-22</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1663830500641</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="b7943bb8-3441-45e7-ae0b-c3f728b71d7c" name="А_ЕСУ_04 - Обработка триггера на аннулирование отказа от постановки на ДН"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e706c0b2-bf2d-40b9-876d-feaa1299269b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#101976_v1.1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="task_id" id="efce268d-dd11-470b-9e10-4640adc19792"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	}
	return random_id
}

task_id=getNonexistendPatientId()
log.info(task_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("task_id", task_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="document_id_DB" id="337ec286-13b3-452a-aa9b-67812b5e4df1"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id_DB=getNonexistendPatientId()
log.info(document_id_DB)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id_DB",document_id_DB.toString())</script></con:config></con:testStep><con:testStep type="request" name="searchDocuments_SIMI_85066" id="c13799e5-9af7-4211-acd8-bebf923864d9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>simiServiceBinding</con:interface><con:operation>getDocument</con:operation><con:request name="searchDocuments_SIMI_85066" id="8d82a652-87d3-4601-b4b0-34685119403f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
      xmlns:soap="http://www.w3.org/2003/05/soap-envelope"
      xmlns:user="http://emias.mos.ru/system/v1/userContext/"
      xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/"
      xmlns:doc="http://emias.mos.ru/simi/document/v5/"
      xmlns:simicore="http://emias.mos.ru/simi/core/v5/"
      xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
      xmlns:xd="http://www.w3.org/2000/09/xmldsig#">
  <soap:Header>
    <wsse:Security
          xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
          xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken wsu:Id="UsernameToken-93">
        <wsse:Username>GDES/TEST</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
    <user:userContext>
      <user:systemName>GDES</user:systemName>
      <user:userName>TEST</user:userName>
      <user:userRoleId>1</user:userRoleId>
    </user:userContext>
  </soap:Header>
  <soap:Body>
    <v5:searchDocumentsRequest
          xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
          xmlns:doc="http://emias.mos.ru/simi/document/v5/"
          xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
          xmlns:v5="http://emias.mos.ru/simi/simiService/v5/types/"
          xmlns:flts="http://emias.mos.ru/system/v1/faults/"
          xmlns:user="http://emias.mos.ru/system/v1/userContext/"
          xmlns:simicore="http://emias.mos.ru/simi/core/v5/">
      <params>
        <v5:conditions>
       	<v5:condition operator="EQ">
            <v5:leftOperand>STATUS</v5:leftOperand>
            <v5:rightOperand>SIGNED</v5:rightOperand>
          </v5:condition>
        	<v5:condition operator="EQ">
            <v5:leftOperand>CCT_CODE</v5:leftOperand>
            <v5:rightOperand>85066</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_SCHEMA</v5:leftOperand>
            <v5:rightOperand>ru.mos.emias.system.careevent_concomitant_document</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_CODE</v5:leftOperand>
            <v5:rightOperand>Concomitant</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_VALUE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_ROLE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
        </v5:conditions>
      </params>
      <simicore:pagingOptions pageNumber="0" pageSize="10"/>
    </v5:searchDocumentsRequest>
  </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dfafbf2d-aaaf-43a9-a1cf-3c27c0e7fb0a"/><con:assertion type="SOAP Fault Assertion" id="fb10c773-f3b8-43d5-93bb-28726d6a5b04" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="b184a504-85b4-4f2b-b938-897b1aada719"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]/simicore:patientId</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentId[1]</con:sourcePath><con:targetType>documentid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>compositionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//code[text() = "transient.compositionId" ]/following-sibling::value

</con:sourcePath><con:targetType>compositionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>concomitant_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>//tag/code[text() = "Concomitant" ]/following-sibling::value</con:sourcePath><con:targetType>concomitant_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::code

</con:sourcePath><con:targetType>diagnosis_code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_value</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::value

</con:sourcePath><con:targetType>diagnosis_value</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Delete_td" id="eee72b3f-aa24-49a3-a1f0-8c2d94c48766"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Удаляем ТД
--ok
DELETE FROM f_document_mkb10 fdm
WHERE fdm.task_id IN 
(
SELECT ft.id FROM f_task ft 
WHERE ft.patient_id = ${#TestCase#patientId}
);
--ok
DELETE FROM f_document
WHERE patient_id=${#TestCase#patientId};
--ok
DELETE FROM f_task
WHERE patient_id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="4326f6df-c0c8-41b0-88a0-f221fe9a914d" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM f_task ft WHERE ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="9e130acb-8a94-47fc-8a3d-271d63bf71ca" name="Проверяем что по пациенту нет задач"><con:configuration><token>&lt;ResultSet fetchSize="0"/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="get_mkb10_id" id="78f19263-bfb8-4e95-94e4-5d030f58d868"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM d_mkb10 dm WHERE dm.code = '${#TestCase#diagnosis_code}';</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="set_mkb10_id" id="93e5c252-5b37-4ad5-93f7-23c9d1a6487a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkb10_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>get_mkb10_id</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>mkb10_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="1d27ddc1-e7c7-4414-b3ec-a0aa610f92c9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Задача по документу СИМИ
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES (${#TestCase#task_Id}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882,  4);
--- связанные таблицы по документу. Указать UID из getDocument и ID пациента
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES (${#TestCase#document_Id_DB}, '${#TestCase#concomitant_id}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#document_Id_DB}, '${#TestCase#mkb10_id}', 1, ${#TestCase#task_Id}, 34234${#TestCase#patientId});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="b595b431-46d6-4441-aac5-aafa28319b64"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def concomitant_id=testRunner.testCase.getPropertyValue("eventUID")
def compositionId=testRunner.testCase.getPropertyValue("compositionId")
def documentId=testRunner.testCase.getPropertyValue("documentId")
def diagnosis_value=testRunner.testCase.getPropertyValue("diagnosis_value")
def diagnosis_code=testRunner.testCase.getPropertyValue("diagnosis_code")

def scripts = new ScriptLibrary(context, testRunner, log)
String file = scripts.returnFileAsText("message")
log.info file
String message = file.replace("\$patientId",patientId ).replace("\$documentId",documentId ).replace("\$diagnosis_code",diagnosis_code ).replace("\$diagnosis_value",diagnosis_value )

log.info message

sendMessageToKafka("t_dispensary_case_rejectionComposition", message)</script></con:config></con:testStep><con:testStep type="delay" name="time_sleep" id="798a3efc-0ef0-4d49-9fb4-cfbb170e76f7"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check new_task" id="3aab948d-a867-4b45-ab32-54e68d449dbe"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM f_task ft WHERE ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="cfc0befa-5df8-4870-ae2d-e114b2b35d1f" name="Проверяем что по пациенту создалась вторая задача"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="066c49d8-7862-4bab-af6c-56f067cc272b" name="Проверяем type_id, должен быть равен 4"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

//Парсим xml
def resp = new XmlHolder(messageExchange.responseContentAsXml)
log.info resp

//Получаем результат из ответа
Integer result = new Integer(resp.getNodeValue('//Row[2]/F_TASK.TYPE_ID'))
log.info result

//Проверяем
assert result == 4</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>task_id</con:name><con:value>6777</con:value></con:property><con:property><con:name>concomitant_id</con:name><con:value>915a392d-f0b7-4983-bf95-2ddf1ae2ba7c</con:value></con:property><con:property><con:name>compositionId</con:name><con:value>a959fc1c-76f3-48c8-99ed-337652403a12::default::2</con:value></con:property><con:property><con:name>patientId</con:name><con:value>10166510</con:value></con:property><con:property><con:name>document_id_DB</con:name><con:value>7476</con:value></con:property><con:property><con:name>message</con:name><con:value>/dn_message_to_kafta/А_ЕСУ_04_V1_1.json</con:value></con:property><con:property><con:name>documentid</con:name><con:value>88f7229b-3f26-463b-92be-703cc81854a8</con:value></con:property><con:property><con:name>diagnosis_code</con:name><con:value>I48.2</con:value></con:property><con:property><con:name>diagnosis_value</con:name><con:value>I48.2 - Хроническая форма фибрилляции предсердий</con:value></con:property><con:property><con:name>document_id</con:name><con:value>4727</con:value></con:property><con:property><con:name>new_task</con:name><con:value>6875677</con:value></con:property><con:property><con:name>mkb10_id</con:name><con:value>128293829</con:value></con:property></con:properties></con:testCase><con:testCase id="1e233c6d-c8e9-4606-93a9-191f9422d81f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#101976_v1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="task_id" id="42b49cc1-c7ea-4f7b-99b7-86fc89e3deab"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	}
	return random_id
}

task_id=getNonexistendPatientId()
log.info(task_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("task_id", task_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="document_id_DB" id="91fb9c29-308a-4901-a081-cd550bc830f4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id_DB=getNonexistendPatientId()
log.info(document_id_DB)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id_DB",document_id_DB.toString())</script></con:config></con:testStep><con:testStep type="request" name="searchDocuments_SIMI_41062" id="531f0278-0997-4a4c-a1e7-4bda18190f55"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>simiServiceBinding</con:interface><con:operation>getDocument</con:operation><con:request name="searchDocuments_SIMI_41062" id="8d82a652-87d3-4601-b4b0-34685119403f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
      xmlns:soap="http://www.w3.org/2003/05/soap-envelope"
      xmlns:user="http://emias.mos.ru/system/v1/userContext/"
      xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/"
      xmlns:doc="http://emias.mos.ru/simi/document/v5/"
      xmlns:simicore="http://emias.mos.ru/simi/core/v5/"
      xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
      xmlns:xd="http://www.w3.org/2000/09/xmldsig#">
  <soap:Header>
    <wsse:Security
          xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
          xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken wsu:Id="UsernameToken-93">
        <wsse:Username>GDES/TEST</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
    <user:userContext>
      <user:systemName>GDES</user:systemName>
      <user:userName>TEST</user:userName>
      <user:userRoleId>1</user:userRoleId>
    </user:userContext>
  </soap:Header>
  <soap:Body>
    <v5:searchDocumentsRequest
          xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
          xmlns:doc="http://emias.mos.ru/simi/document/v5/"
          xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
          xmlns:v5="http://emias.mos.ru/simi/simiService/v5/types/"
          xmlns:flts="http://emias.mos.ru/system/v1/faults/"
          xmlns:user="http://emias.mos.ru/system/v1/userContext/"
          xmlns:simicore="http://emias.mos.ru/simi/core/v5/">
      <params>
        <v5:conditions>
       	<v5:condition operator="EQ">
            <v5:leftOperand>STATUS</v5:leftOperand>
            <v5:rightOperand>SIGNED</v5:rightOperand>
          </v5:condition>
        	<v5:condition operator="EQ">
            <v5:leftOperand>CCT_CODE</v5:leftOperand>
            <v5:rightOperand>41062</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_SCHEMA</v5:leftOperand>
            <v5:rightOperand>ru.mos.emias.system.careevent_concomitant_document</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_CODE</v5:leftOperand>
            <v5:rightOperand>Concomitant</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_VALUE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_ROLE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
        </v5:conditions>
      </params>
      <simicore:pagingOptions pageNumber="0" pageSize="10"/>
    </v5:searchDocumentsRequest>
  </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dfafbf2d-aaaf-43a9-a1cf-3c27c0e7fb0a"/><con:assertion type="SOAP Fault Assertion" id="fb10c773-f3b8-43d5-93bb-28726d6a5b04" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="33e25c1f-3a49-41ba-87a7-e2f7dedd4959"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]/simicore:patientId</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentId[1]</con:sourcePath><con:targetType>documentid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>compositionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//code[text() = "transient.compositionId" ]/following-sibling::value

</con:sourcePath><con:targetType>compositionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>concomitant_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>//tag/code[text() = "Concomitant" ]/following-sibling::value</con:sourcePath><con:targetType>concomitant_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::code

</con:sourcePath><con:targetType>diagnosis_code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_value</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::value

</con:sourcePath><con:targetType>diagnosis_value</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Delete_td" id="394021b9-320d-422d-b603-dd23ffeed64b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Удаляем ТД
--ok
DELETE FROM f_document_mkb10 fdm
WHERE fdm.task_id IN 
(
SELECT ft.id FROM f_task ft 
WHERE ft.patient_id = ${#TestCase#patientId}
);
--ok
DELETE FROM f_document
WHERE patient_id=${#TestCase#patientId};
--ok
DELETE FROM f_task
WHERE patient_id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="get_mkb10_id" id="aa431b55-ad64-46ca-b98d-cd04f5d40a79"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM d_mkb10 dm WHERE dm.code = '${#TestCase#diagnosis_code}';</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="set_mkb10_id" id="081cdb89-739e-4241-9d55-1b24fbc15df8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkb10_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>get_mkb10_id</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>mkb10_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="8956cb1b-8f66-4ff8-9d7f-667c9e6a6a34"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Задача по документу СИМИ
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES (${#TestCase#task_Id}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4);
--- связанные таблицы по документу. Указать UID из getDocument и ID пациента
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES (${#TestCase#document_Id_DB}, '${#TestCase#concomitant_id}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#document_Id_DB}, '${#TestCase#mkb10_id}', 1, ${#TestCase#task_Id}, 34452${#TestCase#patientId});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="f863e873-c7f6-4a13-a780-9be46b5b09f5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def concomitant_id=testRunner.testCase.getPropertyValue("eventUID")
def compositionId=testRunner.testCase.getPropertyValue("compositionId")
def documentId=testRunner.testCase.getPropertyValue("documentId")
def diagnosis_value=testRunner.testCase.getPropertyValue("diagnosis_value")
def diagnosis_code=testRunner.testCase.getPropertyValue("diagnosis_code")

def scripts = new ScriptLibrary(context, testRunner, log)
String file = scripts.returnFileAsText("message")
log.info file
String message = file.replace("\$patientId",patientId ).replace("\$documentId",documentId ).replace("\$diagnosis_code",diagnosis_code ).replace("\$diagnosis_value",diagnosis_value )

log.info message

sendMessageToKafka("t_dispensary_case_rejectionComposition", message)</script></con:config></con:testStep><con:testStep type="delay" name="time_sleep" id="23ef512f-186a-4a1b-b7d5-88c0f305a347"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check new_task" id="dad61fbc-ac3d-41f8-9774-200b8b7ec303"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM f_task ft WHERE ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="cfc0befa-5df8-4870-ae2d-e114b2b35d1f" name="Проверяем что создалась вторая задача "><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f272d3b8-3917-48c9-9e76-12002e1bdd1f" name="Проверяем type_id, должен быть равен 4"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

//Парсим xml
def resp = new XmlHolder(messageExchange.responseContentAsXml)
log.info resp

//Получаем результат из ответа
Integer result = new Integer(resp.getNodeValue('//Row[2]/F_TASK.TYPE_ID'))
log.info result

//Проверяем
assert result == 4</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>task_id</con:name><con:value>7644</con:value></con:property><con:property><con:name>concomitant_id</con:name><con:value>e5f88a4f-cca8-42cb-a348-276b2d8e1b04</con:value></con:property><con:property><con:name>compositionId</con:name><con:value>64dc59ea-2163-4bd9-b2e1-5a8cd48c7e36::default::2</con:value></con:property><con:property><con:name>patientId</con:name><con:value>6842874703036</con:value></con:property><con:property><con:name>document_id_DB</con:name><con:value>6235</con:value></con:property><con:property><con:name>message</con:name><con:value>/dn_message_to_kafta/А_ЕСУ_04_V1.json</con:value></con:property><con:property><con:name>documentid</con:name><con:value>3771c539-454a-4c6d-9336-9a3df1fd6a74</con:value></con:property><con:property><con:name>diagnosis_code</con:name><con:value>A04.9</con:value></con:property><con:property><con:name>diagnosis_value</con:name><con:value>A04.9 - Бактериальная кишечная инфекция неуточненная</con:value></con:property><con:property><con:name>document_id</con:name><con:value>4727</con:value></con:property><con:property><con:name>new_task</con:name><con:value>6875664</con:value></con:property><con:property><con:name>mkb10_id</con:name><con:value>128286901</con:value></con:property></con:properties></con:testCase><con:testCase id="fccbd579-646a-4b20-9079-c1ec0fab029f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#101978_v1.1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="task_id" id="efd508df-936a-4ab7-b176-658c5bdb1992"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	}
	return random_id
}

task_id=getNonexistendPatientId()
log.info(task_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("task_id", task_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="document_id_DB" id="8cac67e0-b904-453c-aa1e-30aced7ec4e2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id_DB=getNonexistendPatientId()
log.info(document_id_DB)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id_DB",document_id_DB.toString())</script></con:config></con:testStep><con:testStep type="request" name="searchDocuments_SIMI_85066" id="e80cc614-8225-4458-bca2-091b4f37058b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>simiServiceBinding</con:interface><con:operation>getDocument</con:operation><con:request name="searchDocuments_SIMI_85066" id="8d82a652-87d3-4601-b4b0-34685119403f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
      xmlns:soap="http://www.w3.org/2003/05/soap-envelope"
      xmlns:user="http://emias.mos.ru/system/v1/userContext/"
      xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/"
      xmlns:doc="http://emias.mos.ru/simi/document/v5/"
      xmlns:simicore="http://emias.mos.ru/simi/core/v5/"
      xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
      xmlns:xd="http://www.w3.org/2000/09/xmldsig#">
  <soap:Header>
    <wsse:Security
          xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
          xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken wsu:Id="UsernameToken-93">
        <wsse:Username>GDES/TEST</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
    <user:userContext>
      <user:systemName>GDES</user:systemName>
      <user:userName>TEST</user:userName>
      <user:userRoleId>1</user:userRoleId>
    </user:userContext>
  </soap:Header>
  <soap:Body>
    <v5:searchDocumentsRequest
          xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
          xmlns:doc="http://emias.mos.ru/simi/document/v5/"
          xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
          xmlns:v5="http://emias.mos.ru/simi/simiService/v5/types/"
          xmlns:flts="http://emias.mos.ru/system/v1/faults/"
          xmlns:user="http://emias.mos.ru/system/v1/userContext/"
          xmlns:simicore="http://emias.mos.ru/simi/core/v5/">
      <params>
        <v5:conditions>
       	<v5:condition operator="EQ">
            <v5:leftOperand>STATUS</v5:leftOperand>
            <v5:rightOperand>SIGNED</v5:rightOperand>
          </v5:condition>
        	<v5:condition operator="EQ">
            <v5:leftOperand>CCT_CODE</v5:leftOperand>
            <v5:rightOperand>85066</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_SCHEMA</v5:leftOperand>
            <v5:rightOperand>ru.mos.emias.system.careevent_concomitant_document</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_CODE</v5:leftOperand>
            <v5:rightOperand>Concomitant</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_VALUE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_ROLE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
        </v5:conditions>
      </params>
      <simicore:pagingOptions pageNumber="0" pageSize="10"/>
    </v5:searchDocumentsRequest>
  </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dfafbf2d-aaaf-43a9-a1cf-3c27c0e7fb0a"/><con:assertion type="SOAP Fault Assertion" id="fb10c773-f3b8-43d5-93bb-28726d6a5b04" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="9b3a5f72-b4ac-4159-99da-bb6dd5077970"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]/simicore:patientId</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentId[1]</con:sourcePath><con:targetType>documentid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>compositionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//code[text() = "transient.compositionId" ]/following-sibling::value

</con:sourcePath><con:targetType>compositionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>concomitant_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>//tag/code[text() = "Concomitant" ]/following-sibling::value</con:sourcePath><con:targetType>concomitant_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::code

</con:sourcePath><con:targetType>diagnosis_code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_value</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::value

</con:sourcePath><con:targetType>diagnosis_value</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Delete_td" id="9960513a-8152-4585-9f9a-1946d17de7c7"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Удаляем ТД
--ok
DELETE FROM f_document_mkb10 fdm
WHERE fdm.task_id IN 
(
SELECT ft.id FROM f_task ft 
WHERE ft.patient_id = ${#TestCase#patientId}
);
--ok
DELETE FROM f_document
WHERE patient_id=${#TestCase#patientId};
--ok
DELETE FROM f_task
WHERE patient_id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="get_mkb10_id" id="523c2a8c-df2f-40a2-a307-cddb510bedc8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM d_mkb10 dm WHERE dm.code = '${#TestCase#diagnosis_code}';</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="set_mkb10_id" id="e23616c6-3d1d-4788-b5d0-16e09c019b4d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkb10_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>get_mkb10_id</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>mkb10_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="57871b3f-53cc-4c05-8a66-1ed771bd33e3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Задача по документу СИМИ
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES (${#TestCase#task_Id}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 4);
--- связанные таблицы по документу. Указать UID из getDocument и ID пациента
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES (${#TestCase#document_Id_DB}, '${#TestCase#concomitant_id}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#document_Id_DB}, '${#TestCase#mkb10_id}', 1, ${#TestCase#task_Id}, 546${#TestCase#patientId});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="dd5bcb87-4d54-40c8-b211-8843678742cf"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def concomitant_id=testRunner.testCase.getPropertyValue("eventUID")
def compositionId=testRunner.testCase.getPropertyValue("compositionId")
def documentId=testRunner.testCase.getPropertyValue("documentId")
def diagnosis_value=testRunner.testCase.getPropertyValue("diagnosis_value")
def diagnosis_code=testRunner.testCase.getPropertyValue("diagnosis_code")

def scripts = new ScriptLibrary(context, testRunner, log)
String file = scripts.returnFileAsText("message")
log.info file
String message = file.replace("\$patientId",patientId ).replace("\$documentId",documentId ).replace("\$diagnosis_code",diagnosis_code ).replace("\$diagnosis_value",diagnosis_value )

log.info message

sendMessageToKafka("t_dispensary_case_rejectionComposition", message)</script></con:config></con:testStep><con:testStep type="delay" name="time_sleep" id="1efdcaa3-8783-47b7-9296-a741fcdf70ad"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check task" id="64864b3f-ea5b-4bdc-b5c7-14c15ceb9c3b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM f_task ft WHERE ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="068474f1-c8b7-4fb8-8528-dcdbb537e956" name="Проверяем что вторая задача не создалась "><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>task_id</con:name><con:value>9863</con:value></con:property><con:property><con:name>concomitant_id</con:name><con:value>915a392d-f0b7-4983-bf95-2ddf1ae2ba7c</con:value></con:property><con:property><con:name>compositionId</con:name><con:value>a959fc1c-76f3-48c8-99ed-337652403a12::default::2</con:value></con:property><con:property><con:name>patientId</con:name><con:value>10166510</con:value></con:property><con:property><con:name>document_id_DB</con:name><con:value>4916</con:value></con:property><con:property><con:name>message</con:name><con:value>/А_ЕСУ_04/А_ЕСУ_04_V1_1Update.json</con:value></con:property><con:property><con:name>documentid</con:name><con:value>88f7229b-3f26-463b-92be-703cc81854a8</con:value></con:property><con:property><con:name>diagnosis_code</con:name><con:value>I48.2</con:value></con:property><con:property><con:name>diagnosis_value</con:name><con:value>I48.2 - Хроническая форма фибрилляции предсердий</con:value></con:property><con:property><con:name>document_id</con:name><con:value>4727</con:value></con:property><con:property><con:name>new_task</con:name><con:value>6875664</con:value></con:property><con:property><con:name>mkb10_id</con:name><con:value>128293829</con:value></con:property></con:properties></con:testCase><con:testCase id="7926ecb8-c546-4317-948d-5611327cb7e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#101978_v1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="task_id" id="584db58b-2cc1-4291-a6ed-609468545dba"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	}
	return random_id
}

task_id=getNonexistendPatientId()
log.info(task_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("task_id", task_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="document_id_DB" id="8a687467-25aa-4e48-b5f0-eb5a4b12a1ad"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id_DB=getNonexistendPatientId()
log.info(document_id_DB)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id_DB",document_id_DB.toString())</script></con:config></con:testStep><con:testStep type="request" name="searchDocuments_SIMI_41062" id="27fdf258-3eba-4860-b4b6-73749273a957"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>simiServiceBinding</con:interface><con:operation>getDocument</con:operation><con:request name="searchDocuments_SIMI_41062" id="8d82a652-87d3-4601-b4b0-34685119403f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
      xmlns:soap="http://www.w3.org/2003/05/soap-envelope"
      xmlns:user="http://emias.mos.ru/system/v1/userContext/"
      xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/"
      xmlns:doc="http://emias.mos.ru/simi/document/v5/"
      xmlns:simicore="http://emias.mos.ru/simi/core/v5/"
      xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
      xmlns:xd="http://www.w3.org/2000/09/xmldsig#">
  <soap:Header>
    <wsse:Security
          xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
          xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken wsu:Id="UsernameToken-93">
        <wsse:Username>GDES/TEST</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
    <user:userContext>
      <user:systemName>GDES</user:systemName>
      <user:userName>TEST</user:userName>
      <user:userRoleId>1</user:userRoleId>
    </user:userContext>
  </soap:Header>
  <soap:Body>
    <v5:searchDocumentsRequest
          xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
          xmlns:doc="http://emias.mos.ru/simi/document/v5/"
          xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
          xmlns:v5="http://emias.mos.ru/simi/simiService/v5/types/"
          xmlns:flts="http://emias.mos.ru/system/v1/faults/"
          xmlns:user="http://emias.mos.ru/system/v1/userContext/"
          xmlns:simicore="http://emias.mos.ru/simi/core/v5/">
      <params>
        <v5:conditions>
       	<v5:condition operator="EQ">
            <v5:leftOperand>STATUS</v5:leftOperand>
            <v5:rightOperand>SIGNED</v5:rightOperand>
          </v5:condition>
        	<v5:condition operator="EQ">
            <v5:leftOperand>CCT_CODE</v5:leftOperand>
            <v5:rightOperand>41062</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_SCHEMA</v5:leftOperand>
            <v5:rightOperand>ru.mos.emias.system.careevent_concomitant_document</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_CODE</v5:leftOperand>
            <v5:rightOperand>Concomitant</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_VALUE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_ROLE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
        </v5:conditions>
      </params>
      <simicore:pagingOptions pageNumber="0" pageSize="10"/>
    </v5:searchDocumentsRequest>
  </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dfafbf2d-aaaf-43a9-a1cf-3c27c0e7fb0a"/><con:assertion type="SOAP Fault Assertion" id="fb10c773-f3b8-43d5-93bb-28726d6a5b04" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="f68e2893-195f-4e3f-84ff-0821349059b3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]/simicore:patientId</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentId[1]</con:sourcePath><con:targetType>documentid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>compositionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//code[text() = "transient.compositionId" ]/following-sibling::value

</con:sourcePath><con:targetType>compositionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>concomitant_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>//tag/code[text() = "Concomitant" ]/following-sibling::value</con:sourcePath><con:targetType>concomitant_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::code

</con:sourcePath><con:targetType>diagnosis_code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_value</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::value

</con:sourcePath><con:targetType>diagnosis_value</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Delete_td" id="1b708861-3726-4b01-a190-82d969730071"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Удаляем ТД
--ok
DELETE FROM f_document_mkb10 fdm
WHERE fdm.task_id IN 
(
SELECT ft.id FROM f_task ft 
WHERE ft.patient_id = ${#TestCase#patientId}
);
--ok
DELETE FROM f_document
WHERE patient_id=${#TestCase#patientId};
--ok
DELETE FROM f_task
WHERE patient_id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="get_mkb10_id" id="f487bbe5-98d5-46fa-9e35-f1137487e38c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM d_mkb10 dm WHERE dm.code = '${#TestCase#diagnosis_code}';</con:query><con:assertion type="Simple Contains" id="ee6af699-9d7a-4127-a0bd-5c7fd09a8d5c" name="Contains"><con:configuration><token>&lt;D_MKB10.ID>128292638&lt;/D_MKB10.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="set_mkb10_id" id="dfb0e50e-1b06-4c59-99bf-7db0ac948a71"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkb10_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>get_mkb10_id</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>mkb10_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="2997d2ce-a286-4988-a1bd-3ce2059e72ae"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Задача по документу СИМИ
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES (${#TestCase#task_Id}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 4);
--- связанные таблицы по документу. Указать UID из getDocument и ID пациента
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES (${#TestCase#document_Id_DB}, '${#TestCase#concomitant_id}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#document_Id_DB}, '${#TestCase#mkb10_id}', 1, ${#TestCase#task_Id}, 534${#TestCase#patientId});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="fcc7aa96-f750-4f28-9a5f-3c6bfc46c1d3"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def concomitant_id=testRunner.testCase.getPropertyValue("eventUID")
def compositionId=testRunner.testCase.getPropertyValue("compositionId")
def documentId=testRunner.testCase.getPropertyValue("documentId")
def diagnosis_value=testRunner.testCase.getPropertyValue("diagnosis_value")
def diagnosis_code=testRunner.testCase.getPropertyValue("diagnosis_code")

def scripts = new ScriptLibrary(context, testRunner, log)
String file = scripts.returnFileAsText("message")
log.info file
String message = file.replace("\$patientId",patientId ).replace("\$documentId",documentId ).replace("\$diagnosis_code",diagnosis_code ).replace("\$diagnosis_value",diagnosis_value )

log.info message

sendMessageToKafka("t_dispensary_case_rejectionComposition", message)</script></con:config></con:testStep><con:testStep type="delay" name="time_sleep" id="baaf4ea6-f031-4343-b8d8-2b89cbfc2782"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check task" id="5e149d37-d1b2-46bf-9875-008bb2c167d6"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM f_task ft WHERE ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="068474f1-c8b7-4fb8-8528-dcdbb537e956" name="Проверяем что вторая задача не создалась "><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>task_id</con:name><con:value>182</con:value></con:property><con:property><con:name>concomitant_id</con:name><con:value>e5f88a4f-cca8-42cb-a348-276b2d8e1b04</con:value></con:property><con:property><con:name>compositionId</con:name><con:value>64dc59ea-2163-4bd9-b2e1-5a8cd48c7e36::default::2</con:value></con:property><con:property><con:name>patientId</con:name><con:value>6842874703036</con:value></con:property><con:property><con:name>document_id_DB</con:name><con:value>8176</con:value></con:property><con:property><con:name>message</con:name><con:value>/dn_message_to_kafta/А_ЕСУ_04_V1Update.json</con:value></con:property><con:property><con:name>documentid</con:name><con:value>3771c539-454a-4c6d-9336-9a3df1fd6a74</con:value></con:property><con:property><con:name>diagnosis_code</con:name><con:value>A04.9</con:value></con:property><con:property><con:name>diagnosis_value</con:name><con:value>A04.9 - Бактериальная кишечная инфекция неуточненная</con:value></con:property><con:property><con:name>document_id</con:name><con:value>4727</con:value></con:property><con:property><con:name>new_task</con:name><con:value>6875664</con:value></con:property><con:property><con:name>mkb10_id</con:name><con:value>128286901</con:value></con:property></con:properties></con:testCase><con:testCase id="a09f0195-9bff-428d-910a-231160f5f464" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#133618_v1.1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="task_id" id="39587dca-2808-47f1-b01b-bed833e105f2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	}
	return random_id
}

task_id=getNonexistendPatientId()
log.info(task_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("task_id", task_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="document_id_DB" id="33b90dad-6579-44cb-9548-e9c1d65dc31c"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id_DB=getNonexistendPatientId()
log.info(document_id_DB)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id_DB",document_id_DB.toString())</script></con:config></con:testStep><con:testStep type="request" name="searchDocuments_SIMI_85066" id="7b002a04-1d46-4de1-b655-1dcfa7fc2cb0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>simiServiceBinding</con:interface><con:operation>getDocument</con:operation><con:request name="searchDocuments_SIMI_85066" id="8d82a652-87d3-4601-b4b0-34685119403f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
      xmlns:soap="http://www.w3.org/2003/05/soap-envelope"
      xmlns:user="http://emias.mos.ru/system/v1/userContext/"
      xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/"
      xmlns:doc="http://emias.mos.ru/simi/document/v5/"
      xmlns:simicore="http://emias.mos.ru/simi/core/v5/"
      xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
      xmlns:xd="http://www.w3.org/2000/09/xmldsig#">
  <soap:Header>
    <wsse:Security
          xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
          xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken wsu:Id="UsernameToken-93">
        <wsse:Username>GDES/TEST</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
    <user:userContext>
      <user:systemName>GDES</user:systemName>
      <user:userName>TEST</user:userName>
      <user:userRoleId>1</user:userRoleId>
    </user:userContext>
  </soap:Header>
  <soap:Body>
    <v5:searchDocumentsRequest
          xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
          xmlns:doc="http://emias.mos.ru/simi/document/v5/"
          xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
          xmlns:v5="http://emias.mos.ru/simi/simiService/v5/types/"
          xmlns:flts="http://emias.mos.ru/system/v1/faults/"
          xmlns:user="http://emias.mos.ru/system/v1/userContext/"
          xmlns:simicore="http://emias.mos.ru/simi/core/v5/">
      <params>
        <v5:conditions>
       	<v5:condition operator="EQ">
            <v5:leftOperand>STATUS</v5:leftOperand>
            <v5:rightOperand>SIGNED</v5:rightOperand>
          </v5:condition>
        	<v5:condition operator="EQ">
            <v5:leftOperand>CCT_CODE</v5:leftOperand>
            <v5:rightOperand>85066</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_SCHEMA</v5:leftOperand>
            <v5:rightOperand>ru.mos.emias.system.careevent_concomitant_document</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_CODE</v5:leftOperand>
            <v5:rightOperand>Concomitant</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_VALUE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_ROLE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
        </v5:conditions>
      </params>
      <simicore:pagingOptions pageNumber="0" pageSize="10"/>
    </v5:searchDocumentsRequest>
  </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dfafbf2d-aaaf-43a9-a1cf-3c27c0e7fb0a"/><con:assertion type="SOAP Fault Assertion" id="fb10c773-f3b8-43d5-93bb-28726d6a5b04" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="9445b343-5a1a-48ba-94ea-bfeed9e2026a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]/simicore:patientId</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentId[1]</con:sourcePath><con:targetType>documentid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>compositionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//code[text() = "transient.compositionId" ]/following-sibling::value

</con:sourcePath><con:targetType>compositionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>concomitant_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>//tag/code[text() = "Concomitant" ]/following-sibling::value</con:sourcePath><con:targetType>concomitant_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::code

</con:sourcePath><con:targetType>diagnosis_code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_value</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_85066</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::value

</con:sourcePath><con:targetType>diagnosis_value</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Delete_td" id="254bdb09-fc4b-41ac-8e23-63455df181b3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Удаляем ТД
--ok
DELETE FROM f_document_mkb10 fdm
WHERE fdm.task_id IN 
(
SELECT ft.id FROM f_task ft 
WHERE ft.patient_id = ${#TestCase#patientId}
);
--ok
DELETE FROM f_document
WHERE patient_id=${#TestCase#patientId};
--ok
DELETE FROM f_task
WHERE patient_id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="get_mkb10_id" id="1fc18d70-9cef-42ff-afdc-b05774e239ea"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM d_mkb10 dm WHERE dm.code = '${#TestCase#diagnosis_code}';</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="set_mkb10_id" id="3842d554-d30a-410c-a246-ae46bdaf12aa"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkb10_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>get_mkb10_id</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>mkb10_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="01d642cd-aabc-4472-942a-ff76b0ee284f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Задача по документу СИМИ
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES (${#TestCase#task_Id}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 4);
--- связанные таблицы по документу. Указать UID из getDocument и ID пациента
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES (${#TestCase#document_Id_DB}, '${#TestCase#concomitant_id}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#document_Id_DB}, '${#TestCase#mkb10_id}', 1, ${#TestCase#task_Id}, 532${#TestCase#patientId});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Update_policyStatus" id="1494c046-6121-4cb8-ac5c-44dff49bde21"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>UPDATE f_patient
SET policy_status= 'D' 
WHERE id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="18a52e6b-d6b3-4a16-8eaa-a74b8e678f63"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def concomitant_id=testRunner.testCase.getPropertyValue("eventUID")
def compositionId=testRunner.testCase.getPropertyValue("compositionId")
def documentId=testRunner.testCase.getPropertyValue("documentId")
def diagnosis_value=testRunner.testCase.getPropertyValue("diagnosis_value")
def diagnosis_code=testRunner.testCase.getPropertyValue("diagnosis_code")

def scripts = new ScriptLibrary(context, testRunner, log)
String file = scripts.returnFileAsText("message")
log.info file
String message = file.replace("\$patientId",patientId ).replace("\$documentId",documentId ).replace("\$diagnosis_code",diagnosis_code ).replace("\$diagnosis_value",diagnosis_value )

log.info message

sendMessageToKafka("t_dispensary_case_rejectionComposition", message)</script></con:config></con:testStep><con:testStep type="delay" name="time_sleep" id="bfe64a5d-6a04-4add-995c-9073cd900b1f"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check task" id="ac5e1c69-f699-4ded-97e3-5d6d5fee5222"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM f_task ft WHERE ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="068474f1-c8b7-4fb8-8528-dcdbb537e956" name="Проверяем что вторая задача не создалась "><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="policyStatus_null" id="4ad29c5c-8c2c-4714-8a75-4f99c0ff73ba"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>UPDATE f_patient
SET policy_status= NULL 
WHERE id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Check_graylog" id="b53b1e5f-3359-4942-a8a3-cecc85ddb0be"><con:description>Проверить graylog по id пациента 	</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E039 с параметром &lt;patientId>: "Невозможно создать задачу постановки на диспансерное наблюдение, т.к. полис пациента &lt;patientId> погашен по смерти."</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>task_id</con:name><con:value>3470</con:value></con:property><con:property><con:name>concomitant_id</con:name><con:value>d59fc8d4-dc97-43fb-96a0-a5a3d5ca4f18</con:value></con:property><con:property><con:name>compositionId</con:name><con:value>1ff8651e-6866-4df2-ad8d-7518a2304af8::default::2</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1368047941</con:value></con:property><con:property><con:name>document_id_DB</con:name><con:value>2191</con:value></con:property><con:property><con:name>message</con:name><con:value>/dn_message_to_kafta/А_ЕСУ_04_V1_1.json</con:value></con:property><con:property><con:name>documentid</con:name><con:value>dea5a07a-4448-40de-865e-798be5339cc3</con:value></con:property><con:property><con:name>diagnosis_code</con:name><con:value>O20.0</con:value></con:property><con:property><con:name>diagnosis_value</con:name><con:value>O20.0 - Угрожающий аборт</con:value></con:property><con:property><con:name>document_id</con:name><con:value>4727</con:value></con:property><con:property><con:name>new_task</con:name><con:value>6875664</con:value></con:property><con:property><con:name>mkb10_id</con:name><con:value>128293829</con:value></con:property></con:properties></con:testCase><con:testCase id="78c332b9-677f-4cb8-afa3-3c94f596bc07" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#133618_v1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="task_id" id="3d3ec046-c3fa-4321-815d-5e7e165f798e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_task ft WHERE id = "+random_id+"")
	}
	return random_id
}

task_id=getNonexistendPatientId()
log.info(task_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("task_id", task_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="document_id_DB" id="48a54ab0-5168-4359-b413-a59ce84b557e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id_DB=getNonexistendPatientId()
log.info(document_id_DB)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id_DB",document_id_DB.toString())</script></con:config></con:testStep><con:testStep type="request" name="searchDocuments_SIMI_41062" id="acf26cce-5acf-4d6b-8e91-eece742bd18e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>simiServiceBinding</con:interface><con:operation>getDocument</con:operation><con:request name="searchDocuments_SIMI_41062" id="8d82a652-87d3-4601-b4b0-34685119403f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/SimiTap2/v5S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
      xmlns:soap="http://www.w3.org/2003/05/soap-envelope"
      xmlns:user="http://emias.mos.ru/system/v1/userContext/"
      xmlns:typ="http://emias.mos.ru/simi/simiService/v5/types/"
      xmlns:doc="http://emias.mos.ru/simi/document/v5/"
      xmlns:simicore="http://emias.mos.ru/simi/core/v5/"
      xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
      xmlns:xd="http://www.w3.org/2000/09/xmldsig#">
  <soap:Header>
    <wsse:Security
          xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
          xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken wsu:Id="UsernameToken-93">
        <wsse:Username>GDES/TEST</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
    <user:userContext>
      <user:systemName>GDES</user:systemName>
      <user:userName>TEST</user:userName>
      <user:userRoleId>1</user:userRoleId>
    </user:userContext>
  </soap:Header>
  <soap:Body>
    <v5:searchDocumentsRequest
          xmlns:cct="http://emias.mos.ru/simi/cct/v5/"
          xmlns:doc="http://emias.mos.ru/simi/document/v5/"
          xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
          xmlns:v5="http://emias.mos.ru/simi/simiService/v5/types/"
          xmlns:flts="http://emias.mos.ru/system/v1/faults/"
          xmlns:user="http://emias.mos.ru/system/v1/userContext/"
          xmlns:simicore="http://emias.mos.ru/simi/core/v5/">
      <params>
        <v5:conditions>
       	<v5:condition operator="EQ">
            <v5:leftOperand>STATUS</v5:leftOperand>
            <v5:rightOperand>SIGNED</v5:rightOperand>
          </v5:condition>
        	<v5:condition operator="EQ">
            <v5:leftOperand>CCT_CODE</v5:leftOperand>
            <v5:rightOperand>41062</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_SCHEMA</v5:leftOperand>
            <v5:rightOperand>ru.mos.emias.system.careevent_concomitant_document</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="EQ">
            <v5:leftOperand>TAG_CODE</v5:leftOperand>
            <v5:rightOperand>Concomitant</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_VALUE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
          <v5:condition operator="LIKE">
            <v5:leftOperand>TAG_ROLE</v5:leftOperand>
            <v5:rightOperand>%</v5:rightOperand>
          </v5:condition>
        </v5:conditions>
      </params>
      <simicore:pagingOptions pageNumber="0" pageSize="10"/>
    </v5:searchDocumentsRequest>
  </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dfafbf2d-aaaf-43a9-a1cf-3c27c0e7fb0a"/><con:assertion type="SOAP Fault Assertion" id="fb10c773-f3b8-43d5-93bb-28726d6a5b04" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5072a2f6-8a27-4819-b80c-0af039b91437"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]/simicore:patientId</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentId[1]</con:sourcePath><con:targetType>documentid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>compositionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//code[text() = "transient.compositionId" ]/following-sibling::value

</con:sourcePath><con:targetType>compositionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>concomitant_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>//tag/code[text() = "Concomitant" ]/following-sibling::value</con:sourcePath><con:targetType>concomitant_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::code

</con:sourcePath><con:targetType>diagnosis_code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>diagnosis_value</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>searchDocuments_SIMI_41062</con:sourceStep><con:sourcePath>declare namespace cct='http://emias.mos.ru/simi/cct/v5/';
declare namespace ns7='http://emias.mos.ru/simi/subscriptionService/v2/types/';
declare namespace S='http://www.w3.org/2003/05/soap-envelope';
declare namespace doc='http://emias.mos.ru/simi/document/v5/';
declare namespace ns6='http://emias.mos.ru/simi/simiService/v5/types/';
declare namespace ds='http://www.w3.org/2000/09/xmldsig#';
declare namespace simicore='http://emias.mos.ru/simi/core/v5/';
declare namespace ns9='http://emias.mos.ru/system/v1/userContext/';
declare namespace ns8='http://emias.mos.ru/system/v1/faults/';

//doc:documentInfo[1]//schema[text() = "ru.mos.emias.system.main_diagnosis" ]/following-sibling::value

</con:sourcePath><con:targetType>diagnosis_value</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Delete_td" id="49afe7ee-b113-40ad-8103-97ebb7d5cc38"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Удаляем ТД
--ok
DELETE FROM f_document_mkb10 fdm
WHERE fdm.task_id IN 
(
SELECT ft.id FROM f_task ft 
WHERE ft.patient_id = ${#TestCase#patientId}
);
--ok
DELETE FROM f_document
WHERE patient_id=${#TestCase#patientId};
--ok
DELETE FROM f_task
WHERE patient_id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="get_mkb10_id" id="24ac2f02-8e52-4dd5-92b8-e1e611256689"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM d_mkb10 dm WHERE dm.code = '${#TestCase#diagnosis_code}';</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="set_mkb10_id" id="6e0f1db6-a768-4de6-a64a-01edbf1e2a48"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mkb10_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>get_mkb10_id</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>mkb10_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="973fd851-f639-42f3-be5c-09a3c95c2777"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>--Задача по документу СИМИ
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES (${#TestCase#task_Id}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 4);
--- связанные таблицы по документу. Указать UID из getDocument и ID пациента
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES (${#TestCase#document_Id_DB}, '${#TestCase#concomitant_id}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#document_Id_DB}, '${#TestCase#mkb10_id}', 1, ${#TestCase#task_Id}, ${#TestCase#patientId});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Update_policyStatus" id="40ad460f-a75d-480a-95de-cb168b341729"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>UPDATE f_patient
SET policy_status= 'D' 
WHERE id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="d934aa48-f7a7-4078-8c06-4b478b4e293d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def concomitant_id=testRunner.testCase.getPropertyValue("eventUID")
def compositionId=testRunner.testCase.getPropertyValue("compositionId")
def documentId=testRunner.testCase.getPropertyValue("documentId")
def diagnosis_value=testRunner.testCase.getPropertyValue("diagnosis_value")
def diagnosis_code=testRunner.testCase.getPropertyValue("diagnosis_code")

def scripts = new ScriptLibrary(context, testRunner, log)
String file = scripts.returnFileAsText("message")
log.info file
String message = file.replace("\$patientId",patientId ).replace("\$documentId",documentId ).replace("\$diagnosis_code",diagnosis_code ).replace("\$diagnosis_value",diagnosis_value )

log.info message

sendMessageToKafka("t_dispensary_case_rejectionComposition", message)</script></con:config></con:testStep><con:testStep type="delay" name="time_sleep" id="b4e6972f-b571-4195-9708-8be3126f9501"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check task" id="665517f3-080c-412b-ad0a-4a1824f2a814"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>SELECT * FROM f_task ft WHERE ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="068474f1-c8b7-4fb8-8528-dcdbb537e956" name="Проверяем что вторая задача не создалась "><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="policyStatus_null" id="7443003a-683b-4393-bc17-14c2f2d57a21"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:query>UPDATE f_patient
SET policy_status= NULL 
WHERE id=${#TestCase#patientId};</con:query><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Check_graylog" id="49a624b8-5e6e-4b09-acb3-c03caeaf2de6"><con:description>Проверить graylog по id пациента 	</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Система формирует сообщение об ошибке E039 с параметром &lt;patientId>: "Невозможно создать задачу постановки на диспансерное наблюдение, т.к. полис пациента &lt;patientId> погашен по смерти."</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>task_id</con:name><con:value>1259</con:value></con:property><con:property><con:name>concomitant_id</con:name><con:value>e5f88a4f-cca8-42cb-a348-276b2d8e1b04</con:value></con:property><con:property><con:name>compositionId</con:name><con:value>64dc59ea-2163-4bd9-b2e1-5a8cd48c7e36::default::2</con:value></con:property><con:property><con:name>patientId</con:name><con:value>6842874703036</con:value></con:property><con:property><con:name>document_id_DB</con:name><con:value>4022</con:value></con:property><con:property><con:name>message</con:name><con:value>/dn_message_to_kafta/А_ЕСУ_04_V1.json</con:value></con:property><con:property><con:name>documentid</con:name><con:value>3771c539-454a-4c6d-9336-9a3df1fd6a74</con:value></con:property><con:property><con:name>diagnosis_code</con:name><con:value>A04.9</con:value></con:property><con:property><con:name>diagnosis_value</con:name><con:value>A04.9 - Бактериальная кишечная инфекция неуточненная</con:value></con:property><con:property><con:name>document_id</con:name><con:value>4727</con:value></con:property><con:property><con:name>new_task</con:name><con:value>6875664</con:value></con:property><con:property><con:name>mkb10_id</con:name><con:value>128286901</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="fb6f0b3f-087c-4e1c-a87e-5e007666bef0" name="А_ЕСУ_05 - Обработка триггера регулирующего создание ПДН"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f166dc0b-39f8-46d7-8397-0248f99746a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#110768" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="88281f71-0ddc-47ef-aa42-a927dc0b1da4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="fbbf3560-a2fb-451c-886c-9eea70f9c76f"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="ac8788d2-f703-4226-b092-15ca31616944"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- для создания новых данных достаточно нужно заменить "${#TestCase#patientId}" на уникальное значение по неполному вхождению
 
--- создание пациента
INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked) VALUES(13${#TestCase#patientId}${#TestCase#areaId}, ${#TestCase#patientId}, 125694882, '2019-11-18 14:20:53.000', 23, 0);


--- создание прикреплений
--- прикрепления с диагнозом из сообщения (не забыть указать). Обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290394, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128291909, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
--- прикрепление с другим диагнозом. Не обрабатывается.
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="c5b55805-9c46-4226-9004-1e38f81a3953"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.getPropertyValue("topic")
String file =scripts.returnFileAsText("directory")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="time_sleep" id="2b016a0f-ccd6-4a05-8018-bf4b97305c14"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 1" id="430243bf-8358-43b8-a0e1-2021b0cb8c3e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id = ${#TestCase#patientId} and fa.mkb10_id = 128290661</con:query><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains"><con:configuration><token> &lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 2" id="c24111d1-d6d4-43b0-aa7b-ec442dabf230"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = '${#TestCase#patientId}'
AND fa.is_pdo IS TRUE 
AND fa.pdo_employee_id IS NOT NULL;</con:query><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.IS_PDO>t&lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="aba5e25d-27d6-4b5a-a39e-2ba4c7b6eab5" name="Not Contains"><con:configuration><token>rowNumber = "3"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5904</con:value></con:property><con:property><con:name>areaId</con:name><con:value>948</con:value></con:property><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition2 create.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>682</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="c8151560-1525-4e15-8b50-90051866be4a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#113777" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="366ba32c-ec56-45da-a7f3-f82eee4d07fb"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="dc3adcd4-4a99-4731-b675-612ede089bbf"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="254cb159-504b-4c02-b088-c9fb24299658"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- для создания новых данных достаточно нужно заменить "${#TestCase#patientId}" на уникальное значение по неполному вхождению
 
--- создание пациента
INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked) VALUES(13${#TestCase#patientId}${#TestCase#uid}, ${#TestCase#patientId}, 125694882, '2019-11-18 14:20:53.000', 23, 0);


--- создание прикреплений
--- прикрепления с диагнозом из сообщения (не забыть указать). Обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290394, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128291909, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
--- прикрепление с другим диагнозом. Не обрабатывается.
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="f3158a9e-c42b-4a54-808c-9f0024d1d1f0"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.getPropertyValue("topic")
String file =scripts.returnFileAsText("directory")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 1" id="69d64ed1-77a0-430a-b1a1-eee66473f837"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id = ${#TestCase#patientId} and fa.mkb10_id = 128290661</con:query><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains"><con:configuration><token> &lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 2" id="4656ccd3-180e-445e-b452-e6b55005f43b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = '${#TestCase#patientId}'
AND fa.is_pdo IS TRUE 
AND fa.pdo_employee_id IS NOT NULL;</con:query><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.IS_PDO>t&lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="6ef2635f-61b8-4fc4-a809-b9a77e6d3c74" name="Not Contains"><con:configuration><token>rowNumber = "3"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3690</con:value></con:property><con:property><con:name>uid</con:name><con:value>20990901</con:value></con:property><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition update.json</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition2 update.json</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="1a86d4e4-2cf9-460e-a3cd-4c5880809a78" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#113779" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="d5876fec-d69f-46b9-a113-251cce1f24f8"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="a96087f7-0854-4d32-923d-5c0959bfe13a"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="cdf90f4c-3162-4bee-bbcc-3eeffb6b61f3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- для создания новых данных достаточно нужно заменить "${#TestCase#patientId}" на уникальное значение по неполному вхождению
 
--- создание пациента
INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked) VALUES(13${#TestCase#patientId}${#TestCase#uid}, ${#TestCase#patientId}, 125694882, '2019-11-18 14:20:53.000', 23, 0);


--- создание прикреплений
--- прикрепления с диагнозом из сообщения (не забыть указать). Обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290394, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128291909, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
--- прикрепление с другим диагнозом. Не обрабатывается.
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Create" id="5cb2c444-6da7-40ae-890c-8f942831d9a0"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.getPropertyValue("topic")
String file =scripts.returnFileAsText("directory_create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="42d8e403-1c90-4083-8294-d18c128fb5ab"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment create" id="baab90e2-3acb-4142-829e-b26e97c85856"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = '${#TestCase#patientId}'
AND fa.is_pdo IS TRUE 
AND fa.pdo_employee_id IS NOT NULL;</con:query><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.IS_PDO>t&lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="6ef2635f-61b8-4fc4-a809-b9a77e6d3c74" name="Not Contains"><con:configuration><token>rowNumber = "3"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="4f0029f5-4ac8-40bd-9e41-76a5afc76cc6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.getPropertyValue("topic")
String file =scripts.returnFileAsText("directory")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 1" id="dbe73451-bbc2-4c95-b9b9-4cdbd273f09c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id = ${#TestCase#patientId} and fa.mkb10_id = 128290661</con:query><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains"><con:configuration><token> &lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 2" id="4f7521cf-ecad-45ba-a11a-1a3f67167667"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = '${#TestCase#patientId}'
AND fa.is_pdo IS TRUE 
AND fa.pdo_employee_id IS NOT NULL;</con:query><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains"><con:configuration><token> &lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2314</con:value></con:property><con:property><con:name>uid</con:name><con:value>21864067</con:value></con:property><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition delete.json</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition2 delete.json</con:value></con:property><con:property><con:name>directory_create</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition create.json</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="035349c2-5512-45f0-9733-314093dc5395" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#164898" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="0e7017c8-6ed5-426e-b939-f7b41794298c"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="38475d1d-c50b-47cf-a804-98d4761787f9"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="c1e1a721-dccf-4e81-8a13-70f102940306"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- для создания новых данных достаточно нужно заменить "${#TestCase#patientId}" на уникальное значение по неполному вхождению
 
--- создание пациента
INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked) VALUES(13${#TestCase#patientId}${#TestCase#areaId}, ${#TestCase#patientId}, 125694882, '2019-11-18 14:20:53.000', 23, 0);


--- создание прикреплений
--- прикрепления с диагнозом из сообщения (не забыть указать). Обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290394, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128291909, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
--- прикрепление с другим диагнозом. Не обрабатывается.
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="76df1258-f13a-439a-aba6-9e4122192c22"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.getPropertyValue("topic")
String file =scripts.returnFileAsText("directory2")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="time_sleep" id="015766cd-4c1b-49b8-93df-620fc0353bbd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 1" id="60499b60-1349-49d6-a28a-3c07a62c3d94"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id = ${#TestCase#patientId} and fa.mkb10_id = 128290661</con:query><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains"><con:configuration><token> &lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 2" id="2432a0a2-c05a-4bbb-ab81-d5337dae87e7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = '${#TestCase#patientId}'
AND fa.is_pdo IS TRUE 
AND fa.pdo_employee_id IS NOT NULL;</con:query><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.IS_PDO>t&lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="aba5e25d-27d6-4b5a-a39e-2ba4c7b6eab5" name="Not Contains"><con:configuration><token>rowNumber = "3"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1130</con:value></con:property><con:property><con:name>areaId</con:name><con:value>948</con:value></con:property><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition2 create.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>672</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="5f259b6f-13b1-44ad-8867-d018ae8cedf8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#164899" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="55855334-1e7f-4bd0-90f0-f8c82b9754c9"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="de28a950-f5cc-46f3-892d-1da13846c982"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="46a817f2-2002-4c0e-b7cc-3a7bee40871a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- для создания новых данных достаточно нужно заменить "${#TestCase#patientId}" на уникальное значение по неполному вхождению
 
--- создание пациента
INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked) VALUES(13${#TestCase#patientId}${#TestCase#uid}, ${#TestCase#patientId}, 125694882, '2019-11-18 14:20:53.000', 23, 0);


--- создание прикреплений
--- прикрепления с диагнозом из сообщения (не забыть указать). Обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290394, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128291909, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
--- прикрепление с другим диагнозом. Не обрабатывается.
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="a1c1a75f-c5cd-483d-ae32-0777231647cb"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.getPropertyValue("topic")
String file =scripts.returnFileAsText("directory2")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="a12338ce-f318-430c-b107-8457186c15aa"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 1" id="e31f055d-f7d5-404c-9f32-69554beb9d6f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id = ${#TestCase#patientId} and fa.mkb10_id = 128290661</con:query><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains"><con:configuration><token> &lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 2" id="b64f01b8-c8df-4ad4-802f-11aa210fa0de"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = '${#TestCase#patientId}'
AND fa.is_pdo IS TRUE 
AND fa.pdo_employee_id IS NOT NULL;</con:query><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.IS_PDO>t&lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="6ef2635f-61b8-4fc4-a809-b9a77e6d3c74" name="Not Contains"><con:configuration><token>rowNumber = "3"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3449</con:value></con:property><con:property><con:name>uid</con:name><con:value>18765573</con:value></con:property><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition update.json</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition2 update.json</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="2c9d42d4-26fb-4de7-b6f2-e4f0127ea7c2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#164900" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="7f3f367a-5428-44b4-beba-92cce01af71a"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="5e3f746c-1fd7-4b99-9647-394ad1fc74a8"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="152a2417-a0bc-4286-a246-0bbd98255412"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- для создания новых данных достаточно нужно заменить "${#TestCase#patientId}" на уникальное значение по неполному вхождению
 
--- создание пациента
INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked) VALUES(13${#TestCase#patientId}${#TestCase#uid}, ${#TestCase#patientId}, 125694882, '2019-11-18 14:20:53.000', 23, 0);


--- создание прикреплений
--- прикрепления с диагнозом из сообщения (не забыть указать). Обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290394, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128291909, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);
--- прикрепление с другим диагнозом. Не обрабатывается.
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Create" id="be63e7f8-87fd-4714-8ee7-32ca9356398f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.getPropertyValue("topic")
String file =scripts.returnFileAsText("directory_create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="f1388616-60f0-4a1f-afe6-284a5c7c8b29"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment create" id="cd8fe645-b0a6-4709-942d-4e4c2a1b142b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = '${#TestCase#patientId}'
AND fa.is_pdo IS TRUE 
AND fa.pdo_employee_id IS NOT NULL;</con:query><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.IS_PDO>t&lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad727b07-7246-4162-8289-02f461828d9c" name="Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="6ef2635f-61b8-4fc4-a809-b9a77e6d3c74" name="Not Contains"><con:configuration><token>rowNumber = "3"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="63da122b-b4ce-4271-bfab-4f1462ff3d8a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.getPropertyValue("topic")
String file =scripts.returnFileAsText("directory2")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 1" id="dd59a87b-f3d6-4a7c-b79a-cec0a8484e66"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id = ${#TestCase#patientId} and fa.mkb10_id = 128290661</con:query><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains"><con:configuration><token> &lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment 2" id="771310e1-aedc-4d75-bb54-d2577c163e80"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = '${#TestCase#patientId}'
AND fa.is_pdo IS TRUE 
AND fa.pdo_employee_id IS NOT NULL;</con:query><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains"><con:configuration><token> &lt;/F_ATTACHMENT.IS_PDO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cc912b4a-8493-47a9-b175-fe645b7e56ca" name="Not Contains 2"><con:configuration><token>&lt;/F_ATTACHMENT.PDO_EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>8428</con:value></con:property><con:property><con:name>uid</con:name><con:value>20937708</con:value></con:property><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition delete.json</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition2 delete.json</con:value></con:property><con:property><con:name>directory_create</con:name><con:value>\А_ЕСУ_05\t_dispensary_observation_programComposition2 create.json</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="cde9bd5b-c9cc-43cb-99ee-887892dc90a5" name="А_ЕСУ_06  t_discharge_epicrisis_universalComposition"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="07413b11-11b6-408c-91d8-4ed1cba4d479" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="98062900-0557-4f8e-affa-6e93336c2e29"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="4fbefd4b-8db6-4d9a-86a5-9352dbebc379"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="d4ffdfda-fe83-4791-951c-cda40e5c625c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="b477c43a-dec4-4264-a19c-88a8b57a4542"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_discharge_epicrisis_universalComposition\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>-7677759</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="2bd823fc-c574-41e2-b494-40df16ad93b7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="ba7e106e-feb4-402c-9ea3-aceca8588556"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="151711a0-61bb-439d-953e-7a2ec6ed6489"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="1b520cab-320e-4167-a921-42445c2c0116"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="f0a270f9-3136-4418-b192-787904078e7f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_discharge_epicrisis_universalComposition\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>330</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_discharge_epicrisis_universalComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="02cea2dd-eecf-45c7-89b5-d902eae1644e" name="А_ЕСУ_06  t_discharge_epicrisis_universal_kisComposition"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5450bc04-6e25-4523-b981-10cfc6a77201" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="kis.v1 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="ddc37b8b-85b3-4cbd-9a95-47dafdecffbe"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="3475de29-f26a-4f26-8ac1-aba3d1bc9141"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, '2020-07-06 00:00:00.000', 173933129, 204, true);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="f1405e64-1bc1-4b77-9ac1-0bed1b94b918"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="0ec41e3c-fbf1-45fb-bc29-f36a8a45daa6"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check f_document" id="4f6349cb-0099-47b8-a02b-388bb8ce373c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_document fd where fd.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d60e60e3-770a-41c6-a82e-809e40363c1b" name="Создана запись"><con:configuration><token><![CDATA[            <F_DOCUMENT.UID>ed801f80-9dc3-4351-9b26-7611335${#TestCase#patientId}</F_DOCUMENT.UID>
            <F_DOCUMENT.PATIENT_ID>${#TestCase#patientId}</F_DOCUMENT.PATIENT_ID>
            <F_DOCUMENT.SIGNED_DATE>2021-12-02 12:01:14.547672</F_DOCUMENT.SIGNED_DATE>
            <F_DOCUMENT.TYPE_ID>4</F_DOCUMENT.TYPE_ID>
            <F_DOCUMENT.DEPRECATED>f</F_DOCUMENT.DEPRECATED>
            <F_DOCUMENT.DEPRECATED_DATE/>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_task" id="7c31837b-8cbc-4ea4-a7b5-cac00269548f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task where patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d60e60e3-770a-41c6-a82e-809e40363c1b" name="Создана таска"><con:configuration><token><![CDATA[            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.TYPE_ID>4</F_TASK.TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="e289af4d-e78b-40bb-9fa4-823d79a283c6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Check f_document</con:sourceStep><con:sourcePath>//Row[1]/F_DOCUMENT.ID</con:sourcePath><con:targetType>documentId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>taskId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Check f_task</con:sourceStep><con:sourcePath>//Row[1]/F_TASK.ID</con:sourcePath><con:targetType>taskId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Check f_document_mkb10" id="d3159aef-becb-4361-97dc-0352d7b6d352"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_document_mkb10 where document_id = ${#TestCase#documentId}</con:query><con:assertion type="Simple Contains" id="d60e60e3-770a-41c6-a82e-809e40363c1b" name="Создан диагноз 1"><con:configuration><token>            &lt;F_DOCUMENT_MKB10.MKB10_ID>128286830&lt;/F_DOCUMENT_MKB10.MKB10_ID>
            &lt;F_DOCUMENT_MKB10.STATUS_ID>0&lt;/F_DOCUMENT_MKB10.STATUS_ID>
            &lt;F_DOCUMENT_MKB10.TASK_ID/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="d02326cf-17f6-4509-b533-e54957768702" name="Не создан четвертый диагноз"><con:configuration><token>&lt;Row rowNumber="4"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a0a4eaeb-dc72-4f96-a373-4fa4fdc0625d" name="Создан диагноз 2"><con:configuration><token><![CDATA[            <F_DOCUMENT_MKB10.MKB10_ID>128286824</F_DOCUMENT_MKB10.MKB10_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.TASK_ID>${#TestCase#taskId}</F_DOCUMENT_MKB10.TASK_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a0a4eaeb-dc72-4f96-a373-4fa4fdc0625d" name="Создан диагноз 3"><con:configuration><token><![CDATA[            <F_DOCUMENT_MKB10.MKB10_ID>128286429</F_DOCUMENT_MKB10.MKB10_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.TASK_ID>${#TestCase#taskId}</F_DOCUMENT_MKB10.TASK_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_discharge_epicrisis_universal_kisComposition\kis.v1\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>8488</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property><con:property><con:name>documentId</con:name><con:value>22683880</con:value></con:property><con:property><con:name>taskId</con:name><con:value>6879311</con:value></con:property></con:properties></con:testCase><con:testCase id="8c1172ca-f62e-40ed-88d9-d2280075abe5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="kis.v1 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="8d64fa41-591e-44b8-a9a6-50d9bf6123e1"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="93fc271f-273f-4a29-9a16-b042df3bd5f2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', '2003-08-29 10:21:54.000', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, '2020-07-06 00:00:00.000', 173933129, 204, true);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="6151678b-a438-43d6-9af6-dd31412081db"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="6573e5d3-2ec7-4efe-be37-5536b4000cc7"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check f_document" id="32da3774-bb9a-4d7e-a67e-d26428aa44bb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_document fd where fd.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d60e60e3-770a-41c6-a82e-809e40363c1b" name="Создана запись"><con:configuration><token><![CDATA[            <F_DOCUMENT.UID>ed801f80-9dc3-4351-9b26-7611335${#TestCase#patientId}</F_DOCUMENT.UID>
            <F_DOCUMENT.PATIENT_ID>${#TestCase#patientId}</F_DOCUMENT.PATIENT_ID>
            <F_DOCUMENT.SIGNED_DATE>2021-12-02 12:01:14.547672</F_DOCUMENT.SIGNED_DATE>
            <F_DOCUMENT.TYPE_ID>4</F_DOCUMENT.TYPE_ID>
            <F_DOCUMENT.DEPRECATED>f</F_DOCUMENT.DEPRECATED>
            <F_DOCUMENT.DEPRECATED_DATE/>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_task" id="ac14e007-08dc-4f6d-acdc-db15adc8833f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task where patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d60e60e3-770a-41c6-a82e-809e40363c1b" name="Создана таска"><con:configuration><token><![CDATA[            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.TYPE_ID>4</F_TASK.TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="d3806af4-0d92-4815-85be-c12ec11597fb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>documentId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Check f_document</con:sourceStep><con:sourcePath>//Row[1]/F_DOCUMENT.ID</con:sourcePath><con:targetType>documentId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>taskId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Check f_task</con:sourceStep><con:sourcePath>//Row[1]/F_TASK.ID</con:sourcePath><con:targetType>taskId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Check f_document_mkb10" id="290d2e93-0b66-4a43-be1e-bf303f6d4010"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_document_mkb10 where document_id = ${#TestCase#documentId}</con:query><con:assertion type="Simple Contains" id="d60e60e3-770a-41c6-a82e-809e40363c1b" name="Создан диагноз 1"><con:configuration><token>            &lt;F_DOCUMENT_MKB10.MKB10_ID>128286830&lt;/F_DOCUMENT_MKB10.MKB10_ID>
            &lt;F_DOCUMENT_MKB10.STATUS_ID>0&lt;/F_DOCUMENT_MKB10.STATUS_ID>
            &lt;F_DOCUMENT_MKB10.TASK_ID/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="d02326cf-17f6-4509-b533-e54957768702" name="Не создан четвертый диагноз"><con:configuration><token>&lt;Row rowNumber="4"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a0a4eaeb-dc72-4f96-a373-4fa4fdc0625d" name="Создан диагноз 2"><con:configuration><token><![CDATA[            <F_DOCUMENT_MKB10.MKB10_ID>128286824</F_DOCUMENT_MKB10.MKB10_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.TASK_ID>${#TestCase#taskId}</F_DOCUMENT_MKB10.TASK_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a0a4eaeb-dc72-4f96-a373-4fa4fdc0625d" name="Создан диагноз 3"><con:configuration><token><![CDATA[            <F_DOCUMENT_MKB10.MKB10_ID>128286429</F_DOCUMENT_MKB10.MKB10_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.TASK_ID>${#TestCase#taskId}</F_DOCUMENT_MKB10.TASK_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_discharge_epicrisis_universal_kisComposition\kis.v1\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>2712</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property><con:property><con:name>documentId</con:name><con:value>22683852</con:value></con:property><con:property><con:name>taskId</con:name><con:value>6879306</con:value></con:property></con:properties></con:testCase><con:testCase id="56981da1-b4e2-4a8a-91c5-57590ccbc2ba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="kis.v2 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="f92e5f8a-730d-4254-8b2b-7075ab4462c6"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="f842f10d-2c90-424a-bcef-10a41562478d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="298c6bb4-cf5b-4da3-9586-05c21f2676a1"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="412878a2-30ee-4cfc-95f2-b127a125c6e8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_discharge_epicrisis_universal_kisComposition\kis.v2\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>-7677756</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="8943149a-588f-4e49-829f-6b2a0686dd55" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="kis.v2 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="b9d54a45-568a-4495-89e5-210c009fdfc3"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="1b538531-22c8-43c1-ae0d-b791557d3e2e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="4955f152-b8d3-40bd-ac13-352ded4da00d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="e75c62de-0af3-4281-bf7e-d22a5d3da6f1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_discharge_epicrisis_universal_kisComposition\kis.v2\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>-7677756</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_discharge_epicrisis_universal_kisComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="db4c26d7-d1fa-4a3e-b070-f4e20b88ca1d" name="А_ЕСУ_06 t_discharge_epicrisis_externalComposition"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="438af815-bc6e-473e-827e-a521db69eacd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="f9eb777b-243a-43fe-b66b-05f2ae2ee3c2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="111b7764-0608-49c7-ae43-a70aa879533f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="1d8c2253-cf53-48c4-a07e-b4d1d704bb5c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="49c99b8c-d1d3-436b-8993-6aa52189b6b3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="83bbcaa6-1993-433a-9de0-c186ecf77b14"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b0b356a0-43c3-4356-b164-21febf410cb6" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

//Парсим xml
def resp = new XmlHolder(messageExchange.responseContentAsXml)
log.info resp

//Получаем результат из ответа
Integer result_task = new Integer(resp.getNodeValue('//Row[1]/F_TASK.ID'))
log.info result_task
Integer result_mkb10 = new Integer(resp.getNodeValue('//Row[1]/F_DOCUMENT_MKB10.TASK_ID'))
log.info result_mkb10

//Проверяем
assert result_task == result_mkb10</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_obstetric_epicrisis_externalComposition\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>417</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="1078ddc7-16c9-48aa-b9e9-27a5e4d86e0c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="c74534ed-3855-435b-952b-16408380803e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="0f9a2a28-8d1f-4300-82b0-0e47e5358223"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="ed8ad442-d017-4e96-9df9-fd406f640ba7"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="41eba1fb-d8ff-47ad-8d61-c736f4cc2da0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_discharge_epicrisis_externalComposition\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>418</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_discharge_epicrisis_externalComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="b15d1378-4b23-4bc7-a2ec-39cd57dad869" name="А_ЕСУ_06 t_obstetric_epicrisis_externalComposition"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="30356bac-cc83-4a28-9ed9-9c7155d8d745" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="e1af917e-1f35-40d8-a622-14c82e1cedeb"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="8220b54b-c903-48d9-813e-13019d20df06"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="1f37e2be-f6b7-4a66-92df-98265daf9f89"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="cc5c1a33-59e3-4ad5-89e4-4345716a61cb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_obstetric_epicrisis_externalComposition\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>390</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="5c531df5-675e-4fac-bda5-9fd39d498ce6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="8d2abbca-3a23-468c-9b9f-b20eb73dd52d"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="c1069558-d41a-4390-b6fa-302b12bdb2fd"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="4f48d668-356a-43fd-9abc-710df74d1191"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="7a5de35a-4a70-4485-8fa1-1119b7ac9e25"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_obstetric_epicrisis_externalComposition\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>391</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_obstetric_epicrisis_externalComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="f05ae7af-d901-4cc4-9c8e-8923d6f51d66" name="А_ЕСУ_06 t_obstetric_epicrisisComposition"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f130d81a-c92c-45d1-8cd5-5402aa3d5f33" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="3a2918b4-1464-4219-84b7-e9ec07c591fa"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="4900ea7c-2c41-4d52-9746-2ce8dd38f1ca"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5be978ce-ee6d-4399-87b9-b33ad06a0e47"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="49911873-c28e-4c21-86a1-fb688a637dbf"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_obstetric_epicrisisComposition\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>334</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="f546d290-60f4-4830-881d-ccf7561c7013" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="8d78f8f9-8b22-4bf8-aa6e-4a90166c2f6f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="ca59752b-e7e2-4fb0-813a-7cfeba475144"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="320f3e01-3021-4965-a392-340fd3d1be21"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="b53ab459-8c32-4b69-a672-b6740c077c5c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_obstetric_epicrisisComposition\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>335</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_obstetric_epicrisisComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="ebf4ae35-a47d-4ba1-bb74-153372058353" name="А_ЕСУ_06  t_oncology_epicrisis_externalComposition"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a4eb3748-0e71-4c05-b692-6da767a9af21" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v1 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="65ae8022-a182-4bad-81f4-92552cd0f19f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="c64dbd8c-0e7d-4225-8d46-c8d700d831dc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="bd0a836d-b696-463e-8883-76afb23dd33f"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="dea87300-44a3-4771-a6c6-ef023fdf0abc"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisis_externalComposition\t_oncology_epicrisis_external.v1\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>340</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="eb35ab2b-8dcd-4e85-80a1-9a4b6491fddd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v1 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="5122b19b-11a3-40d8-a853-4ffd282c7093"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="f8874fcd-9942-41bd-9281-abd81e8655b4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="ee4af75b-eb38-4c8e-b3df-bc970c762112"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="25102bd9-e222-4e97-9c18-60fe07214131"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisis_externalComposition\t_oncology_epicrisis_external.v1\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>342</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="654c83e5-2752-4b06-8a36-032d3b47e2ca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v2 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="b8600dc1-f405-483e-8ee5-6481a7bf7e0d"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="16372d60-e9f3-40cb-8171-7347422c5765"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="9a8edb42-e7f7-46d6-82e2-d7959a3318c3"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="1fa340c0-4085-42ba-96b4-ae66935444b0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisis_externalComposition\t_oncology_epicrisis_external.v2\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>343</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="0fc0dda0-e28e-49f2-ba6b-b514f8d63d02" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v2 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="948ea2e1-02e2-419b-8eb3-e58dd1a559e5"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="90532766-ca10-4302-8bfd-255d5eaabac1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="d1828c12-9297-4862-ba07-3c71530405c1"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="ae3d2ef1-5f72-4395-a5ec-e673565e5bf4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisis_externalComposition\t_oncology_epicrisis_external.v2\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>344</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="5cb7f914-5308-4885-93b6-9eeac168f721" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="0366ccd7-99fd-4874-bf93-90fd3d73dc87"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="c1290903-f842-47b4-9653-b301d1bf1881"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5282eec6-ba5b-48bc-ac4b-1843f03533ae"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="b7a27203-7869-484a-892e-18de073b6c4b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisis_externalComposition\t_oncology_epicrisis_external.v3\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>346</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="6edd2a90-a9c0-4376-82d0-c132fc044af7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="e020d3d6-8235-46ee-aa49-09bf6a7fa064"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="e2429edf-32d7-4eaf-99a7-41742657df80"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="b5128f4d-b4c2-417d-97b0-ea12dc5e3197"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="1062292d-253b-47fa-820d-86d161952380"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisis_externalComposition\t_oncology_epicrisis_external.v3\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>347</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="08fdb7f4-ffb8-4b04-bcbb-bd0ee46f3030" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="c3d8c2e6-8655-4e2e-b9a2-333f9c51b6c7"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="962d1288-f720-46d7-97d6-a317c7cc029e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="97290cce-a7de-4214-bde9-ad31b52223a3"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="6f9f3c85-a13a-40fc-a3c4-62c608afb05d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisis_externalComposition\t_oncology_epicrisis_external.v4\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>348</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="c5871c2f-e3f8-4edc-8e6d-9f1b41013eee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="e921a9e2-c98e-401b-bc9a-a1ecd2dbfac5"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="c880675d-164f-4e46-9ad3-a144a5652d6c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="bc88b1a3-2804-4f1e-99c2-22efad34d31c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="a4926fc8-a059-4474-9b18-45a2ff47b65d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisis_externalComposition\t_oncology_epicrisis_external.v4\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>349</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_oncology_epicrisis_externalComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="0b7d05dd-e026-4fdf-b1d5-683c22bc3703" name="А_ЕСУ_06  t_oncology_epicrisisComposition"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ab70a234-0ec7-4b8d-b936-f70da24ad2e7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v1 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="d55cca92-0f3d-41e0-a065-5246457b38e5"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="25abe758-1895-4174-bbab-a44e67ecfff6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="da4c1541-718d-4081-bc76-f85c4ec0d5a8"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="c5a0812a-17b4-4493-ae5f-3f9dc96cfcf5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisisComposition\t_oncology_epicrisis.v1\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>350</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="6243eecc-916e-4a5b-8b8b-e152c102692f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v1 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="3313acd5-3388-4251-8c9f-b8921ad81666"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="49bb8cb8-4abb-42ec-92fc-8aba0dcb74ed"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="8f7b54b7-a290-483b-b881-b71d9a064a86"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="d278b229-0274-4362-83b4-a96d7df4688e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisisComposition\t_oncology_epicrisis.v1\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>351</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="6cb14483-d609-4983-b112-6507c481cbaa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v2 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="ef910442-0a57-4ee8-9f88-a6b309462453"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="1390c795-5261-42cd-875d-5b14f6f0ed52"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="265e06f9-00bc-4ca0-83c3-6db814c5553c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="5b393fc2-e7d0-42f9-ba8d-ba417bed8470"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisisComposition\t_oncology_epicrisis.v2\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>352</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="59e3d140-2f98-4115-81ba-6c2eceea1945" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v2 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="1d654f25-9c6d-4510-95a6-00b1fbd9aae9"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="e0c344a1-c0f9-432c-b984-09e008579028"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="9a91319a-1952-47ad-b03e-cb7ce7344374"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="576f9958-ee7c-408c-b975-f0f85515b786"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisisComposition\t_oncology_epicrisis.v2\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>353</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="330e283f-2902-4509-88b6-b51d0c54e85c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="98f7961f-0069-4742-9a70-7bcad12924dd"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="7d403534-ba17-4783-9033-1649e4b9e265"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="df4984b6-d090-4125-8ae5-7153085d969c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="2ab6eb8b-9ff5-4d99-9b67-89c91873fab5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisisComposition\t_oncology_epicrisis.v3\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>354</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="e9b50aa4-81f1-4af4-a671-bc2076be731b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="c48718d4-1446-48e9-a8fe-7f552b930aa3"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="208ff05d-9d80-43fb-8620-a814d0022c40"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="ac13815b-2e33-4aa4-8cc5-df5b556c2389"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="58c234a7-8d35-4b3b-b3ed-887fc16cc323"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisisComposition\t_oncology_epicrisis.v3\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>355</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="4022b3bd-70d6-4639-b9ff-90bec6b5e70d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4 create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="3ab98ecf-142b-42bc-9304-0d028cae0f3d"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="82a646f1-7003-447f-89d8-8ec011593563"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="9e2b4acf-9337-4e28-b39c-7f5a6685c77d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="6613fdb5-4388-497b-998b-fad68215c3a9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisisComposition\t_oncology_epicrisis.v4\create.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>356</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="951cdf1e-6894-4261-a412-48262cc20452" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4 update" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="93dd0d55-84f4-4956-bf0a-83e970fc8769"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())

def today=LocalDate.now()
def minus18YearsDate=today.minusYears(18)
def birthDate = minus18YearsDate.minusDays(1)
log.info birthDate

sql.execute("insert into f_patient (id, changed_date, birth_date) values ("+patientId+", current_timestamp, '"+birthDate+"')")</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение" id="9fe27f38-acdb-4b06-845a-1bd2c463d59a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="b8f311b0-49ad-4967-82ee-e9438b9dd47f"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="7d68e1bf-fb64-4182-8cc9-f6fbbbe0c9e6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT *
from f_task ft 
join f_document_mkb10 fdm on ft.id = fdm.task_id
join f_document fd on fdm.document_id = fd.id
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7bf3dad6-4470-4e2d-9889-d45b21ec6d10" name="Contains"><con:configuration><token>&lt;F_DOCUMENT.TYPE_ID>4&lt;/F_DOCUMENT.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b9503f0-a0d4-404c-9cab-e846506c2bc5"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="64e0aa38-d2ff-4dca-a8c6-24e88db2c8ae" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286824&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d80c72b-c5bb-48ec-9f98-d6c8bde1fb29" name="Contains 2"><con:configuration><token>&lt;F_DOCUMENT_MKB10.MKB10_ID>128286429&lt;/F_DOCUMENT_MKB10.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_06\t_oncology_epicrisisComposition\t_oncology_epicrisis.v4\update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>358</con:value></con:property><con:property><con:name>countDiagnosis</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_discharge_epicrisis_externalComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="5989058b-eee9-4b99-806c-7485ae266868" name="А_ЕСУ_07 - Обработка СИМИ-триггера на подписание формы 030у"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="d5be38d0-4b2a-45e8-ac9b-7a09f7b3b12f" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113346" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate uid" id="6a8fd86b-fdce-49fe-8028-af8b9ba07a5e"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="76c88097-366f-4ad0-970a-107ac5b40d25"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="3c99768c-0cf0-42ae-a018-12485b85ed3c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"1"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \""""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check" id="0953a1f7-2422-4ce1-9879-6ccf8da66152"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.DN_DOCUMENT_UID>${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.DN_DOCUMENT_UID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="776641c4-ce37-4b7e-8f46-46633bb8f474" name="Contains"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>1${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ec12e7b0-9309-44bb-b167-c3bdc3e1be32" name="Contains 2"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.SIMI_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="269c4bd6-5010-4677-a3c1-2fadb5cac655" name="Not Contains"><con:configuration><token>&lt;/C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>36</con:value></con:property><con:property><con:name>uid</con:name><con:value>8953</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-01-19T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-01-19</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a2beff6f-3048-46fa-80d0-63467aa0acaf" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113361" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="f33b4fb4-f9d9-4e2d-b50e-b90099a60cfb"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="9f011549-b357-4ee8-9869-257b2dd2a2a4"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="cafd756c-6ff4-4c3b-ae30-646bbc13c0c4"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="8480ec6e-ebd5-449d-9dad-c20348a59960"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач


INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);

--- создание прикреплений и событий
--- прикрепление с переданным uid. Будет удалено алгоритмом
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false);
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#uid}', '10503947963', 128289228, '716', 125676809, NULL, 'Удалено.', false);

--- event с другим uid и более свежей датой. Не будет удален алгоритмом
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-15 15:41:27.473', '2${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false);

--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:26.473', '3${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false);

--- создание c_dn_justification_check

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', NULL, '2022-01-18 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="aa7a5927-53e3-49cd-b9e3-d6915bbeb4df"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check" id="2ebd33c1-b249-4aca-bb8b-1fe78e16a4f0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.SIMI_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6ebd45ed-3c13-4022-b1f6-7095891f3770" name="Contains"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>2${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="23963a7a-9444-46f8-b569-d6c91a371f2e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#uid}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a8136aee-4bb4-4398-a7c6-3f7e2804a621" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>26</con:value></con:property><con:property><con:name>uid</con:name><con:value>2578</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-01-19T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-01-19</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="5f26f97c-b319-4607-849f-018370d607cf" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113362" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="c0548845-e6b9-43d0-9f9b-8fe998ff1c5a"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="9b0cde8b-e09d-4173-a387-c2dfd39a04f2"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="f28fb766-f646-4ff1-b69f-4855a8eebd42"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="895c8033-51ec-45d5-830e-7bc2b04e52c2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#uid}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, NULL, 'Имя отчество', 'вервые', 'тест2');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="25e71458-47b2-4a21-936e-c3f8ebc5fd88"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 1" id="d7cdbcc1-be49-4333-b073-ebffcc1c774a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where id = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>13425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>3425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>430</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-01-01</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10503947964</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>128289228</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>716</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>125676809</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>13425</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>3425</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10503947964</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10503947964&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="322cd366-8829-440b-aa15-1d5eb98b499b" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Имя отчество&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 3"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>вервые&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>тест2&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="7ab8ae9a-4409-4438-966e-89e8cdc52cbb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8dd53226-7b31-4d29-9837-9daf6e4e9b06" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="72e27391-5848-45fd-8702-4fc8853ef990"><con:description>Проверить отправку сообщения в топик DnForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>29</con:value></con:property><con:property><con:name>uid</con:name><con:value>492014401</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-01-19T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-01-19</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a8d202ba-42a2-468e-b880-bb68d90d1da0" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113363" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="f725b295-2522-4014-a6db-4d063b36e960"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="820b4f88-6db5-4a8b-82d9-a5b8cd70e3aa"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://10.2.172.41:5432/dn?stringtype=unspecified&amp;user=dn&amp;passowd=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="52672ab8-290d-48ef-9ed7-f15c689ece43"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="c9dd05ef-5129-4427-9b8f-e3b4df33645b"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="f44658fc-cda1-4e7d-ab65-578e02d6072c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://10.2.172.41:5432/dn?stringtype=unspecified&amp;user=dn&amp;passowd=dn</con:connectionString><con:connectionProperties/><con:query>--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received, think_received) VALUES('1${#TestCase#uid}', '1${#TestCase#uid}', false, false);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="93c57589-a867-48c8-b7a4-91bf3f63512a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"3"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить грейлог" id="59f513d7-d321-49dc-947e-2f56537a0b3d"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1791</con:value></con:property><con:property><con:name>uid</con:name><con:value>6674</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="b4cbacc9-2ea0-41df-a5f2-5361efdfb2cd" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#135910" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="6f93285f-a852-4f13-833e-0abd68dbf5bb"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="2a3ff87e-7661-4751-973f-de1e74b1cee5"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="e3d0c1c1-dc61-4d74-bfb3-97a1dd79c6ae"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Удаляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#uid}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество2', 'Повторно2', 'тест2');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '21${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="1bf1abca-faa0-42fa-8f1e-e830863abf07"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="087cf666-3796-4d54-b927-a5861ea8b47c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="14419e05-f5ea-4de2-8bde-3d17a790ed8a" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="febdf101-9c61-470e-80bb-6e482e913c03"><con:description>Проверить отправку сообщения в топик DnForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>30</con:value></con:property><con:property><con:name>uid</con:name><con:value>401</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="c16d4395-adbf-41bc-91fb-11d5ae0066ae" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#135911" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="958fd084-bd00-47ed-8124-46f895ada906"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="b2e904bb-2f6f-460d-89b1-505fdb3c8622"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Удаляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#uid}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество2', 'Повторно2', 'тест2');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '21${#TestCase#patientId}', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="79647072-33a5-4c3f-a1a2-99178922ae07"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="4f62f8ae-8e47-411d-a14c-e50692bdcb33"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="243b90ac-524d-436b-9303-a6bca88ec07b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="14419e05-f5ea-4de2-8bde-3d17a790ed8a" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="b8da1cbc-83cb-4bbd-a7a4-45cd42890dde"><con:description>Проверить отправку сообщения в топик DnForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>31</con:value></con:property><con:property><con:name>uid</con:name><con:value>1448</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="75816630-d237-4c28-87e2-0b6933dcad81" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#135912" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="468e5908-4cbc-431b-85c7-3598f5686ef4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="29f1ef91-f8fd-4621-92b6-f99b523d2b43"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="6fff0edd-61cc-4e18-9aa5-bebcb564a925"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#uid}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, NULL, 'Имя отчество', 'вервые', 'тест2');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT
INSERT INTO f_task (id, "type", patient_id, opened, closed, assignee, priority, deleted) VALUES(1${#TestCase#patientId}, 'DIGITIZED_DOCUMENT', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, 30, false);

INSERT INTO f_document_digitized_task (id, uid) VALUES(1${#TestCase#patientId}, '2${#TestCase#uid}');

INSERT INTO f_doc_dig_diagnosis_processing (id, doc_task_id, mkb10_id, status) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, 128286429, 'NEW');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="dd4e9627-fdaa-47c5-b91e-040f5adcb300"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 1" id="d0a5b1c8-0cec-483b-9323-15c3a22aa067"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where id = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>13425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>3425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>430</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-01-01</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10503947964</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>128289228</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>716</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>125676809</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>13425</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>3425</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10503947964</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10503947964&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="322cd366-8829-440b-aa15-1d5eb98b499b" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Имя отчество&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 3"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>вервые&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>тест2&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="ef43239e-05ed-4694-9f4f-406000587997"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8dd53226-7b31-4d29-9837-9daf6e4e9b06" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="d233e139-1ef1-47b3-b554-76fe449874ec"><con:description>Проверить отправку сообщения в топик DnForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3215081</con:value></con:property><con:property><con:name>uid</con:name><con:value>5532</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="269d8cf9-0a31-48e9-b90d-1c320af86900" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#135913" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="3c8ca526-8303-4b9e-b980-e5bb2364dd7b"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="79092b62-deab-4210-adff-a0c47cba538f"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="853d5c04-88e0-45b5-b352-b542f19c42eb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#uid}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, NULL, 'Имя отчество', 'вервые', 'тест2');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');

--- создание документа HOSPITAL_DISCHARGE_DOCUMENT
INSERT INTO f_task (id, "type", patient_id, opened, closed, assignee, priority, deleted) VALUES(1${#TestCase#patientId}, 'HOSPITAL_DISCHARGE_DOCUMENT', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, 30, false);

INSERT INTO f_document_hospital_discharge_task (id, uid) VALUES(1${#TestCase#patientId}, '2${#TestCase#uid}');

INSERT INTO f_doc_hosp_dis_diagnosis_processing (id, doc_task_id, mkb10_id, status) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, 128286429, 'NEW');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="c4b8417d-c403-406e-8f91-d25c255baddd"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 1" id="f0992acc-d87e-4464-b437-cbbb88179702"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where id = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>13425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>3425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>430</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-01-01</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10503947964</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>128289228</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>716</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>125676809</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>13425</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>3425</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10503947964</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10503947964&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="322cd366-8829-440b-aa15-1d5eb98b499b" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Имя отчество&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 3"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>вервые&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>тест2&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="3c6d2871-ef66-4598-afa7-9c5b97284845"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8dd53226-7b31-4d29-9837-9daf6e4e9b06" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="fa8a2ccc-509f-46fd-a7d5-e3d0618c60bd"><con:description>Проверить отправку сообщения в топик DnForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3215111</con:value></con:property><con:property><con:name>uid</con:name><con:value>8297</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="829b87aa-43c1-4377-89b1-6eb3b34e57bb" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#135914" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="1e049573-23da-4686-a951-d3dd60d9cbf9"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="0893b971-2d44-431b-ac03-79cd421f96ee"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="e4179b87-5fd0-4990-acbd-1867e2c050ac"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента для задач

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, 23, '2003-08-29 10:21:54.000', '2002-10-28', NULL);


--- создание прикреплений и событий
--- прикрепление с переданным uid. Обновляет эту запись
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
--- не забыть указать тот же uid что и в сообщении
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:26.473', '1${#TestCase#uid}', '10503947963', 128289228, '716', 125676809, NULL, 'Удаляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');


--- event с другим uid и более старой датой. Забирает данные из этой записи
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#patientId}, 1${#TestCase#patientId}, '2021-05-14 15:41:25.473', '2${#TestCase#patientId}', '10503947964', 128289228, '716', 125676809, NULL, 'Исходные данные.', true, NULL, 'Имя отчество', 'вервые', 'тест2');


--- другое прикрепление с другим uid
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, 430, '2018-01-01', NULL, 10503947963, 128289228, '716', 125676809, false, NULL, NULL, 'Фамилия Имя Отчество', 'Повторно', 'тест');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#patientId}, 3${#TestCase#patientId}, '2021-05-14 15:41:24.473', '2c932b2e-f426-438d-9395-9aadd9fe1b41', '10503947963', 128289228, '716', 125676809, NULL, 'Оставляет.', false, NULL, 'Имя отчество', 'вервые', 'тест');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#patientId}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'delete', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');

--- создание документа PREVENTIVE_EXAMINATION_DOCUMENT
INSERT INTO f_task (id, "type", patient_id, opened, closed, assignee, priority, deleted) VALUES(1${#TestCase#patientId}, 'PREVENTIVE_EXAMINATION_DOCUMENT', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, 30, false);

INSERT INTO f_document_preventive_examination_task (id, uid) VALUES(1${#TestCase#patientId}, '2${#TestCase#uid}');

INSERT INTO f_doc_prev_exam_diagnosis_processing (id, doc_task_id, mkb10_id, status) VALUES(1${#TestCase#patientId}, 1${#TestCase#patientId}, 128286429, 'NEW');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="4edbbe92-c97c-4b3f-9213-508372bf085a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Step 1" id="08d99e7a-5e4a-446a-8efe-f66ee533059f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where id = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:path><con:element>@rowNumber</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.ID[1]</con:path><con:element>F_ATTACHMENT.ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>13425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.PATIENT_ID[1]</con:path><con:element>F_ATTACHMENT.PATIENT_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>false</con:enabled><con:expectedValue>3425</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.GROUP_ID[1]</con:path><con:element>F_ATTACHMENT.GROUP_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>430</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.OPENED[1]</con:path><con:element>F_ATTACHMENT.OPENED</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>2018-01-01</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.CLOSED[1]</con:path><con:element>F_ATTACHMENT.CLOSED</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.EMPLOYEE_ID[1]</con:path><con:element>F_ATTACHMENT.EMPLOYEE_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>10503947964</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MKB10_ID[1]</con:path><con:element>F_ATTACHMENT.MKB10_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>128289228</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.SPECIALITY_CODE[1]</con:path><con:element>F_ATTACHMENT.SPECIALITY_CODE</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>716</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID[1]</con:path><con:element>F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>125676809</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]/Row[1]/F_ATTACHMENT.NO_DOCTOR[1]</con:path><con:element>F_ATTACHMENT.NO_DOCTOR</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>t</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="0">
      <Row rowNumber="1">
         <F_ATTACHMENT.ID>13425</F_ATTACHMENT.ID>
         <F_ATTACHMENT.PATIENT_ID>3425</F_ATTACHMENT.PATIENT_ID>
         <F_ATTACHMENT.GROUP_ID>430</F_ATTACHMENT.GROUP_ID>
         <F_ATTACHMENT.OPENED>2018-01-01</F_ATTACHMENT.OPENED>
         <F_ATTACHMENT.CLOSED/>
         <F_ATTACHMENT.EMPLOYEE_ID>10503947964</F_ATTACHMENT.EMPLOYEE_ID>
         <F_ATTACHMENT.MKB10_ID>128289228</F_ATTACHMENT.MKB10_ID>
         <F_ATTACHMENT.SPECIALITY_CODE>716</F_ATTACHMENT.SPECIALITY_CODE>
         <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676809</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
         <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.EMPLOYEE_ID>10503947964&lt;/F_ATTACHMENT.EMPLOYEE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="322cd366-8829-440b-aa15-1d5eb98b499b" name="Contains 1"><con:configuration><token>&lt;F_ATTACHMENT.NO_DOCTOR>t&lt;/F_ATTACHMENT.NO_DOCTOR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 2"><con:configuration><token>&lt;F_ATTACHMENT.DOCTOR_FIO>Имя отчество&lt;/F_ATTACHMENT.DOCTOR_FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 3"><con:configuration><token> &lt;F_ATTACHMENT.REPEAT>вервые&lt;/F_ATTACHMENT.REPEAT></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b8e26e60-bffd-43f3-abcc-22d57ebfd197" name="Contains 4"><con:configuration><token>&lt;F_ATTACHMENT.SPECIALITY_NAME>тест2&lt;/F_ATTACHMENT.SPECIALITY_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachment Event Step 1" id="8a367f9f-098b-49b5-99ca-16292b8b00b2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where fae.document_uid = '1${#TestCase#patientId}'</con:query><con:assertion type="DataAndMetadataAssertion" id="91320cbf-2498-44ea-bf0a-e14d9ceb8dfe" name="Smart Assertion"><con:configuration xsi:type="con:DataAndMetadataAssertion"><con:mode>Received Data</con:mode><con:elements><con:path>//Results[1]/ResultSet[1]/@fetchSize</con:path><con:element>@fetchSize</con:element><con:operatorId>1</con:operatorId><con:enabled>true</con:enabled><con:expectedValue>0</con:expectedValue><con:caseSensitive>true</con:caseSensitive><con:numberType>false</con:numberType></con:elements><con:elements><con:path>//Results[1]/ResultSet[1]</con:path><con:element>ResultSet</con:element><con:operatorId>9</con:operatorId><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:numberType>false</con:numberType></con:elements><con:originalMessage>&lt;Results>&#13;
   &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></con:originalMessage></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8dd53226-7b31-4d29-9837-9daf6e4e9b06" name="Not Contains"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.ID>1${#TestCase#patientId}&lt;/F_ATTACHMENT_EVENT.ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual" id="b71aa273-307e-488c-b9f7-c4ece62437e9"><con:description>Проверить отправку сообщения в топик DnForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3215131</con:value></con:property><con:property><con:name>uid</con:name><con:value>9202</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-09-17T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-09-17</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>2908</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="fea05bd7-89ac-4669-99cc-1c17c8b29e64" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113356" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="5405e07f-de88-41be-b7ac-a048d57b92f0"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="344112aa-4d1c-4f4e-9ca6-7c008a81c3c5"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="5a021bd2-b196-4f47-88f8-8b53aac301b9"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="68ca25cf-5940-4202-9ece-14f857d505f4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, NULL, NULL, '2015-08-30', NULL);

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '2${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="0de4e05b-4d62-4003-b822-2035bb98211c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="1a9b5ea2-ba9b-4f6f-bbd5-1958fe181774"><con:description>Проверить отправку сообщения в топик DNForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>42</con:value></con:property><con:property><con:name>uid</con:name><con:value>555</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-01-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-01-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="4d166d8e-0cee-478b-94ac-ca2f926c3920" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113357" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="5b6f2626-ca9d-41fa-9555-fb8c3a7422d7"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="be81b157-21ed-475a-a543-47c81670c65a"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="ddaa5830-bd50-4b70-8c26-e2c35c41b2e6"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="45bed746-a376-4249-8bee-77d0e81769e6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL);

--- создание прикрепления


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2018-02-10', NULL, 10479782, 128286429, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');

--- создание документа DIGITIZED_DOCUMENT. Не забыть указать uid = justification_document_id
INSERT INTO f_task (id, "type", patient_id, opened, closed, assignee, priority, deleted) VALUES(1${#TestCase#uid}, 'DIGITIZED_DOCUMENT', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, 30, false);

INSERT INTO f_document_digitized_task (id, uid) VALUES(1${#TestCase#uid}, '2${#TestCase#uid}');

INSERT INTO f_doc_dig_diagnosis_processing (id, doc_task_id, mkb10_id, status) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, 128286429, 'NEW');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="0499de24-8985-42c3-ac84-abac645d772c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="e85c87ab-646f-4329-a792-8a5a71f1486f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>1${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="7c23bd37-de6f-462e-9ee9-e2652ecb0b24"><con:description>Проверить отправку сообщения в топик DNForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1223</con:value></con:property><con:property><con:name>uid</con:name><con:value>895</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-01-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-01-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="32f51ccf-2ed8-4dd7-bbcc-8cdab04b350b" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113358" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="5f6194d0-9cc2-4dd5-985f-26119e256c6f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="0363423b-21b9-4583-9958-9789bbf528e0"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="98cab918-5582-412f-946a-fa9f5b85f13f"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="62841a45-5204-4d2c-99b7-80d9d1546412"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL);

--- создание прикрепления


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2018-02-10', NULL, 10479782, 128286429, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');

--- создание документа PREVENTIVE_EXAMINATION_DOCUMENT. Не забыть указать uid = justification_document_id
INSERT INTO f_task (id, "type", patient_id, opened, closed, assignee, priority, deleted) VALUES(1${#TestCase#uid}, 'PREVENTIVE_EXAMINATION_DOCUMENT', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, 30, false);

INSERT INTO f_document_preventive_examination_task (id, uid) VALUES(1${#TestCase#uid}, '2${#TestCase#uid}');

INSERT INTO f_doc_prev_exam_diagnosis_processing (id, doc_task_id, mkb10_id, status) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, 128286429, 'NEW');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="c6647011-264e-4375-92bf-1e8aea43ffd2"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="ae745b7c-c081-4645-8525-432b23bd71a5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>1${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="c47b437c-1eef-41df-b34a-54199fd2f3ff"><con:description>Проверить отправку сообщения в топик DNForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1223</con:value></con:property><con:property><con:name>uid</con:name><con:value>895</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-01-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-01-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="b1c837bc-873f-4476-ae68-c0f8a3c812b4" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#113360" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="52dcb99a-2953-4f1e-8999-834744d887e8"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="1cd03f8a-4dc5-4b48-8a2c-715e1808c873"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="82ff6cf7-68c7-46fd-998a-b76b3ddd1725"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="bde4e19e-88d8-450b-9614-deea69b919d9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL);

--- создание прикрепления


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2018-02-10', NULL, 10479782, 128286429, '50', 125676831, true, NULL, NULL, 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Педиатрия');

--- создание c_dn_justification_check. Не забыть указать тот же dn_document_uid, что и в сообщении

INSERT INTO c_dn_justification_check (dn_document_uid, justification_document_id, simi_received_time, think_received_time, operation_type, patient_id, signed_date, group_code, doctor_fio, speciality_code, speciality_name, specialization_code, specialization_name, diagnosis_code, diagnosis_name, diagnosis, diagnosis_date, repeat, start_date, end_date, cancel_reason_code, cancel_reason_name, employee_id, dn_doctor_job_execution_id, no_doctor) VALUES('1${#TestCase#uid}', '1${#TestCase#uid}', '2022-01-19 11:52:27.964', '2022-01-19 11:52:27.964', 'update', '${#TestCase#patientId}', '2022-01-19 00:00:00.000', 'DNC0039', 'Моисеева Марина Евгеньевна', '50', 'Врач - педиатр участковый', '49', 'Педиатрия', 'A23.0', 'проверка', 'язвенный колит', '2018-02-06 00:00:00.000', 'диагноз установлен в предыдущ. году или ранее (-)', '2018-02-06', NULL, NULL, NULL, '10479782', NULL, 'отсутствует');

--- создание документа HOSPITAL_DISCHARGE_DOCUMENT. Не забыть указать uid = justification_document_id
INSERT INTO f_task (id, "type", patient_id, opened, closed, assignee, priority, deleted) VALUES(1${#TestCase#uid}, 'HOSPITAL_DISCHARGE_DOCUMENT', ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, 30, false);

INSERT INTO f_document_hospital_discharge_task (id, uid) VALUES(1${#TestCase#uid}, '2${#TestCase#uid}');

INSERT INTO f_doc_hosp_dis_diagnosis_processing (id, doc_task_id, mkb10_id, status) VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, 128286429, 'NEW');</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="5043a7e6-1fdc-4e24-9a4a-b39c33221275"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("SIMI_meta_cct73079","""{
   "messageId": "5a9d34c0-5089-4575-9b8b-154b87dc41028",
   "eventTime": "2021-11-18T15:40:26.589+03:00[Europe/Moscow]",
   "status": "SIGNED",
   "author": {
      "fullName": "?",
      "login": "GDzhampisova"
   },
   "tags": [
      {
         "description": \"2"""+uid+"""\",
         "schema": "ru.mos.emias.system.careevent_concomitant_document",
         "code": "Concomitant",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Врач-педиатр участковый",
         "schema": "ru.mos.emias.system.author_speciality",
         "code": "759",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "ГБУЗ ДГП № 110 ДЗМ",
         "schema": "ru.mos.emias.system.author_facility",
         "code": "10000290",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Джамписова Г. Т.",
         "schema": "ru.mos.emias.system.author_name",
         "code": "GDzhampisova",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "K20 - Эзофагит",
         "schema": "ru.mos.emias.system.main_diagnosis",
         "code": "K20",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "Постановка на наблюдение",
         "schema": "ru.mos.emias.system.alias",
         "code": "Постановка на наблюдение",
         "role": null,
         "definedByCct": false,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydelist",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      },
      {
         "description": "test",
         "schema": "ru.mos.emias.system.careevent_documentlist_hierarchydescr",
         "code": "Card 30",
         "role": null,
         "definedByCct": true,
         "tagType": "TAG"
      }
   ],
   "documentId": \"1"""+uid+"""\",
   "patientId": \""""+patientId+"""\",
   "signee": {
      "login": "GDzhampisova"
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check c_dn_justification_check Step 2.1" id="d41c91f6-a0a4-4be3-8790-ce4ee88f8e65"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from c_dn_justification_check cdjc where cdjc.dn_document_uid = '${#TestCase#patientId}${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token> &lt;C_DN_JUSTIFICATION_CHECK.THINK_RECEIVED_TIME>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7d41542c-c988-4f57-838c-4d4bdc8e8cd1" name="Contains 3"><con:configuration><token>&lt;C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID>1${#TestCase#uid}&lt;/C_DN_JUSTIFICATION_CHECK.JUSTIFICATION_DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="1e1f7741-424a-4dfe-9b0c-6b4a498c2c80"><con:description>Проверить отправку сообщения в топик DNForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1223</con:value></con:property><con:property><con:name>uid</con:name><con:value>895</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-01-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-01-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>groupCode</con:name><con:value>DNC0039</con:value></con:property><con:property><con:name>diagnosisCode</con:name><con:value>A23.0</con:value></con:property><con:property><con:name>specializationCode</con:name><con:value>49</con:value></con:property><con:property><con:name>specializationName</con:name><con:value>Педиатрия</con:value></con:property><con:property><con:name>groupId</con:name><con:value>58</con:value></con:property><con:property><con:name>mkbId</con:name><con:value>128286429</con:value></con:property><con:property><con:name>specializationId</con:name><con:value>125676831</con:value></con:property><con:property><con:name>eventId</con:name><con:value>5362</con:value></con:property><con:property><con:name>groupName</con:name><con:value>Бруцеллез</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>uid</con:name><con:value>718</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-11-24T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-11-24</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="b539bf39-0863-4a8c-bfea-5c5dd58bdaa5" name="А_ЕСУ_08 - Обработка триггера на получение данных о наблюдении во внешней МО"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="69eb8e19-9514-45de-bc9d-8437a322edab" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#115959" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="d088fc35-fcdc-4be5-b55f-c05b5897cd4b"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="8c52e601-8f37-4d6f-becb-40b7657e23bd"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="e3562be8-0a9b-4e1d-9967-56a3814014cd"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="dd7432d6-ea60-4b16-ba79-53b93782c396"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="cbee397b-de4f-4600-86fa-c6affe79288a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="699fe5b7-0a4d-41b1-986e-552b074c488d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change" id="756f2ad9-87fc-484e-b343-d7e21ab9e1f5"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="ca66413d-5ffa-4e38-8eaf-871b263507e2"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="9a5713fa-b8ea-48a3-8662-d5ed6beb7d6e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 1" id="9d0d49bf-14fc-4063-bb38-489ce429c944"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1" id="36ae5663-4d75-4693-bae8-dd2aa040679f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Check f_external_attachment Step 1</con:sourceStep><con:sourcePath>//F_EXTERNAL_ATTACHMENT.ID</con:sourcePath><con:targetType>attachment_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event" id="c60e7da5-c093-4eaa-aaeb-b0663eb12d75"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:54:43&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson Step 1" id="c1fdeed5-fb80-4c0b-b546-27b4a9361fba"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="1"+documentId

assert messageJson.openedDate=="2022-03-30"

assert messageJson.endDate=="2022-03-31"

assert messageJson.compositionId==compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==11565403

assert messageJson.moName=="АО \"Плутон\""</script></con:config></con:testStep><con:testStep type="groovy" name="Message Change 2" id="a2d41a6d-c7a7-4abe-8e45-e6483387f845"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', 1+uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-31', '2022-04-31')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime 2" id="b5a558b2-1b1b-4d39-b672-2e842bd2db4b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="c636f720-d531-4bd9-ae21-c3ae771e04e9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 2" id="e9e1f9e9-f76d-4d5a-948f-46d0f1467162"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ca2099b2-02bf-4f0f-9a9b-43734f2d0e9a" name="Not Contains 2"><con:configuration><token>rowNumber="2"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson Step 2" id="9d6240ab-7a9e-4eea-bc5a-2b42cacf08dd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message== null</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 2" id="98ba0b74-3556-4d43-8ee5-a3bba3025232"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:54:43&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="0c76e280-68c0-41a2-b1f3-4a8996e3c1f5" name="Not Contains 2"><con:configuration><token>rowNumber="2"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB Step 3" id="886061da-e1e0-4825-a524-5e2a762f4a9f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Step 3" id="16df62e3-10fa-4e88-b800-9dd12fcc4dde"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB Step 3</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB Step 3</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 3" id="1d8a79a1-753d-4949-9f0e-bda82d3a4f70"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year69=testRunner.testCase.getPropertyValue("year69")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace',1+ uid)
.replace('documentReplace', 2+uid)
.replace('MKBCodeReplace', code)
.replace('year', year69)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime 3" id="41606b3e-ff70-4cdf-a5a2-45438d9e899f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 3" id="456ba4bd-b347-4a77-a03b-b446439d9df8"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 3" id="9d1ff834-a4d6-4815-bdd1-b08a029757fd"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '2${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>2${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson Step 3" id="9b72e85b-3ab5-4eb2-8ade-125330240ebc"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="2"+documentId

assert messageJson.openedDate=="2022-03-30"

assert messageJson.endDate=="2022-03-31"

assert messageJson.compositionId=="1"+compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==11565403

assert messageJson.moName=="АО \"Плутон\""</script></con:config></con:testStep><con:testStep type="jdbc" name="Check old f_external_attachment Step 3" id="eb10c725-2d32-4042-97da-e264351a9020"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ca2099b2-02bf-4f0f-9a9b-43734f2d0e9a" name="Not Contains 2"><con:configuration><token>rowNumber="2"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 2" id="33ca3b80-e8bc-41ce-b71f-3f052d83ad39"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Check f_external_attachment Step 3</con:sourceStep><con:sourcePath>//F_EXTERNAL_ATTACHMENT.ID</con:sourcePath><con:targetType>attachment_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 3" id="7d60c301-6d0e-4598-9818-b52fc4b965c5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:54:43&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>2${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="0c76e280-68c0-41a2-b1f3-4a8996e3c1f5" name="Not Contains 2"><con:configuration><token>rowNumber="2"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 4" id="b287e0a1-cc77-4319-a2f6-a4b42cf1bd32"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', 2+uid)
.replace('documentReplace', 3+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-30', '2022-03-28')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime 4" id="c623b852-9cf4-4a12-868a-6a3566a0b57d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 4" id="b6158803-3c77-457b-b8db-9cea0dfb50a6"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 4" id="be47471f-d98f-40dd-a59e-308cacd5c862"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '3${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>2${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED>2022-04-29&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>3${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 4" id="0a97d039-f379-4f5b-9860-8777db77b00d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:54:43&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>3${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>3${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="0c76e280-68c0-41a2-b1f3-4a8996e3c1f5" name="Not Contains 2"><con:configuration><token>rowNumber="3"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check old f_external_attachment Step 4" id="eba08b2c-6bbc-4277-be02-d1eae15ff384"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '2${#TestCase#uid}'</con:query><con:assertion type="Simple NotContains" id="7eac6e27-e53c-4ba7-b3ae-606dfba9295f" name="Not Contains"><con:configuration><token>F_EXTERNAL_ATTACHMENT.PATIENT_ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson Step 4" id="21a541fa-0769-4fbd-bbec-8619c8574b1b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="2"+documentId

assert messageJson.openedDate=="2022-03-30"

assert messageJson.endDate=="2022-03-31"

assert messageJson.compositionId=="1"+compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==11565403

assert messageJson.moName=="АО \"Плутон\""</script></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 5" id="e9a80e61-a827-4d84-a221-94e0233ec439"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', 2+uid)
.replace('documentReplace', 3+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-30', '2022-04-29')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime 5" id="0de2e346-9b20-4f6a-a7fd-33f8d9625158"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 5" id="f20cb659-c395-4b02-909e-cd9e08decb55"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 5" id="7b5be0a5-6696-488c-8cf7-4ffb71c552a8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '3${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>2${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED>2022-04-29&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>3${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 5" id="44ad68fa-82e9-418d-b5a0-8cc44a53d7e5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:54:43&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>3${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>3${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 4"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED>2022-03-30&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.CLOSED>2022-03-31&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_ID>11565403&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>АО "Плутон"&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9c071237-4f8e-41b2-8308-29f1f08f58b3" name="Not Contains 1"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="0c76e280-68c0-41a2-b1f3-4a8996e3c1f5" name="Not Contains 2"><con:configuration><token>rowNumber="3"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check old f_external_attachment Step 5" id="1da658f0-daf1-4596-a000-88fd182d926e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '2${#TestCase#uid}'</con:query><con:assertion type="Simple NotContains" id="7eac6e27-e53c-4ba7-b3ae-606dfba9295f" name="Not Contains"><con:configuration><token>F_EXTERNAL_ATTACHMENT.PATIENT_ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson Step 5" id="c1b386c5-6ee0-4d44-a80c-6155d7789789"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="3"+documentId

assert messageJson.openedDate=="2022-04-29"

assert messageJson.endDate=="2022-03-31"

assert messageJson.compositionId=="2"+compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==11565403

assert messageJson.moName=="АО \"Плутон\""</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1437</con:value></con:property><con:property><con:name>uid</con:name><con:value>9845</con:value></con:property><con:property><con:name>code</con:name><con:value>X82.2</con:value></con:property><con:property><con:name>id</con:name><con:value>128302249</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "8f9dbefb-e279-4437-83f5-157231d13614",&#13;
   "operationType": "update",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "compositionId": "9845",&#13;
   "newResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "1437",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "9845"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "RU"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "external_ref": {&#13;
                  "@class": "PARTY_REF",&#13;
                  "id": {&#13;
                     "@class": "GENERIC_ID",&#13;
                     "value": "20585024948",&#13;
                     "scheme": "undefined"&#13;
                  },&#13;
                  "namespace": "Парус",&#13;
                  "type": "ANY"&#13;
               },&#13;
               "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2022-03-30T16:54:43+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "294474038",&#13;
                                 "type": "Идентификатор События"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "19845",&#13;
                                 "type": "Идентификатор документа СИМИ"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "1437",&#13;
                                 "type": "Идентификатор пациента"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "undefined",&#13;
                                       "assigner": "undefined",&#13;
                                       "id": "12018042375",&#13;
                                       "type": "EMIAS"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Врач - терапевт участковый"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Терапевтическое отделение № 1"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "issuer",&#13;
                                       "assigner": "assigner",&#13;
                                       "id": "204",&#13;
                                       "type": "type"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно-поликлинический центр",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0019"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_дома"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_строения"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_корпуса"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "В медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0070"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "поселение"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "внутригородская территория поселение Филимонковское, деревня Верхнее Валуево, 5-я Валуевская улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "20"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_помещения"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Терапия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0087"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0054"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "экстренная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0058"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "1037719010757",&#13;
                        "scheme": "undefined"&#13;
                     },&#13;
                     "namespace": "Сервис РМР/РМУ",&#13;
                     "type": "ANY"&#13;
                  },&#13;
                  "name": "ГБУЗ ГП №175 ДЗМ"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "Врач"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "12018042375"&#13;
                           },&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Медицинская организация, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Медицинская организация, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_CODED_TEXT",&#13;
                                          "value": "АО \"Плутон\"",&#13;
                                          "defining_code": {&#13;
                                             "@class": "CODE_PHRASE",&#13;
                                             "terminology_id": {&#13;
                                                "@class": "TERMINOLOGY_ID",&#13;
                                                "value": "ABSENT_TERMINOLOGY"&#13;
                                             },&#13;
                                             "code_string": "11565403"&#13;
                                          }&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2022-03-30"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              },&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2022-03-31"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A00.1 - Холера, вызванная холерным вибрионом 01, биовар eltor",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "X82.2"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ],&#13;
   "comment": "Modify Composition",&#13;
   "auditDetails": {&#13;
      "@class": "AUDIT_DETAILS",&#13;
      "system_id": "default",&#13;
      "committer": {&#13;
         "@class": "PARTY_IDENTIFIED",&#13;
         "name": "MDuishaeva"&#13;
      },&#13;
      "time_committed": {&#13;
         "@class": "DV_DATE_TIME",&#13;
         "value": "2022-03-30T16:56:20.944129+03:00"&#13;
      },&#13;
      "change_type": {&#13;
         "@class": "DV_CODED_TEXT",&#13;
         "value": "modification",&#13;
         "defining_code": {&#13;
            "@class": "CODE_PHRASE",&#13;
            "terminology_id": {&#13;
               "@class": "TERMINOLOGY_ID",&#13;
               "value": "openehr"&#13;
            },&#13;
            "code_string": "251"&#13;
         }&#13;
      },&#13;
      "description": {&#13;
         "@class": "DV_TEXT",&#13;
         "value": "Modify Composition"&#13;
      }&#13;
   }&#13;
}</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create MO no year.xml</con:value></con:property><con:property><con:name>year</con:name><con:value>2022</con:value></con:property><con:property><con:name>year70</con:name><con:value>70</con:value></con:property><con:property><con:name>year69</con:name><con:value>69</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>attachment_id</con:name><con:value>1098</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1677490763098</con:value></con:property><con:property><con:name>mkbName</con:name><con:value>A00.1 - Холера, вызванная холерным вибрионом 01, биовар eltor</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="9412f116-5656-4835-a4d9-784bf78e1671" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#115964" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="75794ce7-99b9-40ec-8283-a61d8c27adf3"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="ee369e6c-911e-4e84-bdb9-e36dcfc44de9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="731846b8-7dcc-4a6d-929f-ed3d7c1a1c7a"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="eeecd8f5-d6c4-4fc9-85a3-f450dd216d40"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="f44f9bfe-20aa-454c-a33e-2ccbc0c36e94"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="6d99f052-8c3e-4a84-84fe-1d2aa8b6e5f7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change" id="bd341a37-6603-4982-8f38-d6d40d73bb2b"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', 'test')
.replace('compositionReplace', uid)
.replace('MKBCodeReplace', code)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="36d6e8d1-31c1-43e6-89e8-785a081376ca"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 1" id="acc894c1-1b81-45c0-9bdf-c1559a69149e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.composition_id =  '${#TestCase#uid}'</con:query><con:assertion type="Simple NotContains" id="b2d1afdf-765d-442b-9890-951b9fa937ee" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="926deba9-7d75-45f1-988e-b74669d85e8b"><con:description>Провериь грейлог  или топик ConsumerErrors</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E012 c параметром &lt;uid>: "В документе &lt;uid> получен идентификатор пациента &lt;patientId> в формате отличном от ожидаемого"</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1504</con:value></con:property><con:property><con:name>uid</con:name><con:value>3934</con:value></con:property><con:property><con:name>code</con:name><con:value>S52.5</con:value></con:property><con:property><con:name>id</con:name><con:value>128298748</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;    "domain": "default",&#13;    "ehrUid": "135ac594-3e04-4a4f-98ac-845427bea2ff",&#13;    "operationType": "create",&#13;    "eventName": "t_external_dispensary_case_recordQueue",&#13;    "compositionId": "256",&#13;    "newResults": [&#13;       {&#13;          "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;          "patientId": "test",&#13;          "composition_": {&#13;             "@class": "COMPOSITION",&#13;             "name": {&#13;                "@class": "DV_TEXT",&#13;                "value": "Запись о наличии наблюдения во внешней МО"&#13;             },&#13;             "uid": {&#13;                "@class": "OBJECT_VERSION_ID",&#13;                "value": "02f0f727-748e-4c74-9a01-a63d13e39dad::default::1"&#13;             },&#13;             "archetype_details": {&#13;                "@class": "ARCHETYPED",&#13;                "archetype_id": {&#13;                   "@class": "ARCHETYPE_ID",&#13;                   "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;                },&#13;                "template_id": {&#13;                   "@class": "TEMPLATE_ID",&#13;                   "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;                },&#13;                "rm_version": "1.0.4"&#13;             },&#13;             "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;             "language": {&#13;                "@class": "CODE_PHRASE",&#13;                "terminology_id": {&#13;                   "@class": "TERMINOLOGY_ID",&#13;                   "value": "ISO_639-1"&#13;                },&#13;                "code_string": "ru"&#13;             },&#13;             "territory": {&#13;                "@class": "CODE_PHRASE",&#13;                "terminology_id": {&#13;                   "@class": "TERMINOLOGY_ID",&#13;                   "value": "ISO_3166-1"&#13;                },&#13;                "code_string": "US"&#13;             },&#13;             "category": {&#13;                "@class": "DV_CODED_TEXT",&#13;                "value": "event",&#13;                "defining_code": {&#13;                   "@class": "CODE_PHRASE",&#13;                   "terminology_id": {&#13;                      "@class": "TERMINOLOGY_ID",&#13;                      "value": "openehr"&#13;                   },&#13;                   "code_string": "433"&#13;                }&#13;             },&#13;             "composer": {&#13;                "@class": "PARTY_IDENTIFIED",&#13;                "name": "Silvia Blake"&#13;             },&#13;             "context": {&#13;                "@class": "EVENT_CONTEXT",&#13;                "start_time": {&#13;                   "@class": "DV_DATE_TIME",&#13;                   "value": "2021-11-25T01:59:45.201235+03:00"&#13;                },&#13;                "setting": {&#13;                   "@class": "DV_CODED_TEXT",&#13;                   "value": "other care",&#13;                   "defining_code": {&#13;                      "@class": "CODE_PHRASE",&#13;                      "terminology_id": {&#13;                         "@class": "TERMINOLOGY_ID",&#13;                         "value": "openehr"&#13;                      },&#13;                      "code_string": "238"&#13;                   }&#13;                },&#13;                "other_context": {&#13;                   "@class": "ITEM_TREE",&#13;                   "name": {&#13;                      "@class": "DV_TEXT",&#13;                      "value": "*Tree(en)"&#13;                   },&#13;                   "archetype_node_id": "at0001",&#13;                   "items": [&#13;                      {&#13;                         "@class": "CLUSTER",&#13;                         "name": {&#13;                            "@class": "DV_TEXT",&#13;                            "value": "Подробности контекста"&#13;                         },&#13;                         "archetype_details": {&#13;                            "@class": "ARCHETYPED",&#13;                            "archetype_id": {&#13;                               "@class": "ARCHETYPE_ID",&#13;                               "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;                            },&#13;                            "rm_version": "1.0.4"&#13;                         },&#13;                         "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;                         "items": [&#13;                            {&#13;                               "@class": "ELEMENT",&#13;                               "name": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "ИД события"&#13;                               },&#13;                               "archetype_node_id": "at0035",&#13;                               "value": {&#13;                                  "@class": "DV_IDENTIFIER",&#13;                                  "issuer": "Issuer",&#13;                                  "assigner": "Assigner",&#13;                                  "id": "338ae3d5-b9c2-46e5-857d-28b5f54cdbfa",&#13;                                  "type": "Prescription"&#13;                               }&#13;                            },&#13;                            {&#13;                               "@class": "ELEMENT",&#13;                               "name": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "ИД документа"&#13;                               },&#13;                               "archetype_node_id": "at0073",&#13;                               "value": {&#13;                                  "@class": "DV_IDENTIFIER",&#13;                                  "issuer": "Issuer",&#13;                                  "assigner": "Assigner",&#13;                                  "id": "b910132d-061a-4a7d-96b1-1e7ec848def1",&#13;                                  "type": "Prescription"&#13;                               }&#13;                            },&#13;                            {&#13;                               "@class": "ELEMENT",&#13;                               "name": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "ИД пациента"&#13;                               },&#13;                               "archetype_node_id": "at0075",&#13;                               "value": {&#13;                                  "@class": "DV_IDENTIFIER",&#13;                                  "issuer": "Issuer",&#13;                                  "assigner": "Assigner",&#13;                                  "id": "84b5cd5e-266a-4270-aa32-ac368b748bea",&#13;                                  "type": "Prescription"&#13;                               }&#13;                            },&#13;                            {&#13;                               "@class": "CLUSTER",&#13;                               "name": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "Автор информации"&#13;                               },&#13;                               "archetype_node_id": "at0036",&#13;                               "items": [&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Идентификатор исполнения должности медработника"&#13;                                     },&#13;                                     "archetype_node_id": "at0092",&#13;                                     "value": {&#13;                                        "@class": "DV_IDENTIFIER",&#13;                                        "issuer": "Issuer",&#13;                                        "assigner": "Assigner",&#13;                                        "id": "6a9563e1-f329-4802-94ed-22af3ca10488",&#13;                                        "type": "Prescription"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование должности"&#13;                                     },&#13;                                     "archetype_node_id": "at0037",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование должности 75"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование структурного подразделения"&#13;                                     },&#13;                                     "archetype_node_id": "at0038",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование структурного подразделения 70"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование филиала"&#13;                                     },&#13;                                     "archetype_node_id": "at0039",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование филиала 65"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование юридического лица"&#13;                                     },&#13;                                     "archetype_node_id": "at0040",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование юридического лица 8"&#13;                                     }&#13;                                  }&#13;                               ]&#13;                            },&#13;                            {&#13;                               "@class": "CLUSTER",&#13;                               "name": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "Структура медицинской организации"&#13;                               },&#13;                               "archetype_node_id": "at0014",&#13;                               "items": [&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "ИД объекта"&#13;                                     },&#13;                                     "archetype_node_id": "at0015",&#13;                                     "value": {&#13;                                        "@class": "DV_IDENTIFIER",&#13;                                        "issuer": "Issuer",&#13;                                        "assigner": "Assigner",&#13;                                        "id": "048571c7-2b97-4c3f-a69a-a3d9ee6f4524",&#13;                                        "type": "Prescription"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Тип объекта"&#13;                                     },&#13;                                     "archetype_node_id": "at0018",&#13;                                     "value": {&#13;                                        "@class": "DV_CODED_TEXT",&#13;                                        "value": "больница",&#13;                                        "defining_code": {&#13;                                           "@class": "CODE_PHRASE",&#13;                                           "terminology_id": {&#13;                                              "@class": "TERMINOLOGY_ID",&#13;                                              "value": "local"&#13;                                           },&#13;                                           "code_string": "at0072"&#13;                                        }&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование"&#13;                                     },&#13;                                     "archetype_node_id": "at0016",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Наименование 56"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Родительский ИД"&#13;                                     },&#13;                                     "archetype_node_id": "at0017",&#13;                                     "value": {&#13;                                        "@class": "DV_IDENTIFIER",&#13;                                        "issuer": "Issuer",&#13;                                        "assigner": "Assigner",&#13;                                        "id": "266c9641-6b65-4ef1-a910-0185bae34ddc",&#13;                                        "type": "Prescription"&#13;                                     }&#13;                                  }&#13;                               ]&#13;                            },&#13;                            {&#13;                               "@class": "CLUSTER",&#13;                               "name": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "Адрес медицинской организации"&#13;                               },&#13;                               "archetype_node_id": "at0022",&#13;                               "items": [&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Субъект РФ"&#13;                                     },&#13;                                     "archetype_node_id": "at0026",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Субъект РФ 9"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Муниципальный район (городской округ)"&#13;                                     },&#13;                                     "archetype_node_id": "at0027",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Муниципальный район (городской округ) 34"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Поселение"&#13;                                     },&#13;                                     "archetype_node_id": "at0076",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Поселение 69"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Населенный пункт"&#13;                                     },&#13;                                     "archetype_node_id": "at0025",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Населенный пункт 92"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Элемент планировочной структуры"&#13;                                     },&#13;                                     "archetype_node_id": "at0078",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Элемент планировочной структуры 79"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Улица"&#13;                                     },&#13;                                     "archetype_node_id": "at0079",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Улица 96"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "CLUSTER",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Номер здания (сооружения)"&#13;                                     },&#13;                                     "archetype_node_id": "at0077",&#13;                                     "items": [&#13;                                        {&#13;                                           "@class": "ELEMENT",&#13;                                           "name": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер дома"&#13;                                           },&#13;                                           "archetype_node_id": "at0024",&#13;                                           "value": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер дома 36"&#13;                                           }&#13;                                        },&#13;                                        {&#13;                                           "@class": "ELEMENT",&#13;                                           "name": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер строения"&#13;                                           },&#13;                                           "archetype_node_id": "at0029",&#13;                                           "value": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер строения 92"&#13;                                           }&#13;                                        },&#13;                                        {&#13;                                           "@class": "ELEMENT",&#13;                                           "name": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер корпуса"&#13;                                           },&#13;                                           "archetype_node_id": "at0028",&#13;                                           "value": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер корпуса 74"&#13;                                           }&#13;                                        }&#13;                                     ]&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Номер земельного участка"&#13;                                     },&#13;                                     "archetype_node_id": "at0080",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Номер земельного участка 30"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Дополнительная информация"&#13;                                     },&#13;                                     "archetype_node_id": "at0081",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Дополнительная информация 74"&#13;                                     }&#13;                                  }&#13;                               ]&#13;                            },&#13;                            {&#13;                               "@class": "CLUSTER",&#13;                               "name": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "Информация о месте Cобытия"&#13;                               },&#13;                               "archetype_node_id": "at0061",&#13;                               "items": [&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Событие произошло"&#13;                                     },&#13;                                     "archetype_node_id": "at0069",&#13;                                     "value": {&#13;                                        "@class": "DV_CODED_TEXT",&#13;                                        "value": "вне медицинской организации",&#13;                                        "defining_code": {&#13;                                           "@class": "CODE_PHRASE",&#13;                                           "terminology_id": {&#13;                                              "@class": "TERMINOLOGY_ID",&#13;                                              "value": "local"&#13;                                           },&#13;                                           "code_string": "at0071"&#13;                                        }&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Субъект РФ"&#13;                                     },&#13;                                     "archetype_node_id": "at0062",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Субъект РФ 54"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Муниципальный район (городской округ)"&#13;                                     },&#13;                                     "archetype_node_id": "at0063",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Муниципальный район (городской округ) 17"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Поселение"&#13;                                     },&#13;                                     "archetype_node_id": "at0064",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Поселение 63"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Населенный пункт"&#13;                                     },&#13;                                     "archetype_node_id": "at0065",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Населенный пункт 97"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Элемент планировочной структуры"&#13;                                     },&#13;                                     "archetype_node_id": "at0066",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Элемент планировочной структуры 55"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Улица"&#13;                                     },&#13;                                     "archetype_node_id": "at0067",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Улица 76"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "CLUSTER",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Номер здания (сооружения)"&#13;                                     },&#13;                                     "archetype_node_id": "at0082",&#13;                                     "items": [&#13;                                        {&#13;                                           "@class": "ELEMENT",&#13;                                           "name": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер дома"&#13;                                           },&#13;                                           "archetype_node_id": "at0085",&#13;                                           "value": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер дома 49"&#13;                                           }&#13;                                        },&#13;                                        {&#13;                                           "@class": "ELEMENT",&#13;                                           "name": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер строения"&#13;                                           },&#13;                                           "archetype_node_id": "at0084",&#13;                                           "value": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер строения 8"&#13;                                           }&#13;                                        },&#13;                                        {&#13;                                           "@class": "ELEMENT",&#13;                                           "name": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер корпуса"&#13;                                           },&#13;                                           "archetype_node_id": "at0083",&#13;                                           "value": {&#13;                                              "@class": "DV_TEXT",&#13;                                              "value": "Номер корпуса 76"&#13;                                           }&#13;                                        }&#13;                                     ]&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Номер земельного участка"&#13;                                     },&#13;                                     "archetype_node_id": "at0030",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Номер земельного участка 57"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Номер помещения"&#13;                                     },&#13;                                     "archetype_node_id": "at0031",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Номер помещения 77"&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Дополнительная информация"&#13;                                     },&#13;                                     "archetype_node_id": "at0032",&#13;                                     "value": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Дополнительная информация 17"&#13;                                     }&#13;                                  }&#13;                               ]&#13;                            },&#13;                            {&#13;                               "@class": "CLUSTER",&#13;                               "name": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "Дополнительная информация"&#13;                               },&#13;                               "archetype_node_id": "at0046",&#13;                               "items": [&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Профиль медицинской помощи"&#13;                                     },&#13;                                     "archetype_node_id": "at0086",&#13;                                     "value": {&#13;                                        "@class": "DV_CODED_TEXT",&#13;                                        "value": "Педиатрия",&#13;                                        "defining_code": {&#13;                                           "@class": "CODE_PHRASE",&#13;                                           "terminology_id": {&#13;                                              "@class": "TERMINOLOGY_ID",&#13;                                              "value": "local"&#13;                                           },&#13;                                           "code_string": "at0088"&#13;                                        }&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Виды медицинской помощи"&#13;                                     },&#13;                                     "archetype_node_id": "at0047",&#13;                                     "value": {&#13;                                        "@class": "DV_CODED_TEXT",&#13;                                        "value": "специализированная",&#13;                                        "defining_code": {&#13;                                           "@class": "CODE_PHRASE",&#13;                                           "terminology_id": {&#13;                                              "@class": "TERMINOLOGY_ID",&#13;                                              "value": "local"&#13;                                           },&#13;                                           "code_string": "at0051"&#13;                                        }&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Условия оказания медицинской помощи"&#13;                                     },&#13;                                     "archetype_node_id": "at0048",&#13;                                     "value": {&#13;                                        "@class": "DV_CODED_TEXT",&#13;                                        "value": "амбулаторно",&#13;                                        "defining_code": {&#13;                                           "@class": "CODE_PHRASE",&#13;                                           "terminology_id": {&#13;                                              "@class": "TERMINOLOGY_ID",&#13;                                              "value": "local"&#13;                                           },&#13;                                           "code_string": "at0055"&#13;                                        }&#13;                                     }&#13;                                  },&#13;                                  {&#13;                                     "@class": "ELEMENT",&#13;                                     "name": {&#13;                                        "@class": "DV_TEXT",&#13;                                        "value": "Форма оказания медицинской помощи"&#13;                                     },&#13;                                     "archetype_node_id": "at0049",&#13;                                     "value": {&#13;                                        "@class": "DV_CODED_TEXT",&#13;                                        "value": "плановая",&#13;                                        "defining_code": {&#13;                                           "@class": "CODE_PHRASE",&#13;                                           "terminology_id": {&#13;                                              "@class": "TERMINOLOGY_ID",&#13;                                              "value": "local"&#13;                                           },&#13;                                           "code_string": "at0060"&#13;                                        }&#13;                                     }&#13;                                  }&#13;                               ]&#13;                            }&#13;                         ]&#13;                      }&#13;                   ]&#13;                },&#13;                "health_care_facility": {&#13;                   "@class": "PARTY_IDENTIFIED",&#13;                   "external_ref": {&#13;                      "@class": "PARTY_REF",&#13;                      "id": {&#13;                         "@class": "GENERIC_ID",&#13;                         "value": "9091",&#13;                         "scheme": "HOSPITAL-NS"&#13;                      },&#13;                      "namespace": "HOSPITAL-NS",&#13;                      "type": "PARTY"&#13;                   },&#13;                   "name": "Hospital"&#13;                },&#13;                "participations": [&#13;                   {&#13;                      "@class": "PARTICIPATION",&#13;                      "function": {&#13;                         "@class": "DV_TEXT",&#13;                         "value": "requester"&#13;                      },&#13;                      "performer": {&#13;                         "@class": "PARTY_IDENTIFIED",&#13;                         "external_ref": {&#13;                            "@class": "PARTY_REF",&#13;                            "id": {&#13;                               "@class": "GENERIC_ID",&#13;                               "value": "199",&#13;                               "scheme": "HOSPITAL-NS"&#13;                            },&#13;                            "namespace": "HOSPITAL-NS",&#13;                            "type": "ANY"&#13;                         },&#13;                         "name": "Dr. Marcus Johnson"&#13;                      },&#13;                      "mode": {&#13;                         "@class": "DV_CODED_TEXT",&#13;                         "value": "face-to-face communication",&#13;                         "defining_code": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "openehr"&#13;                            },&#13;                            "code_string": "216"&#13;                         }&#13;                      }&#13;                   },&#13;                   {&#13;                      "@class": "PARTICIPATION",&#13;                      "function": {&#13;                         "@class": "DV_TEXT",&#13;                         "value": "performer"&#13;                      },&#13;                      "performer": {&#13;                         "@class": "PARTY_IDENTIFIED",&#13;                         "external_ref": {&#13;                            "@class": "PARTY_REF",&#13;                            "id": {&#13;                               "@class": "GENERIC_ID",&#13;                               "value": "198",&#13;                               "scheme": "HOSPITAL-NS"&#13;                            },&#13;                            "namespace": "HOSPITAL-NS",&#13;                            "type": "ANY"&#13;                         },&#13;                         "name": "Lara Markham"&#13;                      },&#13;                      "mode": {&#13;                         "@class": "DV_CODED_TEXT",&#13;                         "value": "not specified",&#13;                         "defining_code": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "openehr"&#13;                            },&#13;                            "code_string": "193"&#13;                         }&#13;                      }&#13;                   }&#13;                ]&#13;             },&#13;             "content": [&#13;                {&#13;                   "@class": "SECTION",&#13;                   "name": {&#13;                      "@class": "DV_TEXT",&#13;                      "value": "Сведения о МО"&#13;                   },&#13;                   "archetype_details": {&#13;                      "@class": "ARCHETYPED",&#13;                      "archetype_id": {&#13;                         "@class": "ARCHETYPE_ID",&#13;                         "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;                      },&#13;                      "rm_version": "1.0.4"&#13;                   },&#13;                   "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;                   "items": [&#13;                      {&#13;                         "@class": "ADMIN_ENTRY",&#13;                         "name": {&#13;                            "@class": "DV_TEXT",&#13;                            "value": "Медицинская организация, наблюдающая пациента"&#13;                         },&#13;                         "archetype_details": {&#13;                            "@class": "ARCHETYPED",&#13;                            "archetype_id": {&#13;                               "@class": "ARCHETYPE_ID",&#13;                               "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;                            },&#13;                            "rm_version": "1.0.4"&#13;                         },&#13;                         "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;                         "language": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "ISO_639-1"&#13;                            },&#13;                            "code_string": "ru"&#13;                         },&#13;                         "encoding": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "IANA_character-sets"&#13;                            },&#13;                            "code_string": "UTF-8"&#13;                         },&#13;                         "subject": {&#13;                            "@class": "PARTY_SELF"&#13;                         },&#13;                         "other_participations": [&#13;                            {&#13;                               "@class": "PARTICIPATION",&#13;                               "function": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "requester"&#13;                               },&#13;                               "performer": {&#13;                                  "@class": "PARTY_IDENTIFIED",&#13;                                  "external_ref": {&#13;                                     "@class": "PARTY_REF",&#13;                                     "id": {&#13;                                        "@class": "GENERIC_ID",&#13;                                        "value": "199",&#13;                                        "scheme": "HOSPITAL-NS"&#13;                                     },&#13;                                     "namespace": "HOSPITAL-NS",&#13;                                     "type": "ANY"&#13;                                  },&#13;                                  "name": "Dr. Marcus Johnson"&#13;                               },&#13;                               "mode": {&#13;                                  "@class": "DV_CODED_TEXT",&#13;                                  "value": "face-to-face communication",&#13;                                  "defining_code": {&#13;                                     "@class": "CODE_PHRASE",&#13;                                     "terminology_id": {&#13;                                        "@class": "TERMINOLOGY_ID",&#13;                                        "value": "openehr"&#13;                                     },&#13;                                     "code_string": "216"&#13;                                  }&#13;                               }&#13;                            },&#13;                            {&#13;                               "@class": "PARTICIPATION",&#13;                               "function": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "performer"&#13;                               },&#13;                               "performer": {&#13;                                  "@class": "PARTY_IDENTIFIED",&#13;                                  "external_ref": {&#13;                                     "@class": "PARTY_REF",&#13;                                     "id": {&#13;                                        "@class": "GENERIC_ID",&#13;                                        "value": "198",&#13;                                        "scheme": "HOSPITAL-NS"&#13;                                     },&#13;                                     "namespace": "HOSPITAL-NS",&#13;                                     "type": "ANY"&#13;                                  },&#13;                                  "name": "Lara Markham"&#13;                               },&#13;                               "mode": {&#13;                                  "@class": "DV_CODED_TEXT",&#13;                                  "value": "not specified",&#13;                                  "defining_code": {&#13;                                     "@class": "CODE_PHRASE",&#13;                                     "terminology_id": {&#13;                                        "@class": "TERMINOLOGY_ID",&#13;                                        "value": "openehr"&#13;                                     },&#13;                                     "code_string": "193"&#13;                                  }&#13;                               }&#13;                            }&#13;                         ],&#13;                         "data": {&#13;                            "@class": "ITEM_TREE",&#13;                            "name": {&#13;                               "@class": "DV_TEXT",&#13;                               "value": "Дерево"&#13;                            },&#13;                            "archetype_node_id": "at0001",&#13;                            "items": [&#13;                               {&#13;                                  "@class": "CLUSTER",&#13;                                  "name": {&#13;                                     "@class": "DV_TEXT",&#13;                                     "value": "Медицинская организация, наблюдающая пациента"&#13;                                  },&#13;                                  "archetype_details": {&#13;                                     "@class": "ARCHETYPED",&#13;                                     "archetype_id": {&#13;                                        "@class": "ARCHETYPE_ID",&#13;                                        "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;                                     },&#13;                                     "rm_version": "1.0.4"&#13;                                  },&#13;                                  "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;                                  "items": [&#13;                                     {&#13;                                        "@class": "ELEMENT",&#13;                                        "name": {&#13;                                           "@class": "DV_TEXT",&#13;                                           "value": "Медицинская организация, наблюдающая пациента"&#13;                                        },&#13;                                        "archetype_node_id": "at0001",&#13;                                        "value": {&#13;                                           "@class": "DV_CODED_TEXT",&#13;                                           "value": "256 описание",&#13;                                           "defining_code": {&#13;                                              "@class": "CODE_PHRASE",&#13;                                              "terminology_id": {&#13;                                                 "@class": "TERMINOLOGY_ID",&#13;                                                 "value": "ABSENT_TERMINOLOGY"&#13;                                              },&#13;                                              "code_string": "256"&#13;                                           }&#13;                                        }&#13;                                     }&#13;                                  ]&#13;                               },&#13;                               {&#13;                                  "@class": "CLUSTER",&#13;                                  "name": {&#13;                                     "@class": "DV_TEXT",&#13;                                     "value": "Другая МО, наблюдающая пациента"&#13;                                  },&#13;                                  "archetype_details": {&#13;                                     "@class": "ARCHETYPED",&#13;                                     "archetype_id": {&#13;                                        "@class": "ARCHETYPE_ID",&#13;                                        "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;                                     },&#13;                                     "rm_version": "1.0.4"&#13;                                  },&#13;                                  "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;                                  "items": [&#13;                                     {&#13;                                        "@class": "ELEMENT",&#13;                                        "name": {&#13;                                           "@class": "DV_TEXT",&#13;                                           "value": "Другая МО, наблюдающая пациента"&#13;                                        },&#13;                                        "archetype_node_id": "at0001",&#13;                                        "value": {&#13;                                           "@class": "DV_TEXT",&#13;                                           "value": "Другая МО, наблюдающая пациента 11"&#13;                                        }&#13;                                     }&#13;                                  ]&#13;                               }&#13;                            ]&#13;                         }&#13;                      },&#13;                      {&#13;                         "@class": "EVALUATION",&#13;                         "name": {&#13;                            "@class": "DV_TEXT",&#13;                            "value": "Отсутствие информации о МО в справочнике"&#13;                         },&#13;                         "archetype_details": {&#13;                            "@class": "ARCHETYPED",&#13;                            "archetype_id": {&#13;                               "@class": "ARCHETYPE_ID",&#13;                               "value": "openEHR-EHR-EVALUATION.absence-simi.v1"&#13;                            },&#13;                            "rm_version": "1.0.4"&#13;                         },&#13;                         "archetype_node_id": "openEHR-EHR-EVALUATION.absence-simi.v1",&#13;                         "language": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "ISO_639-1"&#13;                            },&#13;                            "code_string": "ru"&#13;                         },&#13;                         "encoding": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "IANA_character-sets"&#13;                            },&#13;                            "code_string": "UTF-8"&#13;                         },&#13;                         "subject": {&#13;                            "@class": "PARTY_SELF"&#13;                         },&#13;                         "other_participations": [&#13;                            {&#13;                               "@class": "PARTICIPATION",&#13;                               "function": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "requester"&#13;                               },&#13;                               "performer": {&#13;                                  "@class": "PARTY_IDENTIFIED",&#13;                                  "external_ref": {&#13;                                     "@class": "PARTY_REF",&#13;                                     "id": {&#13;                                        "@class": "GENERIC_ID",&#13;                                        "value": "199",&#13;                                        "scheme": "HOSPITAL-NS"&#13;                                     },&#13;                                     "namespace": "HOSPITAL-NS",&#13;                                     "type": "ANY"&#13;                                  },&#13;                                  "name": "Dr. Marcus Johnson"&#13;                               },&#13;                               "mode": {&#13;                                  "@class": "DV_CODED_TEXT",&#13;                                  "value": "face-to-face communication",&#13;                                  "defining_code": {&#13;                                     "@class": "CODE_PHRASE",&#13;                                     "terminology_id": {&#13;                                        "@class": "TERMINOLOGY_ID",&#13;                                        "value": "openehr"&#13;                                     },&#13;                                     "code_string": "216"&#13;                                  }&#13;                               }&#13;                            },&#13;                            {&#13;                               "@class": "PARTICIPATION",&#13;                               "function": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "performer"&#13;                               },&#13;                               "performer": {&#13;                                  "@class": "PARTY_IDENTIFIED",&#13;                                  "external_ref": {&#13;                                     "@class": "PARTY_REF",&#13;                                     "id": {&#13;                                        "@class": "GENERIC_ID",&#13;                                        "value": "198",&#13;                                        "scheme": "HOSPITAL-NS"&#13;                                     },&#13;                                     "namespace": "HOSPITAL-NS",&#13;                                     "type": "ANY"&#13;                                  },&#13;                                  "name": "Lara Markham"&#13;                               },&#13;                               "mode": {&#13;                                  "@class": "DV_CODED_TEXT",&#13;                                  "value": "not specified",&#13;                                  "defining_code": {&#13;                                     "@class": "CODE_PHRASE",&#13;                                     "terminology_id": {&#13;                                        "@class": "TERMINOLOGY_ID",&#13;                                        "value": "openehr"&#13;                                     },&#13;                                     "code_string": "193"&#13;                                  }&#13;                               }&#13;                            }&#13;                         ],&#13;                         "data": {&#13;                            "@class": "ITEM_TREE",&#13;                            "name": {&#13;                               "@class": "DV_TEXT",&#13;                               "value": "Дерево"&#13;                            },&#13;                            "archetype_node_id": "at0001",&#13;                            "items": [&#13;                               {&#13;                                  "@class": "ELEMENT",&#13;                                  "name": {&#13;                                     "@class": "DV_TEXT",&#13;                                     "value": "Заявление об отсутствии"&#13;                                  },&#13;                                  "archetype_node_id": "at0002",&#13;                                  "value": {&#13;                                     "@class": "DV_TEXT",&#13;                                     "value": "МО отсутствует в справочнике"&#13;                                  }&#13;                               }&#13;                            ]&#13;                         }&#13;                      }&#13;                   ]&#13;                },&#13;                {&#13;                   "@class": "SECTION",&#13;                   "name": {&#13;                      "@class": "DV_TEXT",&#13;                      "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;                   },&#13;                   "archetype_details": {&#13;                      "@class": "ARCHETYPED",&#13;                      "archetype_id": {&#13;                         "@class": "ARCHETYPE_ID",&#13;                         "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;                      },&#13;                      "rm_version": "1.0.4"&#13;                   },&#13;                   "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;                   "items": [&#13;                      {&#13;                         "@class": "ADMIN_ENTRY",&#13;                         "name": {&#13;                            "@class": "DV_TEXT",&#13;                            "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;                         },&#13;                         "archetype_details": {&#13;                            "@class": "ARCHETYPED",&#13;                            "archetype_id": {&#13;                               "@class": "ARCHETYPE_ID",&#13;                               "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;                            },&#13;                            "rm_version": "1.0.4"&#13;                         },&#13;                         "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;                         "language": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "ISO_639-1"&#13;                            },&#13;                            "code_string": "ru"&#13;                         },&#13;                         "encoding": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "IANA_character-sets"&#13;                            },&#13;                            "code_string": "UTF-8"&#13;                         },&#13;                         "subject": {&#13;                            "@class": "PARTY_SELF"&#13;                         },&#13;                         "other_participations": [&#13;                            {&#13;                               "@class": "PARTICIPATION",&#13;                               "function": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "requester"&#13;                               },&#13;                               "performer": {&#13;                                  "@class": "PARTY_IDENTIFIED",&#13;                                  "external_ref": {&#13;                                     "@class": "PARTY_REF",&#13;                                     "id": {&#13;                                        "@class": "GENERIC_ID",&#13;                                        "value": "199",&#13;                                        "scheme": "HOSPITAL-NS"&#13;                                     },&#13;                                     "namespace": "HOSPITAL-NS",&#13;                                     "type": "ANY"&#13;                                  },&#13;                                  "name": "Dr. Marcus Johnson"&#13;                               },&#13;                               "mode": {&#13;                                  "@class": "DV_CODED_TEXT",&#13;                                  "value": "face-to-face communication",&#13;                                  "defining_code": {&#13;                                     "@class": "CODE_PHRASE",&#13;                                     "terminology_id": {&#13;                                        "@class": "TERMINOLOGY_ID",&#13;                                        "value": "openehr"&#13;                                     },&#13;                                     "code_string": "216"&#13;                                  }&#13;                               }&#13;                            },&#13;                            {&#13;                               "@class": "PARTICIPATION",&#13;                               "function": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "performer"&#13;                               },&#13;                               "performer": {&#13;                                  "@class": "PARTY_IDENTIFIED",&#13;                                  "external_ref": {&#13;                                     "@class": "PARTY_REF",&#13;                                     "id": {&#13;                                        "@class": "GENERIC_ID",&#13;                                        "value": "198",&#13;                                        "scheme": "HOSPITAL-NS"&#13;                                     },&#13;                                     "namespace": "HOSPITAL-NS",&#13;                                     "type": "ANY"&#13;                                  },&#13;                                  "name": "Lara Markham"&#13;                               },&#13;                               "mode": {&#13;                                  "@class": "DV_CODED_TEXT",&#13;                                  "value": "not specified",&#13;                                  "defining_code": {&#13;                                     "@class": "CODE_PHRASE",&#13;                                     "terminology_id": {&#13;                                        "@class": "TERMINOLOGY_ID",&#13;                                        "value": "openehr"&#13;                                     },&#13;                                     "code_string": "193"&#13;                                  }&#13;                               }&#13;                            }&#13;                         ],&#13;                         "data": {&#13;                            "@class": "ITEM_TREE",&#13;                            "name": {&#13;                               "@class": "DV_TEXT",&#13;                               "value": "Дерево"&#13;                            },&#13;                            "archetype_node_id": "at0001",&#13;                            "items": [&#13;                               {&#13;                                  "@class": "CLUSTER",&#13;                                  "name": {&#13;                                     "@class": "DV_TEXT",&#13;                                     "value": "Дата начала наблюдения в МО по диагнозу"&#13;                                  },&#13;                                  "archetype_details": {&#13;                                     "@class": "ARCHETYPED",&#13;                                     "archetype_id": {&#13;                                        "@class": "ARCHETYPE_ID",&#13;                                        "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;                                     },&#13;                                     "rm_version": "1.0.4"&#13;                                  },&#13;                                  "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;                                  "items": [&#13;                                     {&#13;                                        "@class": "ELEMENT",&#13;                                        "name": {&#13;                                           "@class": "DV_TEXT",&#13;                                           "value": "Дата"&#13;                                        },&#13;                                        "archetype_node_id": "at0001",&#13;                                        "value": {&#13;                                           "@class": "DV_DATE",&#13;                                           "value": "2021-11-26"&#13;                                        }&#13;                                     },&#13;                                     {&#13;                                        "@class": "ELEMENT",&#13;                                        "name": {&#13;                                           "@class": "DV_TEXT",&#13;                                           "value": "Неточная дата"&#13;                                        },&#13;                                        "archetype_node_id": "at0037",&#13;                                        "value": {&#13;                                           "@class": "DV_BOOLEAN",&#13;                                           "value": false&#13;                                        }&#13;                                     },&#13;                                     {&#13;                                        "@class": "CLUSTER",&#13;                                        "name": {&#13;                                           "@class": "DV_TEXT",&#13;                                           "value": "Подробности неточной даты"&#13;                                        },&#13;                                        "archetype_node_id": "at0031",&#13;                                        "items": [&#13;                                           {&#13;                                              "@class": "ELEMENT",&#13;                                              "name": {&#13;                                                 "@class": "DV_TEXT",&#13;                                                 "value": "Месяц"&#13;                                              },&#13;                                              "archetype_node_id": "at0033",&#13;                                              "value": {&#13;                                                 "@class": "DV_COUNT",&#13;                                                 "magnitude": 3&#13;                                              }&#13;                                           },&#13;                                           {&#13;                                              "@class": "ELEMENT",&#13;                                              "name": {&#13;                                                 "@class": "DV_TEXT",&#13;                                                 "value": "Год"&#13;                                              },&#13;                                              "archetype_node_id": "at0034",&#13;                                              "value": {&#13;                                                 "@class": "DV_COUNT",&#13;                                                 "magnitude": 9&#13;                                              }&#13;                                           }&#13;                                        ]&#13;                                     }&#13;                                  ]&#13;                               },&#13;                               {&#13;                                  "@class": "CLUSTER",&#13;                                  "name": {&#13;                                     "@class": "DV_TEXT",&#13;                                     "value": "Дата окончания наблюдения в МО по диагнозу"&#13;                                  },&#13;                                  "archetype_details": {&#13;                                     "@class": "ARCHETYPED",&#13;                                     "archetype_id": {&#13;                                        "@class": "ARCHETYPE_ID",&#13;                                        "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;                                     },&#13;                                     "rm_version": "1.0.4"&#13;                                  },&#13;                                  "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;                                  "items": [&#13;                                     {&#13;                                        "@class": "ELEMENT",&#13;                                        "name": {&#13;                                           "@class": "DV_TEXT",&#13;                                           "value": "Дата окончания наблюдения в МО по диагнозу"&#13;                                        },&#13;                                        "archetype_node_id": "at0001",&#13;                                        "value": {&#13;                                           "@class": "DV_DATE",&#13;                                           "value": "2021-11-30"&#13;                                        }&#13;                                     }&#13;                                  ]&#13;                               }&#13;                            ]&#13;                         }&#13;                      }&#13;                   ]&#13;                },&#13;                {&#13;                   "@class": "SECTION",&#13;                   "name": {&#13;                      "@class": "DV_TEXT",&#13;                      "value": "Диагноз наблюдения пациента"&#13;                   },&#13;                   "archetype_details": {&#13;                      "@class": "ARCHETYPED",&#13;                      "archetype_id": {&#13;                         "@class": "ARCHETYPE_ID",&#13;                         "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;                      },&#13;                      "rm_version": "1.0.4"&#13;                   },&#13;                   "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;                   "items": [&#13;                      {&#13;                         "@class": "EVALUATION",&#13;                         "name": {&#13;                            "@class": "DV_TEXT",&#13;                            "value": "Диагноз"&#13;                         },&#13;                         "archetype_details": {&#13;                            "@class": "ARCHETYPED",&#13;                            "archetype_id": {&#13;                               "@class": "ARCHETYPE_ID",&#13;                               "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;                            },&#13;                            "rm_version": "1.0.4"&#13;                         },&#13;                         "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;                         "language": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "ISO_639-1"&#13;                            },&#13;                            "code_string": "ru"&#13;                         },&#13;                         "encoding": {&#13;                            "@class": "CODE_PHRASE",&#13;                            "terminology_id": {&#13;                               "@class": "TERMINOLOGY_ID",&#13;                               "value": "IANA_character-sets"&#13;                            },&#13;                            "code_string": "UTF-8"&#13;                         },&#13;                         "subject": {&#13;                            "@class": "PARTY_SELF"&#13;                         },&#13;                         "other_participations": [&#13;                            {&#13;                               "@class": "PARTICIPATION",&#13;                               "function": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "requester"&#13;                               },&#13;                               "performer": {&#13;                                  "@class": "PARTY_IDENTIFIED",&#13;                                  "external_ref": {&#13;                                     "@class": "PARTY_REF",&#13;                                     "id": {&#13;                                        "@class": "GENERIC_ID",&#13;                                        "value": "199",&#13;                                        "scheme": "HOSPITAL-NS"&#13;                                     },&#13;                                     "namespace": "HOSPITAL-NS",&#13;                                     "type": "ANY"&#13;                                  },&#13;                                  "name": "Dr. Marcus Johnson"&#13;                               },&#13;                               "mode": {&#13;                                  "@class": "DV_CODED_TEXT",&#13;                                  "value": "face-to-face communication",&#13;                                  "defining_code": {&#13;                                     "@class": "CODE_PHRASE",&#13;                                     "terminology_id": {&#13;                                        "@class": "TERMINOLOGY_ID",&#13;                                        "value": "openehr"&#13;                                     },&#13;                                     "code_string": "216"&#13;                                  }&#13;                               }&#13;                            },&#13;                            {&#13;                               "@class": "PARTICIPATION",&#13;                               "function": {&#13;                                  "@class": "DV_TEXT",&#13;                                  "value": "performer"&#13;                               },&#13;                               "performer": {&#13;                                  "@class": "PARTY_IDENTIFIED",&#13;                                  "external_ref": {&#13;                                     "@class": "PARTY_REF",&#13;                                     "id": {&#13;                                        "@class": "GENERIC_ID",&#13;                                        "value": "198",&#13;                                        "scheme": "HOSPITAL-NS"&#13;                                     },&#13;                                     "namespace": "HOSPITAL-NS",&#13;                                     "type": "ANY"&#13;                                  },&#13;                                  "name": "Lara Markham"&#13;                               },&#13;                               "mode": {&#13;                                  "@class": "DV_CODED_TEXT",&#13;                                  "value": "not specified",&#13;                                  "defining_code": {&#13;                                     "@class": "CODE_PHRASE",&#13;                                     "terminology_id": {&#13;                                        "@class": "TERMINOLOGY_ID",&#13;                                        "value": "openehr"&#13;                                     },&#13;                                     "code_string": "193"&#13;                                  }&#13;                               }&#13;                            }&#13;                         ],&#13;                         "data": {&#13;                            "@class": "ITEM_TREE",&#13;                            "name": {&#13;                               "@class": "DV_TEXT",&#13;                               "value": "structure"&#13;                            },&#13;                            "archetype_node_id": "at0001",&#13;                            "items": [&#13;                               {&#13;                                  "@class": "ELEMENT",&#13;                                  "name": {&#13;                                     "@class": "DV_TEXT",&#13;                                     "value": "Код диагноза по МКБ-10"&#13;                                  },&#13;                                  "archetype_node_id": "at0002",&#13;                                  "value": {&#13;                                     "@class": "DV_CODED_TEXT",&#13;                                     "value": "A16.5 - Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении",&#13;                                     "defining_code": {&#13;                                        "@class": "CODE_PHRASE",&#13;                                        "terminology_id": {&#13;                                           "@class": "TERMINOLOGY_ID",&#13;                                           "value": "NSI"&#13;                                        },&#13;                                        "code_string": "S76.7"&#13;                                     }&#13;                                  }&#13;                               }&#13;                            ]&#13;                         }&#13;                      }&#13;                   ]&#13;                }&#13;             ]&#13;          }&#13;       }&#13;    ]&#13; }</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create.xml</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="e133c026-bc28-4a19-acfb-edffe3fa7d29" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#115965" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="2e9a6215-110b-4217-ae3a-f6d1e9c14484"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="e15e19cd-6db5-45e5-a361-e287aa17061e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="1e210012-dc24-420c-a947-197eab3bb88d"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="eb69a2f0-80b8-46e4-bbf5-73c547380c8e"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="567cf704-9a3f-451d-b016-dbe98f2b3e22"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5d605219-503d-4ef4-a3fc-f9e1b26d3f95"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 1" id="7db9362a-6c7f-459d-ba66-4e52e7cbde75"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('MKBCodeReplace', code)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="52587526-d621-4970-8077-1495c8c01d17"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="46399f56-252d-4248-acbc-625437ce48db"><con:description>Провериь грейлог  или топик ConsumerErrors</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми: "Отсутствуют обязательные значения: &lt;params> в документе &lt;uid>"</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 2" id="9d696149-d7e6-415e-a316-a3ceb425eb5a"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory2")
def msg = testFile
.replace('patientReplace', 'test')
.replace('compositionReplace', uid)
.replace('MKBCodeReplace', code)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="4818647c-2747-468c-a5cc-120565abedcc"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep Step 2" id="e0a989f0-01ca-435f-ae40-823b6d3f2232"><con:description>Провериь грейлог  или топик ConsumerErrors</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми: "Отсутствуют обязательные значения: &lt;params> в документе &lt;uid>"</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 3" id="54f4bf0c-25d6-4542-a493-253278b044d6"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory3")
def msg = testFile
.replace('patientReplace', 'test')
.replace('compositionReplace', uid)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 3" id="054c6573-a1ab-41f0-927f-c2e815a2f12c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep Step 3" id="1fd3e4f7-011b-453b-82f9-0ec432c9d06f"><con:description>Провериь грейлог  или топик ConsumerErrors</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E013 c параметрами &lt;uid> и &lt;params>, где params список параметров, которые получены пустыми: "Отсутствуют обязательные значения: &lt;params> в документе &lt;uid>"</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>4142</con:value></con:property><con:property><con:name>uid</con:name><con:value>256</con:value></con:property><con:property><con:name>code</con:name><con:value>S76.7</con:value></con:property><con:property><con:name>id</con:name><con:value>128298434</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "135ac594-3e04-4a4f-98ac-845427bea2ff",&#13;
   "operationType": "create",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "newResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "4142",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "02f0f727-748e-4c74-9a01-a63d13e39dad::default::1"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "US"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "name": "Silvia Blake"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2021-11-25T01:59:45.201235+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "Issuer",&#13;
                                 "assigner": "Assigner",&#13;
                                 "id": "338ae3d5-b9c2-46e5-857d-28b5f54cdbfa",&#13;
                                 "type": "Prescription"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "Issuer",&#13;
                                 "assigner": "Assigner",&#13;
                                 "id": "b910132d-061a-4a7d-96b1-1e7ec848def1",&#13;
                                 "type": "Prescription"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "Issuer",&#13;
                                 "assigner": "Assigner",&#13;
                                 "id": "84b5cd5e-266a-4270-aa32-ac368b748bea",&#13;
                                 "type": "Prescription"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "Issuer",&#13;
                                       "assigner": "Assigner",&#13;
                                       "id": "6a9563e1-f329-4802-94ed-22af3ca10488",&#13;
                                       "type": "Prescription"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности 75"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения 70"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала 65"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица 8"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "Issuer",&#13;
                                       "assigner": "Assigner",&#13;
                                       "id": "048571c7-2b97-4c3f-a69a-a3d9ee6f4524",&#13;
                                       "type": "Prescription"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "больница",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0072"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование 56"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Родительский ИД"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0017",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "Issuer",&#13;
                                       "assigner": "Assigner",&#13;
                                       "id": "266c9641-6b65-4ef1-a910-0185bae34ddc",&#13;
                                       "type": "Prescription"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ 9"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ) 34"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение 69"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт 92"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры 79"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица 96"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома 36"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения 92"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса 74"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка 30"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация 74"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0071"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ 54"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ) 17"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение 63"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт 97"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры 55"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица 76"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома 49"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0084",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения 8"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0083",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса 76"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка 57"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения 77"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация 17"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Педиатрия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0088"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0055"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "плановая",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0060"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "9091",&#13;
                        "scheme": "HOSPITAL-NS"&#13;
                     },&#13;
                     "namespace": "HOSPITAL-NS",&#13;
                     "type": "PARTY"&#13;
                  },&#13;
                  "name": "Hospital"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "requester"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "199",&#13;
                              "scheme": "HOSPITAL-NS"&#13;
                           },&#13;
                           "namespace": "HOSPITAL-NS",&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Dr. Marcus Johnson"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "face-to-face communication",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "216"&#13;
                        }&#13;
                     }&#13;
                  },&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "performer"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "198",&#13;
                              "scheme": "HOSPITAL-NS"&#13;
                           },&#13;
                           "namespace": "HOSPITAL-NS",&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Lara Markham"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "other_participations": [&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "requester"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "199",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Dr. Marcus Johnson"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "face-to-face communication",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "216"&#13;
                                 }&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "performer"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "198",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Lara Markham"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "not specified",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "193"&#13;
                                 }&#13;
                              }&#13;
                           }&#13;
                        ],&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Медицинская организация, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Медицинская организация, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_CODED_TEXT",&#13;
                                          "value": "256 описание",&#13;
                                          "defining_code": {&#13;
                                             "@class": "CODE_PHRASE",&#13;
                                             "terminology_id": {&#13;
                                                "@class": "TERMINOLOGY_ID",&#13;
                                                "value": "ABSENT_TERMINOLOGY"&#13;
                                             },&#13;
                                             "code_string": "256"&#13;
                                          }&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              },&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Другая МО, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Другая МО, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Другая МО, наблюдающая пациента 11"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     },&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Отсутствие информации о МО в справочнике"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.absence-simi.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.absence-simi.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "other_participations": [&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "requester"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "199",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Dr. Marcus Johnson"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "face-to-face communication",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "216"&#13;
                                 }&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "performer"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "198",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Lara Markham"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "not specified",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "193"&#13;
                                 }&#13;
                              }&#13;
                           }&#13;
                        ],&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Заявление об отсутствии"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "МО отсутствует в справочнике"&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "other_participations": [&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "requester"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "199",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Dr. Marcus Johnson"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "face-to-face communication",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "216"&#13;
                                 }&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "performer"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "198",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Lara Markham"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "not specified",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "193"&#13;
                                 }&#13;
                              }&#13;
                           }&#13;
                        ],&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2021-11-26"&#13;
                                       }&#13;
                                    },&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Неточная дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0037",&#13;
                                       "value": {&#13;
                                          "@class": "DV_BOOLEAN",&#13;
                                          "value": false&#13;
                                       }&#13;
                                    },&#13;
                                    {&#13;
                                       "@class": "CLUSTER",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Подробности неточной даты"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0031",&#13;
                                       "items": [&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Месяц"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0033",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 3&#13;
                                             }&#13;
                                          },&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Год"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0034",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 9&#13;
                                             }&#13;
                                          }&#13;
                                       ]&#13;
                                    }&#13;
                                 ]&#13;
                              },&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2021-11-30"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "other_participations": [&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "requester"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "199",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Dr. Marcus Johnson"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "face-to-face communication",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "216"&#13;
                                 }&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "performer"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "198",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Lara Markham"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "not specified",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "193"&#13;
                                 }&#13;
                              }&#13;
                           }&#13;
                        ],&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A16.5 - Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "S76.7"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ]&#13;
}</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition no composition.xml</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition no MO.xml</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition no diagnosis.xml</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="97977e3b-cf92-4a29-a65e-e1eb956a0244" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#115967" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="62b9f4c3-4d9d-4644-8237-b0084d79d34b"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="34a42f89-7858-44fc-9ee9-62e0427f51c7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="fcdfd174-8ec0-4f84-9b28-b24c2992492b"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="8a4c5c24-f566-429f-890f-c4b243c33665"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="ea0602b3-f0ab-4bd7-a7ff-114ba72901cb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = true
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="02d15fee-2718-4a64-aed5-dfac1a044869"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change" id="834dd6fc-7564-45c8-b35e-a7e96d563907"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('MKBCodeReplace', code)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="889b04d0-3277-4001-a8b6-bf5ee954f777"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 1" id="9de56056-df11-48bc-b1e4-d3fa105c8634"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.composition_id =  '${#TestCase#uid}'</con:query><con:assertion type="Simple NotContains" id="fe9e6189-71ed-4d01-97c8-c84dea231f18" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="02d84106-c6cb-4f93-9d26-6a8a359978d4"><con:description>Провериь грейлог  или топик ConsumerErrors</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E020 с параметрами &lt;uid> и &lt;diagnosisCode>: "Диагнозы с кодом: &lt;diagnosis> отсутствуют в справочнике диагнозов"</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5243</con:value></con:property><con:property><con:name>uid</con:name><con:value>6416</con:value></con:property><con:property><con:name>code</con:name><con:value>X34.4</con:value></con:property><con:property><con:name>id</con:name><con:value>128301405</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "135ac594-3e04-4a4f-98ac-845427bea2ff",&#13;
   "operationType": "create",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "compositionId": "6416",&#13;
   "newResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "5243",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "02f0f727-748e-4c74-9a01-a63d13e39dad::default::1"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "US"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "name": "Silvia Blake"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2021-11-25T01:59:45.201235+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "Issuer",&#13;
                                 "assigner": "Assigner",&#13;
                                 "id": "338ae3d5-b9c2-46e5-857d-28b5f54cdbfa",&#13;
                                 "type": "Prescription"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "Issuer",&#13;
                                 "assigner": "Assigner",&#13;
                                 "id": "b910132d-061a-4a7d-96b1-1e7ec848def1",&#13;
                                 "type": "Prescription"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "Issuer",&#13;
                                 "assigner": "Assigner",&#13;
                                 "id": "84b5cd5e-266a-4270-aa32-ac368b748bea",&#13;
                                 "type": "Prescription"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "Issuer",&#13;
                                       "assigner": "Assigner",&#13;
                                       "id": "6a9563e1-f329-4802-94ed-22af3ca10488",&#13;
                                       "type": "Prescription"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности 75"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения 70"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала 65"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица 8"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "Issuer",&#13;
                                       "assigner": "Assigner",&#13;
                                       "id": "048571c7-2b97-4c3f-a69a-a3d9ee6f4524",&#13;
                                       "type": "Prescription"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "больница",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0072"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование 56"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Родительский ИД"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0017",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "Issuer",&#13;
                                       "assigner": "Assigner",&#13;
                                       "id": "266c9641-6b65-4ef1-a910-0185bae34ddc",&#13;
                                       "type": "Prescription"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ 9"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ) 34"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение 69"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт 92"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры 79"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица 96"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома 36"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения 92"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса 74"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка 30"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация 74"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0071"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ 54"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ) 17"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение 63"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт 97"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры 55"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица 76"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома 49"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0084",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения 8"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0083",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса 76"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка 57"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения 77"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация 17"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Педиатрия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0088"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0055"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "плановая",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0060"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "9091",&#13;
                        "scheme": "HOSPITAL-NS"&#13;
                     },&#13;
                     "namespace": "HOSPITAL-NS",&#13;
                     "type": "PARTY"&#13;
                  },&#13;
                  "name": "Hospital"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "requester"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "199",&#13;
                              "scheme": "HOSPITAL-NS"&#13;
                           },&#13;
                           "namespace": "HOSPITAL-NS",&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Dr. Marcus Johnson"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "face-to-face communication",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "216"&#13;
                        }&#13;
                     }&#13;
                  },&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "performer"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "198",&#13;
                              "scheme": "HOSPITAL-NS"&#13;
                           },&#13;
                           "namespace": "HOSPITAL-NS",&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Lara Markham"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "other_participations": [&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "requester"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "199",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Dr. Marcus Johnson"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "face-to-face communication",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "216"&#13;
                                 }&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "performer"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "198",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Lara Markham"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "not specified",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "193"&#13;
                                 }&#13;
                              }&#13;
                           }&#13;
                        ],&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Медицинская организация, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Медицинская организация, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_CODED_TEXT",&#13;
                                          "value": "256 описание",&#13;
                                          "defining_code": {&#13;
                                             "@class": "CODE_PHRASE",&#13;
                                             "terminology_id": {&#13;
                                                "@class": "TERMINOLOGY_ID",&#13;
                                                "value": "ABSENT_TERMINOLOGY"&#13;
                                             },&#13;
                                             "code_string": "256"&#13;
                                          }&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              },&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Другая МО, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Другая МО, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Другая МО, наблюдающая пациента 11"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     },&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Отсутствие информации о МО в справочнике"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.absence-simi.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.absence-simi.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "other_participations": [&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "requester"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "199",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Dr. Marcus Johnson"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "face-to-face communication",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "216"&#13;
                                 }&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "performer"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "198",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Lara Markham"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "not specified",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "193"&#13;
                                 }&#13;
                              }&#13;
                           }&#13;
                        ],&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Заявление об отсутствии"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "МО отсутствует в справочнике"&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "other_participations": [&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "requester"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "199",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Dr. Marcus Johnson"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "face-to-face communication",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "216"&#13;
                                 }&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "performer"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "198",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Lara Markham"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "not specified",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "193"&#13;
                                 }&#13;
                              }&#13;
                           }&#13;
                        ],&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2021-11-26"&#13;
                                       }&#13;
                                    },&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Неточная дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0037",&#13;
                                       "value": {&#13;
                                          "@class": "DV_BOOLEAN",&#13;
                                          "value": false&#13;
                                       }&#13;
                                    },&#13;
                                    {&#13;
                                       "@class": "CLUSTER",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Подробности неточной даты"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0031",&#13;
                                       "items": [&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Месяц"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0033",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 3&#13;
                                             }&#13;
                                          },&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Год"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0034",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 9&#13;
                                             }&#13;
                                          }&#13;
                                       ]&#13;
                                    }&#13;
                                 ]&#13;
                              },&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2021-11-30"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "other_participations": [&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "requester"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "199",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Dr. Marcus Johnson"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "face-to-face communication",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "216"&#13;
                                 }&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "PARTICIPATION",&#13;
                              "function": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "performer"&#13;
                              },&#13;
                              "performer": {&#13;
                                 "@class": "PARTY_IDENTIFIED",&#13;
                                 "external_ref": {&#13;
                                    "@class": "PARTY_REF",&#13;
                                    "id": {&#13;
                                       "@class": "GENERIC_ID",&#13;
                                       "value": "198",&#13;
                                       "scheme": "HOSPITAL-NS"&#13;
                                    },&#13;
                                    "namespace": "HOSPITAL-NS",&#13;
                                    "type": "ANY"&#13;
                                 },&#13;
                                 "name": "Lara Markham"&#13;
                              },&#13;
                              "mode": {&#13;
                                 "@class": "DV_CODED_TEXT",&#13;
                                 "value": "not specified",&#13;
                                 "defining_code": {&#13;
                                    "@class": "CODE_PHRASE",&#13;
                                    "terminology_id": {&#13;
                                       "@class": "TERMINOLOGY_ID",&#13;
                                       "value": "openehr"&#13;
                                    },&#13;
                                    "code_string": "193"&#13;
                                 }&#13;
                              }&#13;
                           }&#13;
                        ],&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A16.5 - Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "X34.4"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ]&#13;
}</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create.xml</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="bbbfdd10-27e3-4903-b554-d98651d4aaf0" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#145403" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="1e677a55-e94b-41ef-9979-4f967527f262"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="40252a44-e431-4a89-b6cb-5355995e41b6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="46e5e694-237d-440d-8ea3-9d7ace97fde5"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="1703fdfb-99f2-4f32-82f2-a8b933769e26"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="af9f2948-98f9-404f-a8d3-4ba9f93eac5e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ead553fe-c7e2-4f77-9e7e-d21097dfb132"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change" id="7031917b-7602-4383-8b64-1ec4eccda9e1"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory2")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="d97360a8-30fa-4a40-a18c-6e7968ecced4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="05542c35-07a2-4d98-97e1-f38cfae73b13"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 1" id="0321c6b8-9a66-4794-a4e0-f05a3b334fe8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d5d6fe5-bae2-40a2-8eb2-edbf31bd9125" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5bddb0ef-dddd-410e-8cbb-99804b3b4f95"><con:configuration/></con:assertion><con:assertion type="Simple NotContains" id="6a2940fc-4d8c-4282-82f2-516982dfb23b" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94084f2-824a-4241-8c23-598ba8379786" name="Contains 6"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1" id="30989096-e823-4197-9d54-cf615d6c9187"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Check f_external_attachment Step 1</con:sourceStep><con:sourcePath>//F_EXTERNAL_ATTACHMENT.ID</con:sourcePath><con:targetType>attachment_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event" id="18cbe5eb-7bc7-47cc-bd63-df9332c61a17"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:58:20&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fa7984e6-dc8c-4e8c-8804-425b235ab881" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e4d955f7-b834-41d3-844f-76701be7525f" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41cc80a4-eafc-4f97-942a-8d4082694d3d" name="Not Contains 4"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="147ea1bb-b9d0-41cc-a14e-2da82f2edce1" name="Contains 4"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cbf9dd05-668c-4548-9fbd-d341b3a7b052" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="552184ba-13dd-45af-97b2-1808e2f7dd0c" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="f3d74f9d-618a-4470-b9a3-e40e8be73af8"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="1"+documentId

assert messageJson.openedDate==null

assert messageJson.endDate==null

assert messageJson.openedYear==2022

assert messageJson.openedMonth==2

assert messageJson.compositionId==compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==null

assert messageJson.moName=="Поликлиника Добровольской"</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB Step 3" id="25949e79-4e86-4382-b7f6-bb1cdf22b0d8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Step 3" id="26cded28-bdf6-4b45-a1ed-3ede5158c22d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB Step 3</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB Step 3</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 3" id="a57fd5a0-9d38-40ac-be30-7f83a686bb2d"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year69=testRunner.testCase.getPropertyValue("year69")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory2")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace',1+ uid)
.replace('documentReplace', 2+uid)
.replace('MKBCodeReplace', code)
.replace('year', year69)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime 2" id="12e2730e-28f6-4c52-a213-fed38aff6e90"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 3" id="8cfcdd03-1bb5-46da-81b4-67ea89f7f8cb"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 3" id="6da42f3d-087c-44f3-99a3-7da0d468ab8d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '2${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="033230c4-48cf-4e45-98f7-75a9a091ea80" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>2069&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check old f_external_attachment Step 3" id="1110ce7f-5f2a-4247-9504-af351455d555"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="08feeb62-d989-48e1-a391-574364e5eea8" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 2" id="0d814a23-a454-4601-b9cf-ff847f561210"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Check f_external_attachment Step 3</con:sourceStep><con:sourcePath>//F_EXTERNAL_ATTACHMENT.ID</con:sourcePath><con:targetType>attachment_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 3" id="1f64e7be-b203-476c-9bd8-f7a090942c01"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="964430a7-4d59-43ce-96b8-4c4714489a6f" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>2069&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson Step 3" id="7401717d-5512-4616-a715-bdd6387e1a07"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="2"+documentId

assert messageJson.openedDate==null

assert messageJson.endDate==null

assert messageJson.openedYear==2069

assert messageJson.openedMonth==2

assert messageJson.compositionId=="1"+compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==null

assert messageJson.moName=="Поликлиника Добровольской"</script></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 4" id="cad2c6d2-e24f-4427-849f-4509d731b97b"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory2")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', 2+uid)
.replace('documentReplace', 3+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-30', '2022-03-28')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime 3" id="8ed8f144-2706-4e0c-a4b6-5589d51e7e2a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 4" id="940ecb7d-e65d-4b93-9883-8933ff2611fb"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 4" id="d86c685b-72f2-49b4-a22b-29ee1682dfd9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '3${#TestCase#uid}'</con:query><con:assertion type="Simple NotContains" id="f50ab271-2dcd-48cd-b72c-2c82d82b800a" name="Not Contains"><con:configuration><token>F_EXTERNAL_ATTACHMENT.ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="f_external_attachment_event Step 4" id="c07dc042-6161-4fa0-aefb-72f02d52d0dd"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="964430a7-4d59-43ce-96b8-4c4714489a6f" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>2069&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson Step 4" id="4e24ac8c-11a6-4cc7-92a8-d07f349c2aa3"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="2"+documentId

assert messageJson.openedDate==null

assert messageJson.endDate==null

assert messageJson.openedYear==2069

assert messageJson.openedMonth==2

assert messageJson.compositionId=="1"+compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==null

assert messageJson.moName=="Поликлиника Добровольской"</script></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 5" id="d2e91af8-84b4-46fc-a4a1-b75d1a21e355"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory2")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', 3+uid)
.replace('documentReplace', 3+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-30', '2022-04-29')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime 4" id="abde91e2-c65e-4761-865c-29abd38f21bc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 5" id="cabb1ca0-8404-4ffa-b2a0-ae853edd9984"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 5" id="acb1bcf9-4016-4a46-828d-e6f232dfab40"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '3${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="c8fb7d00-70af-46f1-81c0-b06844173561" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>1970&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 5" id="16dc4912-a6e8-412b-8835-d183d93d4474"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="0a0758d9-b3ee-47ec-a33c-4d241d1187bd" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>1970&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check old f_external_attachment Step 5" id="6e76fb09-6889-4db3-876a-f707c90e976f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '2${#TestCase#uid}'</con:query><con:assertion type="Simple NotContains" id="7eac6e27-e53c-4ba7-b3ae-606dfba9295f" name="Not Contains"><con:configuration><token>F_EXTERNAL_ATTACHMENT.PATIENT_ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson Step 5" id="7e12e07f-b1a8-475f-8123-44fa06179b8a"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="3"+documentId

assert messageJson.openedDate==null

assert messageJson.endDate==null

assert messageJson.openedYear==1970

assert messageJson.openedMonth==2

assert messageJson.compositionId=="3"+compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==null

assert messageJson.moName=="Поликлиника Добровольской"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3122</con:value></con:property><con:property><con:name>uid</con:name><con:value>9297</con:value></con:property><con:property><con:name>code</con:name><con:value>F93.8</con:value></con:property><con:property><con:name>id</con:name><con:value>128289803</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "7fbc480e-4060-47b5-968d-15a27678f816",&#13;
   "operationType": "update",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "compositionId": "39297",&#13;
   "newResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "3122",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "39297"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "RU"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "external_ref": {&#13;
                  "@class": "PARTY_REF",&#13;
                  "id": {&#13;
                     "@class": "GENERIC_ID",&#13;
                     "value": "20585024948",&#13;
                     "scheme": "undefined"&#13;
                  },&#13;
                  "namespace": "Парус",&#13;
                  "type": "ANY"&#13;
               },&#13;
               "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2022-04-29T16:58:20+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "294474042",&#13;
                                 "type": "Идентификатор События"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "39297",&#13;
                                 "type": "Идентификатор документа СИМИ"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "3122",&#13;
                                 "type": "Идентификатор пациента"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "undefined",&#13;
                                       "assigner": "undefined",&#13;
                                       "id": "12018042375",&#13;
                                       "type": "EMIAS"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Врач - терапевт участковый"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Терапевтическое отделение № 1"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "issuer",&#13;
                                       "assigner": "assigner",&#13;
                                       "id": "204",&#13;
                                       "type": "type"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно-поликлинический центр",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0019"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_дома"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_строения"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_корпуса"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "В медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0070"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "поселение"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "внутригородская территория поселение Филимонковское, деревня Верхнее Валуево, 5-я Валуевская улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "20"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_помещения"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Терапия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0087"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0054"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "экстренная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0058"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "1037719010757",&#13;
                        "scheme": "undefined"&#13;
                     },&#13;
                     "namespace": "Сервис РМР/РМУ",&#13;
                     "type": "ANY"&#13;
                  },&#13;
                  "name": "ГБУЗ ГП №175 ДЗМ"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "Врач"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "12018042375"&#13;
                           },&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Другая МО, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Другая МО, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Поликлиника Добровольской"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     },&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Отсутствие информации о МО в справочнике"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.absence-simi.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.absence-simi.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Заявление об отсутствии"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "МО отсутствует в справочнике"&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Неточная дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0037",&#13;
                                       "value": {&#13;
                                          "@class": "DV_BOOLEAN",&#13;
                                          "value": true&#13;
                                       }&#13;
                                    },&#13;
                                    {&#13;
                                       "@class": "CLUSTER",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Подробности неточной даты"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0031",&#13;
                                       "items": [&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Месяц"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0033",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 2&#13;
                                             }&#13;
                                          },&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Год"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0034",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 70&#13;
                                             }&#13;
                                          }&#13;
                                       ]&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A01.0 - Брюшной тиф",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "F93.8"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ],&#13;
   "comment": "Modify Composition",&#13;
   "auditDetails": {&#13;
      "@class": "AUDIT_DETAILS",&#13;
      "system_id": "default",&#13;
      "committer": {&#13;
         "@class": "PARTY_IDENTIFIED",&#13;
         "name": "MDuishaeva"&#13;
      },&#13;
      "time_committed": {&#13;
         "@class": "DV_DATE_TIME",&#13;
         "value": "2022-04-29T16:59:05.0697+03:00"&#13;
      },&#13;
      "change_type": {&#13;
         "@class": "DV_CODED_TEXT",&#13;
         "value": "modification",&#13;
         "defining_code": {&#13;
            "@class": "CODE_PHRASE",&#13;
            "terminology_id": {&#13;
               "@class": "TERMINOLOGY_ID",&#13;
               "value": "openehr"&#13;
            },&#13;
            "code_string": "251"&#13;
         }&#13;
      },&#13;
      "description": {&#13;
         "@class": "DV_TEXT",&#13;
         "value": "Modify Composition"&#13;
      }&#13;
   }&#13;
}</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create MO no year.xml</con:value></con:property><con:property><con:name>year</con:name><con:value>2022</con:value></con:property><con:property><con:name>year70</con:name><con:value>70</con:value></con:property><con:property><con:name>year69</con:name><con:value>69</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>attachment_id</con:name><con:value>985</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1650278171999</con:value></con:property><con:property><con:name>mkbName</con:name><con:value>A01.0 - Брюшной тиф</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="37a5abe4-2bf8-4a98-a7ac-4a6e7a4ec3e6" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#115960" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="ec29e9e5-3fdc-40d0-ac5d-edea552b38ef"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="6c29e79a-a0cc-430f-b5da-cdb3472de866"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="fbd9035e-cc45-42c5-8fa2-9db817c31b09"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="b5bb7edd-367d-476c-b29c-79406d8f5dd6"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="af756ce0-c9f6-4341-afac-ca9af6e64ddf"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="1c43f2b2-074a-4e71-b87a-3948136cd3df"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change" id="72b5b79b-bad4-4dc3-9fce-1cc3d00157c5"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="bc576dc9-876e-45e3-9321-221ddd193e71"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="17653118-ab9c-42ba-ba5f-965af48b339d"><con:settings/><con:config><delay>300000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR" id="2b954918-680e-4cbf-99c3-46e5ba020a36"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="8430bf50-1fb5-4aa1-9ff8-37449047597d" name="Создан externalDispensaryObservation"><con:configuration><token>externalDispensaryObservation</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a8b05359-59ec-4559-8d05-f29a9cd2bac9" name="Есть diagnosisCode"><con:configuration><token>${#TestCase#code}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Get f_external_attachment" id="279ea445-2ef6-4714-9240-e54609fc539f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d5d6fe5-bae2-40a2-8eb2-edbf31bd9125" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5bddb0ef-dddd-410e-8cbb-99804b3b4f95"><con:configuration/></con:assertion><con:assertion type="Simple NotContains" id="6a2940fc-4d8c-4282-82f2-516982dfb23b" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94084f2-824a-4241-8c23-598ba8379786" name="Contains 6"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1" id="f09cf942-443f-49f5-b991-c923d92c1c2d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get f_external_attachment</con:sourceStep><con:sourcePath>//F_EXTERNAL_ATTACHMENT.ID</con:sourcePath><con:targetType>attachment_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Get f_external_attachment_event" id="b1e309ad-84af-4ff4-a0f7-8f20eea82ae7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:58:20&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fa7984e6-dc8c-4e8c-8804-425b235ab881" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e4d955f7-b834-41d3-844f-76701be7525f" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41cc80a4-eafc-4f97-942a-8d4082694d3d" name="Not Contains 4"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="147ea1bb-b9d0-41cc-a14e-2da82f2edce1" name="Contains 4"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cbf9dd05-668c-4548-9fbd-d341b3a7b052" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="552184ba-13dd-45af-97b2-1808e2f7dd0c" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 1" id="d2fb0bec-4a05-40f4-b5d7-081bd707d8b9"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directorydel")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 2+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="60230594-c820-4396-9303-f630ae4e7625"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 1" id="238b7c18-1e80-4d67-8233-5dbabc0a6aad"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d5d6fe5-bae2-40a2-8eb2-edbf31bd9125" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5bddb0ef-dddd-410e-8cbb-99804b3b4f95"><con:configuration/></con:assertion><con:assertion type="Simple NotContains" id="6a2940fc-4d8c-4282-82f2-516982dfb23b" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94084f2-824a-4241-8c23-598ba8379786" name="Contains 6"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 1" id="bb661d02-099b-4846-8539-850fe6f7f6cb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:58:20&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fa7984e6-dc8c-4e8c-8804-425b235ab881" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e4d955f7-b834-41d3-844f-76701be7525f" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41cc80a4-eafc-4f97-942a-8d4082694d3d" name="Not Contains 4"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="147ea1bb-b9d0-41cc-a14e-2da82f2edce1" name="Contains 4"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cbf9dd05-668c-4548-9fbd-d341b3a7b052" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="552184ba-13dd-45af-97b2-1808e2f7dd0c" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 2" id="f33771b1-84d3-46d4-a230-140810545299"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directorydel")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="1a56bc6d-2c23-4542-8825-c7d7a9b59837"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="426fcfbd-8541-4d15-97a5-cfe911ac36da"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment Step 2" id="2a297224-a382-4f16-abd5-8ce80ded5134"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple NotContains" id="34133418-f4ae-43ec-aea8-224412094ae6" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="e4838838-475f-4fd6-b116-b587c9457963"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="cancel"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="1"+documentId

assert messageJson.openedDate==null

assert messageJson.endDate==null

assert messageJson.openedYear==2022

assert messageJson.openedMonth==2

assert messageJson.compositionId==compositionId

assert messageJson.operationType=="cancel"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==null

assert messageJson.moName=="Поликлиника Добровольской"</script></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 2" id="2cd1bb87-f96c-423a-8987-ede947f678f5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple NotContains" id="e86c8c53-f032-456b-9b41-8cf29472fdcd" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="c366faaf-5874-4e65-8a30-ed9c54cd7497"><con:settings/><con:config><delay>300000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check EMIASREGISTR 2" id="d73816d2-19e1-4fcb-bd6b-8f256f9ed554"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check EMIASREGISTR 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="8430bf50-1fb5-4aa1-9ff8-37449047597d" name="Есть externalDispensaryObservation"><con:configuration><token>externalDispensaryObservation</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="4c61c1ac-6a80-4792-94e1-bbdea1839234" name="Удален диагноз"><con:configuration><token>${#TestCase#code}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>4475</con:value></con:property><con:property><con:name>uid</con:name><con:value>1147</con:value></con:property><con:property><con:name>code</con:name><con:value>X66.6</con:value></con:property><con:property><con:name>id</con:name><con:value>128301834</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "7fbc480e-4060-47b5-968d-15a27678f816",&#13;
   "operationType": "update",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "compositionId": "1147",&#13;
   "newResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "4475",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "1147"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "RU"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "external_ref": {&#13;
                  "@class": "PARTY_REF",&#13;
                  "id": {&#13;
                     "@class": "GENERIC_ID",&#13;
                     "value": "20585024948",&#13;
                     "scheme": "undefined"&#13;
                  },&#13;
                  "namespace": "Парус",&#13;
                  "type": "ANY"&#13;
               },&#13;
               "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2022-03-30T16:58:20+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "294474042",&#13;
                                 "type": "Идентификатор События"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "11147",&#13;
                                 "type": "Идентификатор документа СИМИ"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "4475",&#13;
                                 "type": "Идентификатор пациента"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "undefined",&#13;
                                       "assigner": "undefined",&#13;
                                       "id": "12018042375",&#13;
                                       "type": "EMIAS"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Врач - терапевт участковый"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Терапевтическое отделение № 1"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "issuer",&#13;
                                       "assigner": "assigner",&#13;
                                       "id": "204",&#13;
                                       "type": "type"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно-поликлинический центр",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0019"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_дома"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_строения"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_корпуса"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "В медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0070"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "поселение"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "внутригородская территория поселение Филимонковское, деревня Верхнее Валуево, 5-я Валуевская улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "20"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_помещения"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Терапия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0087"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0054"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "экстренная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0058"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "1037719010757",&#13;
                        "scheme": "undefined"&#13;
                     },&#13;
                     "namespace": "Сервис РМР/РМУ",&#13;
                     "type": "ANY"&#13;
                  },&#13;
                  "name": "ГБУЗ ГП №175 ДЗМ"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "Врач"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "12018042375"&#13;
                           },&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Другая МО, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Другая МО, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Поликлиника Добровольской"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     },&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Отсутствие информации о МО в справочнике"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.absence-simi.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.absence-simi.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Заявление об отсутствии"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "МО отсутствует в справочнике"&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Неточная дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0037",&#13;
                                       "value": {&#13;
                                          "@class": "DV_BOOLEAN",&#13;
                                          "value": true&#13;
                                       }&#13;
                                    },&#13;
                                    {&#13;
                                       "@class": "CLUSTER",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Подробности неточной даты"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0031",&#13;
                                       "items": [&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Месяц"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0033",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 2&#13;
                                             }&#13;
                                          },&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Год"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0034",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 2022&#13;
                                             }&#13;
                                          }&#13;
                                       ]&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A01.0 - Брюшной тиф",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "X66.6"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ],&#13;
   "comment": "Modify Composition",&#13;
   "auditDetails": {&#13;
      "@class": "AUDIT_DETAILS",&#13;
      "system_id": "default",&#13;
      "committer": {&#13;
         "@class": "PARTY_IDENTIFIED",&#13;
         "name": "MDuishaeva"&#13;
      },&#13;
      "time_committed": {&#13;
         "@class": "DV_DATE_TIME",&#13;
         "value": "2022-03-30T16:59:05.0697+03:00"&#13;
      },&#13;
      "change_type": {&#13;
         "@class": "DV_CODED_TEXT",&#13;
         "value": "modification",&#13;
         "defining_code": {&#13;
            "@class": "CODE_PHRASE",&#13;
            "terminology_id": {&#13;
               "@class": "TERMINOLOGY_ID",&#13;
               "value": "openehr"&#13;
            },&#13;
            "code_string": "251"&#13;
         }&#13;
      },&#13;
      "description": {&#13;
         "@class": "DV_TEXT",&#13;
         "value": "Modify Composition"&#13;
      }&#13;
   }&#13;
}</con:value></con:property><con:property><con:name>directorydel</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition MO delete.xml</con:value></con:property><con:property><con:name>year</con:name><con:value>2022</con:value></con:property><con:property><con:name>year70</con:name><con:value>70</con:value></con:property><con:property><con:name>year69</con:name><con:value>69</con:value></con:property><con:property><con:name>directorydel2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition no MO delete.xml</con:value></con:property><con:property><con:name>attachment_id</con:name><con:value>1189</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1677491628746</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>mkbName</con:name><con:value>A00.1 - Холера, вызванная холерным вибрионом 01, биовар eltor</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="64e27df8-335f-436e-8762-7cf3bc3e7f6b" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#146991" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="c0849dfa-ecfd-46e6-9ecc-eb2b346b6185"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="af9f0df1-503f-4496-aac6-9c90be2dae20"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="ab22a12c-d542-44b8-a115-62b45db99101"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="b77e5b8c-bbd3-4826-9856-b78b6e8aefd7"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="a500da17-531d-4524-bc9d-99874ac39a8c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="72695f82-ac9c-4e0a-8582-4e140a766aaa"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change" id="a8435ea0-b0c2-49ab-92b6-9296d8a5dffb"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="5d6ba462-fa3d-48e8-95bb-e0294de11dc5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="groovy" name="Message Change 2" id="a3822155-1dba-4211-8d7d-ee8cade567fb"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', 2+uid)
.replace('documentReplace', 3+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-30', '2022-03-28')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message 2" id="b78d5ca1-765f-4383-a5af-a03f6e7c6f9b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 1" id="79bf7732-096f-4825-a328-d4716ec64ef8"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directorydel")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', 2+uid)
.replace('documentReplace', 3+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-30', '2022-03-29')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="a8070678-c066-45e7-829a-e3e534eced3d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="d34b3872-be98-4846-8d0f-aad2d0c3e29c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Get f_external_attachment Step 1" id="985f9ec9-2b79-4a0d-93af-1f9db57a623e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d5d6fe5-bae2-40a2-8eb2-edbf31bd9125" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5bddb0ef-dddd-410e-8cbb-99804b3b4f95"><con:configuration/></con:assertion><con:assertion type="Simple NotContains" id="6a2940fc-4d8c-4282-82f2-516982dfb23b" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94084f2-824a-4241-8c23-598ba8379786" name="Contains 6"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1" id="1ee9058c-fd3d-4477-bf8e-ceb49618144b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get f_external_attachment Step 1</con:sourceStep><con:sourcePath>//F_EXTERNAL_ATTACHMENT.ID</con:sourcePath><con:targetType>attachment_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Get f_external_attachment_event Step 1" id="a938ef5a-991d-435f-b396-20102d41bb46"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:58:20&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fa7984e6-dc8c-4e8c-8804-425b235ab881" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e4d955f7-b834-41d3-844f-76701be7525f" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41cc80a4-eafc-4f97-942a-8d4082694d3d" name="Not Contains 4"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="147ea1bb-b9d0-41cc-a14e-2da82f2edce1" name="Contains 4"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cbf9dd05-668c-4548-9fbd-d341b3a7b052" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="552184ba-13dd-45af-97b2-1808e2f7dd0c" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2910</con:value></con:property><con:property><con:name>uid</con:name><con:value>5743</con:value></con:property><con:property><con:name>code</con:name><con:value>F63.9</con:value></con:property><con:property><con:name>id</con:name><con:value>128289691</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "8f9dbefb-e279-4437-83f5-157231d13614",&#13;
   "operationType": "delete",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "compositionId": "25743",&#13;
   "oldResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "2910",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "25743"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "RU"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "external_ref": {&#13;
                  "@class": "PARTY_REF",&#13;
                  "id": {&#13;
                     "@class": "GENERIC_ID",&#13;
                     "value": "20585024948",&#13;
                     "scheme": "undefined"&#13;
                  },&#13;
                  "namespace": "Парус",&#13;
                  "type": "ANY"&#13;
               },&#13;
               "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2022-03-29T16:54:43+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "294474038",&#13;
                                 "type": "Идентификатор События"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "35743",&#13;
                                 "type": "Идентификатор документа СИМИ"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "2910",&#13;
                                 "type": "Идентификатор пациента"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "undefined",&#13;
                                       "assigner": "undefined",&#13;
                                       "id": "12018042375",&#13;
                                       "type": "EMIAS"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Врач - терапевт участковый"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Терапевтическое отделение № 1"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "issuer",&#13;
                                       "assigner": "assigner",&#13;
                                       "id": "204",&#13;
                                       "type": "type"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно-поликлинический центр",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0019"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_дома"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_строения"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_корпуса"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "В медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0070"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "поселение"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "внутригородская территория поселение Филимонковское, деревня Верхнее Валуево, 5-я Валуевская улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "20"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_помещения"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Терапия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0087"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0054"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "экстренная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0058"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "1037719010757",&#13;
                        "scheme": "undefined"&#13;
                     },&#13;
                     "namespace": "Сервис РМР/РМУ",&#13;
                     "type": "ANY"&#13;
                  },&#13;
                  "name": "ГБУЗ ГП №175 ДЗМ"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "Врач"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "12018042375"&#13;
                           },&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Медицинская организация, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Медицинская организация, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_CODED_TEXT",&#13;
                                          "value": "АО \"Плутон\"",&#13;
                                          "defining_code": {&#13;
                                             "@class": "CODE_PHRASE",&#13;
                                             "terminology_id": {&#13;
                                                "@class": "TERMINOLOGY_ID",&#13;
                                                "value": "ABSENT_TERMINOLOGY"&#13;
                                             },&#13;
                                             "code_string": "11565403"&#13;
                                          }&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2022-03-29"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              },&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2022-03-31"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A00.1 - Холера, вызванная холерным вибрионом 01, биовар eltor",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "F63.9"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ],&#13;
   "comment": "Modify Composition",&#13;
   "auditDetails": {&#13;
      "@class": "AUDIT_DETAILS",&#13;
      "system_id": "default",&#13;
      "committer": {&#13;
         "@class": "PARTY_IDENTIFIED",&#13;
         "name": "MDuishaeva"&#13;
      },&#13;
      "time_committed": {&#13;
         "@class": "DV_DATE_TIME",&#13;
         "value": "2022-03-29T16:56:20.944129+03:00"&#13;
      },&#13;
      "change_type": {&#13;
         "@class": "DV_CODED_TEXT",&#13;
         "value": "modification",&#13;
         "defining_code": {&#13;
            "@class": "CODE_PHRASE",&#13;
            "terminology_id": {&#13;
               "@class": "TERMINOLOGY_ID",&#13;
               "value": "openehr"&#13;
            },&#13;
            "code_string": "251"&#13;
         }&#13;
      },&#13;
      "description": {&#13;
         "@class": "DV_TEXT",&#13;
         "value": "Modify Composition"&#13;
      }&#13;
   }&#13;
}</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>year</con:name><con:value>2022</con:value></con:property><con:property><con:name>year70</con:name><con:value>70</con:value></con:property><con:property><con:name>year69</con:name><con:value>69</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>attachment_id</con:name><con:value>1066</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1654864369153</con:value></con:property><con:property><con:name>directorydel</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition MO delete.xml</con:value></con:property><con:property><con:name>directorydel2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition no MO delete.xml</con:value></con:property><con:property><con:name>mkbName</con:name><con:value>A01.0 - Брюшной тиф</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="e2089c7b-7cbb-4422-9158-d5c98d44b72f" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#146986" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="f133091f-0449-44df-9a31-273238502f69"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="2e72f841-8de0-408e-97e3-775259be98eb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="78c01cf9-9cd0-4288-bed0-0e8b8412f6be"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="c7f2dcd1-a120-48c7-87fb-9abd6618d9d9"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="e7d6bf43-5fee-4ae0-97a6-b5494914c314"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="46a2f36f-1d56-4bb1-a64b-e14840eec4db"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change" id="32d10310-ecde-4262-8754-3f29dea470d7"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory2")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="dca5e252-9185-4a02-8a67-6868b99df6ff"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Get f_external_attachment" id="d95c044a-a0bd-4c2f-b5e7-18b9a0d79254"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d5d6fe5-bae2-40a2-8eb2-edbf31bd9125" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5bddb0ef-dddd-410e-8cbb-99804b3b4f95"><con:configuration/></con:assertion><con:assertion type="Simple NotContains" id="6a2940fc-4d8c-4282-82f2-516982dfb23b" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94084f2-824a-4241-8c23-598ba8379786" name="Contains 6"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1" id="6b3b149d-70db-47b7-85d2-36eeb4bb4f7b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get f_external_attachment</con:sourceStep><con:sourcePath>//F_EXTERNAL_ATTACHMENT.ID</con:sourcePath><con:targetType>attachment_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Get f_external_attachment_event" id="6c7f0b73-c79b-4604-9e2e-3bf482e95a29"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:58:20&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fa7984e6-dc8c-4e8c-8804-425b235ab881" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e4d955f7-b834-41d3-844f-76701be7525f" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41cc80a4-eafc-4f97-942a-8d4082694d3d" name="Not Contains 4"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="147ea1bb-b9d0-41cc-a14e-2da82f2edce1" name="Contains 4"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cbf9dd05-668c-4548-9fbd-d341b3a7b052" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="552184ba-13dd-45af-97b2-1808e2f7dd0c" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 1" id="70d834be-dc8b-4339-a35f-29af69ec115d"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directorydel2")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 2+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="5c8d9bb0-a7b1-49dd-8556-157fbf08c920"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Get f_external_attachment Step 1" id="2640d70c-14dc-4cdf-a7e1-a2ba34a6ece2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d5d6fe5-bae2-40a2-8eb2-edbf31bd9125" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5bddb0ef-dddd-410e-8cbb-99804b3b4f95"><con:configuration/></con:assertion><con:assertion type="Simple NotContains" id="6a2940fc-4d8c-4282-82f2-516982dfb23b" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94084f2-824a-4241-8c23-598ba8379786" name="Contains 6"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 1" id="ca0d16e0-142c-43fd-bddd-3d1d62c65e84"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-30 16:58:20&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>1${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fa7984e6-dc8c-4e8c-8804-425b235ab881" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e4d955f7-b834-41d3-844f-76701be7525f" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41cc80a4-eafc-4f97-942a-8d4082694d3d" name="Not Contains 4"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="147ea1bb-b9d0-41cc-a14e-2da82f2edce1" name="Contains 4"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>2022&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cbf9dd05-668c-4548-9fbd-d341b3a7b052" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="552184ba-13dd-45af-97b2-1808e2f7dd0c" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 2" id="87f31f20-7f43-4e72-8f77-bfe4f75fe852"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directorydel2")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="30eb8e4c-0ea4-4ed4-87a8-f812e6b2b01a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="dca73a4b-4d9c-483c-a915-cad643e2e04e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Get f_external_attachment Step 2" id="335b6024-473d-49ab-9b27-aa9ff5521848"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '1${#TestCase#uid}'</con:query><con:assertion type="Simple NotContains" id="34133418-f4ae-43ec-aea8-224412094ae6" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_external_attachment_event Step 2" id="711c2d63-3b47-458e-a343-3776644e9c4f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple NotContains" id="e86c8c53-f032-456b-9b41-8cf29472fdcd" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="8d0d940c-6440-4eb8-ac11-7f2c14878cc1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="cancel"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="1"+documentId

assert messageJson.openedDate==null

assert messageJson.endDate==null

assert messageJson.openedYear==2022

assert messageJson.openedMonth==2

assert messageJson.compositionId==compositionId

assert messageJson.operationType=="cancel"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==null

assert messageJson.moName=="Поликлиника Добровольской"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2436</con:value></con:property><con:property><con:name>uid</con:name><con:value>7346</con:value></con:property><con:property><con:name>code</con:name><con:value>V58.2</con:value></con:property><con:property><con:name>id</con:name><con:value>128299960</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "7fbc480e-4060-47b5-968d-15a27678f816",&#13;
   "operationType": "delete",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "compositionId": "7346",&#13;
   "oldResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "2436",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "7346"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "RU"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "external_ref": {&#13;
                  "@class": "PARTY_REF",&#13;
                  "id": {&#13;
                     "@class": "GENERIC_ID",&#13;
                     "value": "20585024948",&#13;
                     "scheme": "undefined"&#13;
                  },&#13;
                  "namespace": "Парус",&#13;
                  "type": "ANY"&#13;
               },&#13;
               "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2022-03-30T16:58:20+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "294474042",&#13;
                                 "type": "Идентификатор События"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "17346",&#13;
                                 "type": "Идентификатор документа СИМИ"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "2436",&#13;
                                 "type": "Идентификатор пациента"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "undefined",&#13;
                                       "assigner": "undefined",&#13;
                                       "id": "12018042375",&#13;
                                       "type": "EMIAS"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Врач - терапевт участковый"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Терапевтическое отделение № 1"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "issuer",&#13;
                                       "assigner": "assigner",&#13;
                                       "id": "204",&#13;
                                       "type": "type"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно-поликлинический центр",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0019"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_дома"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_строения"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_корпуса"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "В медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0070"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "поселение"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "внутригородская территория поселение Филимонковское, деревня Верхнее Валуево, 5-я Валуевская улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "20"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_помещения"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Терапия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0087"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0054"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "экстренная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0058"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "1037719010757",&#13;
                        "scheme": "undefined"&#13;
                     },&#13;
                     "namespace": "Сервис РМР/РМУ",&#13;
                     "type": "ANY"&#13;
                  },&#13;
                  "name": "ГБУЗ ГП №175 ДЗМ"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "Врач"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "12018042375"&#13;
                           },&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Другая МО, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Другая МО, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Поликлиника Добровольской"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     },&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Отсутствие информации о МО в справочнике"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.absence-simi.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.absence-simi.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Заявление об отсутствии"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "МО отсутствует в справочнике"&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Неточная дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0037",&#13;
                                       "value": {&#13;
                                          "@class": "DV_BOOLEAN",&#13;
                                          "value": true&#13;
                                       }&#13;
                                    },&#13;
                                    {&#13;
                                       "@class": "CLUSTER",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Подробности неточной даты"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0031",&#13;
                                       "items": [&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Месяц"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0033",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 2&#13;
                                             }&#13;
                                          },&#13;
                                          {&#13;
                                             "@class": "ELEMENT",&#13;
                                             "name": {&#13;
                                                "@class": "DV_TEXT",&#13;
                                                "value": "Год"&#13;
                                             },&#13;
                                             "archetype_node_id": "at0034",&#13;
                                             "value": {&#13;
                                                "@class": "DV_COUNT",&#13;
                                                "magnitude": 2022&#13;
                                             }&#13;
                                          }&#13;
                                       ]&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A01.0 - Брюшной тиф",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "V58.2"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ],&#13;
   "comment": "Modify Composition",&#13;
   "auditDetails": {&#13;
      "@class": "AUDIT_DETAILS",&#13;
      "system_id": "default",&#13;
      "committer": {&#13;
         "@class": "PARTY_IDENTIFIED",&#13;
         "name": "MDuishaeva"&#13;
      },&#13;
      "time_committed": {&#13;
         "@class": "DV_DATE_TIME",&#13;
         "value": "2022-03-30T16:59:05.0697+03:00"&#13;
      },&#13;
      "change_type": {&#13;
         "@class": "DV_CODED_TEXT",&#13;
         "value": "modification",&#13;
         "defining_code": {&#13;
            "@class": "CODE_PHRASE",&#13;
            "terminology_id": {&#13;
               "@class": "TERMINOLOGY_ID",&#13;
               "value": "openehr"&#13;
            },&#13;
            "code_string": "251"&#13;
         }&#13;
      },&#13;
      "description": {&#13;
         "@class": "DV_TEXT",&#13;
         "value": "Modify Composition"&#13;
      }&#13;
   }&#13;
}</con:value></con:property><con:property><con:name>directorydel</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition MO delete.xml</con:value></con:property><con:property><con:name>year</con:name><con:value>2022</con:value></con:property><con:property><con:name>year70</con:name><con:value>70</con:value></con:property><con:property><con:name>year69</con:name><con:value>69</con:value></con:property><con:property><con:name>directorydel2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition no MO delete.xml</con:value></con:property><con:property><con:name>attachment_id</con:name><con:value>1065</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1654864244736</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>mkbName</con:name><con:value>A01.0 - Брюшной тиф</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="6be570f0-c572-440b-bc9e-f0108f1d0fd0" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#147098" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Generate patientId" id="10dc522d-33de-427f-867d-a06cf0712d5b"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="31af066f-7a6d-4558-843c-2ad568f75094"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="4c11656c-7f38-4da8-885f-0671a61c1be3"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="f54fadff-b3ee-40a6-a1b9-fc225cc1836b"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="93060a5e-5874-4134-8ebf-d1a4dc05b1c5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="8314578b-76cf-44ea-971f-b036157d67bf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Message Change" id="b1b18f86-3291-489f-a526-51e9e32d70df"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year=testRunner.testCase.getPropertyValue("year")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('year', year)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message" id="c6837824-6161-47eb-8451-e9fd54f94cc2"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="groovy" name="Message Change 2" id="5db0b353-47be-4593-b751-9fc720d6adf3"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directory")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', 2+uid)
.replace('documentReplace', 3+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-30', '2022-03-28')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message 2" id="096e9e37-6249-418a-b5a7-195b91a10f8f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="groovy" name="Message Change Step 1" id="c6874565-949d-4d2a-89f6-cdc030e347f3"><con:settings/><con:config><script>def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def year70=testRunner.testCase.getPropertyValue("year70")

def returnFileAsText(String directoryPropertyName){
  def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
  //log.info  projectPath
  def directory=testRunner.testCase.getPropertyValue(directoryPropertyName)
  //log.info directory
  String path=projectPath+directory
  def file  = new File(path).text
  return file
}

def  testFile=returnFileAsText("directorydel")
def msg = testFile
.replace('patientReplace', patientId)
.replace('compositionReplace', uid)
.replace('documentReplace', 1+uid)
.replace('MKBCodeReplace', code)
.replace('2022-03-30', '2022-03-30')
.replace('year', year70)

String value = msg
testRunner.testCase.setPropertyValue('msg',value)</script></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="6503d76e-0629-4ba2-86f5-a5de90a39e3c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="7ecf279e-d81a-40db-9381-c2502cf82e19"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;

import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")
def msg=testRunner.testCase.getPropertyValue("msg")

sendMessageToKafka("t_external_dispensary_case_recordComposition", ""+msg+"")</script></con:config></con:testStep><con:testStep type="jdbc" name="Get f_external_attachment Step 1" id="1eb64bf0-8a2f-4798-be1f-b8eeaf54cf9a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment fea where fea.document_id =  '3${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}&lt;/F_EXTERNAL_ATTACHMENT.PATIENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MKB10_ID>${#TestCase#id}&lt;/F_EXTERNAL_ATTACHMENT.MKB10_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.COMPOSITION_ID>2${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 8"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.OPENED_YEAR>1970&lt;/F_EXTERNAL_ATTACHMENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains 10"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.DOCUMENT_ID>3${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="16b6b0da-6a1f-4484-b50e-8e950090535e" name="Not Contains"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d5d6fe5-bae2-40a2-8eb2-edbf31bd9125" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5bddb0ef-dddd-410e-8cbb-99804b3b4f95"><con:configuration/></con:assertion><con:assertion type="Simple NotContains" id="6a2940fc-4d8c-4282-82f2-516982dfb23b" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94084f2-824a-4241-8c23-598ba8379786" name="Contains 6"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1" id="5fd534c1-9ff0-4913-bab5-b56b115aad0b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get f_external_attachment Step 1</con:sourceStep><con:sourcePath>//F_EXTERNAL_ATTACHMENT.ID</con:sourcePath><con:targetType>attachment_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Get f_external_attachment_event Step 1" id="7dab61fb-e132-4ba1-8535-7a67fe99b0f7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_external_attachment_event feae where external_attachment_id = '${#TestCase#attachment_id}'</con:query><con:assertion type="Simple Contains" id="bc9af9f6-2f61-43d1-9215-e8ee75b1a535" name="Contains"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE>2022-03-28 16:58:20&lt;/F_EXTERNAL_ATTACHMENT_EVENT.EVENT_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4bb201e5-e493-4fd5-b6d5-186003397cc1" name="Contains 2"><con:configuration><token>   &lt;F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID>3${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.DOCUMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 3"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID>2${#TestCase#uid}&lt;/F_EXTERNAL_ATTACHMENT_EVENT.COMPOSITION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef3f697b-8c18-471e-9ff4-2045330f8c3e" name="Contains 9"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME>Поликлиника Добровольской&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_NAME></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fa7984e6-dc8c-4e8c-8804-425b235ab881" name="Not Contains 2"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e4d955f7-b834-41d3-844f-76701be7525f" name="Not Contains 3"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41cc80a4-eafc-4f97-942a-8d4082694d3d" name="Not Contains 4"><con:configuration><token>&lt;/F_EXTERNAL_ATTACHMENT_EVENT.MO_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="147ea1bb-b9d0-41cc-a14e-2da82f2edce1" name="Contains 4"><con:configuration><token> &lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR>1970&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_YEAR></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cbf9dd05-668c-4548-9fbd-d341b3a7b052" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="552184ba-13dd-45af-97b2-1808e2f7dd0c" name="Contains 5"><con:configuration><token>&lt;F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH>2&lt;/F_EXTERNAL_ATTACHMENT_EVENT.OPENED_MONTH></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5326dabc-3d97-4baa-902f-322a360ae49b" name="Not Contains 5"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="1679881a-532f-44d9-b181-4bc49bd01c9c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def compositionId=testRunner.testCase.getPropertyValue("uid")
def code=testRunner.testCase.getPropertyValue("code")
def documentId=testRunner.testCase.getPropertyValue("uid")
def mkbName=testRunner.testCase.getPropertyValue("mkbName")
def moId=testRunner.testCase.getPropertyValue("moId")
def moName=testRunner.testCase.getPropertyValue("moName")

def message=scripts.getKafkaAllMessageJson("topicDNexternal","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)


assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId.toInteger()

assert messageJson.documentId=="3"+documentId

assert messageJson.openedDate==null

assert messageJson.endDate==null

assert messageJson.openedYear==1970

assert messageJson.openedMonth==2

assert messageJson.compositionId=="2"+compositionId

assert messageJson.operationType=="change"

assert messageJson.diagnosisName==mkbName

assert messageJson.diagnosisCode==code

assert messageJson.moId==null

assert messageJson.moName=="Поликлиника Добровольской"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>7063</con:value></con:property><con:property><con:name>uid</con:name><con:value>2084</con:value></con:property><con:property><con:name>code</con:name><con:value>N88.4</con:value></con:property><con:property><con:name>id</con:name><con:value>128293615</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "8f9dbefb-e279-4437-83f5-157231d13614",&#13;
   "operationType": "delete",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "compositionId": "2084",&#13;
   "oldResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "7063",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "2084"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "RU"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "external_ref": {&#13;
                  "@class": "PARTY_REF",&#13;
                  "id": {&#13;
                     "@class": "GENERIC_ID",&#13;
                     "value": "20585024948",&#13;
                     "scheme": "undefined"&#13;
                  },&#13;
                  "namespace": "Парус",&#13;
                  "type": "ANY"&#13;
               },&#13;
               "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2022-03-30T16:54:43+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "294474038",&#13;
                                 "type": "Идентификатор События"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "12084",&#13;
                                 "type": "Идентификатор документа СИМИ"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "7063",&#13;
                                 "type": "Идентификатор пациента"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "undefined",&#13;
                                       "assigner": "undefined",&#13;
                                       "id": "12018042375",&#13;
                                       "type": "EMIAS"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Врач - терапевт участковый"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Терапевтическое отделение № 1"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "issuer",&#13;
                                       "assigner": "assigner",&#13;
                                       "id": "204",&#13;
                                       "type": "type"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно-поликлинический центр",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0019"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_дома"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_строения"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_корпуса"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "В медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0070"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "поселение"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "внутригородская территория поселение Филимонковское, деревня Верхнее Валуево, 5-я Валуевская улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "20"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_помещения"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Терапия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0087"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0054"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "экстренная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0058"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "1037719010757",&#13;
                        "scheme": "undefined"&#13;
                     },&#13;
                     "namespace": "Сервис РМР/РМУ",&#13;
                     "type": "ANY"&#13;
                  },&#13;
                  "name": "ГБУЗ ГП №175 ДЗМ"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "Врач"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "12018042375"&#13;
                           },&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Медицинская организация, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Медицинская организация, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_CODED_TEXT",&#13;
                                          "value": "АО \"Плутон\"",&#13;
                                          "defining_code": {&#13;
                                             "@class": "CODE_PHRASE",&#13;
                                             "terminology_id": {&#13;
                                                "@class": "TERMINOLOGY_ID",&#13;
                                                "value": "ABSENT_TERMINOLOGY"&#13;
                                             },&#13;
                                             "code_string": "11565403"&#13;
                                          }&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2022-03-30"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              },&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2022-03-31"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A00.1 - Холера, вызванная холерным вибрионом 01, биовар eltor",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "N88.4"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ],&#13;
   "comment": "Modify Composition",&#13;
   "auditDetails": {&#13;
      "@class": "AUDIT_DETAILS",&#13;
      "system_id": "default",&#13;
      "committer": {&#13;
         "@class": "PARTY_IDENTIFIED",&#13;
         "name": "MDuishaeva"&#13;
      },&#13;
      "time_committed": {&#13;
         "@class": "DV_DATE_TIME",&#13;
         "value": "2022-03-30T16:56:20.944129+03:00"&#13;
      },&#13;
      "change_type": {&#13;
         "@class": "DV_CODED_TEXT",&#13;
         "value": "modification",&#13;
         "defining_code": {&#13;
            "@class": "CODE_PHRASE",&#13;
            "terminology_id": {&#13;
               "@class": "TERMINOLOGY_ID",&#13;
               "value": "openehr"&#13;
            },&#13;
            "code_string": "251"&#13;
         }&#13;
      },&#13;
      "description": {&#13;
         "@class": "DV_TEXT",&#13;
         "value": "Modify Composition"&#13;
      }&#13;
   }&#13;
}</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>year</con:name><con:value>2022</con:value></con:property><con:property><con:name>year70</con:name><con:value>70</con:value></con:property><con:property><con:name>year69</con:name><con:value>69</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property><con:property><con:name>attachment_id</con:name><con:value>1067</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1654864403733</con:value></con:property><con:property><con:name>directorydel</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition MO delete.xml</con:value></con:property><con:property><con:name>directorydel2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition no MO delete.xml</con:value></con:property><con:property><con:name>mkbName</con:name><con:value>A00.1 - Холера, вызванная холерным вибрионом 01, биовар eltor</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="80880a9a-3401-463f-8a8a-0b0ba66a2142" name="А_ЕСУ_09 - Обработка сообщения об изменении статуса полиса пациента (топик ErpChangePatientPolicies)"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="e86eaa06-96d7-46c3-821a-40555cc60243" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#133350" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="jdbc" name="Get Data" id="24bd9581-f0d4-4aa6-9770-785b30a41d6b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where fp.policy_number is null
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="44889237-f6c7-4e86-b7dc-be0c2d70df4c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_PATIENT.ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="17119dbb-f134-4e43-be6b-714fc80f9e61"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014001"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-12-14T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="a675b216-c267-407f-959d-9fdec0fc60cc"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="bee02287-5369-4899-9fa4-0c1c610783bd" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT.ID>${#TestCase#patientId}</F_PATIENT.ID>
            <F_PATIENT.AREA_ID/>
            <F_PATIENT.CHANGED_DATE/>
            <F_PATIENT.BIRTH_DATE/>
            <F_PATIENT.UPDATE_BIRTH_DATE/>
            <F_PATIENT.POLICY_NUMBER>50529308890014001</F_PATIENT.POLICY_NUMBER>
            <F_PATIENT.POLICY_STATUS>Y</F_PATIENT.POLICY_STATUS>
            <F_PATIENT.POLICY_UPDATE_DATE>2021-12-14 10:54:54.926154</F_PATIENT.POLICY_UPDATE_DATE>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="13626bcf-5238-439e-b0f8-d11d16efa3a5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014001"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "D",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-12-13T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 2" id="c0ded5bb-9ca5-46c9-a81a-a3f69f113658"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="bee02287-5369-4899-9fa4-0c1c610783bd" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT.ID>${#TestCase#patientId}</F_PATIENT.ID>
            <F_PATIENT.AREA_ID/>
            <F_PATIENT.CHANGED_DATE/>
            <F_PATIENT.BIRTH_DATE/>
            <F_PATIENT.UPDATE_BIRTH_DATE/>
            <F_PATIENT.POLICY_NUMBER>50529308890014001</F_PATIENT.POLICY_NUMBER>
            <F_PATIENT.POLICY_STATUS>Y</F_PATIENT.POLICY_STATUS>
            <F_PATIENT.POLICY_UPDATE_DATE>2021-12-14 10:54:54.926154</F_PATIENT.POLICY_UPDATE_DATE>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 3" id="ecdd678c-0c77-4c81-be5d-74444d79686d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014002"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "D",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-12-15T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 3" id="284d9deb-a0cd-44e3-a7ed-3f935326f0fa"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="bee02287-5369-4899-9fa4-0c1c610783bd" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT.ID>${#TestCase#patientId}</F_PATIENT.ID>
            <F_PATIENT.AREA_ID/>
            <F_PATIENT.CHANGED_DATE/>
            <F_PATIENT.BIRTH_DATE/>
            <F_PATIENT.UPDATE_BIRTH_DATE/>
            <F_PATIENT.POLICY_NUMBER>50529308890014002</F_PATIENT.POLICY_NUMBER>
            <F_PATIENT.POLICY_STATUS>D</F_PATIENT.POLICY_STATUS>
            <F_PATIENT.POLICY_UPDATE_DATE>2021-12-15 10:54:54.926154</F_PATIENT.POLICY_UPDATE_DATE>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>9481</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="eb706946-bb04-4613-b99f-e1bf09326e60" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#133353" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="jdbc" name="Get Data" id="28d8f286-840c-4213-8e08-c57715a9e2a6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where fp.policy_number is null
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ef219994-42ff-4df7-ab09-e755be246b55"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_PATIENT.ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="97012062-3d02-4769-bd7d-3db5f3104ee9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "test",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014001"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-12-14T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="8444e516-0dfc-463a-95b4-8ad3a34da78a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="bf0560a6-22d3-4b3b-8aab-0804bc372601" name="Not Contains"><con:configuration><token>&lt;/F_PATIENT.POLICY_STATUS></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>133375</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="819e0e8a-a961-4b39-87fe-4a86c93a3dd7" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#133354" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Send Message Step 1" id="df882b30-dd7d-4d81-8e34-1357ab84011b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": "-1",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014001"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-12-14T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="3a9efc2c-70d8-4191-9dc3-60da2b6a0cf1"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>E040	В событии ЕРП &lt;id> по сущности &lt;entityName> получен идентификатор пациента &lt;patientId> в формате отличном от ожидаемого.</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>112149</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="7efbc061-0bce-4948-b2d5-f3a9aa27a74a" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#133355" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="cf3d274b-4ce5-4657-9016-650855ced04e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
	long patientId
	patients=sql.rows("select id from f_patient fp order by id  limit 3000 ")
	for(int i=0; i&lt;patients.size(); i++){
		if (patients[0].ID>1){
			patientId=1
			//log.info patientId
			break
		}
		else if(patients[i+1].ID!= patients[i].ID+1){
			patientId=patients[i].ID+1
			log.info patientId
			break
		} 
	}
	return patientId
}

patientId=getNonexistendPatientId()
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="31922a44-edc9-484e-97df-7ca399ffe4e6"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014001"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-12-14T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="b012c065-8d94-4587-8f22-e7a467f28db2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="d429b68a-5c2e-4c3d-be53-0c97f9a47d46" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>69</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="9977e1bc-39ed-401f-8abd-f07104970bc1" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#133356" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="getNonexistendPatientId" id="18054865-c80b-4439-ac29-c4e66c280980"><con:settings/><con:config><script>
import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="09f122d6-a899-43f3-a72c-83bc9d0aba77"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "areaId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("areaId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="15a12603-8012-4156-bf32-d7f6d6ba8692"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="436b52b9-59ae-4f33-aad2-59e7afee5700"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- для создания новых данных достаточно в скрипте заменить "${#TestCase#patientId}" на новое во всех строках по неполному совпадению
 
--- создание пациента
INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '2002-10-28', NULL, '', '', NULL, NULL, '3');
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, '2019-04-01 00:00:00.000', 451, 10145778, true);



--- создание прикреплений


INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false); -- проверка обработки различных статусов no_doctor
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, NULL); -- проверка обработки различных статусов no_doctor
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, true); -- относится к необрабатываемому таску
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, true); -- проверка обработки различных статусов no_doctor
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', '2021-03-09', 14484, 128290661, '602', 125676819, true); -- сообщение не отправляется, т.к. прикрепление закрыто

INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', NULL);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor) VALUES(5${#TestCase#areaId}, 5${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true);


--- создание тасок и связанных данных
--- HOSPITAL_DISCHARGE_DOCUMENT
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1); -- проставлено deleted
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 1); --- не обработает, т.к. закрыта
--- CONTINUED_OBS
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 2); -- проставлено deleted
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, true, 125694880, 2); --- не обработает, т.к. deleted = true
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(8${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 2); -- проставлено deleted
--- AREA
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 3); -- проставлено deleted
--- JOB_EXECUTION_EXPIRATION
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 4); -- проставлено deleted
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id) VALUES(7${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 4); -- проставлено deleted

--- заполнение связанных таблиц
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#areaId}, '2edb2286-d140-4857-b2b5-02a2987${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-09 04:13:35.437', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#areaId}, 128291744, 4, 1${#TestCase#areaId}, 1${#TestCase#areaId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(5${#TestCase#areaId}, '2edb2286-d140-4857-b2b5-02a29875${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-09 04:13:35.437', 1, false, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(5${#TestCase#areaId}, 128291744, 4, 5${#TestCase#areaId}, 5${#TestCase#areaId});

INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) VALUES(2${#TestCase#areaId}, 1${#TestCase#areaId}, 128291744, 1);
INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) values(6${#TestCase#areaId}, 3${#TestCase#areaId}, 128291744, 1);
INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) values(5${#TestCase#areaId}, 5${#TestCase#areaId}, 128291744, 1);

INSERT INTO f_job_expiration_task (id, attachment_id, mkb10_id, status_id) VALUES(4${#TestCase#areaId}, 2${#TestCase#areaId}, 128291744, 3);
INSERT INTO f_job_expiration_task (id, attachment_id, mkb10_id, status_id) VALUES(7${#TestCase#areaId}, 4${#TestCase#areaId}, 128291744, 3);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="6e87e0e8-b924-426a-9eeb-17b5cb57f40d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014001"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "D",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-12-14T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="c778d56c-78cc-43d2-abd5-29b25b5a14d3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="bee02287-5369-4899-9fa4-0c1c610783bd" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT.ID>${#TestCase#patientId}</F_PATIENT.ID>
            <F_PATIENT.BIRTH_DATE>2002-10-28</F_PATIENT.BIRTH_DATE>
            <F_PATIENT.UPDATE_BIRTH_DATE/>
            <F_PATIENT.POLICY_NUMBER>50529308890014001</F_PATIENT.POLICY_NUMBER>
            <F_PATIENT.POLICY_STATUS>D</F_PATIENT.POLICY_STATUS>
            <F_PATIENT.POLICY_UPDATE_DATE>2021-12-14 10:54:54.926154</F_PATIENT.POLICY_UPDATE_DATE>
            <F_PATIENT.CHECK_AREA_DATE/>
            <F_PATIENT.CHECK_AREA_STATUS>3</F_PATIENT.CHECK_AREA_STATUS>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachments Step 1" id="1728dfe1-32ea-4d14-a835-8b2d024820e6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}
order by fa.id</con:query><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match"><con:configuration><path>//Row[1]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 2"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 3"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 5"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[5]/F_ATTACHMENT.CLOSED/text()</path><content>2021-03-09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 4"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[4]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 1 Step 1" id="44b6f454-2e51-4a1d-b3f0-c3966dcb3f29"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 1${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 2 Step 1" id="d04fdd2f-d298-4b32-96b1-27165957325d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 2${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 3 Step 1" id="f4b107e6-771a-444d-9097-2f7935ea7a4e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 3${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 4 Step 1" id="ecbe598a-43a5-473b-a8cc-40c154088942"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 4${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 5 Step 1" id="81d35176-c66d-4e5e-aa82-2af0ae5ab29e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 5${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 1 Step 1" id="250b54ac-d854-436f-aafc-a118af9709c8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId}
order by id</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match 1"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match 2"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match 3"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match 4"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[4]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match 5"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[5]/F_TASK.DELETED/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match 6"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[6]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match 7"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[7]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="6fcc9b78-68e9-4a2a-bc36-bc5a321c656c"><con:description>Проверить топик  DNForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Для прикреплений из пункта 1 создаётся и отправляется сообщение в топик ЕСУ ClosedAttachmentsDnGroup:
$patientId = $patient_id обработанного пациента;
$groupCode = значение поля "code" группы ДН, от которой был откреплён пациент.
$endDate = текущая дата;
$cancelReasonName = название причины открепления, соответствующее значению справочника d_observation_cancel_reason с кодом "3";
$cancelReasonCode = "3"
{
    "patientId": "22710208",
    "groupCode": "DNA0003",
    "endDate": "2020-11-25T09:40",
    "cancelReasonCode": "3,
    "cancelReasonName": "Смерть"
}
</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>9958</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-02-02T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-02-02</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>areaId</con:name><con:value>13365131336</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="2ec342f7-04a4-4246-b33f-1caad09db460" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#133357" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Get Current Date" id="92be8317-65dc-4c8a-b98e-3e072681cdc9"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="d6605068-1601-4a25-b787-7d44327ed644"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where fp.policy_status = 'Y' and fp.policy_number is not null
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="0a7faab9-2691-4128-a8a2-a1da5853fd42"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_PATIENT.ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>policyNumber</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_PATIENT.POLICY_NUMBER</con:sourcePath><con:targetType>policyNumber</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="207d4bec-157c-4943-a81b-0e7a76246529"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 8226,
  "operationDate": \""""+date+"""\",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": []
}
""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="07d9fdd5-e7e9-49e4-af73-8c11448bd2ff"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="bee02287-5369-4899-9fa4-0c1c610783bd" name="Contains"><con:configuration><token>F_PATIENT.POLICY_NUMBER>${#TestCase#policyNumber}&lt;/F_PATIENT.POLICY_NUMBER></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a1b952de-1d58-4fab-b495-310b58572a6c" name="Contains 2"><con:configuration><token>&lt;F_PATIENT.POLICY_STATUS>N&lt;/F_PATIENT.POLICY_STATUS></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="448b373b-83e4-454f-873d-f2293cd52844" name="Contains 3"><con:configuration><token>&lt;F_PATIENT.POLICY_UPDATE_DATE>${#TestCase#date2} ${#TestCase#time}&lt;/F_PATIENT.POLICY_UPDATE_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>14091</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-12-29T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-12-29</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>policyNumber</con:name><con:value>30266180</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="2209f53f-e08b-45ce-82b7-bb730508373f" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="#133360" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Get Current Date" id="6fdaf3ef-4fde-4359-ad50-388491ceaeb7"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Get Data" id="d94c36ec-097f-4fbe-bee5-f75fce50c4ca"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where fp.policy_status = 'D' and fp.policy_number is not null
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="020dae49-d0fb-4da8-a82d-3a00042b8359"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_PATIENT.ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>policyNumber</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Data</con:sourceStep><con:sourcePath>//F_PATIENT.POLICY_NUMBER</con:sourcePath><con:targetType>policyNumber</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="73af6c2f-da3b-413a-a4aa-ca5df92cd030"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014001"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": """"+date2+"""T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="653222b9-ff0b-4c59-a7c4-10c45996616c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="bee02287-5369-4899-9fa4-0c1c610783bd" name="Contains"><con:configuration><token>&lt;F_PATIENT.POLICY_NUMBER>50529308890014001&lt;/F_PATIENT.POLICY_NUMBER></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="876dcf90-3456-443b-9100-e070175ae164" name="Contains 2"><con:configuration><token>&lt;F_PATIENT.POLICY_STATUS>Y&lt;/F_PATIENT.POLICY_STATUS></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2a0663c6-f830-4abd-a2d4-fc1ee89919bb" name="Contains 3"><con:configuration><token>&lt;F_PATIENT.POLICY_UPDATE_DATE>${#TestCase#date2} 10:54:54.926154&lt;/F_PATIENT.POLICY_UPDATE_DATE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="fd478b68-3630-42b2-867e-0cb331682556"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult><![CDATA[ формирует сообщение об ошибке E037 с параметрами <patientId>, <f_patient.policy_number>, <f_patient.policy_status>, <policyNumber>, <policyStatus>: "По пациенту <patientId> получена обновлённая информация по полису <f_patient.policy_number> со статусом <f_patient.policy_status>. Ранее был сохранён статус "Погашен по смерти" ( <policyStatus>) по полису <policyNumber>."]]></con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>7690</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-12-23T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-12-23</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>policyNumber</con:name><con:value>30266179</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>uid</con:name><con:value>887</con:value></con:property><con:property><con:name>date</con:name><con:value>2021-11-29T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2021-11-29</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="2e48194b-312e-4beb-9bcd-764f1e659648" name="А_ЕСУ_10 - Обработка сообщения об изменении прикрепления пациента (топик AttachmentEvent)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="32c8136b-da0a-42e8-bfb7-79a98f979fbe" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#155424" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="05f2f8bd-df53-40f7-8abb-16be97509851"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="350c8e5e-a0dd-4448-88e7-57c8fa7e3ed3"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "areaId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("areaId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="55204004-6c98-4a08-93fd-775719278a9d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-18T14:20:53",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": """+areaId+""",
      "areaTypeCode": 20,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="b893f160-b85a-4c04-ae27-9d2120a1de6e"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="f455e20d-f30f-4225-9fc5-dfcbf7b50d97"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT.ID>${#TestCase#patientId}</F_PATIENT.ID>
            <F_PATIENT.BIRTH_DATE/>
            <F_PATIENT.UPDATE_BIRTH_DATE/>
            <F_PATIENT.POLICY_NUMBER/>
            <F_PATIENT.POLICY_STATUS/>
            <F_PATIENT.POLICY_UPDATE_DATE/>
            <F_PATIENT.CHECK_AREA_DATE/>
            <F_PATIENT.CHECK_AREA_STATUS>0</F_PATIENT.CHECK_AREA_STATUS>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="8825b60e-033d-4a57-af62-04fe9641e7a3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-18 14:20:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>10684928</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>f</F_PATIENT_AREA.IS_BASE_ATTACH>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>7112</con:value></con:property><con:property><con:name>areaId</con:name><con:value>123</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-06-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-06-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="f91e1ced-5f0c-4ef4-a054-bd2a1ae8ec7b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#155426" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="bd5fb3f8-23c1-4830-b0e9-6fe3695403c4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId" id="171c6675-957c-4450-8a94-691703980be2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 20)
order by random() 
limit 2</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="546137f4-8023-4162-b5d5-14eb8ad2cbcc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>areaId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//Row[2]/F_AREA.ID</con:sourcePath><con:targetType>areaId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="a34b82ba-531f-4e7a-a164-08a8e53f7544"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, is_base_attach, mo_id) VALUES(1234${#TestCase#patientId}${#TestCase#areaId}, ${#TestCase#patientId},  '2019-11-18 14:20:53.000', ${#TestCase#areaId}, false, 204);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="033b66ca-171c-49ff-92f6-46e9561b5092"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId2=testRunner.testCase.getPropertyValue("areaId2")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-19T14:20:53",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": """+areaId2+""",
      "areaTypeCode": 20,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="3957c00e-8100-48fa-ab63-a5d3d4c4f0a0"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="f531a789-2076-4149-9e59-37f354fa42b2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT.ID>${#TestCase#patientId}</F_PATIENT.ID>
            <F_PATIENT.BIRTH_DATE/>
            <F_PATIENT.UPDATE_BIRTH_DATE/>
            <F_PATIENT.POLICY_NUMBER/>
            <F_PATIENT.POLICY_STATUS/>
            <F_PATIENT.POLICY_UPDATE_DATE/>
            <F_PATIENT.CHECK_AREA_DATE/>
            <F_PATIENT.CHECK_AREA_STATUS>0</F_PATIENT.CHECK_AREA_STATUS>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="a782e134-4e83-4428-afa6-671736672f8b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-19 14:20:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId2}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>10684928</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>f</F_PATIENT_AREA.IS_BASE_ATTACH>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>6703</con:value></con:property><con:property><con:name>areaId</con:name><con:value>483657</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-05-11T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-05-11</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>areaId2</con:name><con:value>2121</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="c2b62b42-00ea-4d80-b68e-b07c604e35f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#155427" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="bd7b9f90-6ac9-47fd-82cd-8e4895e325ff"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId" id="e1534074-fcbb-4476-8e52-39b1aeff83e4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 70)
order by random() 
limit 2</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5044a245-c965-4337-93c5-97226bad3fde"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>areaId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//Row[2]/F_AREA.ID</con:sourcePath><con:targetType>areaId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="ee91ada8-6713-4529-b90e-b306bce75ad5"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="b4ba10be-e8d2-4dfd-b2b2-eb5184ee143f"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6570;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="e792fed6-0a61-42f3-b1a9-2bef2ed0500c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate}', NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, is_base_attach, mo_id) VALUES(12${#TestCase#patientId}${#TestCase#areaId}, ${#TestCase#patientId},  '2019-11-18 14:20:53.000', ${#TestCase#areaId}, false, 204);

--- создание прикреплений
---- закрытое детское прикрепление обрабатывается. Создается continued obs
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- открытое детское прикрепление не обрабатывается. Не закрывается для пациента &lt;18 лет и без возраста. Для взрослого закрывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', NULL, 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое взрослое прикрепление не обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 1019, '2022-01-18', '2022-01-18', 10071084, 128289279, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, причина !=4
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, диагноз в архиве
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, 572, '2022-01-18', '2022-01-18', 10071084, 128291325, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, нет группы ДН для участка с типом 70
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128288175, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');

--- создание событий
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '4', 'создает задачу CONTINUED_OBS', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id)
VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, NULL, 'Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие', false, '123');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id)
VALUES(7${#TestCase#areaId}, 2${#TestCase#areaId}, '2022-01-17 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, NULL, 'Не создает событие, т.к. дата меньше', false, '1234');
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128289279, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, прикрепление взрослое', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '1', 'не создает задачу CONTINUED_OBS, причина !=4', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(5${#TestCase#areaId}, 5${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128291325, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, диагноз в архиве', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(6${#TestCase#areaId}, 6${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128288175, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, нет подходящей группы ДН', false);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="8647a5fe-b1b1-42c0-aa5c-ade5fd26dec5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId2=testRunner.testCase.getPropertyValue("areaId2")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-18T14:20:54",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": """+areaId2+""",
      "areaTypeCode": 70,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="3a79efb2-b933-4345-9eda-d4495405e920"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="ed80de20-58b7-4ab2-bb50-46a247015a4d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT_AREA.ID>12${#TestCase#patientId}${#TestCase#areaId}</F_PATIENT_AREA.ID>
            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-18 14:20:54</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId2}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>10684928</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>t</F_PATIENT_AREA.IS_BASE_ATTACH>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment" id="45616335-47c4-4d00-98bb-efcdbb278b61"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id =   ${#TestCase#patientId}
order by fa.id </con:query><con:assertion type="Simple Contains" id="58e32e3b-e615-47cf-a4da-2856f0551f9c" name="Contains 1"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="3">
            <F_ATTACHMENT.ID>3${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>1019</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128289279</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="4">
            <F_ATTACHMENT.ID>4${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="5">
            <F_ATTACHMENT.ID>5${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>572</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128291325</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="6">
            <F_ATTACHMENT.ID>6${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128288175</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment event" id="d97e26d7-5643-48aa-a920-eef25bb102ef"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})
order by fae.id </con:query><con:assertion type="Simple Contains" id="e8439c63-3fbe-4d6f-aafd-a41ab8c3d743" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT_EVENT.ID>1${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>1${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>создает задачу CONTINUED_OBS</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="2">
            <F_ATTACHMENT_EVENT.ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>123</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="3">
            <F_ATTACHMENT_EVENT.ID>3${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>3${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128289279</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, прикрепление взрослое</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="4">
            <F_ATTACHMENT_EVENT.ID>4${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>4${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>1</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, причина !=4</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="5">
            <F_ATTACHMENT_EVENT.ID>5${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>5${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128291325</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, диагноз в архиве</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="6">
            <F_ATTACHMENT_EVENT.ID>6${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>6${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128288175</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, нет подходящей группы ДН</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="7">
            <F_ATTACHMENT_EVENT.ID>7${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-17 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Не создает событие, т.к. дата меньше</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>1234</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="b0054095-1afd-45b8-90fa-fc8de229dde8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *
from f_task ft
join f_continued_obs_task fcot 
on fcot.id = ft.id 
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d02e1f8f-f696-4f0e-bea7-8607d0aefa04" name="Contains"><con:configuration><token><![CDATA[            <F_TASK.OPENED>2019-11-18 14:20:54</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694889</F_TASK.AREA_TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94a7342-b0bc-445c-bdfd-84120b100dcf" name="Contains 1"><con:configuration><token><![CDATA[            <F_CONTINUED_OBS_TASK.ATTACHMENT_ID>1${#TestCase#areaId}</F_CONTINUED_OBS_TASK.ATTACHMENT_ID>
            <F_CONTINUED_OBS_TASK.MKB10_ID>128293588</F_CONTINUED_OBS_TASK.MKB10_ID>
            <F_CONTINUED_OBS_TASK.STATUS_ID>1</F_CONTINUED_OBS_TASK.STATUS_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1277</con:value></con:property><con:property><con:name>areaId</con:name><con:value>17411993261</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-26T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-26</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>initialId</con:name><con:value>2000</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2005-01-30</con:value></con:property><con:property><con:name>areaId2</con:name><con:value>17411998973</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="911cf546-b003-4421-b043-19f13ed2e433" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#168854" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="8b174f52-87db-42ef-81ef-1309f1d3ea12"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId" id="8b6eff28-5cbb-40b5-8c4f-7e065591e41e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 70)
order by random() 
limit 2</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="573111ad-581d-42cf-a4b3-31f54cf9f84a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>areaId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//Row[2]/F_AREA.ID</con:sourcePath><con:targetType>areaId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="64fc3ceb-1aa4-46e2-b1cd-566fe4297789"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="b4e395be-130b-4675-b091-c70731a9e097"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, is_base_attach, mo_id) VALUES(12${#TestCase#patientId}${#TestCase#areaId}, ${#TestCase#patientId},  '2019-11-18 14:20:53.000', ${#TestCase#areaId}, false, 204);

--- создание прикреплений
---- закрытое детское прикрепление обрабатывается. Создается continued obs
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- открытое детское прикрепление не обрабатывается. Не закрывается для пациента &lt;18 лет и без возраста. Для взрослого закрывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', NULL, 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое взрослое прикрепление не обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 1019, '2022-01-18', '2022-01-18', 10071084, 128289279, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, причина !=4
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, диагноз в архиве
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, 572, '2022-01-18', '2022-01-18', 10071084, 128291325, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, нет группы ДН для участка с типом 70
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128288175, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');

--- создание событий
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '4', 'создает задачу CONTINUED_OBS', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id)
VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, NULL, 'Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие', false, '123');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id)
VALUES(7${#TestCase#areaId}, 2${#TestCase#areaId}, '2022-01-17 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, NULL, 'Не создает событие, т.к. дата меньше', false, '1234');
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128289279, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, прикрепление взрослое', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '1', 'не создает задачу CONTINUED_OBS, причина !=4', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(5${#TestCase#areaId}, 5${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128291325, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, диагноз в архиве', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(6${#TestCase#areaId}, 6${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128288175, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, нет подходящей группы ДН', false);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="48bc6670-f987-4521-8aa5-549203d092ce"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-19T14:20:53",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": """+areaId+""",
      "areaTypeCode": 70,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="a15046de-c11d-43e2-970c-b4c1d0112c16"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="fc7596e5-5c60-4473-93db-ee5b6ea43ccd"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT_AREA.ID>12${#TestCase#patientId}${#TestCase#areaId}</F_PATIENT_AREA.ID>
            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-19 14:20:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>204</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>t</F_PATIENT_AREA.IS_BASE_ATTACH>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment" id="532afff5-68b3-461a-b365-32d397cee2ae"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id =   ${#TestCase#patientId}
order by fa.id </con:query><con:assertion type="Simple Contains" id="c448117a-e116-4d6c-bdb3-bdc44c54f708" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="3">
            <F_ATTACHMENT.ID>3${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>1019</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128289279</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="4">
            <F_ATTACHMENT.ID>4${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="5">
            <F_ATTACHMENT.ID>5${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>572</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128291325</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="6">
            <F_ATTACHMENT.ID>6${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128288175</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment event" id="30e99963-0801-46c2-8ef8-9790cf3c99a9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})
order by fae.id </con:query><con:assertion type="Simple Contains" id="e8439c63-3fbe-4d6f-aafd-a41ab8c3d743" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT_EVENT.ID>1${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>1${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>создает задачу CONTINUED_OBS</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="2">
            <F_ATTACHMENT_EVENT.ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>123</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="3">
            <F_ATTACHMENT_EVENT.ID>3${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>3${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128289279</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, прикрепление взрослое</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="4">
            <F_ATTACHMENT_EVENT.ID>4${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>4${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>1</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, причина !=4</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="5">
            <F_ATTACHMENT_EVENT.ID>5${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>5${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128291325</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, диагноз в архиве</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="6">
            <F_ATTACHMENT_EVENT.ID>6${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>6${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128288175</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, нет подходящей группы ДН</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="7">
            <F_ATTACHMENT_EVENT.ID>7${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-17 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Не создает событие, т.к. дата меньше</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>1234</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="9f69a2af-25d1-4934-8c8d-705aff8862f1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *
from f_task ft
join f_continued_obs_task fcot 
on fcot.id = ft.id 
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>473</con:value></con:property><con:property><con:name>areaId</con:name><con:value>20199561</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-12-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-12-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>initialId</con:name><con:value>2000</con:value></con:property><con:property><con:name>areaId2</con:name><con:value>9289434</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="9984f047-6719-442e-9d67-0388dc2bc726" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#168855 - часть полей NULL" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="13aea045-2d43-4abd-91b5-e562691815dc"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId" id="d3e9b726-b78a-417e-88f1-e9b083ba5eef"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 70)
order by random() 
limit 2</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="69281fc5-421c-4e6a-86b8-7e3d84faeb4d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>areaId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//Row[2]/F_AREA.ID</con:sourcePath><con:targetType>areaId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="bf7d14ff-12d6-4de1-9680-850a767e3c8f"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="691f0da3-1e5c-47db-8460-86a4f82deefd"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6210;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bdate", currentDate_formatted )
def currentDate2 = today.getTime() - 6577;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "bdate18", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="26912027-8465-45f0-ae8f-107cc24e9330"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate18}', '2000-01-01', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, is_base_attach, mo_id) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId},  '2019-11-18 14:20:53.000', ${#TestCase#areaId}, false, 204);

--- создание прикреплений
---- закрытое детское прикрепление обрабатывается. Создается continued obs
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- открытое детское прикрепление не обрабатывается. Не закрывается для пациента &lt;18 лет и без возраста. Для взрослого закрывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', NULL, 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое взрослое прикрепление не обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 1019, '2022-01-18', '2022-01-18', 10071084, 128289279, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, причина !=4
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, диагноз в архиве
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, 572, '2022-01-18', '2022-01-18', 10071084, 128291325, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, нет группы ДН для участка с типом 70
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128288175, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');

--- создание событий
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '4', 'создает задачу CONTINUED_OBS', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, diagnosis_date)
VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, NULL, 'Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие', false, '123', '2000-01-01');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, diagnosis_date)
VALUES(7${#TestCase#areaId}, 2${#TestCase#areaId}, '2022-01-17 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, NULL, 'Не создает событие, т.к. дата меньше', false, '1234', '2000-01-02');
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128289279, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, прикрепление взрослое', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '1', 'не создает задачу CONTINUED_OBS, причина !=4', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(5${#TestCase#areaId}, 5${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128291325, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, диагноз в архиве', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(6${#TestCase#areaId}, 6${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128288175, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, нет подходящей группы ДН', false);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="86b5d7c7-265e-4feb-a465-93805166f3d4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="ecb20aff-4885-4d7e-b8a1-dee7cba98a1a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId2=testRunner.testCase.getPropertyValue("areaId2")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-19T14:21:53",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": """+areaId2+""",
      "areaTypeCode": 70,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="595fec57-d782-4ea6-85d0-f139803a8739"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="62e6d486-0107-4e8f-9583-ec8b99346e7e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT_AREA.ID>12${#TestCase#areaId}${#TestCase#patientId}</F_PATIENT_AREA.ID>
            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-19 14:21:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId2}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>10684928</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>f</F_PATIENT_AREA.IS_BASE_ATTACH>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment" id="c5b2122d-a6c5-48c0-8c8c-2c697b0e73d9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id =   ${#TestCase#patientId}
order by fa.id </con:query><con:assertion type="Simple Contains" id="58e32e3b-e615-47cf-a4da-2856f0551f9c" name="Contains 1"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>${#TestCase#date2}</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>14382</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>f</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO/>
            <F_ATTACHMENT.REPEAT/>
            <F_ATTACHMENT.SPECIALITY_NAME/>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE>2000-01-01 00:00:00</F_ATTACHMENT.DIAGNOSIS_DATE>
        </Row>
        <Row rowNumber="3">
            <F_ATTACHMENT.ID>3${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>1019</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128289279</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="4">
            <F_ATTACHMENT.ID>4${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="5">
            <F_ATTACHMENT.ID>5${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>572</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128291325</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="6">
            <F_ATTACHMENT.ID>6${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128288175</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check old attachment event" id="5604f072-3f54-4d98-a5f5-4379f8ed7552"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId}) and event_date &lt; '2022-01-19 09:41:00.646'
order by fae.id </con:query><con:assertion type="Simple Contains" id="e8439c63-3fbe-4d6f-aafd-a41ab8c3d743" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT_EVENT.ID>1${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>1${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>создает задачу CONTINUED_OBS</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="2">
            <F_ATTACHMENT_EVENT.ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>123</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>2000-01-01 00:00:00</F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>
        </Row>
        <Row rowNumber="3">
            <F_ATTACHMENT_EVENT.ID>3${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>3${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128289279</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, прикрепление взрослое</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="4">
            <F_ATTACHMENT_EVENT.ID>4${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>4${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>1</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, причина !=4</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="5">
            <F_ATTACHMENT_EVENT.ID>5${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>5${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128291325</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, диагноз в архиве</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="6">
            <F_ATTACHMENT_EVENT.ID>6${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>6${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128288175</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, нет подходящей группы ДН</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="7">
            <F_ATTACHMENT_EVENT.ID>7${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-17 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Не создает событие, т.к. дата меньше</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>1234</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>2000-01-02 00:00:00</F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check new attachment event" id="7dc2ac52-d0f5-47bc-bc1f-75b4ed646742"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId}) and event_date > '2022-01-19 09:41:00.646'</con:query><con:assertion type="Simple Contains" id="05090aff-be9a-4950-b5a1-aa5b7fc7d6c5" name="Contains"><con:configuration><token> &lt;F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}&lt;/F_ATTACHMENT_EVENT.ATTACHMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d94f9bcd-ed90-411e-b4f7-3cf825069cc9" name="Contains 1"><con:configuration><token> &lt;F_ATTACHMENT_EVENT.EVENT_DATE>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cbe89d29-5793-4b16-8930-70385508aebf"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="1ec077f3-2258-4881-a1f6-2f9dc4bbca93" name="Contains 2"><con:configuration><token><![CDATA[<F_ATTACHMENT_EVENT.DOCUMENT_UID/>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>123</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>2000-01-01 00:00:00</F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="a22c1f0e-8f7b-4c2c-9914-af5734b5c172"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *
from f_task ft
join f_continued_obs_task fcot 
on fcot.id = ft.id 
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d02e1f8f-f696-4f0e-bea7-8607d0aefa04" name="Contains"><con:configuration><token><![CDATA[            <F_TASK.OPENED>2019-11-19 14:21:53</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694889</F_TASK.AREA_TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94a7342-b0bc-445c-bdfd-84120b100dcf" name="Contains 1"><con:configuration><token><![CDATA[            <F_CONTINUED_OBS_TASK.ATTACHMENT_ID>1${#TestCase#areaId}</F_CONTINUED_OBS_TASK.ATTACHMENT_ID>
            <F_CONTINUED_OBS_TASK.MKB10_ID>128293588</F_CONTINUED_OBS_TASK.MKB10_ID>
            <F_CONTINUED_OBS_TASK.STATUS_ID>1</F_CONTINUED_OBS_TASK.STATUS_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="83ef8965-41aa-4d24-a41c-e2c4d3d129a0" name="Contains 3"><con:configuration><token><![CDATA[<F_TASK.PATIENT_ID>${#TestCase#patientId}</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2019-11-19 14:21:53</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694889</F_TASK.AREA_TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f752d1bb-d477-4155-925e-a9a98c8bf173" name="Contains 4"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="46258f77-ad4f-431c-af0e-b7a5173917a6"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="close"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="N83.2"

assert messageJson.diagnosisName=="Другие и неуточненные кисты яичника"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.specializationName=="Терапия"

assert messageJson.startDate=="2022-01-18"

assert messageJson.employeeId==14382

assert messageJson.noDoctor==false

assert messageJson.specialityCode=="69"

assert messageJson.diagnosisDate=="2000-01-01T00:00:00.0"

assert messageJson.endDate==date2

assert messageJson.cancelReasonCode=="4"

assert messageJson.cancelReasonName=="Пациент достиг 18 лет"

assert messageJson.dnDoctorJobExecutionId=="123"

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>6401</con:value></con:property><con:property><con:name>areaId</con:name><con:value>20196457</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-12-25T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-12-25</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>initialId</con:name><con:value>2000</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2005-12-24</con:value></con:property><con:property><con:name>topicDNexternal</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1671990808849</con:value></con:property><con:property><con:name>topicDNForm30ToDisp</con:name><con:value>DnForm30ToDisp</con:value></con:property><con:property><con:name>bdate18</con:name><con:value>2004-12-22</con:value></con:property><con:property><con:name>bootstrapServer</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>areaId2</con:name><con:value>17411974323</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="4eced504-154a-42d7-ab15-608732657620" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#168855 - есть все поля" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="768a5d5e-1404-4035-a94d-48a24e873aa2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId" id="27e5ddda-1bc0-4658-aa72-7e120372e3cb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 70)
order by random() 
limit 2</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="3d724a69-1f8e-441f-8ef7-449cc17af28f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>areaId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//Row[2]/F_AREA.ID</con:sourcePath><con:targetType>areaId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="0502eea9-dc18-415f-9fba-47aea50cc30c"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="cfe4a3c4-aa62-4449-a178-72de6a5841d3"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6210;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bdate", currentDate_formatted )
def currentDate2 = today.getTime() - 6577;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "bdate18", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="606ce2d1-59a0-4d2e-bbff-81f4f3921ccf"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate18}', '2000-01-01', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, is_base_attach, mo_id) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId},  '2019-11-18 14:20:53.000', ${#TestCase#areaId}, false, 204);

--- создание прикреплений
---- закрытое детское прикрепление обрабатывается. Создается continued obs
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- открытое детское прикрепление не обрабатывается. Не закрывается для пациента &lt;18 лет и без возраста. Для взрослого закрывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', NULL, 10071084, 128286431, '69', 125676831, false, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)', NULL, NULL, NULL);
---- закрытое взрослое прикрепление не обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 1019, '2022-01-18', '2022-01-18', 10071084, 128289279, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, причина !=4
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, диагноз в архиве
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, 572, '2022-01-18', '2022-01-18', 10071084, 128291325, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
---- закрытое детское прикрепление не обрабатывается, нет группы ДН для участка с типом 70
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128288175, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');

--- создание событий
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '4', 'создает задачу CONTINUED_OBS', false);
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-20219004', '14382', 128286431, '69', 125676831, NULL, 'Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие', true, '123', 'Фамилия Имя События', 'repeat', 'имя специальности', '2000-01-01 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, diagnosis_date)
VALUES(7${#TestCase#areaId}, 2${#TestCase#areaId}, '2022-01-17 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, NULL, 'Не создает событие, т.к. дата меньше', false, '1234', '2000-01-02');
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128289279, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, прикрепление взрослое', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '1', 'не создает задачу CONTINUED_OBS, причина !=4', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(5${#TestCase#areaId}, 5${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128291325, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, диагноз в архиве', false);
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(6${#TestCase#areaId}, 6${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128288175, '69', 125676819, '4', 'не создает задачу CONTINUED_OBS, нет подходящей группы ДН', false);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="71ccae5b-a3ab-43cf-9fed-31a30a90ed64"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="2e2b96c2-69b7-4ef0-859c-564b68f85f90"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId2=testRunner.testCase.getPropertyValue("areaId2")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-19T14:21:53",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": """+areaId2+""",
      "areaTypeCode": 70,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="c89d1335-4269-49bf-b1c6-e12e49414448"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="3d1bb1fc-a3a0-4340-861d-75912ea4b078"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT_AREA.ID>12${#TestCase#areaId}${#TestCase#patientId}</F_PATIENT_AREA.ID>
            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-19 14:21:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId2}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>10684928</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>f</F_PATIENT_AREA.IS_BASE_ATTACH>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment" id="4399f084-143e-4409-bcff-9d45f21fc84b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id =   ${#TestCase#patientId}
order by fa.id </con:query><con:assertion type="Simple Contains" id="58e32e3b-e615-47cf-a4da-2856f0551f9c" name="Contains 1"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="2">
            <F_ATTACHMENT.ID>2${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>${#TestCase#date2}</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>14382</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128286431</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676831</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Фамилия Имя События</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>repeat</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>имя специальности</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE>2000-01-01 00:00:00</F_ATTACHMENT.DIAGNOSIS_DATE>
        </Row>
        <Row rowNumber="3">
            <F_ATTACHMENT.ID>3${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>1019</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128289279</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="4">
            <F_ATTACHMENT.ID>4${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293588</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="5">
            <F_ATTACHMENT.ID>5${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>572</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128291325</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="6">
            <F_ATTACHMENT.ID>6${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED>2022-01-18</F_ATTACHMENT.CLOSED>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128288175</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check old attachment event" id="817cdcc2-27cb-42ca-8b0e-2798371851c1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId}) and event_date &lt; '2022-01-19 09:41:00.646'
order by fae.id </con:query><con:assertion type="Simple Contains" id="e8439c63-3fbe-4d6f-aafd-a41ab8c3d743" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT_EVENT.ID>1${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>1${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>создает задачу CONTINUED_OBS</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="2">
            <F_ATTACHMENT_EVENT.ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-20219004</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128286431</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676831</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>t</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>123</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO>Фамилия Имя События</F_ATTACHMENT_EVENT.DOCTOR_FIO>
            <F_ATTACHMENT_EVENT.REPEAT>repeat</F_ATTACHMENT_EVENT.REPEAT>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME>имя специальности</F_ATTACHMENT_EVENT.SPECIALITY_NAME>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>2000-01-01 00:00:00</F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>
        </Row>
        <Row rowNumber="3">
            <F_ATTACHMENT_EVENT.ID>3${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>3${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128289279</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, прикрепление взрослое</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="4">
            <F_ATTACHMENT_EVENT.ID>4${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>4${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>1</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, причина !=4</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="5">
            <F_ATTACHMENT_EVENT.ID>5${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>5${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128291325</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, диагноз в архиве</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="6">
            <F_ATTACHMENT_EVENT.ID>6${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>6${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-18 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128288175</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>не создает задачу CONTINUED_OBS, нет подходящей группы ДН</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE/>
        </Row>
        <Row rowNumber="7">
            <F_ATTACHMENT_EVENT.ID>7${#TestCase#areaId}</F_ATTACHMENT_EVENT.ID>
            <F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}</F_ATTACHMENT_EVENT.ATTACHMENT_ID>
            <F_ATTACHMENT_EVENT.EVENT_DATE>2022-01-17 09:41:00.646</F_ATTACHMENT_EVENT.EVENT_DATE>
            <F_ATTACHMENT_EVENT.DOCUMENT_UID>c5564c1c-2d94-460b-b36b-${#TestCase#areaId}</F_ATTACHMENT_EVENT.DOCUMENT_UID>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128293588</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Не создает событие, т.к. дата меньше</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>f</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>1234</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO/>
            <F_ATTACHMENT_EVENT.REPEAT/>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME/>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>2000-01-02 00:00:00</F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check new attachment event" id="8c57a81b-cdda-4eaf-989b-c9723068cd1f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId}) and event_date > '2022-01-19 09:41:00.646'</con:query><con:assertion type="Simple Contains" id="05090aff-be9a-4950-b5a1-aa5b7fc7d6c5" name="Contains"><con:configuration><token> &lt;F_ATTACHMENT_EVENT.ATTACHMENT_ID>2${#TestCase#areaId}&lt;/F_ATTACHMENT_EVENT.ATTACHMENT_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d94f9bcd-ed90-411e-b4f7-3cf825069cc9" name="Contains 1"><con:configuration><token> &lt;F_ATTACHMENT_EVENT.EVENT_DATE>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cbe89d29-5793-4b16-8930-70385508aebf"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="1ec077f3-2258-4881-a1f6-2f9dc4bbca93" name="Contains 2"><con:configuration><token><![CDATA[            <F_ATTACHMENT_EVENT.DOCUMENT_UID/>
            <F_ATTACHMENT_EVENT.EMPLOYEE_ID>14382</F_ATTACHMENT_EVENT.EMPLOYEE_ID>
            <F_ATTACHMENT_EVENT.MKB10_ID>128286431</F_ATTACHMENT_EVENT.MKB10_ID>
            <F_ATTACHMENT_EVENT.SPECIALITY_CODE>69</F_ATTACHMENT_EVENT.SPECIALITY_CODE>
            <F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>125676831</F_ATTACHMENT_EVENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT_EVENT.REASON_ID>4</F_ATTACHMENT_EVENT.REASON_ID>
            <F_ATTACHMENT_EVENT.DIAGNOSIS>Для &lt;18 и без даты не создает задачу CONTINUED_OBS, прикрепление открыто. Для взрослого создает задачу и событие</F_ATTACHMENT_EVENT.DIAGNOSIS>
            <F_ATTACHMENT_EVENT.NO_DOCTOR>t</F_ATTACHMENT_EVENT.NO_DOCTOR>
            <F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>123</F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID>
            <F_ATTACHMENT_EVENT.DOCTOR_FIO>Фамилия Имя События</F_ATTACHMENT_EVENT.DOCTOR_FIO>
            <F_ATTACHMENT_EVENT.REPEAT>repeat</F_ATTACHMENT_EVENT.REPEAT>
            <F_ATTACHMENT_EVENT.SPECIALITY_NAME>имя специальности</F_ATTACHMENT_EVENT.SPECIALITY_NAME>
            <F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>2000-01-01 00:00:00</F_ATTACHMENT_EVENT.DIAGNOSIS_DATE>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="4c176bcb-ddc3-427f-a376-56b982a14678"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select *
from f_task ft
join f_continued_obs_task fcot 
on fcot.id = ft.id 
where ft.patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d02e1f8f-f696-4f0e-bea7-8607d0aefa04" name="Contains"><con:configuration><token><![CDATA[            <F_TASK.OPENED>2019-11-19 14:21:53</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694889</F_TASK.AREA_TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e94a7342-b0bc-445c-bdfd-84120b100dcf" name="Contains 1"><con:configuration><token><![CDATA[            <F_CONTINUED_OBS_TASK.ATTACHMENT_ID>1${#TestCase#areaId}</F_CONTINUED_OBS_TASK.ATTACHMENT_ID>
            <F_CONTINUED_OBS_TASK.MKB10_ID>128293588</F_CONTINUED_OBS_TASK.MKB10_ID>
            <F_CONTINUED_OBS_TASK.STATUS_ID>1</F_CONTINUED_OBS_TASK.STATUS_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="83ef8965-41aa-4d24-a41c-e2c4d3d129a0" name="Contains 3"><con:configuration><token><![CDATA[<F_TASK.PATIENT_ID>${#TestCase#patientId}</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2019-11-19 14:21:53</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694889</F_TASK.AREA_TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="6058b53f-f5c4-4200-bfda-ef26320a464c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="close"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.groupCode=="DNC0039"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.diagnosisCode=="A23.1"

assert messageJson.diagnosisName=="Бруцеллез, вызванный Brucella abortus"

assert messageJson.groupSpecializationCode=="24"

assert messageJson.groupSpecializationName=="Инфекционные болезни"

assert messageJson.doctorFIO=="Фамилия Имя События"

assert messageJson.specializationName=="Педиатрия"

assert messageJson.startDate=="2022-01-18"

assert messageJson.employeeId==14382

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="69"

assert messageJson.repeat=="repeat"

assert messageJson.specialityName=="имя специальности"

assert messageJson.diagnosisDate=="2000-01-01T00:00:00.0"

assert messageJson.endDate==date2

assert messageJson.cancelReasonCode=="4"

assert messageJson.cancelReasonName=="Пациент достиг 18 лет"

assert messageJson.dnDoctorJobExecutionId=="123"

assert messageJson.diagnosisProactive==true

assert messageJson.diagnosisObservationPeriod==12</script></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>8076</con:value></con:property><con:property><con:name>areaId</con:name><con:value>175720265</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-12-25T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-12-25</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>initialId</con:name><con:value>2000</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2005-12-24</con:value></con:property><con:property><con:name>topicDNexternal</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1671990975443</con:value></con:property><con:property><con:name>topicDNForm30ToDisp</con:name><con:value>DnForm30ToDisp</con:value></con:property><con:property><con:name>bdate18</con:name><con:value>2004-12-22</con:value></con:property><con:property><con:name>bootstrapServer</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>areaId2</con:name><con:value>17411974270</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="f5249222-b050-4155-9b48-9f0a59d5701f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#168862" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="a81f7090-b6d8-41d9-b6f2-ab896e42f1e4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId 10" id="b510923c-3430-4e93-a6ee-d5955e471961"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 10)
order by random() 
limit 1</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId 70" id="3d89bf00-643a-44b0-9a46-59102fcb47c3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 70)
order by random() 
limit 1</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="d9c6fae8-045e-46a9-9fb0-a0f89f24d21f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId 10</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>areaId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId 70</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="19c73690-d922-4e5b-bb8e-6e851ca5832c"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="1b64fac7-6f6a-4d2b-86f8-e8e6e66f2df7"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="0a1bb762-0721-4e26-abbe-be1bdcd6aa68"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate}', '2000-01-01', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, is_base_attach, mo_id) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId},  '2019-11-18 14:20:53.000', ${#TestCase#areaId}, false, 204);

--- создание прикреплений
---- открытое прикрепление к группе ДН с типом 70
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 1190, '2022-01-18', NULL, 10071084, 128293694, '69', 125676760, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-05-15 15:41:27.473', '211', '10503947963', 128293694, '69', 125676760, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="f9892d1c-b298-4b7b-998a-595f417aae88"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId2=testRunner.testCase.getPropertyValue("areaId2")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-19T14:20:53",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": """+areaId2+""",
      "areaTypeCode": 70,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="8e627de7-ceca-4222-a46a-18e901bef6d1"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="52bafdd4-3d79-45a5-ac31-88ac946c0fe1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-19 14:20:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId2}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>10684928</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>f</F_PATIENT_AREA.IS_BASE_ATTACH>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e6948d8-bd27-4248-b831-aafb4c8e1a6e"><con:configuration/></con:assertion><con:assertion type="Simple Contains" id="bc5259d2-c645-4321-a2ba-aed9955a97f7" name="Запись добавлена, а не обновлена"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment" id="b616ef20-2c4f-4e18-bbec-5f912d9525f3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id =   ${#TestCase#patientId}
order by fa.id </con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="6"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e8439c63-3fbe-4d6f-aafd-a41ab8c3d743" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>1190</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293694</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676760</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment event" id="d1ff4067-cb34-40d7-b24f-288ed0022f42"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})
order by fae.id </con:query><con:assertion type="Simple Contains" id="e8439c63-3fbe-4d6f-aafd-a41ab8c3d743" name="Contains" disabled="true"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="4ff485df-a624-45aa-901e-d6444249051f" name="Новое событие не создано"><con:configuration><token> &lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="a198cf07-18b6-48f1-8cdc-4b5514d5f679"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft
where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 3</con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="72c19029-7975-43d0-960b-4b4ea448b6fa" name="Contains"><con:configuration><token><![CDATA[ <F_TASK.OPENED>2019-11-19 14:20:53</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694889</F_TASK.AREA_TYPE_ID>
            <F_TASK.TYPE_ID>3</F_TASK.TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>5538</con:value></con:property><con:property><con:name>areaId</con:name><con:value>17411931531</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-12-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-12-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>initialId</con:name><con:value>2000</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2004-12-17</con:value></con:property><con:property><con:name>topicDNexternal</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1655821507827</con:value></con:property><con:property><con:name>areaId2</con:name><con:value>17411974282</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="65753383-4992-48bb-92aa-60d8bb9e45d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169008" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="0548879a-def5-4d43-bc14-a7d8175a5ea8"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="010a6b56-a7c4-4cb3-880a-8f109913f7d3"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="3c15cc58-d434-4cbe-ba19-64b9fcb989f4"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-18T14:20:53",
      "eventType": "DELETE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": 91859015,
      "areaTypeCode": 20,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="541a8575-0c99-4e19-94bf-4cb1d8c775e0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="084bc94f-44dc-4854-9ea8-3f28c20bfb14"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E042 с параметром &lt;event.eventType>: "Получен неизвестный тип события изменения прикрепления пациента к участку: &lt;eventType>. "</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>8069</con:value></con:property><con:property><con:name>areaId</con:name><con:value>2069</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-06-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-06-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="aeb14468-31b2-44e3-bb37-f275dd8f692c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169013" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="657f04da-dcc8-41a4-b79a-c25f6df50220"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="5eb7ab49-6efe-452f-8990-826538960ed7"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="64b39eec-c037-4825-b760-6391075f6674"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, NULL, NULL, NULL, 'D', NULL, NULL, 'NEW');
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked, mo_id, is_base_attach) VALUES(1234${#TestCase#patientId}${#TestCase#areaId}, ${#TestCase#patientId}, 125694882, '2019-11-18 14:20:53.000', 91859015, 0, NULL, false);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="092dc0be-29b1-4ebd-9f4d-0798bbde62b0"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-18T14:20:53",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": 125694889,
      "areaTypeCode": 20,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="2cd05559-15f3-4146-a74c-9d231acfc8db"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT.ID>${#TestCase#patientId}</F_PATIENT.ID>
            <F_PATIENT.AREA_ID/>
            <F_PATIENT.CHANGED_DATE/>
            <F_PATIENT.BIRTH_DATE/>
            <F_PATIENT.UPDATE_BIRTH_DATE/>
            <F_PATIENT.POLICY_NUMBER/>
            <F_PATIENT.POLICY_STATUS>D</F_PATIENT.POLICY_STATUS>
            <F_PATIENT.POLICY_UPDATE_DATE/>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="24963f8d-2809-4e4c-9004-426347b36ec6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.AREA_TYPE_ID>125694882</F_PATIENT_AREA.AREA_TYPE_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-18 14:20:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>91859015</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.IS_CHECKED>0</F_PATIENT_AREA.IS_CHECKED>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="2a958e76-7e05-47cf-b18a-63e57f1ffe1b"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E038 с параметрами &lt;areaId> и &lt;patientId>.: "Невозможно изменить прикрепление на участок &lt;areaId>, т.к. полис пациента &lt;patientId> погашен по смерти."</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>3345</con:value></con:property><con:property><con:name>areaId</con:name><con:value>6360</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-06-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-06-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="8bff148f-9f63-4652-bba9-cb81b8bd7799" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169015" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="c30f721a-e09d-4ef7-be5c-b2fc56748537"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="69a12b54-8f12-443b-8799-a197a5c5dde4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="230f4d6e-add3-4f69-b847-aa7936d69dd9"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="66408739-7213-4bb6-b9eb-528dc13bdd12"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="66fab959-cad3-4116-a834-29322bcfe9d6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, 125694889, NULL, NULL, NULL, NULL, 'D', NULL, NULL, 'NEW');
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked, is_base_attach) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId}, 125694889, '2019-11-18 14:20:53.000', 91859015, 0, false);

--- создание прикреплений
---- закрытое детское прикрепление обрабатывается
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2022-01-18', '2022-01-18', 10071084, 128293588, '69', 125676819, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)');

--- создание событий
INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor)
VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2022-01-18 09:41:00.646', 'c5564c1c-2d94-460b-b36b-${#TestCase#areaId}', '14382', 128293588, '69', 125676819, '4', 'комментарий', false);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="09466020-f54c-40d7-8f6f-8ebd22bca2e9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-19T14:20:53",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": 125694889,
      "areaTypeCode": 20,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="9a932725-4087-4cc2-8910-7dd94e5d8fc9"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="408ee82c-56ac-4988-8e2a-b8e1a12a7e48"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_PATIENT_AREA.ID>12${#TestCase#areaId}${#TestCase#patientId}</F_PATIENT_AREA.ID>
            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.AREA_TYPE_ID>125694889</F_PATIENT_AREA.AREA_TYPE_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-18 14:20:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>91859015</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.IS_CHECKED>0</F_PATIENT_AREA.IS_CHECKED>
            <F_PATIENT_AREA.MO_ID/>
            <F_PATIENT_AREA.IS_BASE_ATTACH>f</F_PATIENT_AREA.IS_BASE_ATTACH>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="35bc091a-211e-469e-8dc9-22cf8feb0720"><con:description>Проверить грейлог</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Формирует сообщение об ошибке E031 с параметрами &lt;patientId> и &lt;areaId>: "Для пациента &lt;patientId> получен активный педиатрический участок &lt;areaId> при наличии закрытых по причине "Пациент достиг возраста 18" прикреплений к детским группам."</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>6551</con:value></con:property><con:property><con:name>areaId</con:name><con:value>6032</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-10-07T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-10-07</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>initialId</con:name><con:value>2000</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2004-10-04</con:value></con:property><con:property><con:name>topicDNexternal</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1655821507827</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ad0ec06b-bbb6-44a1-9f24-e664516e1724" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169011" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="faa4c9a3-e396-41c6-b8cf-72750053cb8b"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="a6494d23-d815-4ad8-912a-60aafbb5ef7f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="7206c0b0-1d7f-488e-94af-b93b80dcebbe"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-18T14:20:53",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": 91859015,
      "areaTypeCode": 30,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="42c0c9bf-7102-4099-92a1-5f303455f302"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>9841</con:value></con:property><con:property><con:name>areaId</con:name><con:value>2897</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-06-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-06-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a40dba75-9d9a-4eec-9227-e8cd9c61b55a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169012" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="ed674eb7-2a7c-4d55-8a49-c81059fac23e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="a571ffd2-469e-4118-bc49-0fd6916fe4c3"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_attachment WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="ff1a40fe-eab4-4f89-adb8-701d2effe0c4"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-18T14:20:53",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": 91859015,
      "areaTypeCode": 70,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="20869177-7444-470b-9213-c3d61145161d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>7267</con:value></con:property><con:property><con:name>areaId</con:name><con:value>5864</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-06-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-06-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ef2aa9c7-9af2-4ddc-9c75-490ab8e60c08" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169024" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Generate patientId" id="631a8727-61dd-44bf-9dec-d6f5413b77e2"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="9a99440b-ed87-4052-9850-caae62309d6b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="88bb0d61-2e68-4083-aa85-35356b1070dd"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="d77e8b02-01bf-4380-b2d6-90c3a269c2ab"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

areaId=getNonexistendArea()
log.info(areaId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", areaId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="e4cccf5a-172b-4742-8261-3f3644a119e3"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="c4bf5a62-4d50-456d-8c71-ce5b1c248ae4"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="35b042d6-81b9-4c30-a338-12c349f8286c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate}', NULL, 0);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId}, '2019-04-01 00:00:00.000', 606668, 204, true);

--- создание прикреплений для проверки их закрытия

INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 606, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 606, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 606, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, true);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 606, '2021-03-09', '2021-03-09', 14484, 128290661, '602', 125676819, false); --- прикрепление не обрабатывается, т.к. закрыто
 
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', false, NULL, NULL, NULL, NULL, '2021-05-14 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', NULL, NULL, NULL, NULL, NULL, '2021-05-15 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true, NULL, NULL, NULL, NULL, '2021-05-16 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', false, NULL, NULL, NULL, NULL, '2021-05-17 00:00:00.000');

--- создание тасок и связанных данных
--- задачи для проверки шага 1
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 4); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 3); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 2); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4); --- шаг 1 не обработает, т.к. закрыта
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(8${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, true, 125694880, 3); --- шаг 1 не обработает, т.к. deleted = true

--- задачи для проверки шага 2
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(7${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 1);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(9${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4); --- задача, по которой два диагноза и один не обработан
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, type_id)
VALUES(10${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 5);


--- заполнение связанных таблиц
INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) VALUES(4${#TestCase#areaId}, 1${#TestCase#areaId}, 128290661, 1);

--- создание документов оснований

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}100, '2edb2286-d140-4857-b2b5-02a29873${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}101, '9f133c19-f164-423c-88f0-a9628b1e2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}102, '13${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ обрабатывает у пациента определена группа ДН 1023 DNA0149, т.к. нет задач
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}103, '3${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена группа ДН 2 DNA0002, т.к. нет задач
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}104, '2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, true, '2021-02-24 17:13:49.000'); --- документ не обрабатывается на шаге 2, для документа нет задач, но deprecated = true
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}105, '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена только группа ДН 2 DNA0002, т.к. по второму диагнозу есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}106, '10${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}107, '11${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}108, '12${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}100, 128291744, 1, 6${#TestCase#areaId}, 12${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}101, 128290661, 1, 7${#TestCase#areaId}, 13${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}102, 128290661, 0, NULL, 14${#TestCase#areaId}); --- есть взрослые и детские группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}103, 128287720, 0, NULL, 15${#TestCase#areaId}); --- есть только взрослые группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}104, 128290661, 0, NULL, 16${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}105, 128290661, 1, 9${#TestCase#areaId}, 17${#TestCase#areaId}); --- есть взрослые и детские группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) --- есть только взрослые группы ДН
VALUES(${#TestCase#areaId}105, 128287720, 0, NULL, 18${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}106, 128291744, 1, 10${#TestCase#areaId}, 19${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}107, 128290661, 0, NULL, 20${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}108, 128290661, 0, NULL, 21${#TestCase#areaId});
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="dc1d25c8-14a1-48eb-8848-5a792ef41c3e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 66618206,
      "dateTime": "2022-03-16T15:34:34",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 667643904,
      "patientId": \""""+patientId+"""\",
      "isActual": false,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": 606668,
      "areaTypeCode": 20,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2022-03-16",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachEndCause": {
         "globalId": 128619962,
         "code": "70",
         "title": "Не соответствует сведениям МГФОМС (полис погашен по ЗАГС)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      },
      "attachEndCauseErzl": 3
   },
   "attachmentOldValue": {
      "attachId": 127643904,
      "patientId": 2113782144,
      "isActual": true,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": 998365,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2099-01-01",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="3a6c2896-bab1-4096-b79e-09dd7ee0b6a2" disabled="true"><con:settings/><con:config><delay>60000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="b360abfd-a0cf-4493-81f3-83859ba49bea"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d62fc676-9f57-4777-9e39-db1c6d0e3cc4" name="Contains"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 1 Step 1" id="0c5ecaf5-b9d1-4d90-bbb0-52445183c026"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 1${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 2 Step 1" id="3d5f8bd4-a1b1-4ea8-859b-7fcff4483c17"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 2${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 3 Step 1" id="d24e05cf-37fa-4b14-8749-f0ef896a0b98"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 3${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 4 Step 1" id="043e4f45-bb90-428a-909d-ad6f7fd1eb19"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 4${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 5 Step 1" id="9e4af7f1-5a34-44be-acd3-09f5d090c070"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 5${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 6 Step 1" id="4997093e-f07d-4c09-9ea4-b58d29dc0f9b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 8${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachments Step 5" id="f04501d6-9fc8-4aab-9b9b-28d09c53fb60"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}
order by fa.id</con:query><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 2"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 3"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 4"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[4]/F_ATTACHMENT.CLOSED/text()</path><content>2021-03-09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 1 Step 1" id="8f3fd0d0-a133-4f97-ba1d-3fdffc53ea66"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 1${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 2 Step 1" id="3337ef1c-4265-4269-a909-8d557ea81f83"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 2${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 3 Step 1" id="796cc0a3-efa5-41f2-8bd1-10fd05a16008"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 3${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 4 Step 1" id="b7c1c705-6b30-4141-b591-52c3684108c9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 4${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="82740124-4190-4090-85a8-d9cd2766cec8"><con:description>Проверить топик DNForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В таблице f_patient в поле area_id проставляется NULL.
В таблице  f_attachment для пациента из запроса для прикреплений с параметром closed = NULL проставляется closed = текущая дата.
В таблице f_task для записей, где $patientId = $patient_id и $deleted = false проставляется признак deleted = true.
В таблице f_attachment_event создается событие об изменении прикреплений из шага 1, где $reason_id =:
racCodeMgfoms = 2 → reason_id = id записи d_observation_cancel_reason с кодом "2" (Выбытие из района обслуживания);


По каждому из прикреплений из шага 2 создаётся и отправляется сообщение в топик ЕСУ DNForm30ToDisp:

operationType = close;
patientId = patient_id обработанного пациента;
groupCode = значение поля "code" группы ДН, от которой был откреплён пациент;
endDate = текущая дата;
startDate = дата открытия прикрепления 
diagnosisCode = код диагноза (определяется по закрытой записи f_attachment, полю mkb10_id и связке с таблицей d_mkb10);
diagnosisName = название диагноза (определяется по закрытой записи f_attachment, полю mkb10_id и связке с таблицей d_mkb10);
diagnosisDate = дата установки диагноза (определяется по полю diagnosis_date последней по event_date записи f_attachment_event связанной с закрытым прикреплением к ДН);
doctorFIO = ФИО врача
employeeID = соответствующий параметр из f_attachment 
noDoctor = соответствующий параметр из f_attachment 
repeat = соответствующий параметр из f_attachment
specialityCode = соответствующий параметр из f_attachment
specialityName = соответствующий параметр из f_attachment
specializationCode = d_medical_specialization.code (по связке f_attachment.medical_specialization_id);
specializationName = d_medical_specialization.title (по связке f_attachment.medical_specialization_id);
dnDoctorJobExecutionId = идентификатор должности врача, создавшего документ (определяется по полю dn_doctor_job_execution_id последней по event_date записи f_attachment_event связанной с закрытым прикреплением к ДН);
cancelReasonName = название причины открепления, соответствующее значению справочника d_observation_cancel_reason с кодом "3";
cancelReasonCode = "3"
timeCommitted = текущая дата.
{
   "operationType": "close",
   "patientId": "3989",
   "groupCode": "DNA0088",
   "groupName": "Грипп и пневмония",
   "employeeId": 14484,
   "noDoctor": false,
   "specialityCode": "602",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "J45.0",
   "diagnosisName": "Астма с преобладанием аллергического компонента",
   "diagnosisDate": "2021-05-14T00:00:00.0",
   "startDate": "2021-03-09",
   "endDate": "2022-09-05",
   "cancelReasonCode": "3",
   "cancelReasonName": "Смерть",
   "timeCommitted": "2022-09-05T12:30:59.527893"
}
</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2246</con:value></con:property><con:property><con:name>areaId</con:name><con:value>125375003</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-03T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-03</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2005-02-28</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="39f66d29-5ead-4406-a9ba-ea49262a6ca8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169513" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="3d1e723f-959a-49e0-a9bc-0ac219d886dd"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="829b17c6-5f35-4fb8-849c-73ab663e0b74"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 1233454678
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

areaId=getNonexistendArea()
log.info(areaId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", areaId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate document_id" id="7b5746dd-79ee-4456-923c-af2a90a42e62"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000) + 12345678
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id=getNonexistendPatientId()
log.info(document_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id",document_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="23d82337-a8a4-4e5d-a9f7-db2758909e8c"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="8df57a82-780b-4d32-ab48-98652b08099d"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="CurrentDate" id="b97dc367-2b51-477e-ad0b-1c738b680c0e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="ddbad038-95cb-40a7-80e9-4d9c65b42ef0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate}', NULL, 0);
INSERT INTO f_area(id, area_type_id, update_date, archived)VALUES(${#TestCase#areaId}, 125694880, '2022-10-04 14:30:03.084', true);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, mo_id, is_base_attach) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId}, '2019-11-18 14:20:53.000', ${#TestCase#areaId}, 602, true);


--- создание прикреплений для проверки их закрытия

INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 1029, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, false);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 1029, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 1029, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, true);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 1029, '2021-03-09', '2021-03-09', 14484, 128286429, '602', 125676819, false); --- прикрепление не обрабатывается, т.к. закрыто
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, true); --- открытое прикрепление к другой группе ДН для проверки задач AREA
 
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', false, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', NULL, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', false, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(5${#TestCase#areaId}, 5${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', false, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');

--- создание тасок и связанных данных
--- задачи для проверки шага 1
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 3);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 2);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(7${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 1);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(8${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, true, 125694880, 3);

--- задачи для проверки шага 2

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(9${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(10${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 5);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(11${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 3);


--- заполнение связанных таблиц

INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id)
VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, 128290661, 1);


--- создание документов оснований

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(1${#TestCase#document_id}, '2edb2286-d140-4857-b2b5-02a29873${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(2${#TestCase#document_id}, '9f133c19-f164-423c-88f0-a9628b1e2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(3${#TestCase#document_id}, '13${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ обрабатывает у пациента определена группа ДН 1023 DNA0149, т.к. нет задач

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(4${#TestCase#document_id}, '3${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена группа ДН 2 DNA0002, т.к. нет задач

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(5${#TestCase#document_id}, '2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, true, '2021-02-24 17:13:49.000'); --- документ не обрабатывается на шаге 2, для документа нет задач, но deprecated = true

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(6${#TestCase#document_id}, '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена только группа ДН 2 DNA0002, т.к. по второму диагнозу есть задачи

INSERT INTO f_document  (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(7${#TestCase#document_id}, '10${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(8${#TestCase#document_id}, '11${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(9${#TestCase#document_id}, '12${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи


INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#document_id}, 128291744, 1, 6${#TestCase#areaId}, 1${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(2${#TestCase#document_id}, 128290661, 1, 7${#TestCase#areaId}, 2${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(3${#TestCase#document_id}, 128290661, 0, NULL, 3${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(4${#TestCase#document_id}, 128287720, 0, NULL, 4${#TestCase#document_id}); 
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(5${#TestCase#document_id}, 128290661, 0, NULL, 5${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(6${#TestCase#document_id}, 128287720, 0, NULL, 7${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(6${#TestCase#document_id}, 128290661, 1, 9${#TestCase#areaId}, 6${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(7${#TestCase#document_id}, 128291744, 1, 10${#TestCase#areaId}, 10${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(8${#TestCase#document_id}, 128290661, 0, NULL, 8${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(9${#TestCase#document_id}, 128290661, 0, NULL, 9${#TestCase#document_id});</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="52aec66f-9210-4cbb-b894-06ea59c24887"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 66618206,
      "dateTime": "2022-03-16T15:34:34",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 667643904,
      "patientId": \""""+patientId+"""\",
      "isActual": false,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": \""""+areaId+"""\",
      "areaTypeCode": 20,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2022-03-16",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachEndCause": {
         "globalId": 128619962,
         "code": "20",
         "title": "Не соответствует сведениям МГФОМС (полис погашен по ЗАГС)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      },
      "attachEndCauseErzl": 3
   },
   "attachmentOldValue": {
      "attachId": 127643904,
      "patientId": 2113782144,
      "isActual": true,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": 998365,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2099-01-01",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="ac1bddeb-4537-480b-aeb9-880033a7c660"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="1ec25366-0cb6-42f1-88ac-74ac390aed85"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d62fc676-9f57-4777-9e39-db1c6d0e3cc4" name="Contains"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 1 Step 1" id="7655e15c-a35e-4b1b-8946-641b4ee7110d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 1${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 2 Step 1" id="b2a06876-ef12-437b-b099-56bf33c9d0d1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 2${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 3 Step 1" id="ea3febdb-69c3-4730-bd4d-7348ea5e4e09"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 3${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 4 Step 1" id="4cb0973a-bb5e-496b-bab4-8fbbdcc98a43"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 11${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 5 Step 1" id="9c4d40e6-d603-4fe2-92b3-b7b6af20e449"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 5${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 6 Step 1" id="18e7fec9-46ee-4694-9cdf-9302f08a0ebd"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 8${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 1 Step 4" id="e094f904-0af9-4351-9c88-3a9c4f5f1509"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid =  '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 4"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f611c7b7-0460-48f5-9f35-b124d8aaf21a" name="Contains"><con:configuration><token><![CDATA[            <F_TASK.TYPE_ID>4</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128287720</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 2 Step 4" id="0d75375c-4a97-4473-a790-517c19890c28"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid =  '13${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 4"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8ebb2689-c747-4704-b54e-280bf274b356" name="Contains"><con:configuration><token><![CDATA[            <F_TASK.TYPE_ID>1</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128290661</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 3 Step 4" id="d8ec9530-b8e6-4091-825a-dd27661dcf76"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid =  '3${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token>            &lt;F_TASK.TYPE_ID>4&lt;/F_TASK.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 2"><con:configuration><token>            &lt;DATE>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 3"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 3"><con:configuration><token><![CDATA[            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128287720</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 4 Step 4" id="66402e81-e656-48e3-987b-bc694fda8be5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid = '11${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token>            &lt;F_TASK.TYPE_ID>5&lt;/F_TASK.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 2"><con:configuration><token>            &lt;DATE>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 3"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 3"><con:configuration><token><![CDATA[  <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128290661</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 5 Step 4" id="cb61e376-e62d-440e-899d-257be05fae23"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid = '12${#TestCase#areaId}'</con:query><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token><![CDATA[            <DATE>${#TestCase#date2}</DATE>
            <F_TASK.TYPE_ID>5</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128290661</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check all open tasks" id="08e5c63a-f5d5-4407-9ce6-bcd9e9461856"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE</con:query><con:assertion type="Simple Contains" id="f43b1fe3-2673-4743-b301-c0ddfd443494" name="Contains"><con:configuration><token>&lt;Row rowNumber="5"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="919f8480-6885-450b-a542-e1f2c6998b50" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="6"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 7 Step 4" id="b5833ca0-5d28-4c20-bd99-c8d0e040a066"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND fd.uid = '10${#TestCase#areaId}'
AND ft.closed IS NOT NULL </con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d0835f83-62d8-463f-9fbc-3e9bc651559e" name="Contains"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_TASK.TASK_ID>10${#TestCase#areaId}</F_TASK.TASK_ID>
            <DATE>2021-07-02</DATE>
            <F_TASK.TYPE_ID>5</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128291744</F_DOCUMENT_MKB10.DIAGNISIS>
            <F_DOCUMENT_MKB10.DOCUMENT_ID>7${#TestCase#document_id}</F_DOCUMENT_MKB10.DOCUMENT_ID>
            <F_DOCUMENT.UID>10${#TestCase#areaId}</F_DOCUMENT.UID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachments Step 5" id="fdbb0060-f728-4756-8153-205ccd43eaec"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}
order by fa.id</con:query><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 2"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 3"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 4"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[4]/F_ATTACHMENT.CLOSED/text()</path><content>2021-03-09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 1 Step 5" id="8bdf040e-d6b4-4a10-af99-d33349bc2677"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 1${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 2 Step 5" id="177a5a4c-737a-4027-8db5-539d10cfbc48"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 2${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 3 Step 5" id="d8460a17-b997-4659-a1ec-9170f9ed8769"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 3${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 4 Step 5" id="a71fab84-0e45-4326-b9cc-f591c79392ad"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 4${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="CheckMessageFromKafka" id="50ea002e-a4f3-4147-989e-bd03d6b2f7e0"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
log.info patientId
def date2=testRunner.testCase.getPropertyValue("date2")
log.info date2
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")
log.info currentDateTime

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)



assert message != null

messageJson=new JsonSlurper().parseText(message)
log.info messageJson

assert messageJson.operationType=="close"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.groupCode=="DNA0155"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.doctorFIO=="Моисеева Марина Евгеньевна"

assert messageJson.employeeId==14484 || messageJson.employeeId==14382// сделать одинаковым

//assert messageJson.noDoctor==true

assert messageJson.specialityCode=="602" || messageJson.specialityCode=="69" //проверить можно ли сделать одинаковым

assert messageJson.specialityName == "Врач - педиатр участковый"

assert messageJson.specializationCode=="76"

assert messageJson.specializationName=="Терапия"

assert messageJson.diagnosisCode=="J45.0" || messageJson.diagnosisCode=="D12.9" //проверить можно ли сделать одинаковым

assert messageJson.diagnosisName=="Астма с преобладанием аллергического компонента" ||  messageJson.diagnosisName=="Доброкачественное новообразование заднего прохода [ануса] и анального канала"//проверить можно ли сделать одинаковым

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.repeat=="диагноз установлен в предыдущ. году или ранее (-)"

assert messageJson.startDate=="2021-03-09"

assert messageJson.endDate==date2

assert messageJson.cancelReasonCode=="4"

assert messageJson.cancelReasonName=="Пациент достиг 18 лет"

assert messageJson.dnDoctorJobExecutionId=="111"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>7070</con:value></con:property><con:property><con:name>areaId</con:name><con:value>1239109501</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-01-12T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-01-12</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2005-01-09</con:value></con:property><con:property><con:name>document_id</con:name><con:value>12350315</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1673506170258</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="ce754cca-8a2e-4460-bab8-3d8fa15059c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169021" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="f95c8e6e-a402-45a8-aefc-de346b815b22"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="be17d31a-6616-4ec4-b73e-52d6c017f98e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

areaId=getNonexistendArea()
log.info(areaId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", areaId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate document_id" id="007e083f-d17c-4c3c-9588-cb3de99df362"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)+1234567
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id=getNonexistendPatientId()
log.info(document_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id",document_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="82527a9a-3199-41a5-8e16-3dc9cbe5a311"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="3d94b881-e27b-4662-8253-5658d3dd88d0"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Document_mkb10" id="53b3ee0b-112d-4a51-8408-14698bad11bd"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_document_mkb10 fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_document_mkb10 fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

document_mkb10_id=getNonexistendArea()
log.info(document_mkb10_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_mkb10_id", document_mkb10_id.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="a421cdc8-3b91-4ca7-8e49-c85b82e28996"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- создание пациента 

INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate}', NULL, 0);
INSERT INTO f_area(id, area_type_id, update_date, archived)VALUES(${#TestCase#areaId}, 125694880, '2022-10-04 14:30:03.084', true);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, mo_id, is_base_attach) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId}, '2019-11-18 14:20:53.000', ${#TestCase#areaId}, 602, true);

--- простановка архивности для группы ДН

UPDATE f_dispensary_obs_group fdog SET archived=true where fdog.id in (select fdogm.dispensary_obs_group_id  from f_disp_obs_group_mkb10 fdogm where fdogm.mkb10_id = 128288175);

--- создание прикреплений для проверки их закрытия

INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 1029, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, false);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 1029, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 1029, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, true);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 1029, '2021-03-09', '2021-03-09', 14484, 128286429, '602', 125676819, false); --- прикрепление не обрабатывается, т.к. закрыто
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, 58, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, true); --- открытое прикрепление к другой группе ДН для проверки задач AREA
 
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', false, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', NULL, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', false, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(5${#TestCase#areaId}, 5${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', false, '111', 'Моисеева Марина Евгеньевна', 'диагноз установлен в предыдущ. году или ранее (-)', 'Врач - педиатр участковый', '2018-02-06 00:00:00.000');

--- создание тасок и связанных данных
--- задачи для проверки шага 1
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 3);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 1);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694880, 2);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(7${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 1);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(8${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, true, 125694880, 3);

--- задачи для проверки шага 2

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(9${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(10${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694880, 5);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(11${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 3);


--- заполнение связанных таблиц

INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id)
VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, 128290661, 1);


--- создание документов оснований

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(1${#TestCase#document_id}, '2edb2286-d140-4857-b2b5-02a29873${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(2${#TestCase#document_id}, '9f133c19-f164-423c-88f0-a9628b1e2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(3${#TestCase#document_id}, '13${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ обрабатывает у пациента определена группа ДН 1023 DNA0149, т.к. нет задач

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(4${#TestCase#document_id}, '3${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена группа ДН 2 DNA0002, т.к. нет задач

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(5${#TestCase#document_id}, '2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, true, '2021-02-24 17:13:49.000'); --- документ не обрабатывается на шаге 2, для документа нет задач, но deprecated = true

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(6${#TestCase#document_id}, '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена только группа ДН 2 DNA0002, т.к. по второму диагнозу есть задачи

INSERT INTO f_document  (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(7${#TestCase#document_id}, '10${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(8${#TestCase#document_id}, '11${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(9${#TestCase#document_id}, '12${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(11${#TestCase#document_id}, '15${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ не обрабатывается на шаге 2, т.к. по диагнозу доступны только архивные группы ДН


INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(1${#TestCase#document_id}, 128291744, 1, 6${#TestCase#areaId}, 1${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(2${#TestCase#document_id}, 128290661, 1, 7${#TestCase#areaId}, 2${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(3${#TestCase#document_id}, 128290661, 0, NULL, 3${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(4${#TestCase#document_id}, 128287720, 0, NULL, 4${#TestCase#document_id}); 
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(5${#TestCase#document_id}, 128290661, 0, NULL, 5${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(6${#TestCase#document_id}, 128287720, 0, NULL, 7${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(6${#TestCase#document_id}, 128290661, 1, 9${#TestCase#areaId}, 6${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(7${#TestCase#document_id}, 128291744, 1, 10${#TestCase#areaId}, 10${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(8${#TestCase#document_id}, 128290661, 0, NULL, 8${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(9${#TestCase#document_id}, 128290661, 0, NULL, 9${#TestCase#document_id});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(11${#TestCase#document_id}, 128288175, 0, NULL, 11${#TestCase#document_id});


INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(10${#TestCase#document_id}, 14${#TestCase#areaId}, ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL);

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(15${#TestCase#areaId}, ${#TestCase#patientId}, '2021-08-02 15:39:59.000', NULL, NULL, false, 125694880, 5);

INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(16${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 5);

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) VALUES(10${#TestCase#document_id}, 128286429, 0, 16${#TestCase#areaId}, 10125${#TestCase#document_id});</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="80644b5c-d89b-4577-9c3d-4d975b324431"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="6e8dd607-6ae1-4ed1-846c-f1244c916b03"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 66618206,
      "dateTime": "2022-03-16T15:34:34",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 667643904,
      "patientId": \""""+patientId+"""\",
      "isActual": false,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": \""""+areaId+"""\",
      "areaTypeCode": 20,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2022-03-16",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachEndCause": {
         "globalId": 128619962,
         "code": "20",
         "title": "Не соответствует сведениям МГФОМС (полис погашен по ЗАГС)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      },
      "attachEndCauseErzl": 7
   },
   "attachmentOldValue": {
      "attachId": 127643904,
      "patientId": 2113782144,
      "isActual": true,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": 998365,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2099-01-01",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="561db49d-f595-42de-848b-716da88a9ab0"><con:settings/><con:config><delay>4000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="eafa0fd6-9c44-4c8e-9736-ffb61b9335f6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d62fc676-9f57-4777-9e39-db1c6d0e3cc4" name="Contains"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 1 Step 1" id="91558aab-47dc-40b2-82f7-bc7fa1d7cc08"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 1${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 2 Step 1" id="b2b002bd-bc52-4b1d-bddd-f5c5fadc3bbc"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 2${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 3 Step 1" id="1dca6686-5981-45fd-b625-d12026193292"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 3${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 4 Step 1" id="3c1aa7ad-4b4e-4ade-a15b-ee738805c89e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 15${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 5 Step 1" id="dc091ce1-8fed-4901-ab13-25304179cbf5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 5${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 6 Step 1" id="2bf9da7c-f352-499f-8f3b-3fe89919d83f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 8${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 1 Step 4" id="af8b8c27-bf85-4e11-8747-8496d6ac0860"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid =  '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 4"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f611c7b7-0460-48f5-9f35-b124d8aaf21a" name="Contains"><con:configuration><token><![CDATA[            <F_TASK.TYPE_ID>4</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128287720</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8119ea17-3466-411e-a213-0f82a39a5923" name="Contains 1"><con:configuration><token>            &lt;F_DOCUMENT.UID>2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}&lt;/F_DOCUMENT.UID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 2 Step 4" id="f02c1b46-043d-40f1-90d9-6710de609f34"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid =  '13${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 4"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8ebb2689-c747-4704-b54e-280bf274b356" name="Contains"><con:configuration><token><![CDATA[            <F_TASK.TYPE_ID>1</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128290661</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="72d610cc-0f3e-4856-9cf1-944c1904c4c6" name="Contains 1"><con:configuration><token>            &lt;F_DOCUMENT.UID>13${#TestCase#areaId}&lt;/F_DOCUMENT.UID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 3 Step 4" id="25ba727a-8763-4f37-a65b-9bb8fd3ed15b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid =  '3${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token>            &lt;F_TASK.TYPE_ID>4&lt;/F_TASK.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 2"><con:configuration><token>&lt;DATE>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 3"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 3"><con:configuration><token><![CDATA[            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128287720</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="31cb807d-5a94-403d-b3a9-7dce3f19c693" name="Contains 4"><con:configuration><token> &lt;F_DOCUMENT.UID>3${#TestCase#areaId}&lt;/F_DOCUMENT.UID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 4 Step 4" id="8977a1f4-32c5-4fff-aa16-19b9cfd48612"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid = '11${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token>            &lt;F_TASK.TYPE_ID>5&lt;/F_TASK.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 2"><con:configuration><token>            &lt;DATE>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 3"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 3"><con:configuration><token><![CDATA[  <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128290661</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 5 Step 4" id="38f0a8e5-fe3d-4f0a-93a1-215da67608b2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid = '12${#TestCase#areaId}'</con:query><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token><![CDATA[            <DATE>${#TestCase#date2}</DATE>
            <F_TASK.TYPE_ID>5</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128290661</F_DOCUMENT_MKB10.DIAGNISIS>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check mkb  Step 4" id="2b60a623-3f35-481e-84b6-09ff60d3ccf7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT DISTINCT  * FROM f_document_mkb10 fdm 
JOIN f_task ft ON ft.id = fdm.task_id
WHERE ft.patient_id = '${#TestCase#patientId}'
AND fdm.mkb10_id = '128286429';</con:query><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check all open tasks" id="839e2d50-eb7c-45c5-b74e-1cbe5ada8b59"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE</con:query><con:assertion type="Simple Contains" id="6ed86b49-92e5-46a5-83cd-93fd95de51cf" name="Contains"><con:configuration><token>&lt;Row rowNumber="5"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="577e508a-3c6a-45b2-a077-056fb89fa753" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="8"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="bf6a9f0f-a111-4e6a-921c-57e54b4e65ea" name="Contains 1"><con:configuration><token>&lt;F_DOCUMENT_MKB10.STATUS_ID>0&lt;/F_DOCUMENT_MKB10.STATUS_ID>
            &lt;F_DOCUMENT_MKB10.DIAGNISIS>128286429&lt;/F_DOCUMENT_MKB10.DIAGNISIS></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a20201af-4af9-4eb4-ba72-4393da332093" name="Contains 2"><con:configuration><token> &lt;F_DOCUMENT_MKB10.STATUS_ID>1&lt;/F_DOCUMENT_MKB10.STATUS_ID>
            &lt;F_DOCUMENT_MKB10.DIAGNISIS>128286429&lt;/F_DOCUMENT_MKB10.DIAGNISIS></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 7 Step 4" id="495bef1d-91f5-454a-9432-1ecc3a768b8e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND fd.uid = '10${#TestCase#areaId}'
AND ft.closed IS NOT NULL </con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d0835f83-62d8-463f-9fbc-3e9bc651559e" name="Contains"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_TASK.TASK_ID>10${#TestCase#areaId}</F_TASK.TASK_ID>
            <DATE>2021-07-02</DATE>
            <F_TASK.TYPE_ID>5</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128291744</F_DOCUMENT_MKB10.DIAGNISIS>
            <F_DOCUMENT_MKB10.DOCUMENT_ID>7${#TestCase#document_id}</F_DOCUMENT_MKB10.DOCUMENT_ID>
            <F_DOCUMENT.UID>10${#TestCase#areaId}</F_DOCUMENT.UID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachments Step 5" id="824e44fd-8239-44d8-b969-b4dbb434699d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}
order by fa.id</con:query><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 2"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 3"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 4"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[4]/F_ATTACHMENT.CLOSED/text()</path><content>2021-03-09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 1 Step 5" id="53312610-7c5c-4da4-9c99-7428337748c0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 1${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 2 Step 5" id="85108409-6a89-42d0-99ab-4c9dffcb73bb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 2${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 3 Step 5" id="71834862-3d27-42e9-b513-501f57e43d6b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 3${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 4 Step 5" id="00d5b6c6-ba79-4fa2-9e19-83b079a69f8f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 4${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Revert f_dispensary_obs_group" id="ca93b7d6-c828-4f05-8e7b-1b1a8e11a651"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>--- простановка архивности для группы ДН

UPDATE f_dispensary_obs_group fdog SET archived=false where fdog.id in (select fdogm.dispensary_obs_group_id  from f_disp_obs_group_mkb10 fdogm where fdogm.mkb10_id = 128288175);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="CheckMessageFromKafka" id="7042646d-f0a0-4381-b20e-1f9cc0ad3ce5"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
log.info patientId
def date2=testRunner.testCase.getPropertyValue("date2")
log.info date2
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")
log.info currentDateTime

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)



assert message != null

messageJson=new JsonSlurper().parseText(message)
log.info messageJson

assert messageJson.operationType=="close"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.groupCode=="DNA0155"

assert messageJson.groupName=="Бруцеллез"

assert messageJson.doctorFIO=="Моисеева Марина Евгеньевна"

assert messageJson.employeeId==14484 || messageJson.employeeId==14382// сделать одинаковым

//assert messageJson.noDoctor==true

assert messageJson.specialityCode=="602" || messageJson.specialityCode=="69" //проверить можно ли сделать одинаковым

assert messageJson.specializationCode=="76"

assert messageJson.specializationName=="Терапия"

assert messageJson.diagnosisCode=="J45.0" || messageJson.diagnosisCode=="D12.9" //проверить можно ли сделать одинаковым

assert messageJson.diagnosisName=="Астма с преобладанием аллергического компонента" ||  messageJson.diagnosisName=="Доброкачественное новообразование заднего прохода [ануса] и анального канала"//проверить можно ли сделать одинаковым

assert messageJson.diagnosisDate=="2018-02-06T00:00:00.0"

assert messageJson.startDate=="2021-03-09"

assert messageJson.endDate==date2

assert messageJson.cancelReasonCode=="4"

assert messageJson.cancelReasonName=="Пациент достиг 18 лет"
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2711</con:value></con:property><con:property><con:name>areaId</con:name><con:value>133337380</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-02-03T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-02-03</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2005-01-31</con:value></con:property><con:property><con:name>document_id</con:name><con:value>12355571350</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1675421409635</con:value></con:property><con:property><con:name>document_mkb10_id</con:name><con:value>130200184</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="e6303d29-68bf-464e-ae85-43205f353537" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169022" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Generate patientId" id="91839e5a-8628-4af0-ab42-7bb49ed9a2f9"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "patientId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("patientId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="a43d226c-b2f1-4fc6-adb9-86a8f21d1874"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="9eb4f069-b908-444d-9887-eaf8eabf7693"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="dc493257-1cb9-4b97-8b06-e59c949ff0fa"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(100000)) 

String testString = (rnd.nextInt(1000)) 
testRunner.testCase.setPropertyValue( "areaId", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("areaId")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="53d79775-49b4-42a6-b113-ba90bfe6fc1d"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="e50c21ae-9d99-4e66-baa7-c6e7838f8075"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="400d11d3-a183-4e1c-b51c-c33a8cd8c498"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date) VALUES(${#TestCase#patientId}, ${#TestCase#areaId}, '2003-08-29 10:21:54.000', '${#TestCase#bDate}', NULL);
INSERT INTO f_patient_area (id, patient_id, area_type_id, changed_date, area_id, is_checked) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId}, 125694882, '2019-11-18 14:20:53.000', ${#TestCase#areaId}, 0);

--- создание прикреплений для проверки их закрытия

INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, true);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 567, '2021-03-09', '2021-03-09', 14484, 128290661, '602', 125676819, false); --- прикрепление не обрабатывается, т.к. закрыто
 
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', false, NULL, NULL, NULL, NULL, '2021-05-14 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', NULL, NULL, NULL, NULL, NULL, '2021-05-15 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true, NULL, NULL, NULL, NULL, '2021-05-16 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', false, NULL, NULL, NULL, NULL, '2021-05-17 00:00:00.000');

--- создание тасок и связанных данных
--- задачи для проверки шага 1
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 0, 4); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 0, 3); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 0, 1); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 0, 2); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 0, 4); --- шаг 1 не обработает, т.к. закрыта
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(8${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, true, 125694882, 0, 3); --- шаг 1 не обработает, т.к. deleted = true

--- задачи для проверки шага 2
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 0, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(7${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 0, 1);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(9${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 0, 4); --- задача, по которой два диагноза и один не обработан
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id)
VALUES(10${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 0, 5);


--- заполнение связанных таблиц
INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) VALUES(4${#TestCase#areaId}, 1${#TestCase#areaId}, 128290661, 1);

--- создание документов оснований

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}100, '2edb2286-d140-4857-b2b5-02a29873${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}101, '9f133c19-f164-423c-88f0-a9628b1e2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}102, '13${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ обрабатывает у пациента определена группа ДН 1023 DNA0149, т.к. нет задач
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}103, '3${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена группа ДН 2 DNA0002, т.к. нет задач
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}104, '2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, true, '2021-02-24 17:13:49.000'); --- документ не обрабатывается на шаге 2, для документа нет задач, но deprecated = true
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}105, '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена только группа ДН 2 DNA0002, т.к. по второму диагнозу есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}106, '10${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}107, '11${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}108, '12${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}100, 128291744, 1, 6${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}101, 128290661, 1, 7${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}102, 128290661, 0, NULL); --- есть взрослые и детские группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}103, 128287720, 0, NULL); --- есть только взрослые группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}104, 128290661, 0, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}105, 128290661, 1, 9${#TestCase#areaId}); --- есть взрослые и детские группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) --- есть только взрослые группы ДН
VALUES(${#TestCase#areaId}105, 128287720, 0, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}106, 128291744, 1, 10${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}107, 128290661, 0, NULL);
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id)
VALUES(${#TestCase#areaId}108, 128290661, 0, NULL);
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="eabf35e3-8213-447e-8dbb-77c80f583d62"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 66618206,
      "dateTime": "2022-03-16T15:34:34",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 667643904,
      "patientId": \""""+patientId+"""\",
      "isActual": false,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": \""""+areaId+"""\",
      "areaTypeCode": 20,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2022-03-16",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachEndCause": {
         "globalId": 128619962,
         "code": "70",
         "title": "Не соответствует сведениям МГФОМС (полис погашен по ЗАГС)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      },
      "attachEndCauseErzl": 2
   },
   "attachmentOldValue": {
      "attachId": 127643904,
      "patientId": 2113782144,
      "isActual": true,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": 998365,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2099-01-01",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="4aedf80a-b549-4999-a50f-65624fe06a57"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="ff108c0c-029a-4d28-a1a7-c0a55e1432e2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d62fc676-9f57-4777-9e39-db1c6d0e3cc4" name="Contains"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 1 Step 1" id="0bfe1f46-c48a-437f-ab25-09324ddc211f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 1${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 2 Step 1" id="63f86486-bbaf-4453-89a8-2ddfe0dc680a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 2${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 3 Step 1" id="30b05d59-50d3-4490-9ba9-5fda0790bcb4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 3${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 4 Step 1" id="5b92f1f1-70b7-435e-8163-22ed86baf478"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 4${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 5 Step 1" id="eae36202-16cc-476c-9928-acedc8617c93"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 5${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 6 Step 1" id="2a518e57-39fc-476f-8a34-4c6c50ed1db6"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 8${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachments Step 5" id="58fb9b2c-2b29-4686-a397-ace80aac856c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}
order by fa.id</con:query><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 2"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 3"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 4"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[4]/F_ATTACHMENT.CLOSED/text()</path><content>2021-03-09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 1 Step 1" id="e814437e-d87f-4cbe-a5f4-eae295432913"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 1${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 2 Step 1" id="895c3d19-f983-4818-b32f-22c93a6cef86"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 2${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 3 Step 1" id="c0ffb073-b8f6-4472-917b-f193afddcb5e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 3${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 4 Step 1" id="383bce45-e6e7-48c7-9611-0c16a4f7b479"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 4${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="c68324e2-2f12-4147-8666-3372deaf72fa"><con:description>Проверить топик DNForm30ToDisp</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В таблице f_patient в поле area_id проставляется NULL.
В таблице  f_attachment для пациента из запроса для прикреплений с параметром closed = NULL проставляется closed = текущая дата.
В таблице f_task для записей, где $patientId = $patient_id и $deleted = false проставляется признак deleted = true.
В таблице f_attachment_event создается событие об изменении прикреплений из шага 1, где $reason_id =:
racCodeMgfoms = 2 → reason_id = id записи d_observation_cancel_reason с кодом "2" (Выбытие из района обслуживания);


По каждому из прикреплений из шага 2 создаётся и отправляется сообщение в топик ЕСУ DNForm30ToDisp:

operationType = close;
patientId = patient_id обработанного пациента;
groupCode = значение поля "code" группы ДН, от которой был откреплён пациент;
endDate = текущая дата;
startDate = дата открытия прикрепления 
diagnosisCode = код диагноза (определяется по закрытой записи f_attachment, полю mkb10_id и связке с таблицей d_mkb10);
diagnosisName = название диагноза (определяется по закрытой записи f_attachment, полю mkb10_id и связке с таблицей d_mkb10);
diagnosisDate = дата установки диагноза (определяется по полю diagnosis_date последней по event_date записи f_attachment_event связанной с закрытым прикреплением к ДН);
doctorFIO = ФИО врача
employeeID = соответствующий параметр из f_attachment 
noDoctor = соответствующий параметр из f_attachment 
repeat = соответствующий параметр из f_attachment
specialityCode = соответствующий параметр из f_attachment
specialityName = соответствующий параметр из f_attachment
specializationCode = d_medical_specialization.code (по связке f_attachment.medical_specialization_id);
specializationName = d_medical_specialization.title (по связке f_attachment.medical_specialization_id);
dnDoctorJobExecutionId = идентификатор должности врача, создавшего документ (определяется по полю dn_doctor_job_execution_id последней по event_date записи f_attachment_event связанной с закрытым прикреплением к ДН);
cancelReasonName = название причины открепления, соответствующее значению справочника d_observation_cancel_reason с кодом "2";
cancelReasonCode = "2"
timeCommitted = текущая дата.

{
   "operationType": "close",
   "patientId": "8677",
   "groupCode": "DNA0088",
   "groupName": "Грипп и пневмония",
   "employeeId": 14484,
   "noDoctor": true,
   "specialityCode": "602",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "J45.0",
   "diagnosisName": "Астма с преобладанием аллергического компонента",
   "diagnosisDate": "2021-05-16T00:00:00.0",
   "startDate": "2021-03-09",
   "endDate": "2022-09-05",
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",
   "timeCommitted": "2022-09-05T12:24:48.358707"
}
</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3490</con:value></con:property><con:property><con:name>areaId</con:name><con:value>526</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-03T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-03</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2005-02-28</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="2f564662-3e63-4af9-a164-d4ef594adfc7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#169023" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Generate patientId" id="899e4bad-e86e-48b4-9559-bc4e5a2e5424"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient" id="4ae5e361-5b38-4e2f-af4f-44f3355eaa5a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient fp where id = ${#TestCase#patientId}</con:query><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto" id="ef5b8f97-7df6-4a96-a798-a530e767f7bb"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Patient Exist</con:name><con:type>XPATH</con:type><con:expression>exists(//*:F_PATIENT.ID)</con:expression><con:targetStep>Generate areaId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Generate areaId" id="15df6676-bce4-4c42-8830-c88ca0951066"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

areaId=getNonexistendArea()
log.info(areaId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("areaId", areaId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate document_id" id="a2d96704-b078-455a-ab83-802c47c3f906"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)+1234567
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_document ft WHERE id = "+random_id+"")
	}
	return random_id
}

document_id=getNonexistendPatientId()
log.info(document_id)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("document_id",document_id.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="284d9d23-5e70-4057-92f8-739bcc9f1797"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="a2e4882b-7ee4-4a53-9d95-f7aa489ed55c"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Generate Data" id="61414e22-cf48-4b65-922c-aaf5e5b45693"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate}', NULL, 0);
INSERT INTO f_area(id, area_type_id, update_date, archived)VALUES(${#TestCase#areaId}, 125694882, '2022-10-04 14:30:03.084', true);
INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId}, '2019-11-18 14:20:53.000', ${#TestCase#areaId}, 602, true);

--- создание прикреплений для проверки их закрытия

INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, 27, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, false);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, 27, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, NULL);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, 27, '2021-03-09', NULL, 14484, 128290661, '602', 125676819, true);
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor) VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, 27, '2021-03-09', '2021-03-09', 14484, 128290661, '602', 125676819, false); --- прикрепление не обрабатывается, т.к. закрыто
 
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', false, NULL, NULL, NULL, NULL, '2021-05-14 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(2${#TestCase#areaId}, 2${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', NULL, NULL, NULL, NULL, NULL, '2021-05-15 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(3${#TestCase#areaId}, 3${#TestCase#areaId}, '2021-04-12 14:45:33.585', '35c8cf53-4a90-4720-b51d-55ec397c4a38', '14484', 128290661, '602', 125676819, 4, 'комментарий', true, NULL, NULL, NULL, NULL, '2021-05-16 00:00:00.000');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(4${#TestCase#areaId}, 4${#TestCase#areaId}, '2021-05-31 09:41:00.646', 'c5564c1c-2d94-460b-b36b-9e040d147ac2', '14382', 128287720, '69', 125676819, 4, 'комментарий', false, NULL, NULL, NULL, NULL, '2021-05-17 00:00:00.000');

--- создание тасок и связанных данных
--- задачи для проверки шага 1
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(1${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 4); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(2${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 3); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(3${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 1); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(4${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, false, 125694882, 2); -- проставлено deleted на первом шаге
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(5${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 4); --- шаг 1 не обработает, т.к. закрыта
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(8${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', NULL, NULL, true, 125694882, 3); --- шаг 1 не обработает, т.к. deleted = true

--- задачи для проверки шага 2
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(6${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(7${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 1);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(9${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 4); --- задача, по которой два диагноза и один не обработан
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id,  type_id)
VALUES(10${#TestCase#areaId}, ${#TestCase#patientId}, '2021-07-02 15:37:59.000', '2021-07-02 15:37:59.000', NULL, false, 125694882, 5);


--- заполнение связанных таблиц
INSERT INTO f_continued_obs_task (id, attachment_id, mkb10_id, status_id) VALUES(4${#TestCase#areaId}, 1${#TestCase#areaId}, 128290661, 1);

--- создание документов оснований

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}100, '2edb2286-d140-4857-b2b5-02a29873${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}101, '9f133c19-f164-423c-88f0-a9628b1e2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}102, '13${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, false, NULL); --- документ обрабатывает у пациента определена группа ДН 1023 DNA0149, т.к. нет задач
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}103, '3${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена группа ДН 2 DNA0002, т.к. нет задач
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}104, '2${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 1, true, '2021-02-24 17:13:49.000'); --- документ не обрабатывается на шаге 2, для документа нет задач, но deprecated = true
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}105, '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 4, false, NULL); --- документ обрабатывает у пациента определена только группа ДН 2 DNA0002, т.к. по второму диагнозу есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}106, '10${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ не обрабатывается на шаге 2, есть задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}107, '11${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date)
VALUES(${#TestCase#areaId}108, '12${#TestCase#areaId}', ${#TestCase#patientId}, '2021-02-24 17:13:49.000', 5, false, NULL); --- документ обрабатывается на шаге 2, нет задачи

INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}100, 128291744, 1, 6${#TestCase#areaId}, 1${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}101, 128290661, 1, 7${#TestCase#areaId}, 2${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}102, 128290661, 0, NULL, 3${#TestCase#areaId}); --- есть взрослые и детские группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}103, 128287720, 0, NULL, 4${#TestCase#areaId}); --- есть только взрослые группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}104, 128290661, 0, NULL, 5${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}105, 128290661, 1, 9${#TestCase#areaId}, 6${#TestCase#areaId}); --- есть взрослые и детские группы ДН
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id) --- есть только взрослые группы ДН
VALUES(${#TestCase#areaId}105, 128287720, 0, NULL, 7${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}106, 128291744, 1, 10${#TestCase#areaId}, 8${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}107, 128290661, 0, NULL, 9${#TestCase#areaId});
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id, id)
VALUES(${#TestCase#areaId}108, 128290661, 0, NULL, 10${#TestCase#areaId});</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="26766374-9a26-4ead-8280-b50ea158ec7f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="c3c77937-b54c-4e4b-9654-317949a7ee19"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 66618206,
      "dateTime": "2022-03-16T15:34:34",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 667643904,
      "patientId": \""""+patientId+"""\",
      "isActual": false,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": \""""+areaId+"""\",
      "areaTypeCode": 20,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2022-03-16",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachEndCause": {
         "globalId": 128619962,
         "code": "70",
         "title": "Не соответствует сведениям МГФОМС (полис погашен по ЗАГС)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      },
      "attachEndCauseErzl": 7
   },
   "attachmentOldValue": {
      "attachId": 127643904,
      "patientId": 2113782144,
      "isActual": true,
      "attachRequestId": 1,
      "attachPolType": {
         "globalId": 125694323,
         "code": "2",
         "title": "Добровольное медицинское страхование"
      },
      "noSelfAppointment": true,
      "moId": 10266728,
      "muId": 10266728,
      "areaId": 998365,
      "attachBeginDate": "2022-03-16",
      "attachEndDate": "2099-01-01",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857400,
         "code": "1",
         "title": "По территориальному принципу"
      },
      "attachChangeType": {
         "globalId": 128619981,
         "code": "60",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620011,
         "code": "20",
         "title": "По участковому принципу"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="943a0147-cf1a-466d-ab4f-9f7a98b7cfc9"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Step 1" id="5faed91a-51e2-4c25-b497-b1858e9d81b1"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="d62fc676-9f57-4777-9e39-db1c6d0e3cc4" name="Contains"><con:configuration><token>&lt;Results>
    &lt;ResultSet fetchSize="0"/>
&lt;/Results></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 1 Step 1" id="32ee6c69-dbd1-431f-bd32-1f25988cd6a5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 1${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 2 Step 1" id="f54649d2-e7f4-4822-829a-4c2e828424bd"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 2${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 3 Step 1" id="f7c3d7ab-3d72-4fe7-9832-d2ca4f1983ca"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 3${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 4 Step 1" id="e130b64e-bc2a-4a67-af6b-d5642c7d7b1d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 4${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 5 Step 1" id="b669aaa7-5dd8-4b44-a0b4-f260835f5716"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 5${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Tasks 6 Step 1" id="3c22858c-b472-4945-94ba-fad412d08124"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where id = 8${#TestCase#areaId}</con:query><con:assertion type="XPath Match" id="17540fcd-058b-4409-9470-583c9bbc6ae3" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_TASK.DELETED/text()</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 1 Step 4" id="6e295b16-3e45-43d6-9875-60e3b0c1c7e9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid 
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
WHERE fd.patient_id = '${#TestCase#patientId}'
AND ft.closed IS NULL 
AND ft.deleted IS FALSE
AND fd.uid =  '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 4"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f611c7b7-0460-48f5-9f35-b124d8aaf21a" name="Contains"><con:configuration><token><![CDATA[            <F_TASK.TYPE_ID>4</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128287720</F_DOCUMENT_MKB10.DIAGNISIS>
            <F_DOCUMENT_MKB10.DOCUMENT_ID>${#TestCase#areaId}105</F_DOCUMENT_MKB10.DOCUMENT_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 2 Step 4" id="cfc41253-1aed-41b4-a2f0-635381def10b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.opened,
ft.closed,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = ${#TestCase#patientId}
AND fd.uid =  '9f133c19-f164-423c-88f0-a9628b1e2${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 4"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8ebb2689-c747-4704-b54e-280bf274b356" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_TASK.TASK_ID>7${#TestCase#areaId}</F_TASK.TASK_ID>
            <F_TASK.OPENED>2021-07-02 15:37:59</F_TASK.OPENED>
            <F_TASK.CLOSED>2021-07-02 15:37:59</F_TASK.CLOSED>
            <F_TASK.TYPE_ID>1</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694882</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128290661</F_DOCUMENT_MKB10.DIAGNISIS>
            <F_DOCUMENT_MKB10.DOCUMENT_ID>${#TestCase#areaId}101</F_DOCUMENT_MKB10.DOCUMENT_ID>
            <F_DOCUMENT.UID>9f133c19-f164-423c-88f0-a9628b1e2${#TestCase#areaId}</F_DOCUMENT.UID>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 3 Step 4" id="d3a54726-ef65-4842-955a-21750db3134e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.opened,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = ${#TestCase#patientId}
AND fd.uid =  '13${#TestCase#areaId}'
AND ft.closed IS NULL</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token>            &lt;F_TASK.TYPE_ID>1&lt;/F_TASK.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 2"><con:configuration><token>&lt;F_TASK.OPENED>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 3"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 3"><con:configuration><token><![CDATA[            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128290661</F_DOCUMENT_MKB10.DIAGNISIS>
            <F_DOCUMENT_MKB10.DOCUMENT_ID>${#TestCase#areaId}102</F_DOCUMENT_MKB10.DOCUMENT_ID>
            <F_DOCUMENT.UID>13${#TestCase#areaId}</F_DOCUMENT.UID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 4 Step 4" id="62c1555e-ae7b-4ebb-8ace-9990f53d1e53"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.opened,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = ${#TestCase#patientId}
AND fd.uid =  '3${#TestCase#areaId}'
AND ft.closed IS NULL</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token>            &lt;F_TASK.TYPE_ID>4&lt;/F_TASK.TYPE_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 2"><con:configuration><token>&lt;F_TASK.OPENED>${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.CLOSED></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 3"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="10a52e87-2e2d-48b2-87b5-b1139b350a72" name="Contains 3"><con:configuration><token><![CDATA[            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128287720</F_DOCUMENT_MKB10.DIAGNISIS>
            <F_DOCUMENT_MKB10.DOCUMENT_ID>${#TestCase#areaId}103</F_DOCUMENT_MKB10.DOCUMENT_ID>
            <F_DOCUMENT.UID>3${#TestCase#areaId}</F_DOCUMENT.UID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 5 Step 4" id="127d8baf-4803-42e8-ada9-754e44a25742"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.opened,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = ${#TestCase#patientId}
AND fd.uid =  '2${#TestCase#areaId}'
AND ft.closed IS NULL</con:query><con:assertion type="Simple Contains" id="4d25f0b0-35f8-4b83-b02d-3bc53bdd76ce" name="Contains"><con:configuration><token>&lt;ResultSet fetchSize="0"/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 6 Step 4" id="88161368-77c5-4f43-bf15-f2dad0b17ca4"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
DATE(ft.opened),
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = ${#TestCase#patientId}
AND fd.uid =  '2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}'
AND ft.closed IS NULL</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="496d514b-6b9f-4886-9062-efe4892f0c70" name="Contains"><con:configuration><token><![CDATA[            <DATE>${#TestCase#date2}</DATE>
            <F_TASK.TYPE_ID>4</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128287720</F_DOCUMENT_MKB10.DIAGNISIS>
            <F_DOCUMENT_MKB10.DOCUMENT_ID>${#TestCase#areaId}105</F_DOCUMENT_MKB10.DOCUMENT_ID>
            <F_DOCUMENT.UID>2edb2286-d140-4857-b2b5-02a29874${#TestCase#areaId}</F_DOCUMENT.UID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task 7 Step 4" id="75a9ea6d-864d-4ccd-a47a-a209f53733d5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT  
ft.id AS task_id,
ft.opened,
ft.closed,
ft.type_id,
ft.area_type_id ,
fdm.status_id,
fdm.mkb10_id AS diagnisis,
fdm.document_id, 
fd.uid
FROM f_document_mkb10 fdm 
JOIN f_document fd ON fd.id = fdm.document_id 
JOIN f_task ft ON ft.id = fdm.task_id 
JOIN d_task_type dtt ON ft.type_id = dtt.id 
WHERE fd.patient_id = ${#TestCase#patientId}
AND fd.uid = '10${#TestCase#areaId}'</con:query><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d0835f83-62d8-463f-9fbc-3e9bc651559e" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_TASK.TASK_ID>10${#TestCase#areaId}</F_TASK.TASK_ID>
            <F_TASK.OPENED>2021-07-02 15:37:59</F_TASK.OPENED>
            <F_TASK.CLOSED>2021-07-02 15:37:59</F_TASK.CLOSED>
            <F_TASK.TYPE_ID>5</F_TASK.TYPE_ID>
            <F_TASK.AREA_TYPE_ID>125694882</F_TASK.AREA_TYPE_ID>
            <F_DOCUMENT_MKB10.STATUS_ID>1</F_DOCUMENT_MKB10.STATUS_ID>
            <F_DOCUMENT_MKB10.DIAGNISIS>128291744</F_DOCUMENT_MKB10.DIAGNISIS>
            <F_DOCUMENT_MKB10.DOCUMENT_ID>${#TestCase#areaId}106</F_DOCUMENT_MKB10.DOCUMENT_ID>
            <F_DOCUMENT.UID>10${#TestCase#areaId}</F_DOCUMENT.UID>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3d290be6-8aae-42f1-89bd-727f05bb0d26" name="Not Contains 2"><con:configuration><token>&lt;/F_TASK.ASSIGNEE></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Attachments Step 5" id="e9c30daa-a05b-4c89-8ab8-1612b3f25f4e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}
order by fa.id</con:query><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[1]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 2"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 3"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[3]/F_ATTACHMENT.CLOSED/text()</path><content>${#TestCase#date2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="db875b3b-3341-4537-99fa-ca72cd9bf473" name="XPath Match 4"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[4]/F_ATTACHMENT.CLOSED/text()</path><content>2021-03-09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 1 Step 5" id="1a948904-406b-41dc-85aa-bc9bc983aa4d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 1${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 2 Step 5" id="cfdf2cb1-c266-486b-8d09-840eae1c6788"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 2${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 3 Step 5" id="4186cb4c-dc94-4a43-8098-28a739b2f6c8"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 3${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="3"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="27f0854c-1b67-4371-a70d-772516c28496" name="XPath Match"><con:configuration><path>/Results/ResultSet[@fetchSize="0"]/Row[2]/F_ATTACHMENT_EVENT.REASON_ID/text()</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Event 4 Step 5" id="abae047f-25cf-4b78-bc85-d362d677a5c2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id = 4${#TestCase#areaId}
order by fae.EVENT_DATE</con:query><con:assertion type="Simple NotContains" id="e1df3275-fabf-45bf-83c6-85beb4f9f565" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="CheckMessageFromKafka" id="c774fd43-2709-4f46-a35e-b0d068a9c45d"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
log.info patientId
def date2=testRunner.testCase.getPropertyValue("date2")
log.info date2
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")
log.info currentDateTime

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)



assert message != null

messageJson=new JsonSlurper().parseText(message)
log.info messageJson

assert messageJson.operationType=="close"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.groupCode=="DNC0008"

assert messageJson.groupName=="Астма с преобладанием аллергического компонента"

assert messageJson.doctorFIO==null

assert messageJson.employeeId==14484 || messageJson.employeeId==14382// сделать одинаковым

//assert messageJson.noDoctor==true

assert messageJson.specialityCode=="602" || messageJson.specialityCode=="69" //проверить можно ли сделать одинаковым

assert messageJson.specializationCode=="76"

assert messageJson.specializationName=="Терапия"

assert messageJson.diagnosisCode=="J45.0" || messageJson.diagnosisCode=="D12.9" //проверить можно ли сделать одинаковым

assert messageJson.diagnosisName=="Астма с преобладанием аллергического компонента" ||  messageJson.diagnosisName=="Доброкачественное новообразование заднего прохода [ануса] и анального канала"//проверить можно ли сделать одинаковым

assert messageJson.diagnosisDate=="2021-05-15T00:00:00.0"

assert messageJson.startDate=="2021-03-09"

assert messageJson.endDate==date2

assert messageJson.cancelReasonCode=="4"

assert messageJson.cancelReasonName=="Пациент достиг 18 лет"
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5876</con:value></con:property><con:property><con:name>areaId</con:name><con:value>127906794</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-03T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-03</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2005-02-28</con:value></con:property><con:property><con:name>document_id</con:name><con:value>1236829</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1677850753790</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="3ba8bf20-3794-49f9-ab7a-3256ff5051a2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#228515" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="f0a4c26a-5421-4f86-8402-b0fe5de27d75"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId" id="57078d56-448a-4b1f-82db-d523cab1110b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 70)
order by random() 
limit 2</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="9c1bddb9-77d8-4e59-be4b-cb185c118ed6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>areaId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//Row[2]/F_AREA.ID</con:sourcePath><con:targetType>areaId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="47cbe1a2-90c1-4fde-bda8-daae8af07646"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="87ce943c-f99a-40ec-92c8-e754b4996a69"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="730c57da-62b8-4fe2-9631-f1e9d8a97e6a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate}', '2000-01-01', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, is_base_attach, mo_id) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId},  '2019-11-18 14:20:53.000', ${#TestCase#areaId}, false, 204);

--- создание прикреплений
---- открытое прикрепление к группе ДН с типом 70
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(1${#TestCase#areaId},  ${#TestCase#patientId}, 1190, '2022-01-18', NULL, 10071084, 128293694, '69', 125676760, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)', NULL, NULL, '2000-01-01');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-05-15 15:41:27.473', '211', '10503947963', 128293694, '69', 125676760, NULL, 'Не удалено.', false, '123', NULL, 'repeat', NULL, '2000-01-01');
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="4ebe7727-77c5-43dc-81a7-3d81f2a896db"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="2e292ed0-0657-41f3-bcba-86436ce81126"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId2=testRunner.testCase.getPropertyValue("areaId2")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-19T14:20:53",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10684928,
      "muId": 10645980,
      "areaId": """+areaId2+""",
      "areaTypeCode": 70,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="89d4586f-8d90-452c-af40-4b86b4fb6f4b"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="52468151-135d-4047-8619-3540edcb4301"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-19 14:20:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId2}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>10684928</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>f</F_PATIENT_AREA.IS_BASE_ATTACH>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment" id="8cb1a9b6-caa1-4749-881c-6d08ef3f121a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id =   ${#TestCase#patientId}
order by fa.id </con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="6"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e8439c63-3fbe-4d6f-aafd-a41ab8c3d743" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>1190</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293694</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676760</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE>2000-01-01 00:00:00</F_ATTACHMENT.DIAGNOSIS_DATE>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment event" id="a338147d-5af2-4a2c-bc68-4c9fa8517d91"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})
order by fae.id </con:query><con:assertion type="Simple NotContains" id="4ff485df-a624-45aa-901e-d6444249051f" name="Новое событие не создано"><con:configuration><token> &lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="6f3e562e-598c-4165-88bd-b9a9547bce0d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft
where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 3</con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="72c19029-7975-43d0-960b-4b4ea448b6fa" name="Contains"><con:configuration><token><![CDATA[ <F_TASK.OPENED>2019-11-19 14:20:53</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694889</F_TASK.AREA_TYPE_ID>
            <F_TASK.TYPE_ID>3</F_TASK.TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="4c1deac8-2a01-4196-a346-b1cf3b4c5ffd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message!= null

messageJson=new JsonSlurper().parseText(message)

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.basisTaskType=="MO_CHANGE"

assert messageJson.groupCode=="DNG0002"

assert messageJson.groupName=="Бесплодие"

assert messageJson.diagnosisCode=="N97"

assert messageJson.diagnosisName=="Женское бесплодие"

assert messageJson.groupSpecializationCode=="2"

assert messageJson.groupSpecializationName=="Акушерство и гинекология"

assert messageJson.doctorFIO=="Полинский Денис Гариевич"

assert messageJson.specializationName=="Акушерство и гинекология"

assert messageJson.startDate=="2022-01-18"

assert messageJson.employeeId==10071084

assert messageJson.noDoctor==true

assert messageJson.specialityCode=="69"

assert messageJson.repeat=="острое (+), впервые в жизни установленное хроническое (+)"

assert messageJson.specialityName=="Врач общей практики (семейный врач)"

assert messageJson.diagnosisDate=="2000-01-01T00:00:00.0"

assert messageJson.dnDoctorJobExecutionId=="123"

assert messageJson.diagnosisProactive==false</script></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>9922</con:value></con:property><con:property><con:name>areaId</con:name><con:value>9288403</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-12-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-12-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>initialId</con:name><con:value>2000</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2004-12-17</con:value></con:property><con:property><con:name>topicDNexternal</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1671545716821</con:value></con:property><con:property><con:name>areaId2</con:name><con:value>17411974271</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="cfb352b6-6b8b-4860-afe6-599580748c11" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#228546" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="de1071ac-5aa9-4f1a-86d1-4e93ce54ea5e"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
  def Random rnd = new Random()
  random_id = rnd.nextInt(10000)
  log.info(random_id)
  // Выполняем поиск по пациенту в БД с полученным рандомным числом 
  def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  log.info(fact_id[0])
  //Инкремментим до тех пор пока предыдущий запрос не вернёт null
  while (fact_id[0] != null) {
    random_id++
    fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
  }
  return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get areaId" id="20787ab1-fb00-41dd-988e-4d9fee9d6b54"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select fa.id  from f_area fa where fa.area_type_id in (select dat.id  from d_area_type dat where dat.code = 70)
order by random() 
limit 2</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="2f1a4691-02fd-4f64-8ec9-49311668a3e9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//F_AREA.ID</con:sourcePath><con:targetType>areaId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>areaId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get areaId</con:sourceStep><con:sourcePath>//Row[2]/F_AREA.ID</con:sourcePath><con:targetType>areaId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Get Current Date" id="96c34171-bd2a-4cb5-aee0-f4df9e528f36"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="Get Birthday Date" id="d38674cc-a574-42fd-af14-d1166b526536"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 6577;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate);
testRunner.testCase.setPropertyValue( "bDate", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="jdbc" name="Data Create" id="f3f24b11-39e7-4292-9164-5c4fc208804f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_patient (id, birth_date, update_birth_date, policy_number, policy_status, policy_update_date, check_area_date, check_area_status) VALUES(${#TestCase#patientId}, '${#TestCase#bDate}', '2000-01-01', NULL, NULL, NULL, NULL, 0);
INSERT INTO f_patient_area (id, patient_id,  changed_date, area_id, is_base_attach, mo_id) VALUES(12${#TestCase#areaId}${#TestCase#patientId}, ${#TestCase#patientId},  '2019-11-18 14:20:53.000', ${#TestCase#areaId}, false, 204);

--- создание прикреплений
---- открытое прикрепление к группе ДН с типом 70
INSERT INTO f_attachment (id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date) VALUES(1${#TestCase#areaId},  ${#TestCase#patientId}, 1190, '2022-01-18', NULL, 10071084, 128293694, '69', 125676760, true, NULL, NULL, 'Полинский Денис Гариевич', 'острое (+), впервые в жизни установленное хроническое (+)', 'Врач общей практики (семейный врач)', NULL, NULL, '2000-01-01');
INSERT INTO f_attachment_event (id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date) VALUES(1${#TestCase#areaId}, 1${#TestCase#areaId}, '2021-05-15 15:41:27.473', '211', '10503947963', 128293694, '69', 125676760, NULL, 'Не удалено.', false, '123', NULL, 'repeat', NULL, '2000-01-01');
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getCurrentDateTime" id="a31e15b2-8c2e-4442-b421-db87de11f5da"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="59dd878d-8d47-4642-969d-3ecfd8ec4e4d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId2=testRunner.testCase.getPropertyValue("areaId2")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2019-11-19T14:20:53",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 61188528,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 10645980,
      "areaId": """+areaId2+""",
      "areaTypeCode": 70,
      "attachBeginDate": "2019-09-18",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "50",
         "title": "По причине переприкрепления (или при реорганизации участков)"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "20",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="8a92c21a-a352-482a-9b9d-f7a763be0f95"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check Patient Area Step 1" id="be3006c5-233f-4162-a162-de0e2aab7f10"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_patient_area fpa where fpa.patient_id =  ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="926d8174-e268-4be2-8573-901524b07736" name="Contains"><con:configuration><token><![CDATA[            <F_PATIENT_AREA.PATIENT_ID>${#TestCase#patientId}</F_PATIENT_AREA.PATIENT_ID>
            <F_PATIENT_AREA.CHANGED_DATE>2019-11-19 14:20:53</F_PATIENT_AREA.CHANGED_DATE>
            <F_PATIENT_AREA.AREA_ID>${#TestCase#areaId2}</F_PATIENT_AREA.AREA_ID>
            <F_PATIENT_AREA.MO_ID>204</F_PATIENT_AREA.MO_ID>
            <F_PATIENT_AREA.IS_BASE_ATTACH>f</F_PATIENT_AREA.IS_BASE_ATTACH>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment" id="b8bfba06-312b-47df-81ab-5c2e18b9846a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where fa.patient_id =   ${#TestCase#patientId}
order by fa.id </con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="6"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e8439c63-3fbe-4d6f-aafd-a41ab8c3d743" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#areaId}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>1190</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2022-01-18</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>10071084</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128293694</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>69</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676760</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>t</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Полинский Денис Гариевич</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT>острое (+), впервые в жизни установленное хроническое (+)</F_ATTACHMENT.REPEAT>
            <F_ATTACHMENT.SPECIALITY_NAME>Врач общей практики (семейный врач)</F_ATTACHMENT.SPECIALITY_NAME>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE>2000-01-01 00:00:00</F_ATTACHMENT.DIAGNOSIS_DATE>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment event" id="54f3fd08-7a26-494d-bc54-94694131f30e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})
order by fae.id </con:query><con:assertion type="Simple NotContains" id="4ff485df-a624-45aa-901e-d6444249051f" name="Новое событие не создано"><con:configuration><token> &lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check Task" id="5e7a0462-0451-48e0-a739-33d5a9de90e3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft
where ft.patient_id = ${#TestCase#patientId} and ft.type_id = 3</con:query><con:assertion type="Simple NotContains" id="baa0d78e-ca1c-45f8-a189-bfb0196b0aa2" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="72c19029-7975-43d0-960b-4b4ea448b6fa" name="Contains"><con:configuration><token><![CDATA[ <F_TASK.OPENED>2019-11-19 14:20:53</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694889</F_TASK.AREA_TYPE_ID>
            <F_TASK.TYPE_ID>3</F_TASK.TYPE_ID>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="getKafkaAllMessageJson" id="a36f5526-eae1-4947-ac59-09c3717c90f2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date2=testRunner.testCase.getPropertyValue("date2")
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)

assert message == null</script></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>6674</con:value></con:property><con:property><con:name>areaId</con:name><con:value>20241556</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-12-20T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-12-20</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-01-13T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-01-13</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-01-15T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-01-15</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-01-17T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-01-17</con:value></con:property><con:property><con:name>initialId</con:name><con:value>2000</con:value></con:property><con:property><con:name>bDate</con:name><con:value>2004-12-17</con:value></con:property><con:property><con:name>topicDNexternal</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1671546277042</con:value></con:property><con:property><con:name>areaId2</con:name><con:value>17411865268</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>initialId</con:name><con:value>30000010809530</con:value></con:property><con:property><con:name>topicDNexternal</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>topicDNForm30ToDisp</con:name><con:value>DnForm30ToDisp</con:value></con:property><con:property><con:name>bootstrapServer</con:name><con:value>10.2.172.24:9092</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="ee527373-669c-47bb-be56-672db291b77d" name="А_ВА_05 - Удаление задач по аннулированным документам основаниям"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="47d3a8e8-a305-4d30-a714-c0e5fc08c63d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#79399" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Select Last Patient" id="ed50fcfb-a5d9-483b-ad56-9c581e95c446"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select max(id) + 1 from f_patient fp</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="90766369-53e4-490f-af5d-e0a249d7d3d4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>pateintId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Select Last Patient</con:sourceStep><con:sourcePath>//_COLUMN</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Generate data" id="3c8af6b1-bdfb-4fa1-8f06-863c4654bcc7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query> --- создание пациента для задач

INSERT INTO f_patient (id, area_id, changed_date, birth_date, update_birth_date, policy_number, policy_status, policy_update_date) VALUES(${#TestCase#patientId}, 144, '2017-04-04 21:31:53.000', '1982-11-25', '2020-12-10 09:55:05.000', NULL, NULL, NULL);

--- создание тасок
--- проставлено f_task.deleted = true
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(1${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, false, 125694880, 0, 1); 
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(2${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, false, 125694880, 0, 2);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(3${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, false, 125694880, 0, 3);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(4${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, false, 125694880, 0, 4);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(5${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, false, 125694880, 0, 5);
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(6${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, false, 125694880, 0, 6);

--- не проставлено f_task.deleted = true
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(7${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', '2022-07-27 08:18:43.562', NULL, false, 125694880, 0, 1); --- есть дата закрытия
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(8${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, true, 125694880, 0, 1); --- удалена
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(9${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, false, 125694880, 0, 3); --- нет записи в f_document_mkb10
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(10${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', NULL, NULL, false, 125694880, 0, 1); --- связанный документ не аннулирован
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(11${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', '2022-07-27 08:18:43.562', NULL, false, 125694880, 0, 2); --- есть дата закрытия
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(12${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', '2022-07-27 08:18:43.562', NULL, false, 125694880, 0, 3); --- есть дата закрытия
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(13${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', '2022-07-27 08:18:43.562', NULL, false, 125694880, 0, 4); --- есть дата закрытия
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(14${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', '2022-07-27 08:18:43.562', NULL, false, 125694880, 0, 5); --- есть дата закрытия
INSERT INTO f_task (id, patient_id, opened, closed, assignee, deleted, area_type_id, is_checked, type_id) VALUES(15${#TestCase#patientId}, ${#TestCase#patientId}, '2022-07-27 08:18:43.562', '2022-07-27 08:18:43.562', NULL, false, 125694880, 0, 6); --- есть дата закрытия

--- создание связанных данных
INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(1${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1${#TestCase#patientId}1', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(1${#TestCase#patientId}, 128290661, 1, 1${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(2${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1${#TestCase#patientId}2', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(2${#TestCase#patientId}, 128290661, 1, 2${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(3${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1${#TestCase#patientId}3', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(3${#TestCase#patientId}, 128290661, 1, 3${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(4${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1${#TestCase#patientId}4', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(4${#TestCase#patientId}, 128290661, 1, 4${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(5${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1${#TestCase#patientId}5', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(5${#TestCase#patientId}, 128290661, 1, 5${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(6${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1${#TestCase#patientId}6', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(6${#TestCase#patientId}, 128290661, 1, 6${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(7${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1${#TestCase#patientId}7', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) VALUES(7${#TestCase#patientId}, 128290661, 1, 7${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(8${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1${#TestCase#patientId}8', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, false, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) values(8${#TestCase#patientId}, 128290661, 1, 8${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(10${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-104${#TestCase#patientId}', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, false, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) values(10${#TestCase#patientId}, 128290661, 1, 10${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(11${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-106${#TestCase#patientId}', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) values(11${#TestCase#patientId}, 128290661, 1, 11${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(12${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-1054${#TestCase#patientId}', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) values(12${#TestCase#patientId}, 128290661, 1, 12${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(13${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-101${#TestCase#patientId}', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) values(13${#TestCase#patientId}, 128290661, 1, 13${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(14${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-102${#TestCase#patientId}', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) values(14${#TestCase#patientId}, 128290661, 1, 14${#TestCase#patientId});

INSERT INTO f_document (id, uid, patient_id, signed_date, type_id, deprecated, deprecated_date) VALUES(15${#TestCase#patientId}, 'df180a12-cf09-4ab1-a2a5-103${#TestCase#patientId}', ${#TestCase#patientId}, '2021-02-09 08:32:10.748', 4, true, '2021-04-16 20:51:27.541');
INSERT INTO f_document_mkb10 (document_id, mkb10_id, status_id, task_id) values(15${#TestCase#patientId}, 128290661, 1, 15${#TestCase#patientId});</con:query><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep" id="91a096db-846f-4dfc-b334-21829566c7fd"><con:description>Попросить разработчика дернуть алгоритм</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="jdbc" name="Check Data" id="bdd5f18c-1144-4c11-8d46-b7c0be8a0213"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>select * from f_task ft where ft.patient_id = ${#TestCase#patientId}
order by ft.id</con:query><con:assertion type="Simple Contains" id="6c67da63-630c-40b1-abbc-afe5a03843b1" name="Проставлен признак deleted = t"><con:configuration><token><![CDATA[        <Row rowNumber="1">
            <F_TASK.ID>130000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>t</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>1</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="2">
            <F_TASK.ID>230000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>t</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>2</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="3">
            <F_TASK.ID>330000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>t</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>3</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="4">
            <F_TASK.ID>430000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>t</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>4</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="5">
            <F_TASK.ID>530000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>t</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>5</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="6">
            <F_TASK.ID>630000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>t</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>6</F_TASK.TYPE_ID>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c12a4cd4-8c5b-473d-b956-ccd431bb73bc" name="Не проставлен признак deleted"><con:configuration><token><![CDATA[        <Row rowNumber="7">
            <F_TASK.ID>730000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED>2022-07-27 08:18:43.562</F_TASK.CLOSED>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>1</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="8">
            <F_TASK.ID>830000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>t</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>1</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="9">
            <F_TASK.ID>930000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>3</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="10">
            <F_TASK.ID>1030000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED/>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>1</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="11">
            <F_TASK.ID>1130000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED>2022-07-27 08:18:43.562</F_TASK.CLOSED>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>2</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="12">
            <F_TASK.ID>1230000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED>2022-07-27 08:18:43.562</F_TASK.CLOSED>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>3</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="13">
            <F_TASK.ID>1330000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED>2022-07-27 08:18:43.562</F_TASK.CLOSED>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>4</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="14">
            <F_TASK.ID>1430000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED>2022-07-27 08:18:43.562</F_TASK.CLOSED>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>5</F_TASK.TYPE_ID>
        </Row>
        <Row rowNumber="15">
            <F_TASK.ID>1530000000031276001</F_TASK.ID>
            <F_TASK.PATIENT_ID>30000000031276001</F_TASK.PATIENT_ID>
            <F_TASK.OPENED>2022-07-27 08:18:43.562</F_TASK.OPENED>
            <F_TASK.CLOSED>2022-07-27 08:18:43.562</F_TASK.CLOSED>
            <F_TASK.ASSIGNEE/>
            <F_TASK.DELETED>f</F_TASK.DELETED>
            <F_TASK.AREA_TYPE_ID>125694880</F_TASK.AREA_TYPE_ID>
            <F_TASK.IS_CHECKED>0</F_TASK.IS_CHECKED>
            <F_TASK.TYPE_ID>6</F_TASK.TYPE_ID>
        </Row>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>topicName</con:name><con:value>DnIndex</con:value></con:property><con:property><con:name>patientId</con:name><con:value>30000000031276001</con:value></con:property><con:property><con:name>areaId</con:name><con:value>721</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-08-12T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-08-12</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-08-11T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-08-11</con:value></con:property><con:property><con:name>areaIdNew</con:name><con:value>1${#TestCase#areaId}</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-08-13T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-08-13</con:value></con:property><con:property><con:name>dateEvenHigher</con:name><con:value>2022-08-15T00:00:00</con:value></con:property><con:property><con:name>dateEvenHigher2</con:name><con:value>2022-08-15</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="e36687ed-0d4e-41e9-94ca-0436dd999d89" name="А_ЕСУ_11 - Обработка сообщения об изменении данных, связанных с участками (топик AreaInfo)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="abc583fe-8e46-4a87-bf7d-da5c8244ad7e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#210151" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="cb4d9d8f-72ee-413e-a78c-2e04437ca7bc"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="af775aaf-cdb6-4943-a002-32f9f6226f73"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate jobExecutionId" id="65103748-d0aa-4f4d-b0e5-49eca2716b91"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

jobExecutionId=getNonexistendArea()
log.info(jobExecutionId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("jobExecutionId", jobExecutionId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get area" id="e96da9e8-4477-4a23-b613-d04291eb103e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_area_type dat 
WHERE dat.code = 10 
AND dat.use_area_create IS TRUE 
AND dat.archived = FALSE</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="GetJobId" id="87bf0973-ff5b-4414-ada5-59ca56823fd3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:connectionString><con:connectionProperties/><con:query>SELECT MEDICAL_EMPLOYEE_JOB_INFO_ID, me.FIRST_NAME, me.SECOND_NAME, me.LAST_NAME  FROM MEDICAL_EMPLOYEE_JOB_INFO meji 
JOIN MEDICAL_EMPLOYEE me ON meji.MEDICAL_EMPLOYEE_ID  = me.ID
WHERE JOB_END_DATE > CURRENT_DATE  
AND JOB_END_DATE > TIMESTAMP '1000-06-21 23:14:59.999000'
AND JOB_END_DATE > JOB_START_DATE
AND rownum &lt;= 10
AND me.SECOND_NAME IS null
ORDER BY DBMS_RANDOM.value </con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="8ca999a4-09e4-42c5-8d9f-f482a3bc863d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get area</con:sourceStep><con:sourcePath>//D_AREA_TYPE.CODE</con:sourcePath><con:targetType>areaType</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId_SUPP</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//MEDICAL_EMPLOYEE_JOB_INFO_ID</con:sourcePath><con:targetType>jobId_SUPP</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>name</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//FIRST_NAME</con:sourcePath><con:targetType>name</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>surname</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//LAST_NAME</con:sourcePath><con:targetType>surname</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getMeInfoByJobId" id="ab3ec5e7-c622-4b7a-9dec-c5159152f283"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>meiPTBv2</con:interface><con:operation>getMeInfoByJobId</con:operation><con:request name="getMeInfoByJobId" id="d4563777-f426-4014-8fe9-2fa519069282"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
	xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Header>
		<wsse:Security soap:mustUnderstand="true"
			xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
			<wsse:UsernameToken
				xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="UsernameToken-a4fe6e30-00e9-43ec-b350-394cc5f4fd68">
				<wsse:Username>DN/0</wsse:Username>
			</wsse:UsernameToken>
		</wsse:Security>
		<ns4:userContext
			xmlns:ns5="http://emias.mos.ru/system/v1/faults/"
			xmlns:ns4="http://emias.mos.ru/system/v1/userContext/"
			xmlns:ns3="http://emias.mos.ru/suppmeinfo/core/v2/"
			xmlns:ns2="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/">
			<ns4:systemName>DN</ns4:systemName>
			<ns4:userName>0</ns4:userName>
			<ns4:userRoleId>4</ns4:userRoleId>
			<ns4:userRights>
				<ns4:userRightId>333001</ns4:userRightId>
			</ns4:userRights>
			<ns4:jobExecutionId>0</ns4:jobExecutionId>
		</ns4:userContext>
	</soap:Header>
	<soap:Body>
		<ns4:getMeInfoByJobIdRequest
			xmlns:ns2="http://emias.mos.ru/suppmeinfo/core/v2/"
			xmlns:ns3="http://emias.mos.ru/system/v1/userContext/"
			xmlns:ns4="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/"
			xmlns:ns5="http://emias.mos.ru/system/v1/faults/">
			<ns4:jobIds>
				<ns4:jobId>${#TestCase#jobId_SUPP}</ns4:jobId>
			</ns4:jobIds>
			<ns2:pagingOptions pageNumber="0" pageSize="10"/>
		</ns4:getMeInfoByJobIdRequest>
	</soap:Body>
</soap:Envelope>
]]></con:request><con:assertion type="SOAP Response" id="2af52d7d-72e8-4272-a30f-ef9215c89dc6"/><con:assertion type="Simple Contains" id="839b0151-11cc-49b6-bd80-67f4bcaeaf2a" name="Contains"><con:configuration><token>&lt;ns2:jobId>${#TestCase#jobId_SUPP}&lt;/ns2:jobId>
</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="876a4c2b-6bda-450f-9467-3ac841a4385d"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")
def jobId_SUPP=testRunner.testCase.getPropertyValue("jobId_SUPP")

sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-25T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <mainEmployees>
        <idmr>"""+ jobId_SUPP+"""</idmr>
    </mainEmployees>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="173c3428-0181-4a7d-bf46-0588d7fa49cb"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check area" id="46105362-848d-4c30-9a8e-8952145fc22b"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="68b63ca9-1f66-46ed-9e48-b1b690bf87d9" name="Создалась запись в таблице f_area"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check area medical employee" id="8d28cbcf-55ad-4b64-8c10-3a37dedd392e"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area_medical_employee fame 
WHERE fame.area_id = '${#TestCase#uid}';</con:query><con:assertion type="Simple Contains" id="7465d0e8-1a23-44bc-b0ab-002b369fc904" name="Создается запись в таблице f_area_medical_employee"><con:configuration><token>
            &lt;F_AREA_MEDICAL_EMPLOYEE.AREA_ID>${#TestCase#uid}&lt;/F_AREA_MEDICAL_EMPLOYEE.AREA_ID>
            &lt;F_AREA_MEDICAL_EMPLOYEE.JOB_EXECUTION_ID>${#TestCase#jobId_SUPP}&lt;/F_AREA_MEDICAL_EMPLOYEE.JOB_EXECUTION_ID>
</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="7984276a-f2fa-4b29-a40e-04d77c972094" name="ФИО соотвествует МР"><con:configuration><token>&lt;F_AREA_MEDICAL_EMPLOYEE.FIO>${#TestCase#surname} ${#TestCase#name}&lt;/F_AREA_MEDICAL_EMPLOYEE.FIO></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>8161</con:value></con:property><con:property><con:name>uid</con:name><con:value>132730092</con:value></con:property><con:property><con:name>areaType</con:name><con:value>10</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>20300813</con:value></con:property><con:property><con:name>jobId_SUPP</con:name><con:value>16746651959</con:value></con:property><con:property><con:name>name</con:name><con:value>Айсулуу</con:value></con:property><con:property><con:name>surname</con:name><con:value>Таалайбекова</con:value></con:property></con:properties></con:testCase><con:testCase id="c5a4b0fd-431a-43f0-b6d2-a20f24310f9b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#210161" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="e976e7c6-f48b-4d54-9087-8626a7ed0630"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="e8f10c8d-ff1a-4f6a-903e-c4abc12a44bf"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate jobExecutionId" id="0793b621-6298-4c78-97e1-0298e1547e14"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

jobExecutionId=getNonexistendArea()
log.info(jobExecutionId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("jobExecutionId", jobExecutionId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get area" id="c1110171-ced4-4c68-9954-db5b9d5a7de0"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_area_type dat 
WHERE dat.code = 10 
AND dat.use_area_create IS TRUE 
AND dat.archived = FALSE</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="GetJobId" id="517d399e-bc5a-4c61-b190-c421a9844e90"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM MEDICAL_EMPLOYEE_JOB_INFO meji 
WHERE JOB_END_DATE > CURRENT_DATE  
AND JOB_END_DATE > TIMESTAMP '1000-06-21 23:14:59.999000'
AND JOB_END_DATE > JOB_START_DATE
AND rownum &lt;= 10
ORDER BY DBMS_RANDOM.value </con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="e1bbc74e-9692-43b1-83cf-281a34817477"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get area</con:sourceStep><con:sourcePath>//D_AREA_TYPE.CODE</con:sourcePath><con:targetType>areaType</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId_SUPP</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//MEDICAL_EMPLOYEE_JOB_INFO_ID</con:sourcePath><con:targetType>jobId_SUPP</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="6ce506e5-8def-4e5b-ac73-1a6e9077f2b5"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_area (id, area_type_id, update_date, archived) VALUES(${#TestCase#uid}, 125694882, '2019-11-18 14:20:53.000', true)</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="6200fd59-ce20-4596-909e-9a40f18206c7"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")
def jobId_SUPP=testRunner.testCase.getPropertyValue("jobId_SUPP")

sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-25T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <mainEmployees>
        <idmr>"""+ jobId_SUPP+"""</idmr>
    </mainEmployees>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="6cdec680-f0b7-4399-8004-4e09c75b03e9"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check area" id="d8db479d-5d4a-42f1-83d0-50a777aa4572"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="5fc7f152-a83e-4019-b365-422d8c9aab02" name="Запись в таблице обновлена согласно входным параметрам "><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="386f442d-6519-45cd-b2ab-410ac23b21da"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Send Message step 2" id="a7220c68-afca-49fd-8e19-d6b2d3ffa7f2"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-24T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="jdbc" name="Check area step 2" id="2019a0b6-3452-4274-b98d-9e3fb9c5cc62"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="107a212a-5bc6-42c3-a962-0a2eb64369ef" name="Запись в таблице не обновилась "><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>
]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2555</con:value></con:property><con:property><con:name>uid</con:name><con:value>6697796</con:value></con:property><con:property><con:name>areaType</con:name><con:value>10</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>14101688</con:value></con:property><con:property><con:name>jobId_SUPP</con:name><con:value>11475965303</con:value></con:property></con:properties></con:testCase><con:testCase id="28d4b8bb-800e-4088-8c6c-5055f3fd2ea2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#210176" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="aa31c16d-7bc8-424c-afa8-2b3a19e4e1cb"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="7184a9bb-8380-4f13-878f-e67cadc78b81"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate jobExecutionId" id="9455e9b1-d254-40ad-9c20-848f1f4328ab"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

jobExecutionId=getNonexistendArea()
log.info(jobExecutionId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("jobExecutionId", jobExecutionId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get area" id="8187770a-abc2-4b10-9f2c-89c5be33ea3d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_area_type dat 
WHERE dat.code = 10 
AND dat.use_area_create IS TRUE 
AND dat.archived = FALSE</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="GetJobId" id="8a4360c9-739e-4d4f-88d5-94270e64681c"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM MEDICAL_EMPLOYEE_JOB_INFO meji 
WHERE JOB_END_DATE > CURRENT_DATE  
AND JOB_END_DATE > TIMESTAMP '1000-06-21 23:14:59.999000'
AND JOB_END_DATE > JOB_START_DATE
AND rownum &lt;= 10
ORDER BY DBMS_RANDOM.value </con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="e2c587be-2bed-4f6e-b7de-d91d15949f67"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get area</con:sourceStep><con:sourcePath>//D_AREA_TYPE.CODE</con:sourcePath><con:targetType>areaType</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId_SUPP</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//MEDICAL_EMPLOYEE_JOB_INFO_ID</con:sourcePath><con:targetType>jobId_SUPP</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="3ea97ca9-79cb-4402-9287-ad3b44405390"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_area (id, area_type_id, update_date, archived) VALUES(${#TestCase#uid}, 125694882, '2019-11-18 14:20:53.000', true);

INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, 0);

INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2020-06-22 00:00:00.000', ${#TestCase#uid}, 10080178, true);

INSERT INTO f_area_medical_employee
(id, area_id, job_execution_id, start_date, end_date, employee_id, speciality_id, speciality_name, fio, update_date, archived)
VALUES(1${#TestCase#uid}, ${#TestCase#uid}, ${#TestCase#jobId_SUPP}, '2019-08-26 23:59:59.999', '2023-10-02 23:59:59.999', 14504, 1, 'Врач-терапевт', 'Раиса Беда Андреевна', '2022-10-01 11:04:44.043', true);

INSERT INTO f_attachment
(id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date)
VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL, ${#TestCase#jobExecutionId}, NULL, NULL);

INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date)
VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="cf90865b-513b-48d6-b532-9086e49c33f0"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")
def jobId_SUPP=testRunner.testCase.getPropertyValue("jobId_SUPP")

sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-25T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <mainEmployees>
        <idmr>"""+ jobId_SUPP+"""</idmr>
    </mainEmployees>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="4eda390d-8471-4e0d-840a-367d13b1175f"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check area" id="539c3671-6a23-4119-b65b-f773dceb981d"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="5656d83b-73ca-470b-8e42-ded52d0515c3" name="Обновляется информация об участке"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check area medical employee" id="1499068e-c8f6-4fb6-8b0f-726c8eb3cf17"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area_medical_employee fame 
WHERE fame.area_id = '${#TestCase#uid}';</con:query><con:assertion type="Simple Contains" id="40fc7dbc-0735-495e-b288-e1470f83bebc" name="Обновляется информация об основном участковом враче"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA_MEDICAL_EMPLOYEE.ID>1${#TestCase#uid}</F_AREA_MEDICAL_EMPLOYEE.ID>
            <F_AREA_MEDICAL_EMPLOYEE.AREA_ID>${#TestCase#uid}</F_AREA_MEDICAL_EMPLOYEE.AREA_ID>
            <F_AREA_MEDICAL_EMPLOYEE.JOB_EXECUTION_ID>${#TestCase#jobId_SUPP}</F_AREA_MEDICAL_EMPLOYEE.JOB_EXECUTION_ID>
            <F_AREA_MEDICAL_EMPLOYEE.START_DATE>2019-08-26 23:59:59.999</F_AREA_MEDICAL_EMPLOYEE.START_DATE>
            <F_AREA_MEDICAL_EMPLOYEE.END_DATE>2023-10-02 23:59:59.999</F_AREA_MEDICAL_EMPLOYEE.END_DATE>
            <F_AREA_MEDICAL_EMPLOYEE.EMPLOYEE_ID>14504</F_AREA_MEDICAL_EMPLOYEE.EMPLOYEE_ID>
            <F_AREA_MEDICAL_EMPLOYEE.SPECIALITY_ID>1</F_AREA_MEDICAL_EMPLOYEE.SPECIALITY_ID>
            <F_AREA_MEDICAL_EMPLOYEE.SPECIALITY_NAME>Врач-терапевт</F_AREA_MEDICAL_EMPLOYEE.SPECIALITY_NAME>
            <F_AREA_MEDICAL_EMPLOYEE.FIO>Раиса Беда Андреевна</F_AREA_MEDICAL_EMPLOYEE.FIO>
            <F_AREA_MEDICAL_EMPLOYEE.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA_MEDICAL_EMPLOYEE.UPDATE_DATE>
            <F_AREA_MEDICAL_EMPLOYEE.ARCHIVED>f</F_AREA_MEDICAL_EMPLOYEE.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>491</con:value></con:property><con:property><con:name>uid</con:name><con:value>124203751</con:value></con:property><con:property><con:name>areaType</con:name><con:value>10</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>14677482</con:value></con:property><con:property><con:name>jobId_SUPP</con:name><con:value>14147174982</con:value></con:property></con:properties></con:testCase><con:testCase id="efdb02ce-db2b-44e8-b25e-68d57fb51bff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#210179" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="0d7bc074-4822-438c-9030-34fb86f137b2"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="d60bdf91-61c1-4913-bdf9-e1b6ebb61ec4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate jobExecutionId" id="d8c78ad6-96b6-4d29-959f-066affa70299"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

jobExecutionId=getNonexistendArea()
log.info(jobExecutionId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("jobExecutionId", jobExecutionId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get area" id="4eebdb43-3f50-446e-8fa7-362727f8e4b7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_area_type dat 
WHERE dat.code = 10 
AND dat.use_area_create IS TRUE 
AND dat.archived = FALSE</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="GetJobId" id="184ecc8f-03b3-4fdc-a971-ed7a56ae09b9"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM MEDICAL_EMPLOYEE_JOB_INFO meji 
WHERE JOB_END_DATE > CURRENT_DATE  
AND JOB_END_DATE > TIMESTAMP '1000-06-21 23:14:59.999000'
AND JOB_END_DATE > JOB_START_DATE
AND rownum &lt;= 10
ORDER BY DBMS_RANDOM.value </con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="f6560ca4-017a-4a08-8506-9e657298447f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get area</con:sourceStep><con:sourcePath>//D_AREA_TYPE.CODE</con:sourcePath><con:targetType>areaType</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId_SUPP</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//MEDICAL_EMPLOYEE_JOB_INFO_ID</con:sourcePath><con:targetType>jobId_SUPP</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="942c03cc-6fe8-489f-aa05-b07878bda0a7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_area (id, area_type_id, update_date, archived) VALUES(${#TestCase#uid}, 125694882, '2019-11-18 14:20:53.000', true);

INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId},  NULL, NULL, 0);

INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2020-06-22 00:00:00.000', ${#TestCase#uid}, 10080178, true);


INSERT INTO f_attachment
(id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date)
VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL, ${#TestCase#jobExecutionId}, NULL, NULL);

INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date)
VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="a9102600-cc16-494f-bbdd-0212dedfdae2"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")
def jobId_SUPP=testRunner.testCase.getPropertyValue("jobId_SUPP")

sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-25T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <mainEmployees>
        <idmr>"""+ jobId_SUPP+"""</idmr>
    </mainEmployees>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="jdbc" name="Check area" id="0989c3b4-9d90-4e3b-834c-6454d3c70d03"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bafe5f01-618c-4c18-8866-27fe62de2044" name="Обновляется информация об участке"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check area medical employee" id="9ae9b824-4b28-4d8a-9875-3cd7cfe4fa78"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area_medical_employee fame 
WHERE fame.area_id = '${#TestCase#uid}';</con:query><con:assertion type="Simple Contains" id="7462ebb7-6e21-47be-bdc2-76614b1975c7" name="Добавляется информация об основном участковом враче"><con:configuration><token> &lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="672a9aab-819d-4a50-b8df-743e371582c6" name="Not Contains"><con:configuration><token> &lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5139</con:value></con:property><con:property><con:name>uid</con:name><con:value>130941635</con:value></con:property><con:property><con:name>areaType</con:name><con:value>10</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>15707143</con:value></con:property><con:property><con:name>jobId_SUPP</con:name><con:value>12472901239</con:value></con:property></con:properties></con:testCase><con:testCase id="ea30a4cb-fe6a-4965-92fb-7fe27cdbcbcf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#210183" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="c9e1ab79-ce12-469d-99b4-fb851bdd170c"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="a0a5b53a-4ef9-4eab-b8e6-80dc4a401885"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate jobExecutionId" id="e1776c23-2277-4616-8fd1-682dab64abc5"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

jobExecutionId=getNonexistendArea()
log.info(jobExecutionId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("jobExecutionId", jobExecutionId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get area" id="c465ea58-6cb4-4403-b2e2-184b1c9e2edb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_area_type dat 
WHERE dat.code = 10 
AND dat.use_area_create IS TRUE 
AND dat.archived = FALSE</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="GetJobId" id="c722bd1e-a1a4-4edc-8d32-215ded6a7ffa"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM MEDICAL_EMPLOYEE_JOB_INFO meji 
WHERE JOB_END_DATE > CURRENT_DATE  
AND JOB_END_DATE > TIMESTAMP '1000-06-21 23:14:59.999000'
AND JOB_END_DATE > JOB_START_DATE
AND rownum &lt;= 10
ORDER BY DBMS_RANDOM.value </con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="642d4274-19ec-43b2-875b-eb2f2ec0d920"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get area</con:sourceStep><con:sourcePath>//D_AREA_TYPE.CODE</con:sourcePath><con:targetType>areaType</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId_SUPP</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//MEDICAL_EMPLOYEE_JOB_INFO_ID</con:sourcePath><con:targetType>jobId_SUPP</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getMeInfoByJobId" id="ebf40bf6-bbb5-457f-bd4a-fe7a148f63bf"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>meiPTBv2</con:interface><con:operation>getMeInfoByJobId</con:operation><con:request name="getMeInfoByJobId" id="d4563777-f426-4014-8fe9-2fa519069282"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
	xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Header>
		<wsse:Security soap:mustUnderstand="true"
			xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
			<wsse:UsernameToken
				xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="UsernameToken-a4fe6e30-00e9-43ec-b350-394cc5f4fd68">
				<wsse:Username>DN/0</wsse:Username>
			</wsse:UsernameToken>
		</wsse:Security>
		<ns4:userContext
			xmlns:ns5="http://emias.mos.ru/system/v1/faults/"
			xmlns:ns4="http://emias.mos.ru/system/v1/userContext/"
			xmlns:ns3="http://emias.mos.ru/suppmeinfo/core/v2/"
			xmlns:ns2="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/">
			<ns4:systemName>DN</ns4:systemName>
			<ns4:userName>0</ns4:userName>
			<ns4:userRoleId>4</ns4:userRoleId>
			<ns4:userRights>
				<ns4:userRightId>333001</ns4:userRightId>
			</ns4:userRights>
			<ns4:jobExecutionId>0</ns4:jobExecutionId>
		</ns4:userContext>
	</soap:Header>
	<soap:Body>
		<ns4:getMeInfoByJobIdRequest
			xmlns:ns2="http://emias.mos.ru/suppmeinfo/core/v2/"
			xmlns:ns3="http://emias.mos.ru/system/v1/userContext/"
			xmlns:ns4="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/"
			xmlns:ns5="http://emias.mos.ru/system/v1/faults/">
			<ns4:jobIds>
				<ns4:jobId>${#TestCase#jobId_SUPP}</ns4:jobId>
			</ns4:jobIds>
			<ns2:pagingOptions pageNumber="0" pageSize="100"/>
		</ns4:getMeInfoByJobIdRequest>
	</soap:Body>
</soap:Envelope>
]]></con:request><con:assertion type="SOAP Response" id="2af52d7d-72e8-4272-a30f-ef9215c89dc6"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="eeea0fad-832b-4e95-9c39-9c7b51e10adf"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_area (id, area_type_id, update_date, archived) VALUES(${#TestCase#uid}, 125694882, '2019-11-18 14:20:53.000', true);

INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, 0);

INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2020-06-22 00:00:00.000', ${#TestCase#uid}, 10080178, true);

INSERT INTO f_area_medical_employee
(id, area_id, job_execution_id, start_date, end_date, employee_id, speciality_id, speciality_name, fio, update_date, archived)
VALUES(1${#TestCase#uid}, ${#TestCase#uid}, ${#TestCase#jobExecutionId}, '2019-08-26 23:59:59.999', '2023-10-02 23:59:59.999', 14504, 1, 'Врач-терапевт', 'Раиса Беда Андреевна', '2022-10-01 11:04:44.043', false);

INSERT INTO f_attachment
(id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date)
VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL, ${#TestCase#jobExecutionId}, NULL, NULL);

INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date)
VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="87ec153e-101c-4b17-87b4-40087f3dfd81"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")
def jobId_SUPP=testRunner.testCase.getPropertyValue("jobId_SUPP")


sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-25T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <mainEmployees>
        <idmr>"""+ jobId_SUPP+"""</idmr>
    </mainEmployees>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="jdbc" name="Check area" id="4dc31fea-a693-421c-b76b-b778fb151603"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="1907f37c-1f3d-4d39-ae1a-cfe9c12386cf" name="Обновляется информация об участке "><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment" id="d19427dc-06b5-42e9-a6f0-a93fa6949a5f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa 
WHERE fa.patient_id = ${#TestCase#patientId};</con:query><con:assertion type="Simple Contains" id="50f22b57-89a2-4089-8cbd-ac94b45cfb8d" name="Contains"><con:configuration><token>&lt;F_ATTACHMENT.JOB_EXECUTION_ID>${#TestCase#jobId_SUPP}&lt;/F_ATTACHMENT.JOB_EXECUTION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check attachment_event" id="aeb88302-fd93-4537-bd3e-71fca7efd819"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment_event fae 
WHERE fae.attachment_id = '1${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="50f22b57-89a2-4089-8cbd-ac94b45cfb8d" name="Создается запись в таблице f_attachment_event"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check area medical employee" id="fe09def4-d368-410b-9df7-332616f6dc8a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area_medical_employee fame 
WHERE fame.area_id = '${#TestCase#uid}';</con:query><con:assertion type="XPath Match" id="02d04f18-98fd-4630-95d5-96e32ce083cc" name="XPath Match"><con:configuration><path>//F_AREA_MEDICAL_EMPLOYEE.ARCHIVED[1]</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d7f16f3b-332d-4bf7-99da-ccb82c6cc2ab" name="Добавляется информация об основном участковом враче"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="CurrentDate" id="bec1bd64-2951-4895-a467-725a7abfb3ec"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.getCurrentDateTime()</script></con:config></con:testStep><con:testStep type="groovy" name="GetDate" id="dc9c3ac8-392f-40b7-b789-0b13564a7e91"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime();
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )
def currentDate2 = today.getTime();
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date2", currentDate_formatted2 )
def currentTime = today.getTime();
def currentTime_formatted = new java.text.SimpleDateFormat("HH:mm:ss").format(currentTime);
testRunner.testCase.setPropertyValue( "time", currentTime_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="CheckKafka" id="f26316b2-21eb-4bcc-b141-7a84df582327"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def scripts = new ScriptLibrary(context, testRunner, log)

def patientId=testRunner.testCase.getPropertyValue("patientId")
log.info patientId
def date2=testRunner.testCase.getPropertyValue("date2")
log.info date2
def currentDateTime=testRunner.testCase.getPropertyValue("currentDateTime")
log.info currentDateTime

def message=scripts.getKafkaAllMessageJson("topicDNForm30ToDisp","patientId", patientId)



assert message != null

messageJson=new JsonSlurper().parseText(message)
log.info messageJson

assert messageJson.operationType=="change"

//узнать тип значения 
//log.info messageJson.patientId.getClass()

assert messageJson.patientId==patientId

assert messageJson.groupCode=="DNC0410"

assert messageJson.groupName=="Недостаточность витамина D"

assert messageJson.doctorFIO=="Жаркова Ольга Васильевна"

assert messageJson.employeeId==10296688 || messageJson.employeeId==14382// сделать одинаковым

//assert messageJson.noDoctor==true

assert messageJson.specialityCode=="3" || messageJson.specialityCode=="69" //проверить можно ли сделать одинаковым

assert messageJson.specialityName == "Врач-хирург"

assert messageJson.specializationCode=="22"

assert messageJson.specializationName=="Детская эндокринология"

assert messageJson.diagnosisCode=="I60.1" || messageJson.diagnosisCode=="D12.9" //проверить можно ли сделать одинаковым

assert messageJson.diagnosisName=="Субарахноидальное кровоизлияние из средней мозговой артерии" ||  messageJson.diagnosisName=="Доброкачественное новообразование заднего прохода [ануса] и анального канала"//проверить можно ли сделать одинаковым

assert messageJson.repeat=="острое (+), впервые в жизни установленное хроническое (+)"

assert messageJson.startDate=="2022-09-26"
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3721</con:value></con:property><con:property><con:name>uid</con:name><con:value>124837114</con:value></con:property><con:property><con:name>areaType</con:name><con:value>10</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>21409927</con:value></con:property><con:property><con:name>jobId_SUPP</con:name><con:value>7422372894</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>1680091528547</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-29T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2023-03-29</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property></con:properties></con:testCase><con:testCase id="6e3c1258-143b-46ff-bc96-81693191bc06" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#216884" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="fb235d44-e988-4a50-afb8-d707a06568f1"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="84949477-add4-41c2-b2ae-a5796074bcc4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate jobExecutionId" id="0a57297b-cd40-4c79-88aa-23a64bc14531"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

jobExecutionId=getNonexistendArea()
log.info(jobExecutionId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("jobExecutionId", jobExecutionId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get area" id="a6f10664-7b83-46af-996e-bb830a3a7444"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_area_type dat 
WHERE dat.code = 10 
AND dat.use_area_create IS TRUE 
AND dat.archived = FALSE</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="GetJobId" id="fd17a0f7-53f7-4eae-bbab-a5ae49403516"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM MEDICAL_EMPLOYEE_JOB_INFO meji 
WHERE JOB_END_DATE > CURRENT_DATE  
AND JOB_END_DATE > TIMESTAMP '1000-06-21 23:14:59.999000'
AND JOB_END_DATE > JOB_START_DATE
AND rownum &lt;= 10
ORDER BY DBMS_RANDOM.value </con:query><con:properties/></con:config></con:testStep><con:testStep type="request" name="getMeInfoByJobId" id="145903be-a1cd-46b6-9d46-3146fcfb6a2c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>meiPTBv2</con:interface><con:operation>getMeInfoByJobId</con:operation><con:request name="getMeInfoByJobId" id="d4563777-f426-4014-8fe9-2fa519069282"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
	xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Header>
		<wsse:Security soap:mustUnderstand="true"
			xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
			<wsse:UsernameToken
				xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="UsernameToken-a4fe6e30-00e9-43ec-b350-394cc5f4fd68">
				<wsse:Username>DN/0</wsse:Username>
			</wsse:UsernameToken>
		</wsse:Security>
		<ns4:userContext
			xmlns:ns5="http://emias.mos.ru/system/v1/faults/"
			xmlns:ns4="http://emias.mos.ru/system/v1/userContext/"
			xmlns:ns3="http://emias.mos.ru/suppmeinfo/core/v2/"
			xmlns:ns2="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/">
			<ns4:systemName>DN</ns4:systemName>
			<ns4:userName>0</ns4:userName>
			<ns4:userRoleId>4</ns4:userRoleId>
			<ns4:userRights>
				<ns4:userRightId>333001</ns4:userRightId>
			</ns4:userRights>
			<ns4:jobExecutionId>0</ns4:jobExecutionId>
		</ns4:userContext>
	</soap:Header>
	<soap:Body>
		<ns4:getMeInfoByJobIdRequest
			xmlns:ns2="http://emias.mos.ru/suppmeinfo/core/v2/"
			xmlns:ns3="http://emias.mos.ru/system/v1/userContext/"
			xmlns:ns4="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/"
			xmlns:ns5="http://emias.mos.ru/system/v1/faults/">
			<ns4:jobIds>
				<ns4:jobId>${#TestCase#jobId_SUPP}</ns4:jobId>
			</ns4:jobIds>
			<ns2:pagingOptions pageNumber="0" pageSize="100"/>
		</ns4:getMeInfoByJobIdRequest>
	</soap:Body>
</soap:Envelope>
]]></con:request><con:assertion type="SOAP Response" id="2af52d7d-72e8-4272-a30f-ef9215c89dc6"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="300634a8-f93b-4922-bb0b-811abad5d387"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get area</con:sourceStep><con:sourcePath>//D_AREA_TYPE.CODE</con:sourcePath><con:targetType>areaType</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>firstName</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:firstName[1]</con:sourcePath><con:targetType>firstName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>lastName</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:lastName[1]</con:sourcePath><con:targetType>lastName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>secondName</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:secondName[1]</con:sourcePath><con:targetType>secondName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:jobId[1]</con:sourcePath><con:targetType>jobId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>speciality</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:speciality[1]/ns2:id</con:sourcePath><con:targetType>speciality</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>emloyeeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:employeeId[1]</con:sourcePath><con:targetType>emloyeeId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityName</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:speciality[1]/ns2:name</con:sourcePath><con:targetType>specialityName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId_SUPP</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//MEDICAL_EMPLOYEE_JOB_INFO_ID</con:sourcePath><con:targetType>jobId_SUPP</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="a2696e02-8fbb-478a-a210-4103786a89c3"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_area (id, area_type_id, update_date, archived) VALUES(${#TestCase#uid}, 125694882, '2019-11-18 14:20:53.000', true);

INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, 0);

INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2020-06-22 00:00:00.000', ${#TestCase#uid}, 10080178, true);

INSERT INTO f_area_medical_employee
(id, area_id, job_execution_id, start_date, end_date, employee_id, speciality_id, speciality_name, fio, update_date, archived)
VALUES(1${#TestCase#uid}, ${#TestCase#uid},  ${#TestCase#jobExecutionId}, '2019-08-26 23:59:59.999', '2023-10-02 23:59:59.999', 14504, 1, 'Врач-терапевт', 'Раиса Беда Андреевна', '2022-10-01 11:04:44.043', false);

INSERT INTO f_attachment
(id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date)
VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, false, NULL, NULL, 'Ивашкевич Оксана Дмитриевна', NULL, NULL, NULL, NULL, NULL);

INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date)
VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="8fe4cab4-856a-48ea-b804-0fad620953da"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")
def jobId_SUPP=testRunner.testCase.getPropertyValue("jobId_SUPP")


sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-25T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <mainEmployees>
        <idmr>"""+ jobId_SUPP+"""</idmr>
    </mainEmployees>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="jdbc" name="Check area" id="16749f09-633b-4db2-a9d2-2676953d5305"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="1907f37c-1f3d-4d39-ae1a-cfe9c12386cf" name="Обновляется информация об участке "><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check area medical employee" id="ed114d36-7911-434e-8b35-44b8a51b4187"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area_medical_employee fame 
WHERE fame.area_id = '${#TestCase#uid}';</con:query><con:assertion type="XPath Match" id="02d04f18-98fd-4630-95d5-96e32ce083cc" name="XPath Match"><con:configuration><path>//F_AREA_MEDICAL_EMPLOYEE.ARCHIVED[1]</path><content>t</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d7f16f3b-332d-4bf7-99da-ccb82c6cc2ab" name="Добавляется информация об основном участковом враче"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="0e4e7f06-bceb-43b2-95cc-1a825f7e9d55"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_attachment fa
WHERE fa.patient_id = '${#TestCase#patientId}'</con:query><con:assertion type="Simple Contains" id="932fde12-634b-4568-9473-28ca290ac703" name="Contains"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_ATTACHMENT.ID>1${#TestCase#uid}</F_ATTACHMENT.ID>
            <F_ATTACHMENT.PATIENT_ID>${#TestCase#patientId}</F_ATTACHMENT.PATIENT_ID>
            <F_ATTACHMENT.GROUP_ID>58</F_ATTACHMENT.GROUP_ID>
            <F_ATTACHMENT.OPENED>2021-03-09</F_ATTACHMENT.OPENED>
            <F_ATTACHMENT.CLOSED/>
            <F_ATTACHMENT.EMPLOYEE_ID>14484</F_ATTACHMENT.EMPLOYEE_ID>
            <F_ATTACHMENT.MKB10_ID>128286429</F_ATTACHMENT.MKB10_ID>
            <F_ATTACHMENT.SPECIALITY_CODE>602</F_ATTACHMENT.SPECIALITY_CODE>
            <F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>125676819</F_ATTACHMENT.MEDICAL_SPECIALIZATION_ID>
            <F_ATTACHMENT.NO_DOCTOR>f</F_ATTACHMENT.NO_DOCTOR>
            <F_ATTACHMENT.PDO_EMPLOYEE_ID/>
            <F_ATTACHMENT.IS_PDO/>
            <F_ATTACHMENT.DOCTOR_FIO>Ивашкевич Оксана Дмитриевна</F_ATTACHMENT.DOCTOR_FIO>
            <F_ATTACHMENT.REPEAT/>
            <F_ATTACHMENT.SPECIALITY_NAME/>
            <F_ATTACHMENT.JOB_EXECUTION_ID/>
            <F_ATTACHMENT.PROACTIVE_OBSERVATION/>
            <F_ATTACHMENT.DIAGNOSIS_DATE/>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>8254</con:value></con:property><con:property><con:name>uid</con:name><con:value>124015311</con:value></con:property><con:property><con:name>areaType</con:name><con:value>10</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>22200210</con:value></con:property><con:property><con:name>emloyeeId</con:name><con:value>10535670</con:value></con:property><con:property><con:name>secondName</con:name><con:value>Анатольевна</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шлей</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Марина</con:value></con:property><con:property><con:name>jobId</con:name><con:value>9768849977</con:value></con:property><con:property><con:name>speciality</con:name><con:value>9</con:value></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-невролог</con:value></con:property><con:property><con:name>jobId_SUPP</con:name><con:value>12983267741</con:value></con:property></con:properties></con:testCase><con:testCase id="f5b3baf6-b36a-4401-8d89-8ff3c0e020fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#234602" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="74239728-1de7-40a5-aa40-677074482495"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="a61bf507-afa3-430f-9ecb-81686f8ae3b4"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate jobExecutionId" id="5c1064eb-60b7-4d19-bc1b-16c2212c90c3"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

jobExecutionId=getNonexistendArea()
log.info(jobExecutionId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("jobExecutionId", jobExecutionId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get area" id="087856ee-517a-4d33-bc08-c3a4edfccbfb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_area_type dat 
WHERE dat.code = 10 
AND dat.use_area_create IS TRUE 
AND dat.archived = FALSE</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="GetJobId" id="592c043c-0805-4069-9be8-727e4011bd5a"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM MEDICAL_EMPLOYEE_JOB_INFO meji 
WHERE JOB_END_DATE > CURRENT_DATE  
AND JOB_END_DATE > TIMESTAMP '1000-06-21 23:14:59.999000'
AND JOB_END_DATE > JOB_START_DATE
AND rownum &lt;= 10
ORDER BY DBMS_RANDOM.value </con:query><con:properties/></con:config></con:testStep><con:testStep type="request" name="getMeInfoByJobId" id="fd7fbb02-24f9-47a1-bfa2-7433c14f15e8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>meiPTBv2</con:interface><con:operation>getMeInfoByJobId</con:operation><con:request name="getMeInfoByJobId" id="d4563777-f426-4014-8fe9-2fa519069282"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/suppmeinfo/medicalEmployeeInfoService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope
	xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Header>
		<wsse:Security soap:mustUnderstand="true"
			xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
			<wsse:UsernameToken
				xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="UsernameToken-a4fe6e30-00e9-43ec-b350-394cc5f4fd68">
				<wsse:Username>DN/0</wsse:Username>
			</wsse:UsernameToken>
		</wsse:Security>
		<ns4:userContext
			xmlns:ns5="http://emias.mos.ru/system/v1/faults/"
			xmlns:ns4="http://emias.mos.ru/system/v1/userContext/"
			xmlns:ns3="http://emias.mos.ru/suppmeinfo/core/v2/"
			xmlns:ns2="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/">
			<ns4:systemName>DN</ns4:systemName>
			<ns4:userName>0</ns4:userName>
			<ns4:userRoleId>4</ns4:userRoleId>
			<ns4:userRights>
				<ns4:userRightId>333001</ns4:userRightId>
			</ns4:userRights>
			<ns4:jobExecutionId>0</ns4:jobExecutionId>
		</ns4:userContext>
	</soap:Header>
	<soap:Body>
		<ns4:getMeInfoByJobIdRequest
			xmlns:ns2="http://emias.mos.ru/suppmeinfo/core/v2/"
			xmlns:ns3="http://emias.mos.ru/system/v1/userContext/"
			xmlns:ns4="http://emias.mos.ru/suppmeinfo/medicalEmployeeInfo/v2/types/"
			xmlns:ns5="http://emias.mos.ru/system/v1/faults/">
			<ns4:jobIds>
				<ns4:jobId>${#TestCase#jobId_SUPP}</ns4:jobId>
			</ns4:jobIds>
			<ns2:pagingOptions pageNumber="0" pageSize="100"/>
		</ns4:getMeInfoByJobIdRequest>
	</soap:Body>
</soap:Envelope>
]]></con:request><con:assertion type="SOAP Response" id="2af52d7d-72e8-4272-a30f-ef9215c89dc6"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="f052cc1d-58d5-4676-8635-cd20e201edde"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get area</con:sourceStep><con:sourcePath>//D_AREA_TYPE.CODE</con:sourcePath><con:targetType>areaType</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>firstName</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:firstName[1]</con:sourcePath><con:targetType>firstName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>lastName</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:lastName[1]</con:sourcePath><con:targetType>lastName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>secondName</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:secondName[1]</con:sourcePath><con:targetType>secondName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:jobId[1]</con:sourcePath><con:targetType>jobId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>speciality</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:speciality[1]/ns2:id</con:sourcePath><con:targetType>speciality</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>emloyeeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:employeeId[1]</con:sourcePath><con:targetType>emloyeeId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityName</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMeInfoByJobId</con:sourceStep><con:sourcePath>declare namespace ns2='http://emias.mos.ru/suppmeinfo/core/v2/';

//ns2:speciality[1]/ns2:name</con:sourcePath><con:targetType>specialityName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId_SUPP</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//MEDICAL_EMPLOYEE_JOB_INFO_ID</con:sourcePath><con:targetType>jobId_SUPP</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="33e18e90-8d6c-46a2-9e5b-739c45337f5f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_area (id, area_type_id, update_date, archived) VALUES(${#TestCase#uid}, 125694882, '2019-11-18 14:20:53.000', true);

INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId}, NULL, NULL, 0);

INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2020-06-22 00:00:00.000', ${#TestCase#uid}, 10080178, true);

INSERT INTO f_area_medical_employee
(id, area_id, job_execution_id, start_date, end_date, employee_id, speciality_id, speciality_name, fio, update_date, archived)
VALUES(1${#TestCase#uid}, ${#TestCase#uid},  ${#TestCase#jobExecutionId}, '2019-08-26 23:59:59.999', '2023-10-02 23:59:59.999', 14504, 1, 'Врач-терапевт', 'Раиса Беда Андреевна', '2022-10-01 11:04:44.043', false);

INSERT INTO f_attachment
(id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date)
VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, false, NULL, NULL, 'Ивашкевич Оксана Дмитриевна', NULL, NULL, NULL, NULL, NULL);

INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date)
VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="4e307ba9-c133-4bed-be94-fe3201140c05"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")
def jobId_SUPP=testRunner.testCase.getPropertyValue("jobId_SUPP")


sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-25T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="jdbc" name="Check area" id="b6435af1-637d-4c37-8a5a-a6396848f088"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="1907f37c-1f3d-4d39-ae1a-cfe9c12386cf" name="Обновляется информация об участке "><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check area medical employee" id="3e0e7d1c-b2f9-460c-b022-4e64b8f68752"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area_medical_employee fame 
WHERE fame.area_id = '${#TestCase#uid}';</con:query><con:assertion type="XPath Match" id="02d04f18-98fd-4630-95d5-96e32ce083cc" name="XPath Match"><con:configuration><path>//F_AREA_MEDICAL_EMPLOYEE.ARCHIVED[1]</path><content>f</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9f1668d6-106e-4a9f-a66d-ff0ad8276d9f" name="Not Contains"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>7614</con:value></con:property><con:property><con:name>uid</con:name><con:value>131270780</con:value></con:property><con:property><con:name>areaType</con:name><con:value>10</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>16648662</con:value></con:property><con:property><con:name>emloyeeId</con:name><con:value>10073306</con:value></con:property><con:property><con:name>secondName</con:name><con:value>Владимирович</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Пищенков</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Дмитрий</con:value></con:property><con:property><con:name>jobId</con:name><con:value>7722626869</con:value></con:property><con:property><con:name>speciality</con:name><con:value>603</con:value></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-оториноларинголог</con:value></con:property><con:property><con:name>jobId_SUPP</con:name><con:value>9556766518</con:value></con:property></con:properties></con:testCase><con:testCase id="18c6332b-4288-4da3-8f27-d6958ac3efb5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#253220" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getNonexistendPatientId" id="0587b39b-70ab-4638-80e6-16f0fe277eb5"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendPatientId(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	random_id = rnd.nextInt(10000)
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		random_id++
		fact_id = sql.rows("select id from f_patient fp WHERE id = "+random_id+"")
	}
	return random_id
}

patientId=getNonexistendPatientId()
log.info(patientId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("patientId", patientId.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="faf9cb77-04e7-4629-8301-92319139057f"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 123345467
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_patient_area fpa WHERE id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

uid=getNonexistendArea()
log.info(uid)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("uid", uid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Generate jobExecutionId" id="12452662-03cf-4628-ae70-0d4d0db1913d"><con:settings/><con:config><script>import java.time.*
import java.time.format.*;
import java.time.temporal.*;

//  Коннектимся к БД
def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

def getNonexistendArea(){
    // Создаем рандомное число 
	def Random rnd = new Random()
	num_random = rnd.nextInt(10000000)
    random_id = num_random + 12334546
	log.info(random_id)
	// Выполняем поиск по пациенту в БД с полученным рандомным числом 
	def fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
	log.info(fact_id[0])
	//Инкремментим до тех пор пока предыдущий запрос не вернёт null
	while (fact_id[0] != null) {
		num_random = rnd.nextInt(10000000)
        	random_id = num_random + 1233454
		fact_id = sql.rows("SELECT * FROM f_area_medical_employee fame WHERE job_execution_id = "+random_id+"")
		log.info(fact_id)		
	}
	return random_id
}

jobExecutionId=getNonexistendArea()
log.info(jobExecutionId)
//Записываем в переменную soap
testRunner.testCase.setPropertyValue("jobExecutionId", jobExecutionId.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Get area" id="84c13e36-4521-437c-8dac-1553162ead90"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_area_type dat 
WHERE dat.code = 10 
AND dat.use_area_create IS TRUE 
AND dat.archived = FALSE</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="GetJobId" id="76f044a0-29dc-4d57-b825-3568d42e45d2"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM MEDICAL_EMPLOYEE_JOB_INFO meji 
WHERE JOB_END_DATE > CURRENT_DATE  
AND JOB_END_DATE > TIMESTAMP '1000-06-21 23:14:59.999000'
AND JOB_END_DATE > JOB_START_DATE
AND rownum &lt;= 10
ORDER BY DBMS_RANDOM.value </con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="9a8c0324-1e6c-4a28-86e5-4977c01bcabf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>areaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get area</con:sourceStep><con:sourcePath>//D_AREA_TYPE.CODE</con:sourcePath><con:targetType>areaType</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>jobId_SUPP</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetJobId</con:sourceStep><con:sourcePath>//MEDICAL_EMPLOYEE_JOB_INFO_ID</con:sourcePath><con:targetType>jobId_SUPP</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Create Data" id="403ddfac-b7f0-4c42-9862-e6e5a4a23960"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>INSERT INTO f_area (id, area_type_id, update_date, archived) VALUES(${#TestCase#uid}, 125694882, '2019-11-18 14:20:53.000', true);

INSERT INTO f_patient (id, birth_date, update_birth_date, check_area_status) VALUES(${#TestCase#patientId},  NULL, NULL, 0);

INSERT INTO f_patient_area (id, patient_id, changed_date, area_id, mo_id, is_base_attach) VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, '2020-06-22 00:00:00.000', ${#TestCase#uid}, 10080178, true);

INSERT INTO f_area_medical_employee (id, area_id, job_execution_id, start_date, end_date, employee_id, speciality_id, speciality_name, fio, update_date, archived) VALUES(1${#TestCase#uid}, ${#TestCase#uid}, 13053847697, '2020-03-04 00:00:00.000', '2024-10-07 23:59:59.999', 13045749958, 69, 'Врач общей практики (семейный врач)', 'Радевская Ирина Владимировна', '2022-11-21 09:58:09.338', true);

INSERT INTO f_attachment
(id, patient_id, group_id, opened, closed, employee_id, mkb10_id, speciality_code, medical_specialization_id, no_doctor, pdo_employee_id, is_pdo, doctor_fio, repeat, speciality_name, job_execution_id, proactive_observation, diagnosis_date)
VALUES(1${#TestCase#uid}, ${#TestCase#patientId}, 58, '2021-03-09', NULL, 14484, 128286429, '602', 125676819, false, NULL, NULL, NULL, NULL, NULL, 13053847697, NULL, NULL);

INSERT INTO f_attachment_event
(id, attachment_id, event_date, document_uid, employee_id, mkb10_id, speciality_code, medical_specialization_id, reason_id, diagnosis, no_doctor, dn_doctor_job_execution_id, doctor_fio, repeat, speciality_name, diagnosis_date)
VALUES(1${#TestCase#uid}, 1${#TestCase#uid}, '2021-05-15 15:41:27.473', '211', '10503947963', 128289228, '716', 125676809, NULL, 'Не удалено.', false, NULL, NULL, NULL, NULL, NULL);</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="92139429-e090-4113-8017-3dc49fc75290"><con:settings/><con:config><script><![CDATA[import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def areaType=testRunner.testCase.getPropertyValue("areaType")
def uid=testRunner.testCase.getPropertyValue("uid")
def jobId_SUPP=testRunner.testCase.getPropertyValue("jobId_SUPP")

sendMessageToKafka("AreaInfo","""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:areaInfoEvent xmlns:ns2="http://ptnl.moscow/contingent2/event/type/area/">
    <id>5021456546</id>
    <operationDate>2022-10-25T13:09:27.544+03:00</operationDate>
    <operationType>createPrimaryArea</operationType>
    <areaId>"""+uid+"""</areaId>
    <areaType>"""+areaType+"""</areaType>
    <muId>204</muId>
    <number>21</number>
    <name>Новый тестовый участок</name>
    <archive>false</archive>
    <autoAssignForAttachment>true</autoAssignForAttachment>
    <residentsBindRate>2500</residentsBindRate>
    <areaRestriction>
        <minAge>18</minAge>
        <maxAge>150</maxAge>
    </areaRestriction>
    <mainEmployees>
        <idmr>"""+ jobId_SUPP+"""</idmr>
    </mainEmployees>
    <addresses>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>3</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>1</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>7</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>4</house>
        </address>
        <address>
            <aolevel>8</aolevel>
            <omkTeDistrictCode>0700</omkTeDistrictCode>
            <omkTeRegionCode>0711</omkTeRegionCode>
            <omkUmCode>026535</omkUmCode>
            <streetBTI>
                <code>196925</code>
            </streetBTI>
            <house>5</house>
        </address>
    </addresses>
</ns2:areaInfoEvent>""")]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="88768fa3-905d-4dcc-85d4-c1463b408258"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Check area" id="94d891d7-a883-48e8-b55b-408241f1e69f"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area fa 
WHERE fa.id = '${#TestCase#uid}'</con:query><con:assertion type="Simple Contains" id="bafe5f01-618c-4c18-8866-27fe62de2044" name="Обновляется информация об участке"><con:configuration><token><![CDATA[<Results>
    <ResultSet fetchSize="0">
        <Row rowNumber="1">
            <F_AREA.ID>${#TestCase#uid}</F_AREA.ID>
            <F_AREA.AREA_TYPE_ID>125694880</F_AREA.AREA_TYPE_ID>
            <F_AREA.UPDATE_DATE>2022-10-25 13:09:27.544</F_AREA.UPDATE_DATE>
            <F_AREA.ARCHIVED>f</F_AREA.ARCHIVED>
        </Row>
    </ResultSet>
</Results>]]></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check area medical employee" id="e371274d-69d9-41fe-bbf5-222a55d62f22"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>SELECT * FROM f_area_medical_employee fame 
WHERE fame.area_id = '${#TestCase#uid}';</con:query><con:assertion type="Simple Contains" id="7462ebb7-6e21-47be-bdc2-76614b1975c7" name="Добавляется информация об основном участковом враче"><con:configuration><token> &lt;Row rowNumber="1"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment" id="bf5bb34d-facd-40ef-b5d8-ed235e8977f7"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>select * from f_attachment fa where patient_id = ${#TestCase#patientId}</con:query><con:assertion type="Simple Contains" id="7462ebb7-6e21-47be-bdc2-76614b1975c7" name=".JOB_EXECUTION_ID не поменялся"><con:configuration><token>&lt;F_ATTACHMENT.JOB_EXECUTION_ID>13053847697&lt;/F_ATTACHMENT.JOB_EXECUTION_ID></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Check f_attachment_event" id="eadc5e15-f202-4266-9e1a-e1d04f26a6bb"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn </con:connectionString><con:connectionProperties/><con:query>select * from f_attachment_event fae where attachment_id in (select ID from f_attachment fa where patient_id = ${#TestCase#patientId})</con:query><con:assertion type="Simple Contains" id="7462ebb7-6e21-47be-bdc2-76614b1975c7" name=".JOB_EXECUTION_ID не поменялся"><con:configuration><token>&lt;F_ATTACHMENT_EVENT.DN_DOCTOR_JOB_EXECUTION_ID/></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e64f2b90-b71c-421a-ab5d-727950dff621" name="Новое событие не создано"><con:configuration><token>&lt;Row rowNumber="2"></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>5613</con:value></con:property><con:property><con:name>uid</con:name><con:value>132422756</con:value></con:property><con:property><con:name>areaType</con:name><con:value>10</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>14204553</con:value></con:property><con:property><con:name>jobId_SUPP</con:name><con:value>8489701124</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:requirements/><con:properties><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicDNexternal</con:name><con:value>DnExternalRecordToDisp</con:value></con:property><con:property><con:name>topicDNForm30ToDisp</con:name><con:value>DnForm30ToDisp</con:value></con:property><con:property><con:name>patientId</con:name><con:value>9903</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer><con:databaseConnection><con:name>DN</con:name><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://10.2.172.41:5432/dn?user=dn&amp;password=PASS_VALUE</con:connectionString><con:password>dn</con:password><con:connectionProperties/></con:databaseConnection></con:databaseConnectionContainer><con:jmsConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/><con:authRepository/><con:tags/></con:soapui-project>