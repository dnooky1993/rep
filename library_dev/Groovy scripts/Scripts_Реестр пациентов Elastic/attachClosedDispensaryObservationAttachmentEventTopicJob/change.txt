import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"CHANGE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")