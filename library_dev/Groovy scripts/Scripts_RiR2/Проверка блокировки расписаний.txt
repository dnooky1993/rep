import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;
username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def scheduleId= testRunner.testCase.getPropertyValue("scheduleId1")
def resScheduleId= testRunner.testCase.getPropertyValue("sarScheduleId1")

getBlockedSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+scheduleId+" AND ENTITY_TYPE='SCHEDULE'")
blockedschedule= sql.rows(getBlockedSchedule)

if ( sql(getBlockedSchedule)> 0){
		testRunner.fail("Запись в таблице SYSTEM_LOCKS для расписания МУнайдена")
}
else {
	log.info("Запись в таблице SYSTEM_LOCKS для расписания МУ не найдена")
}

getBlockedResourceSchedule = ("SELECT * FROM SYSTEM_LOCKS  WHERE ENTITY_ID="+resScheduleId+" AND ENTITY_TYPE='RESOURCE_SCHEDULE'")
blockedschedule= sql.rows(getBlockedResourceSchedule)
if ( sql(getBlockedResourceSchedule)== 0){
		testRunner.fail("Запись в таблице SYSTEM_LOCKS для расписания ресурса не найдена")
}
else {
	log.info("Запись в таблице SYSTEM_LOCKS для расписания ресурса найдена")
}
