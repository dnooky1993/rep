import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;


username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def sendOperationStatusMessage = testRunner.testCase.testSuite.getPropertyValue("sendOperationStatusMessage").toBoolean()
if (sendOperationStatusMessage == true){
	def operationId= testRunner.testCase.getPropertyValue("applyOperationId")
	log.info ("ID операции: " + operationId)
	def res_scheduleIsId= testRunner.testCase.getPropertyValue("sarScheduleId1")
	log.info ("ID res_scheduleIs: " + res_scheduleIsId)
	
	//Отправка сообщения в топик
	Properties props = new Properties()
	props.put('zk.connect', '10.2.172.24:2181')
	props.put('bootstrap.servers', bootstrapServers)
	props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
	 
	def producer = new KafkaProducer(props)
	
	def messageSender = { String topic, String message ->
	    log.info( "messageSender: "+topic+"; "+message )
	    def key =  UUID.randomUUID().toString()
	    def Date date = new Date(); 
	   def  long  timestamp= date.getTime()
	   def int partition =0
	    String compoundMessage = "$message"
	    producer.send(
	            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
	            { RecordMetadata metadata, Exception e ->
	                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
	            } as Callback
	    )
	}
	   def sL ="""<operationStatusMessage operationId=\""""+operationId+"""\" schemaVersion="1.0"><resourceScheduleStatus resourceScheduleId=\""""+res_scheduleIsId+"""\"><hasSucceeded>true</hasSucceeded></resourceScheduleStatus></operationStatusMessage>"""
	   String messageL =sL.toString()
	  def topicChangeProcessing= testRunner.testCase.testSuite.project.getPropertyValue("topicScheduleChangeProcessingStatus")
	   log.info(topicChangeProcessing)
	  String topicChangeProcessing1= topicChangeProcessing.toString()
	  messageSender(topicChangeProcessing1, messageL)
	
	
	producer.close()
}
else {
	log.info("Отправка сообщения об учпешности операции не требуется, ожидаю сообщения от сервиса Запись.3");
}
