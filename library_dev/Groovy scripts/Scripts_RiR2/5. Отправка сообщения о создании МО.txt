import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")


String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ns2:medicalOrganizationInfoMsg id=\""""+moId+"""\" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns1="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"> <ns2:create type="MEDICAL_ORGANIZATION"><ns1:attributes><ns1:name>Государственное бюджетное учреждение здравоохранения ТЕСТ</ns1:name><ns1:shortName>ГБУЗ ТЕСТ</ns1:shortName><ns1:ogrn>1027739811700</ns1:ogrn><ns1:okopf>75203</ns1:okopf><ns1:inn>7724015205</ns1:inn><ns1:kpp>772401001</ns1:kpp><ns1:regDate>2002-12-18</ns1:regDate><ns1:departmentAffilation ns1:fnsiId="2300229" id="123123123123"><ns1:code>120</ns1:code><ns1:title>Органы исполнительной власти субъектов Российской Федерации, осуществляющие функции в области здравоохранения</ns1:title></ns1:departmentAffilation></ns1:attributes><ns1:medicalOrganizationAttributes><ns1:medicalActivity ns1:fnsiId="106" id="126094986"><ns1:code>106</ns1:code><ns1:title>Лаборатория</ns1:title></ns1:medicalActivity></ns1:medicalOrganizationAttributes></ns2:create></ns2:medicalOrganizationInfoMsg>"""
//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicMOMsg")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}
