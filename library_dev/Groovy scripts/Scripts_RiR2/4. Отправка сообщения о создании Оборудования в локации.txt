import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*
import groovy.xml.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//	sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")

sql = Sql.newInstance("jdbc:oracle:thin:"+username+"/"+password+dbconstring, username, password, "oracle.jdbc.driver.OracleDriver")
//log.info("jdbc:oracle:thin:"+username+"/"+password+dbconstring);

def moId=testRunner.testCase.testSuite.getPropertyValue("moId")
def mfId=testRunner.testCase.testSuite.getPropertyValue("mfId")
def locId=testRunner.testCase.testSuite.getPropertyValue("locId")
def eId=testRunner.testCase.testSuite.getPropertyValue("eId")

String bootstrapServers = testRunner.testCase.testSuite.getPropertyValue("bootstrapServers")
//Отправка сообщения в топик
Properties props = new Properties()
props.put('zk.connect', '10.2.172.24:2181')
props.put('bootstrap.servers', bootstrapServers)
props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
 
def producer = new KafkaProducer(props)

def messageSender = { String topic, String message ->
    log.info( "messageSender: "+topic+"; "+message )
    def key =  UUID.randomUUID().toString()
    def Date date = new Date(); 
   def  long  timestamp= date.getTime()
   def int partition =0
    String compoundMessage = "$message"
    producer.send(
            new ProducerRecord<String, String>(topic, partition, timestamp,  key, compoundMessage),
            { RecordMetadata metadata, Exception e ->
                log.info( "The offset of the record we just sent is: ${metadata.offset()}")
            } as Callback
    )
}
def sL ="""<ns4:locationEquipment archived="false" id=\""""+eId+"""\" xmlns="http://emias.mos.ru/svmr2/systemInformerService/v1" xmlns:ns5="http://emias.mos.ru/skuu/svmr/core/v1/" xmlns:ns2="http://emias.mos.ru/svmr2/producer/v1/types" xmlns:ns4="http://emias.mos.ru/skuu/svmr/systemInformerService/v1/types/" xmlns:ns3="http://emias.mos.ru/svmr2/core/v1/types"><ns4:equipmentId>1924</ns4:equipmentId><ns4:equipmentTypeNsiId>141507819</ns4:equipmentTypeNsiId><ns4:equipmentProfileId>146017641</ns4:equipmentProfileId><ns4:equipmentModel>111</ns4:equipmentModel><ns5:medicalOrganizationId>"""+moId+"""</ns5:medicalOrganizationId><ns5:medicalFacilityId>"""+mfId+"""</ns5:medicalFacilityId><ns4:department id="7126031705"><ns5:title>Отделение неврологии</ns5:title><ns5:nomId>125692874</ns5:nomId></ns4:department><ns4:locationId>"""+locId+"""</ns4:locationId><ns4:personalizedService>false</ns4:personalizedService><ns4:capacityForRoom>1</ns4:capacityForRoom><ns4:treatments><ns4:treatment><ns4:id>1283109373</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment><ns4:treatment><ns4:id>1283109372</ns4:id><ns4:useByDefault>false</ns4:useByDefault></ns4:treatment></ns4:treatments></ns4:locationEquipment>"""

//log.info(sL)
   String messageL =sL.toString()
String topic= testRunner.testCase.testSuite.getPropertyValue("topicEquipment")
   log.info(topic)
  messageSender(topic, messageL)


producer.close()

//} else {
//	log.error("Соединение с бд не установлено!");
//}